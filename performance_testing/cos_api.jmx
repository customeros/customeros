<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="cos_api" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="X-Openline-API-KEY-admin" elementType="Argument">
            <stringProp name="Argument.name">X-Openline-API-KEY-admin</stringProp>
            <stringProp name="Argument.value">${__P(X-Openline-API-KEY-admin,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="X-Openline-API-KEY" elementType="Argument">
            <stringProp name="Argument.name">X-Openline-API-KEY</stringProp>
            <stringProp name="Argument.value">${__P(X-Openline-API-KEY,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BoltURI" elementType="Argument">
            <stringProp name="Argument.name">BoltURI</stringProp>
            <stringProp name="Argument.value">${__P(BoltURI,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Neo4jUser" elementType="Argument">
            <stringProp name="Argument.name">Neo4jUser</stringProp>
            <stringProp name="Argument.value">${__P(Neo4jUser,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Neo4jPassword" elementType="Argument">
            <stringProp name="Argument.name">Neo4jPassword</stringProp>
            <stringProp name="Argument.value">${__P(Neo4jPassword,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">1</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">cos.openline.dev</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="contactEmail" elementType="Argument">
              <stringProp name="Argument.name">contactEmail</stringProp>
              <stringProp name="Argument.value">${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}.${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="contactPhoneNumber" elementType="Argument">
              <stringProp name="Argument.name">contactPhoneNumber</stringProp>
              <stringProp name="Argument.value">+${__RandomString(${__Random(11,11,)},0123456789,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userEmail" elementType="Argument">
              <stringProp name="Argument.name">userEmail</stringProp>
              <stringProp name="Argument.value">${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}.${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="organizationName" elementType="Argument">
              <stringProp name="Argument.name">organizationName</stringProp>
              <stringProp name="Argument.value">${__RandomString(${__Random(8,12,)},abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createTenant" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateTenant {\n  tenant_Merge(\n    tenant: {\n      name:\&quot;performance_test\&quot;\n  \t}\n  ) \n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateTenant&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/admin/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="tenantName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">tenantName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.tenant_Merge</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">tenantName_NOT_CREATED</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="query-able data" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createUser" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateUser {\n  user_Create(\n    input:{\n      firstName: \&quot;userFirstName\&quot;\n      lastName: \&quot;userLastName\&quot;\n      email: {\n        email: \&quot;${userEmail}\&quot;\n        label: MAIN\n        primary: true\n        appSource: \&quot;performance_script\&quot;\n      }\n      player: {\n        identityId: \&quot;identityId\&quot;\n        authId: \&quot;authId\&quot;\n        provider: \&quot;provider\&quot;\n        appSource: \&quot;performance_script\&quot;\n      }\n      appSource: \&quot;performance_script\&quot;\n    }\n  ){\n    id\n    emails{\n      email\n    }\n  }}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateUser&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/admin/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Openline-TENANT</stringProp>
                  <stringProp name="Header.value">${tenantName}</stringProp>
                </elementProp>
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.user_Create.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">user_with_id_NOT_CREATED</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userEmail" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">userEmail</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.user_Create.emails[0].email</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">user_with_email_NOT_CREATED</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user_AddRole" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation user_AddRole{\n  user_AddRole(\n    id: \&quot;${userId}\&quot;,\n  \trole: USER\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;user_AddRole&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/admin/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
                </elementProp>
                <elementProp name="X-Openline-TENANT" elementType="Header">
                  <stringProp name="Header.name">X-Openline-TENANT</stringProp>
                  <stringProp name="Header.value">${tenantName}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createOrganization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateOrganization {\n  organization_Create(\n    input: {\n      name:\&quot;Organization_Name_${organizationName}\&quot;\n      description: \&quot;performance test organization\&quot;\n      domains:     [\&quot;domain_1, domain_2\&quot;]\n      website:     \&quot;https://performance_test_organization.com\&quot;\n      industry:    \&quot;industry\&quot;\n      isPublic:    true\n      customFields: [{\n        name:\&quot;customFields_1\&quot;,\n        datatype: TEXT\n        value: \&quot;customFieldsValue_1\&quot;\n      },\n        {\n        name:\&quot;customFields_2\&quot;,\n        datatype: BOOL\n        value: true\n\t      }\n\t\t\t]\n      fieldSets: [{\n        name: \&quot;fieldSets_1\&quot;\n        customFields: [{\n          name:\&quot;customFields_1\&quot;,\n          datatype: TEXT\n          value: \&quot;customFieldsValue_1\&quot;      \n        },\n          {\n          name:\&quot;customFields_2\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      },\n      {\n        name: \&quot;fieldSets_2\&quot;\n        customFields: [{\n          name:\&quot;customFields_2\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      }]\n      market:      B2B\n      employees:   3\n      appSource: \&quot;performance_script\&quot;\n    }\n  ) {\n    id\n    name\n    __typename\n  }\n}\n&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateOrganization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="organizationId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">organizationId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organization_Create.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">organization_with_id_NOT_CREATED</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_AddRelationship" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_AddRelationship{\n  organization_AddRelationship(\n    organizationId:\&quot;${organizationId}\&quot;\n    relationship: CUSTOMER\n  ) {\n    id\n    relationships\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_AddRelationship&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addLocationToOrganization" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation addLocationToOrganization{\n  organization_AddNewLocation(organizationId: \&quot;${organizationId}\&quot;)\n  {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;addLocationToOrganization&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="locationId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">locationId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organization_AddNewLocation.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">location_with_id_NOT_CREATED</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="location_Update" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation location_Update{\n  location_Update(\n    input: {\n    id: \&quot;${locationId}\&quot;\n    name: \&quot;location_name\&quot;\n    rawAddress: \&quot;location_rawAddress\&quot;\n    country: \&quot;location_country\&quot;\n    region: \&quot;location_region\&quot;\n    district: \&quot;location_district\&quot;\n    locality: \&quot;location_locality\&quot;\n    street: \&quot;location_street\&quot;\n    address: \&quot;location_address\&quot;\n    address2: \&quot;location_address2\&quot;\n    zip: \&quot;location_zip\&quot;\n    addressType: \&quot;location_addressType\&quot;\n    houseNumber: \&quot;location_houseNumber\&quot;\n    postalCode: \&quot;location_postalCode\&quot;\n    plusFour: \&quot;location_plusFour\&quot;\n    commercial: true\n    predirection: \&quot;location_prediction\&quot;\n    latitude: 25.00\n    longitude: 71.00\n    timeZone: \&quot;location_timezone\&quot;\n    utcOffset: 2\n    }\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;location_Update&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_SetOwner" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_SetOwner {\n  organization_SetOwner(organizationId:\&quot;${organizationId}\&quot;, userId: \&quot;${userId}\&quot;){\n    id\n  }}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_SetOwner&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_SetRelationshipStage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_SetRelationshipStage{\n  organization_SetRelationshipStage(\n    organizationId: \&quot;${organizationId}\&quot;\n    relationship: PARTNER\n    stage: \&quot;Live\&quot;\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_SetRelationshipStage&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createContact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateContact {\n  contact_Create(\n    input: {\n      prefix: \&quot;prefix\&quot;\n      firstName: \&quot;firstName1\&quot;\n      lastName: \&quot;lastName2\&quot;\n    \tdescription: \&quot;description\&quot;\n      createdAt: \&quot;2023-07-12T10:30:00Z\&quot;\n      customFields: [{\n        name:\&quot;customFields_3\&quot;,\n        datatype: TEXT\n        value: \&quot;customFieldsValue_3\&quot;\n      },\n        {\n        name:\&quot;customFields_4\&quot;,\n        datatype: BOOL\n        value: true\n\t      }\n\t\t\t]\n      fieldSets: [{\n        name: \&quot;fieldSets_3\&quot;\n        customFields: [{\n          name:\&quot;customFields_3\&quot;,\n          datatype: TEXT\n          value: \&quot;customFieldsValue_3\&quot;\n        },\n          {\n          name:\&quot;customFields_3\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      },\n      {\n        name: \&quot;fieldSets_4\&quot;\n        customFields: [{\n          name:\&quot;customFields_4\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      }]\n      email: {\n        email: \&quot;${contactEmail}\&quot;\n        label: MAIN\n        primary: true\n        appSource: \&quot;performance_script\&quot;\n      }\n      phoneNumber: {\n        phoneNumber: \&quot;${contactPhoneNumber}\&quot;\n        countryCodeA2: \&quot;BE\&quot;\n        label: WORK\n        primary: true\n      }\n      ownerId: \&quot;${userId}\&quot;\n      appSource: \&quot;performance_script\&quot;\n    }) {\n    id\n    emails{\n      rawEmail\n    }\n    phoneNumbers{\n      rawPhoneNumber\n    }\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateContact&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="contactId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">contactId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.contact_Create.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">contact_with_id_NOT_CREATED</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="emailMergeToContact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateEmail {\n  emailMergeToContact(\n    contactId: \&quot;${contactId}\&quot;\n    input: {\n      email: \&quot;${contactEmail}\&quot;\n      label: PERSONAL\n      primary: true\n      appSource: \&quot;performance_script\&quot;\n    }) {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateEmail&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="phoneNumberMergeToContact" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreatePhone {\n  phoneNumberMergeToContact(\n    contactId: \&quot;${contactId}\&quot;\n    input: {\n      phoneNumber: \&quot;${contactPhoneNumber}\&quot;\n      countryCodeA2: \&quot;BE\&quot;\n      label: MOBILE\n      primary: true\n    }) {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreatePhone&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${userEmail}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">${__setProperty(contactEmail,${contactEmail})}
${__setProperty(contactPhoneNumber,${contactPhoneNumber})}
${__setProperty(userEmail,${userEmail})}
${__setProperty(contactId,${contactId})}
${__setProperty(organizationId,${organizationId})}
${__setProperty(tenantName,${tenantName})}
${__setProperty(organizationName,${organizationName})}</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">100</stringProp>
        </LoopController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="volume data" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createUser" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateUser {\n  user_Create(\n    input:{\n      firstName: \&quot;userFirstName\&quot;\n      lastName: \&quot;userLastName\&quot;\n      email: {\n        email: \&quot;${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}.${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}\&quot;\n        label: MAIN\n        primary: true\n        appSource: \&quot;performance_script\&quot;\n      }\n      player: {\n        identityId: \&quot;identityId\&quot;\n        authId: \&quot;authId\&quot;\n        provider: \&quot;provider\&quot;\n        appSource: \&quot;performance_script\&quot;\n      }\n      appSource: \&quot;performance_script\&quot;\n    }\n  ){\n    id\n    emails{\n      email\n    }\n  }}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateUser&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/admin/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Openline-TENANT</stringProp>
                    <stringProp name="Header.value">${tenantName}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userIdVolume" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userIdVolume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.user_Create.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">user_with_id_NOT_CREATED</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userEmailVolume" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userEmailVolume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.user_Create.emails[0].email</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">user_with_email_NOT_CREATED</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user_AddRole" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation user_AddRole{\n  user_AddRole(\n    id: \&quot;${userIdVolume}\&quot;,\n  \trole: USER\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;user_AddRole&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/admin/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-TENANT" elementType="Header">
                    <stringProp name="Header.name">X-Openline-TENANT</stringProp>
                    <stringProp name="Header.value">${tenantName}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createOrganization" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateOrganization {\n  organization_Create(\n    input: {\n      name:\&quot;Organization_Name_${__RandomString(${__Random(8,12,)},abcdefghijklmnopqrstuvwxyz,)}\&quot;\n      description: \&quot;performance test organization\&quot;\n      domains:     [\&quot;domain_1, domain_2\&quot;]\n      website:     \&quot;https://performance_test_organization.com\&quot;\n      industry:    \&quot;industry\&quot;\n      isPublic:    true\n      customFields: [{\n        name:\&quot;customFields_1\&quot;,\n        datatype: TEXT\n        value: \&quot;customFieldsValue_1\&quot;\n      },\n        {\n        name:\&quot;customFields_2\&quot;,\n        datatype: BOOL\n        value: true\n\t      }\n\t\t\t]\n      fieldSets: [{\n        name: \&quot;fieldSets_1\&quot;\n        customFields: [{\n          name:\&quot;customFields_1\&quot;,\n          datatype: TEXT\n          value: \&quot;customFieldsValue_1\&quot;      \n        },\n          {\n          name:\&quot;customFields_2\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      },\n      {\n        name: \&quot;fieldSets_2\&quot;\n        customFields: [{\n          name:\&quot;customFields_2\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      }]\n      market:      B2B\n      employees:   3\n      appSource: \&quot;performance_script\&quot;\n    }\n  ) {\n    id\n    name\n    __typename\n  }\n}\n&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateOrganization&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="organizationIdVolume" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">organizationIdVolume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organization_Create.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">organization_with_id_NOT_CREATED</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_AddRelationship" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_AddRelationship{\n  organization_AddRelationship(\n    organizationId:\&quot;${organizationIdVolume}\&quot;\n    relationship: CUSTOMER\n  ) {\n    id\n    relationships\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_AddRelationship&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmail}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addLocationToOrganization" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation addLocationToOrganization{\n  organization_AddNewLocation(organizationId: \&quot;${organizationIdVolume}\&quot;)\n  {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;addLocationToOrganization&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="locationIdVolume" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">locationIdVolume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organization_AddNewLocation.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">location_with_id_NOT_CREATED</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="location_Update" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation location_Update{\n  location_Update(\n    input: {\n    id: \&quot;${locationIdVolume}\&quot;\n    name: \&quot;location_name\&quot;\n    rawAddress: \&quot;location_rawAddress\&quot;\n    country: \&quot;location_country\&quot;\n    region: \&quot;location_region\&quot;\n    district: \&quot;location_district\&quot;\n    locality: \&quot;location_locality\&quot;\n    street: \&quot;location_street\&quot;\n    address: \&quot;location_address\&quot;\n    address2: \&quot;location_address2\&quot;\n    zip: \&quot;location_zip\&quot;\n    addressType: \&quot;location_addressType\&quot;\n    houseNumber: \&quot;location_houseNumber\&quot;\n    postalCode: \&quot;location_postalCode\&quot;\n    plusFour: \&quot;location_plusFour\&quot;\n    commercial: true\n    predirection: \&quot;location_prediction\&quot;\n    latitude: 25.00\n    longitude: 71.00\n    timeZone: \&quot;location_timezone\&quot;\n    utcOffset: 2\n    }\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;location_Update&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_SetOwner" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_SetOwner {\n  organization_SetOwner(organizationId:\&quot;${organizationIdVolume}\&quot;, userId: \&quot;${userIdVolume}\&quot;){\n    id\n  }}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_SetOwner&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_SetRelationshipStage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_SetRelationshipStage{\n  organization_SetRelationshipStage(\n    organizationId: \&quot;${organizationIdVolume}\&quot;\n    relationship: PARTNER\n    stage: \&quot;Live\&quot;\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_SetRelationshipStage&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createContact" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateContact {\n  contact_Create(\n    input: {\n      prefix: \&quot;prefix\&quot;\n      firstName: \&quot;firstName1\&quot;\n      lastName: \&quot;lastName2\&quot;\n    \tdescription: \&quot;description\&quot;\n      createdAt: \&quot;2023-07-12T10:30:00Z\&quot;\n      customFields: [{\n        name:\&quot;customFields_3\&quot;,\n        datatype: TEXT\n        value: \&quot;customFieldsValue_3\&quot;\n      },\n        {\n        name:\&quot;customFields_4\&quot;,\n        datatype: BOOL\n        value: true\n\t      }\n\t\t\t]\n      fieldSets: [{\n        name: \&quot;fieldSets_3\&quot;\n        customFields: [{\n          name:\&quot;customFields_3\&quot;,\n          datatype: TEXT\n          value: \&quot;customFieldsValue_3\&quot;\n        },\n          {\n          name:\&quot;customFields_3\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      },\n      {\n        name: \&quot;fieldSets_4\&quot;\n        customFields: [{\n          name:\&quot;customFields_4\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      }]\n      email: {\n        email: \&quot;${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}.${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}\&quot;\n        label: MAIN\n        primary: true\n        appSource: \&quot;performance_script\&quot;\n      }\n      phoneNumber: {\n        phoneNumber: \&quot;+${__RandomString(${__Random(11,11,)},0123456789,)}\&quot;\n        countryCodeA2: \&quot;BE\&quot;\n        label: WORK\n        primary: true\n      }\n      ownerId: \&quot;${userIdVolume}\&quot;\n      appSource: \&quot;performance_script\&quot;\n    }) {\n    id\n    emails{\n      rawEmail\n    }\n    phoneNumbers{\n      rawPhoneNumber\n    }\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateContact&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="contactIdVolume" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">contactIdVolume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.contact_Create.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">contact_with_id_NOT_CREATED</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="contactRawEmailVolume" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">contactRawEmailVolume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.contact_Create.emails[0].rawEmail</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">rawEmailVolume_with_id_NOT_CREATED</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="contactRawPhoneNumberVolume" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">contactRawPhoneNumberVolume</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.contact_Create.phoneNumbers[0]rawPhoneNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">rawPhoneNumber_with_id_NOT_CREATED</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="emailMergeToContact" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateEmail {\n  emailMergeToContact(\n    contactId: \&quot;${contactIdVolume}\&quot;\n    input: {\n      email: \&quot;${contactRawEmailVolume}\&quot;\n      label: PERSONAL\n      primary: true\n      appSource: \&quot;performance_script\&quot;\n    }) {\n    id\n    rawEmail\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateEmail&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="phoneNumberMergeToContact" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreatePhone {\n  phoneNumberMergeToContact(\n    contactId: \&quot;${contactIdVolume}\&quot;\n    input: {\n      phoneNumber: \&quot;${contactRawPhoneNumberVolume}\&quot;\n      countryCodeA2: \&quot;BE\&quot;\n      label: MOBILE\n      primary: true\n    }) {\n    id\n    rawPhoneNumber\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreatePhone&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/query</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                    <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="X-Openline-API-KEY" elementType="Header">
                    <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                    <stringProp name="Header.value">${userEmailVolume}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Tests" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">300</stringProp>
        </ConstantTimer>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">cos.openline.dev</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="testContactEmail" elementType="Argument">
              <stringProp name="Argument.name">testContactEmail</stringProp>
              <stringProp name="Argument.value">${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}.${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testContactPhoneNumber" elementType="Argument">
              <stringProp name="Argument.name">testContactPhoneNumber</stringProp>
              <stringProp name="Argument.value">+${__RandomString(${__Random(11,11,)},0123456789,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testUserEmail" elementType="Argument">
              <stringProp name="Argument.name">testUserEmail</stringProp>
              <stringProp name="Argument.value">${__RandomString(${__Random(3,9,)},abcdefghijklmnopqrstuvwxyz,)}@${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}.${__RandomString(${__Random(2,3,)},abcdefghijklmnopqrstuvwxyz,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Organization Page" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="gcli_Search" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;query gcli_Search {\n  gcli_Search(limit: 5, keyword: \&quot;\&quot;){\n    id\n    type\n    display\n    data {\n      key\n      value\n      display\n      __typename\n    }\n    __typename\n}\n}\n&quot;,&quot;operationName&quot;:&quot;gcli_Search&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${__property(userEmail)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="global_Cache" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;query global_Cache {\n  global_Cache{\n    user{\n      id\n      emails{\n        email\n        rawEmail\n        primary\n        __typename\n      }\n      firstName\n      lastName\n      __typename\n    }\n    isOwner\n    gCliCache{\n      id\n      type\n      display\n      data{\n        key\n        value\n        display\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;,&quot;operationName&quot;:&quot;global_Cache&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${__property(userEmail)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="org-dashboardView_Organizations" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;operationName&quot;:&quot;dashboardView_Organizations&quot;,&#xd;
   &quot;variables&quot;:{&#xd;
      &quot;pagination&quot;:{&#xd;
         &quot;page&quot;:1,&#xd;
         &quot;limit&quot;:20&#xd;
      }&#xd;
   },&#xd;
   &quot;query&quot;:&quot;query dashboardView_Organizations($pagination: Pagination!, $where: Filter, $sort: SortBy) {\n  dashboardView_Organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n      subsidiaryOf {\n        organization {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      owner {\n        id\n        firstName\n        lastName\n        __typename\n      }\n      description\n      industry\n      website\n      domains\n      locations {\n        ...LocationBaseDetails\n        rawAddress\n        __typename\n      }\n      healthIndicator {\n        id\n        name\n        order\n        __typename\n      }\n      relationshipStages {\n        relationship\n        stage\n        __typename\n      }\n      lastTouchPointTimelineEventId\n      lastTouchPointAt\n      lastTouchPointTimelineEvent {\n        ... on PageView {\n          id\n          __typename\n        }\n        ... on Issue {\n          id\n          __typename\n        }\n        ... on Note {\n          id\n          createdBy {\n            firstName\n            lastName\n            __typename\n          }\n          __typename\n        }\n        ... on InteractionEvent {\n          id\n          channel\n          eventType\n          sentBy {\n            __typename\n            ... on EmailParticipant {\n              type\n              emailParticipant {\n                id\n                email\n                rawEmail\n                __typename\n              }\n              __typename\n            }\n          }\n          __typename\n        }\n        ... on Analysis {\n          id\n          __typename\n        }\n        ... on Meeting {\n          id\n          name\n          attendedBy {\n            __typename\n          }\n          __typename\n        }\n        ... on Action {\n          id\n          actionType\n          createdAt\n          source\n          createdBy {\n            id\n            firstName\n            lastName\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    totalElements\n    __typename\n  }\n}\n\nfragment LocationBaseDetails on Location {\n  id\n  name\n  country\n  region\n  locality\n  zip\n  street\n  postalCode\n  houseNumber\n  __typename\n}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${__property(userEmail)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getUsers" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;query&quot;:&quot;query getUsers {\n  contacts(pagination: {limit: 100, page: 1}) {\n    content {\n      id\n      firstName\n      lastName\n      __typename\n    }\n    totalElements\n    __typename\n  }\n}&quot;,&quot;operationName&quot;:&quot;getUsers&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${__property(userEmail)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetHealthIndicators" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;operationName&quot;:&quot;GetHealthIndicators&quot;,&#xd;
   &quot;variables&quot;:{&#xd;
      &#xd;
   },&#xd;
   &quot;query&quot;:&quot;query GetHealthIndicators {\n  healthIndicators {\n    id\n    name\n    order\n    __typename\n  }\n}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${__property(userEmail)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Customers Page" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cust-dashboardView_Organizations" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
   &quot;operationName&quot;:&quot;dashboardView_Organizations&quot;,&#xd;
   &quot;variables&quot;:{&#xd;
      &quot;pagination&quot;:{&#xd;
         &quot;page&quot;:1,&#xd;
         &quot;limit&quot;:20&#xd;
      },&#xd;
      &quot;where&quot;:{&#xd;
         &quot;AND&quot;:[&#xd;
            {&#xd;
               &quot;filter&quot;:{&#xd;
                  &quot;property&quot;:&quot;RELATIONSHIP&quot;,&#xd;
                  &quot;operation&quot;:&quot;EQ&quot;,&#xd;
                  &quot;value&quot;:&quot;CUSTOMER&quot;&#xd;
               }&#xd;
            }&#xd;
         ]&#xd;
      }&#xd;
   },&#xd;
   &quot;query&quot;:&quot;query dashboardView_Organizations($pagination: Pagination!, $where: Filter, $sort: SortBy) {\n  dashboardView_Organizations(pagination: $pagination, where: $where, sort: $sort) {\n    content {\n      id\n      name\n      subsidiaryOf {\n        organization {\n          id\n          name\n          __typename\n        }\n        __typename\n      }\n      owner {\n        id\n        firstName\n        lastName\n        __typename\n      }\n      description\n      industry\n      website\n      domains\n      locations {\n        ...LocationBaseDetails\n        rawAddress\n        __typename\n      }\n      healthIndicator {\n        id\n        name\n        order\n        __typename\n      }\n      relationshipStages {\n        relationship\n        stage\n        __typename\n      }\n      lastTouchPointTimelineEventId\n      lastTouchPointAt\n      lastTouchPointTimelineEvent {\n        ... on PageView {\n          id\n          __typename\n        }\n        ... on Issue {\n          id\n          __typename\n        }\n        ... on Note {\n          id\n          createdBy {\n            firstName\n            lastName\n            __typename\n          }\n          __typename\n        }\n        ... on InteractionEvent {\n          id\n          channel\n          eventType\n          sentBy {\n            __typename\n            ... on EmailParticipant {\n              type\n              emailParticipant {\n                id\n                email\n                rawEmail\n                __typename\n              }\n              __typename\n            }\n          }\n          __typename\n        }\n        ... on Analysis {\n          id\n          __typename\n        }\n        ... on Meeting {\n          id\n          name\n          attendedBy {\n            __typename\n          }\n          __typename\n        }\n        ... on Action {\n          id\n          actionType\n          createdAt\n          source\n          createdBy {\n            id\n            firstName\n            lastName\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    totalElements\n    __typename\n  }\n}\n\nfragment LocationBaseDetails on Location {\n  id\n  name\n  country\n  region\n  locality\n  zip\n  street\n  postalCode\n  houseNumber\n  __typename\n}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/query</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Openline-API-KEY" elementType="Header">
                  <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                  <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="X-Openline-USERNAME" elementType="Header">
                  <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                  <stringProp name="Header.value">${__property(userEmail)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getContact" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;query getContact {\n  contact(id:\&quot;${__property(contactId)}\&quot;) {\n    id,\n    firstName,\n    lastName,\n    name,\n    source,\n    jobRoles{\n      jobTitle,\n      primary,\n      id,\n      organization{\n        id,\n        name\n      }\n    },\n    tags{\n      id,\n      name\n    },\n    owner {\n      id,\n      firstName,\n      lastName,\n    },\n    emails{\n      label,\n      id,\n      primary,\n      email,\n      emailValidationDetails {\n        isReachable,\n        isValidSyntax,\n        canConnectSmtp,\n        acceptsMail,\n        hasFullInbox,\n        isCatchAll,\n        isDeliverable,\n        validated,\n        isDisabled\n      }\n    },\n    phoneNumbers{\n      label,\n      id,\n      primary,\n      e164,\n      rawPhoneNumber\n    },\n    jobRoles{\n      jobTitle,\n      primary,\n      id\n    },\n    source,\n    locations{\n      id\n      name\n      country\n      region\n      locality\n      zip\n      street\n      postalCode\n      houseNumber\n      rawAddress\n    }\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;getContact&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${__property(userEmail)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOrganization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;query getOrganization {\n  organization(id:\&quot;${__property(organizationId)}\&quot;) {\n    id,\n    name,\n    description\n    source\n    industry\n    emails{\n      id,\n      primary,\n      email\n    },\n    locations{\n      id,\n      name,\n      country,\n      region,\n      locality,\n      zip,\n      street,\n      postalCode,\n      houseNumber,\n      rawAddress\n    }\n    website,\n    domains,\n    updatedAt,\n    tags{\n      id,\n      name\n    }\n    contacts{\n      content{\n        id,\n        name,\n        firstName,\n        lastName,\n        jobRoles{\n          jobTitle,\n          primary,\n          id\n        },\n        emails{\n          label,\n          id,\n          primary,\n          email,\n          emailValidationDetails {\n            isReachable,\n            isValidSyntax,\n            canConnectSmtp,\n            acceptsMail,\n            hasFullInbox,\n            isCatchAll,\n            isDeliverable,\n            validated,\n            isDisabled\n          }\n        },\n        phoneNumbers{\n          label,\n          id,\n          primary,\n          e164,\n          rawPhoneNumber\n        }\n      }\n    }\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;getOrganization&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${__property(userEmail)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createTenant" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateTenant {\n  tenant_Merge(\n    tenant: {\n      name:\&quot;performance_test\&quot;\n  \t}\n  ) \n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateTenant&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/admin/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="testTenantName" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">testTenantName</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.tenant_Merge</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">tenantName_NOT_CREATED</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Set testTenantName prop" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">${__setProperty(testTenantName,${testTenantName})}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createUser" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateUser {\n  user_Create(\n    input:{\n      firstName: \&quot;userFirstName\&quot;\n      lastName: \&quot;userLastName\&quot;\n      email: {\n        email: \&quot;${testUserEmail}\&quot;\n        label: MAIN\n        primary: true\n        appSource: \&quot;performance_script\&quot;\n      }\n      player: {\n        identityId: \&quot;identityId\&quot;\n        authId: \&quot;authId\&quot;\n        provider: \&quot;provider\&quot;\n        appSource: \&quot;performance_script\&quot;\n      }\n      appSource: \&quot;performance_script\&quot;\n    }\n  ){\n    id\n    emails{\n      email\n    }\n  }}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateUser&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/admin/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="testUserId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">testUserId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.user_Create.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">user_with_id_NOT_CREATED</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="testUserEmail" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">testUserEmail</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.user_Create.emails[0].email</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">user_with_email_NOT_CREATED</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
              </elementProp>
              <elementProp name="X-Openline-TENANT" elementType="Header">
                <stringProp name="Header.name">X-Openline-TENANT</stringProp>
                <stringProp name="Header.value">${testTenantName}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user_AddRole" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation user_AddRole{\n  user_AddRole(\n    id: \&quot;${testUserId}\&quot;,\n  \trole: USER\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;user_AddRole&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/admin/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY-admin}</stringProp>
              </elementProp>
              <elementProp name="X-Openline-TENANT" elementType="Header">
                <stringProp name="Header.name">X-Openline-TENANT</stringProp>
                <stringProp name="Header.value">${testTenantName}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createOrganization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateOrganization {\n  organization_Create(\n    input: {\n      name:\&quot;${__property(organizationName)}\&quot;\n      description: \&quot;performance test organization\&quot;\n      domains:     [\&quot;domain_1, domain_2\&quot;]\n      website:     \&quot;https://performance_test_organization.com\&quot;\n      industry:    \&quot;industry\&quot;\n      isPublic:    true\n      customFields: [{\n        name:\&quot;customFields_1\&quot;,\n        datatype: TEXT\n        value: \&quot;customFieldsValue_1\&quot;\n      },\n        {\n        name:\&quot;customFields_2\&quot;,\n        datatype: BOOL\n        value: true\n\t      }\n\t\t\t]\n      fieldSets: [{\n        name: \&quot;fieldSets_1\&quot;\n        customFields: [{\n          name:\&quot;customFields_1\&quot;,\n          datatype: TEXT\n          value: \&quot;customFieldsValue_1\&quot;      \n        },\n          {\n          name:\&quot;customFields_2\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      },\n      {\n        name: \&quot;fieldSets_2\&quot;\n        customFields: [{\n          name:\&quot;customFields_2\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      }]\n      market:      B2B\n      employees:   3\n      appSource: \&quot;performance_script\&quot;\n    }\n  ) {\n    id\n    name\n    __typename\n  }\n}\n&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateOrganization&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="testOrganizationId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">testOrganizationId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organization_Create.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">contact_with_id_NOT_CREATED</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_AddRelationship" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_AddRelationship{\n  organization_AddRelationship(\n    organizationId:\&quot;${testOrganizationId}\&quot;\n    relationship: CUSTOMER\n  ) {\n    id\n    relationships\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_AddRelationship&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="addLocationToOrganization" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation addLocationToOrganization{\n  organization_AddNewLocation(organizationId: \&quot;${testOrganizationId}\&quot;)\n  {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;addLocationToOrganization&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="testLocationId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">testLocationId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organization_AddNewLocation.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">testLocationId_with_id_NOT_CREATED</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="location_Update" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation location_Update{\n  location_Update(\n    input: {\n    id: \&quot;${testLocationId}\&quot;\n    name: \&quot;location_name\&quot;\n    rawAddress: \&quot;location_rawAddress\&quot;\n    country: \&quot;location_country\&quot;\n    region: \&quot;location_region\&quot;\n    district: \&quot;location_district\&quot;\n    locality: \&quot;location_locality\&quot;\n    street: \&quot;location_street\&quot;\n    address: \&quot;location_address\&quot;\n    address2: \&quot;location_address2\&quot;\n    zip: \&quot;location_zip\&quot;\n    addressType: \&quot;location_addressType\&quot;\n    houseNumber: \&quot;location_houseNumber\&quot;\n    postalCode: \&quot;location_postalCode\&quot;\n    plusFour: \&quot;location_plusFour\&quot;\n    commercial: true\n    predirection: \&quot;location_prediction\&quot;\n    latitude: 25.00\n    longitude: 71.00\n    timeZone: \&quot;location_timezone\&quot;\n    utcOffset: 2\n    }\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;location_Update&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_SetOwner" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_SetOwner {\n  organization_SetOwner(organizationId:\&quot;${testOrganizationId}\&quot;, userId: \&quot;${testUserId}\&quot;){\n    id\n  }}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_SetOwner&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="organization_SetRelationshipStage" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation organization_SetRelationshipStage{\n  organization_SetRelationshipStage(\n    organizationId: \&quot;${testOrganizationId}\&quot;\n    relationship: PARTNER\n    stage: \&quot;Live\&quot;\n  ){\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;organization_SetRelationshipStage&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createContact" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateContact {\n  contact_Create(\n    input: {\n      prefix: \&quot;prefix\&quot;\n      firstName: \&quot;firstName1\&quot;\n      lastName: \&quot;lastName2\&quot;\n    \tdescription: \&quot;description\&quot;\n      createdAt: \&quot;2023-07-12T10:30:00Z\&quot;\n      customFields: [{\n        name:\&quot;customFields_3\&quot;,\n        datatype: TEXT\n        value: \&quot;customFieldsValue_3\&quot;\n      },\n        {\n        name:\&quot;customFields_4\&quot;,\n        datatype: BOOL\n        value: true\n\t      }\n\t\t\t]\n      fieldSets: [{\n        name: \&quot;fieldSets_3\&quot;\n        customFields: [{\n          name:\&quot;customFields_3\&quot;,\n          datatype: TEXT\n          value: \&quot;customFieldsValue_3\&quot;\n        },\n          {\n          name:\&quot;customFields_3\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      },\n      {\n        name: \&quot;fieldSets_4\&quot;\n        customFields: [{\n          name:\&quot;customFields_4\&quot;,\n          datatype: BOOL\n          value: true\n          }\n        ]\n      }]\n      email: {\n        email: \&quot;${testContactEmail}\&quot;\n        label: MAIN\n        primary: true\n        appSource: \&quot;performance_script\&quot;\n      }\n      phoneNumber: {\n        phoneNumber: \&quot;${testContactPhoneNumber}\&quot;\n        countryCodeA2: \&quot;BE\&quot;\n        label: WORK\n        primary: true\n      }\n      ownerId: \&quot;${testUserId}\&quot;\n      appSource: \&quot;performance_script\&quot;\n    }) {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateContact&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="testContactId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">testContactId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.contact_Create.id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">contact_with_id_NOT_CREATED</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="emailMergeToContact" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreateEmail {\n  emailMergeToContact(\n    contactId: \&quot;${testContactId}\&quot;\n    input: {\n      email: \&quot;${testContactEmail}\&quot;\n      label: PERSONAL\n      primary: true\n      appSource: \&quot;performance_script\&quot;\n    }) {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreateEmail&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="phoneNumberMergeToContact" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;query&quot;:&quot;mutation CreatePhone {\n  phoneNumberMergeToContact(\n    contactId: \&quot;${testContactId}\&quot;\n    input: {\n      phoneNumber: \&quot;${testContactPhoneNumber}\&quot;\n      countryCodeA2: \&quot;BE\&quot;\n      label: MOBILE\n      primary: true\n    }) {\n    id\n  }\n}&quot;,&#xd;
   &quot;operationName&quot;:&quot;CreatePhone&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="X-Openline-API-KEY" elementType="Header">
                <stringProp name="Header.name">X-Openline-API-KEY</stringProp>
                <stringProp name="Header.value">${X-Openline-API-KEY}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="X-Openline-USERNAME" elementType="Header">
                <stringProp name="Header.name">X-Openline-USERNAME</stringProp>
                <stringProp name="Header.value">${testUserEmail}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">test_results.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <BoltConnectionElement guiclass="TestBeanGUI" testclass="BoltConnectionElement" testname="Bolt Connection Configuration" enabled="false">
          <stringProp name="boltUri">bolt://qwasd</stringProp>
          <intProp name="maxConnectionPoolSize">100</intProp>
          <stringProp name="password">pass</stringProp>
          <stringProp name="username">user</stringProp>
        </BoltConnectionElement>
        <hashTree/>
        <BoltConnectionElement guiclass="TestBeanGUI" testclass="BoltConnectionElement" testname="Bolt Connection Configuration" enabled="false">
          <stringProp name="boltUri">${BoltURI}</stringProp>
          <intProp name="maxConnectionPoolSize">100</intProp>
          <stringProp name="password">${Neo4jPassword}</stringProp>
          <stringProp name="username">${Neo4jUser}</stringProp>
        </BoltConnectionElement>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Remove setUp tenant children" enabled="false">
          <stringProp name="accessMode">WRITE</stringProp>
          <stringProp name="cypher">MATCH (n)
WHERE ANY(label IN labels(n) WHERE label ENDS WITH &quot;${__property(tenantName)}&quot;)
DETACH DELETE n;</stringProp>
          <stringProp name="params"></stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Remove test tenant children" enabled="false">
          <stringProp name="accessMode">WRITE</stringProp>
          <stringProp name="cypher">MATCH (n)
WHERE ANY(label IN labels(n) WHERE label ENDS WITH &quot;${__property(testTenantName)}&quot;)
DETACH DELETE n;</stringProp>
          <stringProp name="params"></stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Remove setUp tenant" enabled="false">
          <stringProp name="accessMode">WRITE</stringProp>
          <stringProp name="cypher">MATCH (t:Tenant {name:&quot;${__property(tenantName)}&quot;}) DELETE t;</stringProp>
          <stringProp name="params"></stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
        <BoltSampler guiclass="TestBeanGUI" testclass="BoltSampler" testname="Remove test tenant" enabled="false">
          <stringProp name="accessMode">WRITE</stringProp>
          <stringProp name="cypher">MATCH (t:Tenant {name:&quot;${__property(testTenantName)}&quot;}) DELETE t;</stringProp>
          <stringProp name="params"></stringProp>
          <boolProp name="recordQueryResults">false</boolProp>
          <intProp name="txTimeout">60</intProp>
        </BoltSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
