name: JMeter Pipeline

on:
  push:
    branches:
      - 2613-response-times-comparator
  pull_request:
    branches:
      - 2613-response-times-comparator
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'CustomerOs version'
        required: true
        options:
          - 35
          - 36

jobs:
  jmeter-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Run COS api performance testing suite
        run: |
          if ! command -v jmeter >/dev/null; then
            wget -q https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.tgz
            tar -xf apache-jmeter-5.6.tgz
            export PATH=$PATH:$PWD/apache-jmeter-5.6/bin
          fi
          
          # Run JMeter script and generate JTL file
          ls -l performance_testing/cos_api.jmx
          jmeter -n -t performance_testing/cos_api.jmx -Jsummariser.out=false -JX-Openline-API-KEY=${{ secrets.DEV_CUSTOMER_OS_ADMIN_API_KEY }} -l test_results.jtl

      - name: Check average response time
        run: |
          if [[ ! -f average_response_times.csv ]]; then
            echo "version" > average_response_times.csv
          fi
          
          if [[ ! $(head -n 1 average_response_times.csv) =~ ^version.* ]]; then
            awk -i inplace 'NR==1{print "version"}1' average_response_times.csv
          fi
          
          # Extract average response time for each testname from JTL file
          awk -F',' 'NR>1 {sum[$3]+=$2; count[$3]++} END {for (request in sum) print request "," sum[request]/count[request]}' test_results.jtl > response_times.csv
          responseTimeThreshold=500
          echo "responseTimeThreshold=$responseTimeThreshold" >> $GITHUB_ENV

          while IFS=',' read -r request averageResponseTime; do
            if [[ ! $(head -n 1 average_response_times.csv) =~ ^$request.* ]]; then
              awk -i inplace 'NR==1{print "$request"}1' average_response_times.csv
            fi
            echo "Average response time for $request is ($averageResponseTime ms)"
            echo "v.35.0.1,$request,$averageResponseTime" >> average_response_times.csv
            if [[ $(bc <<< "$averageResponseTime > $responseTimeThreshold") -eq 1 ]]; then
              echo "threshold_exceeded=true" >> $GITHUB_OUTPUT
            fi
          done < response_times.csv
        id: check_response_time

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: average_response_times
          path: average_response_times.csv

      - name: Testsuite failure
        if: steps.check_response_time.outputs.threshold_exceeded == 'true'
        run: |
          echo "Average Response Time Threshold Exceeded"
          echo "The following requests exceeded the expected threshold:"
          while IFS=',' read -r request averageResponseTime; do
            if [[ $(bc <<< "$averageResponseTime > $responseTimeThreshold") -eq 1 ]]; then
              echo "- $request: $averageResponseTime ms"
            fi
          done < response_times.csv
          echo "::error::Average Response Time Threshold Exceeded"
          exit 1
