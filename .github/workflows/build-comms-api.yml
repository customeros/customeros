name: comms-api

on:
  push:
    branches: [ "otter" ]
    paths:
      - packages/server/customer-os-common-module/**
      - packages/server/customer-os-common-auth/**
      - packages/server/comms-api/**
      - packages/server/customer-os-api/graph/schemas/**
      - .github/workflows/build-comms-api.yml
  pull_request:
    paths:
      - packages/server/customer-os-common-module/**
      - packages/server/customer-os-common-auth/**
      - packages/server/comms-api/**
      - packages/server/customer-os-api/graph/schemas/**
      - .github/workflows/build-comms-api.yml
  release:
    types: [created, edited]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/comms-api

permissions:
  contents: read
  pull-requests: read
  packages: write

defaults:
  run:
    working-directory: ./packages/server/comms-api

jobs:
  test:
    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: stable

      - name: Build
        working-directory: ./packages/server/comms-api
        run: make all

      - name: Test
        working-directory: ./packages/server/comms-api
        run: |
              go install gotest.tools/gotestsum@latest
              gotestsum --junitfile unit-tests.xml -- -coverprofile=cover.out ./...
      - name: Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure()    # run this step even if previous step failed
        with:
          report_paths: packages/server/comms-api/unit-tests.xml    # Path to test results
          include_passed: true
          annotate_only: true
          detailed_summary: true

      - name: Compute Code Coverage
        working-directory: ./packages/server/comms-api
        run: | 
             echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
             echo "|Filename|Function|Coverage|" >> $GITHUB_STEP_SUMMARY
             echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
             go tool cover -func=cover.out |sed -r  's/[[:space:]]+/|/g'|sed -r 's/$/|/g'|sed -r 's/^/|/g' >> $GITHUB_STEP_SUMMARY

  build-publish:
    needs:
      - test

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare sources for docker build
        run: |
          mkdir tmp-sources
          mkdir tmp-sources/customer-os-common-module
          mkdir tmp-sources/customer-os-common-auth
          mkdir tmp-sources/comms-api
          
          rsync -av --progress --exclude="tmp-sources" * tmp-sources/comms-api
          cp .env tmp-sources/comms-api/.env
          cp -r ../customer-os-common-module/* tmp-sources/customer-os-common-module
          cp -r ../customer-os-common-auth/* tmp-sources/customer-os-common-auth
          
          cp Dockerfile tmp-sources/Dockerfile

      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOSITORY_READ_WRITE_USERNAME }}
          password: ${{ secrets.REPOSITORY_READ_WRITE_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./packages/server/
          file: ./packages/server/comms-api/Dockerfile
          push: ${{ github.ref_name == 'otter' || github.event_name == 'release' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
