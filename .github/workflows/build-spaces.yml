name: spaces

on:
  push:
    branches: ["otter", "silviu/cos-624-enable-fe-tests"]
    paths:
      - "packages/apps/spaces/**"
      - ".github/workflows/build-spaces.yml"
  pull_request:
    paths:
      - "packages/apps/spaces/**"
      - ".github/workflows/build-spaces.yml"
  release:
    types: [created, edited]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1

      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      - run: npm install -g yarn

      - name: Deploy test Environment
        run: |
          curl http://openline.sh/install.sh | sh
          openline dev start
#      - name: Deploy test Environment
#        run: |
#          curl http://openline.sh/install.sh | sh
#          openline dev start
#          echo "[INFO] Checking Openline CLI services..."
#          openline dev ping || { echo 'Openline CLI services check failed' ; exit 1; }
#          echo "[INFO] Checking PODs..."
#          kubectl -n openline get pods || { echo 'PODs check failed' ; exit 1; }
#          echo "[INFO] wait for 3 seconds to make sure all services are up and running..."
#          sleep 3

      - name: Test GraphQL contracts
        run: |
          cd packages/apps/spaces
          yarn install --frozen-lockfile
          yarn test:graphql
        env:
          CUSTOMER_OS_API_PATH: http://127.0.0.1:10000
          CUSTOMER_OS_API_KEY: ${{ secrets.CLI_CUSTOMER_OS_API_KEY }}

      - name: Cleanup test environment
        if: ${{ always() }}
        run: openline dev remove

      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOSITORY_READ_WRITE_USERNAME }}
          password: ${{ secrets.REPOSITORY_READ_WRITE_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: packages/apps/spaces/
          push: ${{ github.ref_name == 'otter' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ENV=cluster
