name: spaces

on:
  push:
    branches: [ "otter", "4059-enable-fe-tests" ]
    paths:
      - 'packages/apps/spaces/**'
      - '.github/workflows/build-spaces.yml'
  pull_request:
    paths:
      - 'packages/apps/spaces/**'
      - '.github/workflows/build-spaces.yml'
  release:
    types: [ created, edited ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21.1

      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - run: npm install -g yarn

      - name: Deploy test Environment
        run: |
          df -h
          curl http://openline.sh/install.sh | sh
          echo "[INFO] Starting Openline CLI..."
          openline dev start test-env
          echo "[INFO] Checking Openline CLI services..."
          openline dev ping
          echo "[INFO] Checking PODs..."
          kubectl -n openline get pods

      - name: Run tests
        run: |
          cd packages/apps/spaces
          yarn add -D jest --silent
          yarn test

      - name: Compute test coverage
        id: compute_code_coverage
        run: |
          df -h
          git clone https://github.com/openline-ai/openline-test-harness.git
          cd openline-test-harness/spaces-coverage
          go mod tidy
          go build
          ./spaces-coverage
          COVERAGE=$(cat coverage.txt)
          echo "::set-output name=coverage::$COVERAGE"

      - name: Test Cleanup
        run: |
          df -h
          docker ps -a
          kubectl -n openline get pods
          openline dev remove
          df -h
          kubectl -n openline get pods

      - name: Send Output to Slack
        run: |
          computed_coverage=${{ steps.compute_code_coverage.outputs.coverage }}
          warning_threshold=80.0
          critical_threshold=50.0
          echo "Spaces Test Coverage: $coverage%"
          if (( $(echo "$computed_coverage > $warning_threshold" | bc -l) )); then
            curl -X POST -H 'Content-type: application/json' --data '{
              "text": "${{ github.workflow }} coverage ${{ steps.compute_code_coverage.outputs.computed_coverage }}: ${{ steps.compute_code_coverage.outputs.coverage }}% "
            }' ${{ secrets.TEST_COVERAGE_SLACK_WEBHOOK_URL }}
          elif (( $(echo "$computed_coverage < $warning_threshold && $computed_coverage > $critical_threshold" | bc -l) )); then
            curl -X POST -H 'Content-type: application/json' --data '{
              "text": ":warning: ${{ github.workflow }} coverage is lower than the warning threshold of 80%: ${{ steps.compute_code_coverage.outputs.coverage }}% "
            }' ${{ secrets.TEST_COVERAGE_SLACK_WEBHOOK_URL }}
          elif (( $(echo "$computed_coverage < $critical_threshold" | bc -l) )); then
            curl -X POST -H 'Content-type: application/json' --data '{
              "text": ":no_entry: ${{ github.workflow }} coverage is lower than the critical threshold of 50%: ${{ steps.compute_code_coverage.outputs.coverage }}% "
            }' ${{ secrets.TEST_COVERAGE_SLACK_WEBHOOK_URL }}
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOSITORY_READ_WRITE_USERNAME }}
          password: ${{ secrets.REPOSITORY_READ_WRITE_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Push Docker image
        uses: docker/build-push-action@v5.0.0
        with:
          context: packages/apps/spaces/
          push: ${{ github.ref_name == 'otter' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ENV=cluster

