{
  "groups": [
    {
      "name": "Invoice",
      "queries": [
        {
          "name": "Invoice lines without invoice or service line item",
          "query": "MATCH (n:InvoiceLine) WHERE NOT (n)<-[:HAS_INVOICE_LINE]-(:Invoice) OR NOT (n)-[:INVOICED]->(:ServiceLineItem) RETURN count(n)",
          "description": "Invoice line should be linked to an invoice and a service line item."
        },
        {
          "name": "Invoice lines with missing properties",
          "query": "MATCH (n:InvoiceLine) WHERE (n.billedType IS NULL OR n.billedType = \"\" OR n.amount IS NULL OR n.totalAmount IS NULL) RETURN count(n) as cnt",
          "description": "Invoice line should have a billedType, amount and totalAmount."
        },
        {
          "name": "Invoice nodes wrong labels",
          "query": "MATCH (t:Tenant)<-[:INVOICE_BELONGS_TO_TENANT]-(n:Invoice) WHERE size(labels(n)) <> 2 OR NOT 'Invoice_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Invoice line nodes wrong labels",
          "query": "MATCH (t:Tenant)<-[:INVOICE_BELONGS_TO_TENANT]-(:Invoice)-[:HAS_SERVICE]->(n:InvoiceLine) WHERE size(labels(n)) <> 2 OR NOT 'InvoiceLine_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Duplicated scheduled invoices",
          "query": "MATCH (i:Invoice)--(c:Contract) WHERE i.dryRun = true and i.preview = true WITH c.id as cid, i.periodStartDate as ipsd, count(i) as countInvoices WHERE countInvoices > 1 RETURN count(cid) AS cnt",
          "description": "Check duplicated scheduled (dry run and preview = true) invoices for same contract and period start date"
        },
        {
          "name": "Invoice without contract",
          "query": "MATCH (n:Invoice) WHERE NOT (n)<-[:HAS_INVOICE]-(:Contract|DeletedContract) RETURN count(n) as cnt"
        },
        {
          "name": "Invoice with missing properties",
          "query": "MATCH (i:Invoice) WHERE i.dryRun IS NULL OR i.periodEndDate IS NULL OR i.periodStartDate IS NULL OR i.currency IS NULL OR i.currency = '' OR i.issuedDate IS NULL OR i.dueDate IS NULL OR i.preview IS NULL OR i.status IS NULL RETURN count(i)"
        },
        {
          "name": "Invoice stuck in initialized status",
          "query": "MATCH (i:Invoice) WHERE i.dryRun = false AND i.status = 'INITIALIZED' AND i.createdAt < datetime() - duration({minutes: 5}) RETURN count(i)"
        },
        {
          "name": "Overdue invoices in due status",
          "query": "MATCH (i:Invoice) WHERE i.dryRun = false AND i.status = 'DUE' AND date(i.dueDate) < date(datetime() - duration({days:1})) RETURN count(i)"
        },
        {
          "name": "Overdue invoices without overdue timeline event",
          "query": "MATCH (i:Invoice {status:'OVERDUE'}) WHERE date(i.createdAt) > date('2024-05-01') AND NOT (i)<-[:ACTION_ON]-(:Action {type:'INVOICE_OVERDUE'}) AND i.updatedAt > datetime()-duration({days:7}) RETURN count(i)"
        },
        {
          "name": "Contract next invoice date before invoice period end date",
          "query": "MATCH (c:Contract)-[:HAS_INVOICE]->(i:Invoice) WHERE i.dryRun = false AND date(coalesce(c.nextInvoiceDate, c.invoicingStartDate, datetime())) <= date(i.periodEndDate) RETURN count(i)"
        },
        {
          "name": "Invoice finalized webhook not sent",
          "query": "MATCH (i:Invoice {dryRun:false}) WHERE date(i.createdAt) > date('2024-06-02') AND NOT i.status IN ['INITIALIZED','EMPTY'] and i.techInvoiceFinalizedWebhookProcessedAt IS NULL return count(i)"
        },
        {
          "name": "Invoice finalized event not sent",
          "query": "MATCH (i:Invoice {dryRun:false}) WHERE date(i.createdAt) > date('2024-06-02') AND NOT i.status IN ['INITIALIZED','EMPTY'] AND i.updatedAt < datetime() - duration({minutes:10}) AND i.techInvoiceFinalizedSentAt IS NULL return count(i)"
        }
      ]
    },
    {
      "name": "Contract",
      "queries": [
        {
          "name": "Contract nodes with wrong labels",
          "query": "MATCH (t:Tenant)<-[:CONTRACT_BELONGS_TO_TENANT]-(n:Contract) WHERE size(labels(n)) <> 2 OR NOT 'Contract_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Contracts without organization",
          "query": "MATCH (c:Contract) WHERE NOT (c)<-[:HAS_CONTRACT]-(:Organization) return count(c)"
        },
        {
          "name": "Multiple organizations share same contract",
          "query": "MATCH (org:Organization)-[:HAS_CONTRACT]->(c:Contract) with c, count(org) as size_orgs where size_orgs > 1 return count(c)"
        },
        {
          "name": "Contracts with wrong end status",
          "query": "MATCH (c:Contract)--(:Organization {hide:false}) WHERE ((c.status <> 'ENDED' OR c.status IS NULL) AND date(c.endedAt) < date()) OR (c.status = 'ENDED' AND (c.endedAt IS NULL OR date(c.endedAt) > date()))  RETURN count(c)"
        },
        {
          "name": "Contracts with wrong draft status",
          "query": "MATCH (c:Contract) WHERE (c.status ='DRAFT' AND c.approved = true) OR (c.status <> 'DRAFT' AND c.approve = false) RETURN count(c)"
        },
        {
          "name": "contracts_with_wrong_scheduled_status",
          "query": "MATCH (c:Contract)--(o:Organization {hide:false}) WHERE c.status = 'SCHEDULED' AND date(c.serviceStartedAt) < date() RETURN count(c)"
        },
        {
          "name": "Contracts with wrong out of contract status",
          "query": "MATCH (c:Contract)-[:ACTIVE_RENEWAL]-(op:RenewalOpportunity) WHERE c.status = 'OUT_OF_CONTRACT' AND (c.autoRenew = true OR op.approved = true OR date(op.renewedAt) > date())  RETURN count(c)"
        },
        {
          "name": "Contracts without opportunity with wrong live status",
          "query": "MATCH (c:Contract) WHERE NOT (c)-[:ACTIVE_RENEWAL]->(:RenewalOpportunity) AND c.status = 'LIVE' AND (date(c.serviceStartedAt) > date() OR c.approved = false OR c.approved IS NULL) RETURN count(c)"
        },
        {
          "name": "Contracts with renewals with wrong live status",
          "query": "MATCH (:Organization {hide:false})--(c:Contract)-[:ACTIVE_RENEWAL]->(op:RenewalOpportunity) WhERE c.status = 'LIVE' AND (c.approved = false OR c.approved IS NULL OR date(op.renewedAt) < date()) RETURN count(c)"
        }
      ]
    },
    {
      "name": "Organization",
      "queries": [
        {
          "name": "organizations_with_wrong_node_labels",
          "query": "MATCH (t:Tenant)<-[:ORGANIZATION_BELONGS_TO_TENANT]-(o:Organization) WHERE size(labels(o)) <> 2 OR NOT 'Organization_'+t.name in labels(o) return count(o)"
        },
        {
          "name": "Multiple organizations share same domain",
          "query": "MATCH (t:Tenant)<-[:ORGANIZATION_BELONGS_TO_TENANT]-(org:Organization)-[:HAS_DOMAIN]->(d:Domain) with t, d, count(org) as size_orgs where size_orgs > 300 return count(d)"
        },
        {
          "name": "Organizations with missing properties",
          "query": "MATCH (o:Organization) WHERE o.hide IS NULL OR o.createdAt IS NULL RETURN count(o)",
          "description": "Organization with missing mandatory (non-null) properties."
        },
        {
          "name": "Organization renewal date in past",
          "query": "MATCH (org:Organization {hide:false}) OPTIONAL MATCH (org)--(c:Contract) WITH org, collect(c) as contracts WHERE size(contracts) > 0 AND ALL(c IN contracts WHERE c.status <> 'OUT_OF_CONTRACT') AND date(org.derivedNextRenewalAt) < date() RETURN count(org)",
          "description": "Organization with derived next renewal date in the past. If organization has multiple contracts, all contracts should be in status different than 'OUT_OF_CONTRACT'."
        },
        {
          "name": "Organization renewal date not updated",
          "query": "MATCH (t:Tenant)<-[:ORGANIZATION_BELONGS_TO_TENANT]-(org:Organization {hide:false})-[:HAS_CONTRACT]-(c:Contract)-[:ACTIVE_RENEWAL]->(op:RenewalOpportunity) WITH t, org, collect(c) as contracts, collect(op) as ops WHERE ALL(c IN contracts WHERE c.status = 'LIVE') UNWIND ops as op WITH t, org, min(op.renewedAt) AS minOpRenewalDate WHERE date(org.derivedNextRenewalAt) < date(minOpRenewalDate) RETURN count(org)",
          "description": "Organization with derived next renewal date is before minimal opportunity next renewal. If organization has multiple contracts, all contracts should be in status different than 'OUT_OF_CONTRACT'."
        },
        {
          "name": "Organizations not enriched",
          "query": "MATCH (:Tenant)<-[:ORGANIZATION_BELONGS_TO_TENANT]-(o:Organization {hide:false})--(d:Domain) WHERE o.enrichedAt IS NULL AND (o.techEnrichRequestedAt < datetime()-duration({hours:240}) OR o.techEnrichRequestedAt IS NULL) AND o.createdAt < datetime()-duration({minutes:60}) return count(o)"
        },
        {
          "name": "Organization ltv not updated",
          "query": "MATCH (org:Organization)-[:HAS_CONTRACT]->(c:Contract) WITH org.id as orgId, SUM(c.ltv) as contractsLtv, org.derivedLtv as orgLtv WHERE contractsLtv > 0 AND (orgLtv = 0 OR orgLtv IS NULL) return count(orgId)"
        },
        {
          "name": "Organization industry not valid",
          "query": "MATCH (o:Organization)-[:ORGANIZATION_BELONGS_TO_TENANT]->(:Tenant)\nWHERE o.updatedAt < datetime() - duration({minutes:15}) AND o.hide = false AND NOT o.industry IS NULL AND o.industry <> '' AND NOT o.industry IN [\n    \"Aerospace & Defense\",\n    \"Air Freight & Logistics\",\n    \"Automobile Components\",\n    \"Automobiles\",\n    \"Banks\",\n    \"Beverages\",\n    \"Biotechnology\",\n    \"Broadline Retail\",\n    \"Building Products\",\n    \"Capital Markets\",\n    \"Chemicals\",\n    \"Commercial Services & Supplies\",\n    \"Communications Equipment\",\n    \"Construction & Engineering\",\n    \"Construction Materials\",\n    \"Consumer Finance\",\n    \"Consumer Staples Distribution & Retail\",\n    \"Containers & Packaging\",\n    \"Diversified Consumer Services\",\n    \"Diversified REITs\",\n    \"Diversified Telecommunication Services\",\n    \"Distributors\",\n    \"Electric Utilities\",\n    \"Electrical Equipment\",\n    \"Electronic Equipment, Instruments & Components\",\n    \"Energy Equipment & Services\",\n    \"Entertainment\",\n    \"Financial Services\",\n    \"Food Products\",\n    \"Gas Utilities\",\n    \"Ground Transportation\",\n    \"Health Care Equipment & Supplies\",\n    \"Health Care Providers & Services\",\n    \"Health Care REITs\",\n    \"Health Care Technology\",\n    \"Hotel & Resort REITs\",\n    \"Hotels, Restaurants & Leisure\",\n    \"Household Durables\",\n    \"Household Products\",\n    \"Independent Power and Renewable Electricity Producers\",\n    \"Industrial Conglomerates\",\n    \"Industrial REITs\",\n    \"Insurance\",\n    \"Interactive Media & Services\",\n    \"Internet Software & Services\",\n    \"IT Services\",\n    \"Leisure Products\",\n    \"Life Sciences Tools & Services\",\n    \"Machinery\",\n    \"Marine Transportation\",\n    \"Media\",\n    \"Metals & Mining\",\n    \"Mortgage Real Estate Investment Trusts (REITs)\",\n    \"Multi-Utilities\",\n    \"Office REITs\",\n    \"Oil, Gas & Consumable Fuels\",\n    \"Paper & Forest Products\",\n    \"Passenger Airlines\",\n    \"Personal Products\",\n    \"Pharmaceuticals\",\n    \"Professional Services\",\n    \"Real Estate Management & Development\",\n    \"Residential REITs\",\n    \"Retail REITs\",\n    \"Semiconductors & Semiconductor Equipment\",\n    \"Software\",\n    \"Specialized REITs\",\n    \"Specialty Retail\",\n    \"Technology Hardware, Storage & Peripherals\",\n    \"Textiles, Apparel & Luxury Goods\",\n    \"Tobacco\",\n    \"Trading Companies & Distributors\",\n    \"Transportation Infrastructure\",\n    \"Water Utilities\",\n    \"Wireless Telecommunication Services\"\n]\nRETURN COUNT(o)"
        }
      ]
    },
    {
      "name": "User",
      "queries": [
        {
          "name": "Check user nodes labels",
          "query": "MATCH (t:Tenant)<-[:USER_BELONGS_TO_TENANT]-(n:User) WHERE size(labels(n)) <> 2 OR NOT 'User_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Emails shared between users",
          "query": "MATCH (u:User)-[r1:HAS]->(e:Email)<-[r2:HAS]-(n:User) WHERE u <> n return count(e)"
        }
      ]
    },
    {
      "name": "Domain",
      "queries": [
        {
          "name": "Domain nodes with missing domain property",
          "query": "MATCH (d:Domain) WHERE d.domain IS NULL or d.domain = '' RETURN count(d)",
          "description": "Domain property is mandatory."
        },
        {
          "name": "Incorrect domain capitalization",
          "query": "MATCH (d:Domain) WHERE d.domain <> toLower(d.domain) RETURN count(d)",
          "description": "Domain property should be lowercase."
        }
      ]
    },
    {
      "name": "Tenant",
      "queries": [
        {
          "name": "Tenant nodes with missing mandatory properties",
          "query": "MATCH (t:Tenant) WHERE t.name IS NULL or t.name = '' or t.active IS NULL RETURN count(t)",
          "description": "Tenant property is mandatory."
        },
        {
          "name": "Missing link with tenant",
          "query": "WITH [\"Tenant\",\"InteractionSession\",\"JobRole\",\"Domain\",\"Social\",\"TimelineEvent\",\"CustomField\",\"AlternateOrganization\",\"Calendar\",\"ServiceLineItem\",\"Opportunity\",\"OrganizationPlanMilestone\",\"MasterPlanMilestone\",\"InvoiceLine\",\"Attachment\",\"Player\",\"AlternateContact\",\"TechnicalNode\",\"AlternateCustomField\",\"Comment\",\"AlternateUser\",\"Country\",\"State\",\"Meeting\"] as labels MATCH (n) WHERE NOT ANY(label in labels(n) WHERE label IN labels OR label contains 'deleted') AND NOT (n)--(:Tenant)  RETURN count(n)",
          "description": "All nodes should be linked to a tenant except for the listed labels."
        },
        {
          "name": "Single TenantSettings per tenant",
          "query": "MATCH (t:Tenant)-->(ts:TenantSettings) with t, count(ts) as cnt where cnt > 1 return count(t)"
        },
        {
          "name": "Single TenantMetadata per tenant",
          "query": "match (t:Tenant)-->(tm:TenantMetadata) with t, count(tm) as cnt where cnt > 1 return count(t)"
        },
        {
          "name": "TenantSettings missing properties",
          "query": "MATCH (ts:TenantSettings) WHERE ts.enrichContacts IS NULL OR ts.invoicingEnabled IS NULL RETURN count(ts)"
        }
      ]
    },
    {
      "name": "Email",
      "queries": [
        {
          "name": "Check email node labels",
          "query": "MATCH (t:Tenant)<-[:EMAIL_ADDRESS_BELONGS_TO_TENANT]-(n:Email) WHERE size(labels(n)) <> 2 OR NOT 'Email_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Cross tenant email link",
          "query": "MATCH (t1:Tenant)--(n:User|Contact|Organization)--(:Email)--(t2:Tenant) where t1.name <> t2.name return count(n)"
        },
        {
          "name": "Emails not validated",
          "query": "MATCH (t:Tenant {active:true})--(e:Email) WHERE date(e.createdAt) > date('2024-08-26') AND  e.rawEmail <> '' AND e.techValidatedAt IS NULL AND e.updatedAt < datetime() - duration({minutes:30}) RETURN count(e)"
        }
      ]
    },
    {
      "name": "PhoneNumber",
      "queries": [
        {
          "name": "Check phone number nodes labels",
          "query": "MATCH (t:Tenant)<-[:PHONE_NUMBER_BELONGS_TO_TENANT]-(n:PhoneNumber) WHERE size(labels(n)) <> 2 OR NOT 'PhoneNumber_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Cross tenants phone number link",
          "query": "MATCH (t1:Tenant)--(n:User|Contact|Organization)--(:PhoneNumber)--(t2:Tenant) where t1.name <> t2.name return count(n)"
        }
      ]
    },
    {
      "name": "Contact",
      "queries": [
        {
          "name": "check_contact_node_labels",
          "query": "MATCH (t:Tenant)<-[:CONTACT_BELONGS_TO_TENANT]-(n:Contact) WHERE size(labels(n)) <> 2 OR NOT 'Contact_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Contacts with group email address",
          "query": "MATCH (c:Contact)-[:HAS]->(e:Email) WHERE (c.hide IS NULL OR c.hide = false) AND e.isRoleAccount = true AND c.updatedAt < datetime() - duration({minutes:15}) AND e.updatedAt < datetime() - duration({minutes:15}) RETURN COUNT(c)"
        }
      ]
    },
    {
      "name": "Location",
      "queries": [
        {
          "name": "Check location nodes labels",
          "query": "MATCH (t:Tenant)<-[:LOCATION_BELONGS_TO_TENANT]-(n:Location) WHERE size(labels(n)) <> 2 OR NOT 'Location_'+t.name in labels(n) return count(n)"
        }
      ]
    },
    {
      "name": "Tag",
      "queries": [
        {
          "name": "Tag nodes with wrong labels",
          "query": "MATCH (t:Tenant)<-[:TAG_BELONGS_TO_TENANT]-(n:Tag) WHERE size(labels(n)) <> 2 OR NOT 'Tag_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Duplicate tags",
          "query": "MATCH (t:Tenant)<-[:TAG_BELONGS_TO_TENANT]-(tag:Tag) with t.name as tenant, tag.name as tag_name, count(tag) as size_tags where size_tags > 1 return count(tag_name) as cnt"
        }
      ]
    },
    {
      "name": "ServiceLineItem",
      "queries": [
        {
          "name": "Check service line items nodes labels",
          "query": "MATCH (t:Tenant)<-[:CONTRACT_BELONGS_TO_TENANT]-(:Contract)-[:HAS_SERVICE]->(n:ServiceLineItem) WHERE size(labels(n)) <> 2 OR NOT 'ServiceLineItem_'+t.name in labels(n) return count(n)"
        },
        {
          "name": "Service line items without contract",
          "query": "MATCH (n:ServiceLineItem) WHERE NOT (n)<-[:HAS_SERVICE]-(:Contract|DeletedContract) RETURN count(n) as cnt"
        },
        {
          "name": "Service line items shared between contracts",
          "query": "MATCH (sli:ServiceLineItem)<-[:HAS_SERVICE]-(c:Contract) WITH sli, count(c) AS sizeContracts WHERE sizeContracts > 1 RETURN count(sli)"
        },
        {
          "name": "Service line items with end date before start date",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.endedAt < sli.startedAt RETURN count(sli)"
        },
        {
          "name": "Service line items with missing properties",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.createdAt is null OR sli.updatedAt is null OR sli.startedAt is null OR sli.billed is null OR sli.billed = '' OR sli.parentId is null OR sli.parentId = '' OR sli.quantity IS NULL OR sli.price IS NULL return count(sli)"
        },
        {
          "name": "Service line items with wrong billed property",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.billed IS NOT NULL AND NOT sli.billed IN ['','MONTHLY','ANNUALLY','QUARTERLY', 'USAGE','ONCE'] RETURN count(sli)"
        },
        {
          "name": "Service line item price is not of type float",
          "query": "MATCH (sli:ServiceLineItem) WHERE apoc.meta.cypher.type(sli.price) <> 'FLOAT' RETURN count(sli) as cnt"
        },
        {
          "name": "Service line item quantity is not of type integer",
          "query": "MATCH (sli:ServiceLineItem) WHERE apoc.meta.cypher.type(sli.quantity) <> 'INTEGER' RETURN count(sli)"
        },
        {
          "name": "Service line items with missing end date",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.endedAt IS NULL WITH sli.parentId AS parent, count(sli) AS size WHERE size > 1 RETURN count(parent)"
        },
        {
          "name": "Service line items with same start date",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.startedAt IS NOT NULL WITH sli.parentId AS parent, sli.startedAt AS startedAt, count(sli) AS size WHERE size > 1 RETURN count(parent)"
        },
        {
          "name": "Service line items with same end date",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.endedAt IS NOT NULL AND sli.isCanceled IS NULL WITH sli.parentId AS parent, sli.endedAt AS endedAt, count(sli) AS size WHERE size > 1 RETURN count(parent)"
        },
        {
          "name": "Service line items with end date not matching start date of previous version",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.endedAt IS NOT NULL MATCH (other:ServiceLineItem {parentId:sli.parentId}) WHERE sli.id <> other.id AND sli.startedAt < other.startedAt WITH sli.parentId AS parent, sli.endedAt AS currentEnd, collect(other.startedAt) AS otherStarts WHERE size(otherStarts)>0 AND NOT currentEnd IN (otherStarts) RETURN count(parent) "
        },
        {
          "name": "Cancelled service line items with missing end date",
          "query": "MATCH (sli:ServiceLineItem) WHERE sli.isCanceled = true and sli.endedAt IS NULL RETURN count(sli)"
        }
      ]
    },
    {
      "name": "TenantBillingProfile",
      "queries": [
        {
          "name": "Check tenant billing profile labels",
          "query": "MATCH (t:Tenant)-[:HAS_BILLING_PROFILE]->(n:TenantBillingProfile) WHERE size(labels(n)) <> 2 OR NOT 'TenantBillingProfile_'+t.name in labels(n) return count(n)"
        }
      ]
    },
    {
      "name": "JobRole",
      "queries": [
        {
          "name": "JobRoles without linked contact or user",
          "query": "MATCH (j:JobRole) WHERE NOT (j)--(:Contact|User) RETURN count(j)"
        }
      ]
    },
    {
      "name": "Comment",
      "queries": [
        {
          "name": "Comments without parent",
          "query": "MATCH (c:Comment) WHERE NOT (c)-[:COMMENTED]->() return count(c)"
        }
      ]
    },
    {
      "name": "Opportunity",
      "queries": [
        {
          "name": "Multiple active renewal opportunities for same contract",
          "query": "MATCH (c:Contract)-[:ACTIVE_RENEWAL]->(op:Opportunity) WITH c, count(op) AS sizeOps WHERE sizeOps > 1 RETURN count(c)"
        },
        {
          "name": "Multiple open renewal opportunities for same contract",
          "query": "MATCH (c:Contract)-[:HAS_OPPORTUNITY]->(op:RenewalOpportunity) WHERE op.internalStage='OPEN' WITH c, count(op) AS sizeOps WHERE sizeOps > 1 RETURN count(c)"
        },
        {
          "name": "Next opportunity renewal date in the past",
          "query": "MATCH (:Organization {hide:FALSE})--(c:Contract)-[:ACTIVE_RENEWAL]->(op:RenewalOpportunity) WHERE NOT c.status IN ['OUT_OF_CONTRACT','DRAFT','SCHEDULED'] AND date(op.renewedAt) < date(datetime()) return count(op)"
        },
        {
          "name": "Renewal opportunity with wrong likelihood",
          "query": "MATCH (op:RenewalOpportunity) WHERE op.renewalLikelihood IS NOT NULL AND NOT op.renewalLikelihood IN ['','ZERO','LOW','MEDIUM','HIGH'] RETURN count(op)"
        },
        {
          "name": "Expired renewal opportunity in open status",
          "query": "MATCH (op:RenewalOpportunity) WHERE NOT (op)--(:DeletedContract) WITH op OPTIONAL MATCH (op)-[:ACTIVE_RENEWAL]-(c:Contract) WITH op, c WHERE (c IS NULL OR (NOT c.status IN ['OUT_OF_CONTRACT','DRAFT','SCHEDULED'] AND (c)--(:Organization {hide:false}))) AND op.renewedAt < datetime()-duration({minutes: 30}) AND op.internalStage = 'OPEN' RETURN count(op)"
        },
        {
          "name": "Opportunities with missing mandatory properties",
          "query": "MATCH (op:Opportunity) WHERE (op.internalType IN ['NBO'] AND op.stageUpdatedAt IS NULL) RETURN count(op)"
        }
      ]
    },
    {
      "name": "Social",
      "queries": [
        {
          "name": "Duplicated socials",
          "query": "MATCH (n:Organization|Contact)-[:HAS]->(s:Social) WHERE s.updatedAt < datetime() - duration({hours: 48}) WITH n, s.url AS url, COLLECT(s) AS socials WHERE size(socials) > 1 WITH n, url, head(socials) AS firstSocial  RETURN count(n)"
        },
        {
          "name": "Empty socials",
          "query": "MATCH (n:Organization|Contact)-[:HAS]->(s:Social) WHERE s.updatedAt < datetime() - duration({hours: 24}) AND (s.url IS NULL OR s.url = '') RETURN count(s)"
        }
      ]
    }
  ],
  "queries": [
    {
      "name": "orphan_nodes",
      "query": "MATCH (n) WHERE NOT (n)--() AND NOT n:Country AND NOT n:Domain AND NOT n:TechnicalNode AND NOT n:Attachment return count(n)"
    },
    {
      "name": "Check synced with event store",
      "query": "MATCH (n:User|Organization) WHERE n.updatedAt < datetime() - duration({minutes:15}) AND n.syncedWithEventStore is null or n.syncedWithEventStore = false return count(n)"
    },
    {
      "name": "Check source fields",
      "query": "WITH [\"FlowSequenceSender\",\"FlowSequence\",\"Flow\",\"Tenant\",\"ExternalSystem\",\"Domain\",\"InteractionSession\",\"AlternateOrganization\",\"Action\",\"TenantSettings\",\"MergedOrganization\",\"AlternateContact\",\"TechnicalNode\",\"CustomField\",\"AlternateCustomField\",\"TenantMetadata\",\"AlternateUser\",\"Tag\",\"CustomFieldTemplate\",\"State\",\"Player\"] as labels\nMATCH (n) WHERE NOT ANY(label in labels(n) WHERE label IN labels) \nWITH n \nWHERE n.source IS NULL OR n.sourceOfTruth IS NULL OR n.appSource IS NULL OR n.source = '' OR n.sourceOfTruth = '' or n.appSource = ''\nRETURN count(n)"
    },
    {
      "name": "Check organization derived data consistency",
      "query": "CALL {MATCH (org:Organization) WHERE org.derivedRenewalLikelihood IS NOT NULL AND NOT org.derivedRenewalLikelihood IN ['','ZERO','LOW','MEDIUM','HIGH'] RETURN count(org) as cnt\n     UNION ALL\n     MATCH (org:Organization) WHERE org.derivedRenewalLikelihood IS NULL AND NOT org.derivedRenewalLikelihood IS NULL RETURN count(org) as cnt\n     UNION ALL MATCH (org:Organization)--(c:Contract)-[:ACTIVE_RENEWAL]->(op:RenewalOpportunity) WHERE (org.renewalForecastMaxArr IS NULL OR org.renewalForecastMaxArr = 0) AND (op.maxAmount > 0) return count(org) AS cnt\n} RETURN sum(cnt)",
      "description": "Checks: 2 - Organizations with wrong derivedRenewalLikelihood value. 3 - Organization with renewal likelihood but without renewal date. 4 - Organizations with missing ARR"
    },
    {
      "name": "Check organization data consistency",
      "query": "CALL {\n     MATCH (org:Organization) WHERE org.onboardingStatus IS NULL OR NOT org.onboardingStatus IN ['NOT_APPLICABLE','NOT_STARTED','ON_TRACK','LATE','STUCK','DONE','SUCCESSFUL'] with org RETURN count(org) as cnt\n} RETURN sum(cnt)",
      "description": "Checks: 1 - Organizations with wrong onboardingStatus value."
    },
    {
      "name": "Check contract and invoice link consistency",
      "query": "CALL {MATCH (c:Contract)--(t:Tenant)--(ts:TenantSettings) WHERE (ts.invoicingPostpaid = false OR ts.invoicingPostpaid IS NULL) AND c.techInvoicingStartedAt IS NOT NULL WITH c OPTIONAL MATCH (c)-[:HAS_INVOICE]->(i:Invoice) WHERE i.dryRun = false and i.createdAt > c.techInvoicingStartedAt-duration({hours: 1}) WITH i,c WHERE i IS NULL RETURN count(c) as cnt\n    UNION ALL\n    MATCH (c:Contract)--(t:Tenant)--(ts:TenantSettings) WHERE ts.invoicingPostpaid = true AND c.techInvoicingStartedAt IS NOT NULL AND coalesce(c.nextInvoiceDate, c.invoicingStartDate)+duration({days: CASE WHEN c.billingCycle='MONTHLY' THEN 31 ELSE CASE WHEN c.billingCycle='QUARTERLY' THEN 92 ELSE CASE WHEN c.billingCycle='ANNUALLY' THEN 366 ELSE 0 END END END}) < c.techInvoicingStartedAt WITH c OPTIONAL MATCH (c)-[:HAS_INVOICE]->(i:Invoice) WHERE i.dryRun = FALSE AND i.createdAt > c.techInvoicingStartedAt-duration({hours: 1}) WITH i,c WHERE i IS NULL RETURN count(c) as cnt\n} RETURN sum(cnt)",
      "description": "2 - Check that prepaid contract with techInvoicingStartedAt date has non dry run invoice. 3 - Check that postpaid contract with techInvoicingStartedAt date has non dry run invoice."
    }
  ]
}