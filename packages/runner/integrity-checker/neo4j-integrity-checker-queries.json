{
  "queries": [
    {
      "name": "Check for domain nodes with missing domain property",
      "query": "MATCH (d:Domain) WHERE d.domain IS NULL or d.domain = '' RETURN count(d)"
    },
    {
      "name": "Check for incorrect domain capitalization",
      "query": "MATCH (d:Domain) WHERE d.domain <> toLower(d.domain) RETURN count(d)"
    },
    {
      "name": "Check for nodes missing link with tenant",
      "query": "MATCH (n:Organization|Contact|Email|PhoneNumber|Location|Tag|User|OrganizationRelationshipStage|MergedContact|MergedOrganization|Issue|Workspace|EntityTemplate) where not (n)--(:Tenant) return count(n)"
    },
    {
      "name": "Check organization nodes labels",
      "query": "MATCH (t:Tenant)<-[:ORGANIZATION_BELONGS_TO_TENANT]-(o:Organization) WHERE size(labels(o)) <> 2 OR NOT 'Organization_'+t.name in labels(o) return count(o)"
    },
    {
      "name": "Check contact nodes labels",
      "query": "MATCH (t:Tenant)<-[:CONTACT_BELONGS_TO_TENANT]-(n:Contact) WHERE size(labels(n)) <> 2 OR NOT 'Contact_'+t.name in labels(n) return count(n)"
    },
    {
      "name": "Check email nodes labels",
      "query": "MATCH (t:Tenant)<-[:EMAIL_BELONGS_TO_TENANT]-(n:Email) WHERE size(labels(n)) <> 2 OR NOT 'Email_'+t.name in labels(n) return count(n)"
    },
    {
      "name": "Check phone number nodes labels",
      "query": "MATCH (t:Tenant)<-[:PHONE_NUMBER_BELONGS_TO_TENANT]-(n:PhoneNumber) WHERE size(labels(n)) <> 2 OR NOT 'PhoneNumber_'+t.name in labels(n) return count(n)"
    },
    {
      "name": "Check location nodes labels",
      "query": "MATCH (t:Tenant)<-[:LOCATION_BELONGS_TO_TENANT]-(n:Location) WHERE size(labels(n)) <> 2 OR NOT 'Location_'+t.name in labels(n) return count(n)"
    },
    {
      "name": "Check user nodes labels",
      "query": "MATCH (t:Tenant)<-[:USER_BELONGS_TO_TENANT]-(n:User) WHERE size(labels(n)) <> 2 OR NOT 'User_'+t.name in labels(n) return count(n)"
    },
    {
      "name": "Check used email from same tenant",
      "query": "MATCH (t1:Tenant)--(n:User|Contact|Organization)--(:Email)--(t2:Tenant) where t1.name <> t2.name return count(n)"
    },
    {
      "name": "Check used phone number from same tenant",
      "query": "MATCH (t1:Tenant)--(n:User|Contact|Organization)--(:PhoneNumber)--(t2:Tenant) where t1.name <> t2.name return count(n)"
    },
    {
      "name": "Check singe TenantMetadata per tenant",
      "query": "match (t:Tenant)-->(tm:TenantMetadata) with t, count(tm) as countMetadata where countMetadata > 1 return count(t)"
    },
    {
      "name": "Check orphan nodes",
      "query": "MATCH (n) WHERE NOT (n)--() AND NOT n:Country AND NOT n:Domain return count(n)"
    },
    {
      "name": "Check property valid values",
      "query": "CALL {\nMATCH (n:Organization)\nWHERE n.renewalLikelihood IS NOT NULL AND NOT n.renewalLikelihood IN ['', '0-HIGH', '1-MEDIUM', '2-LOW', '3-ZERO']\nRETURN count(n) as cnt\nUNION ALL\nMATCH (n:Organization)\nWHERE n.renewalLikelihoodPrevious IS NOT NULL AND NOT n.renewalLikelihoodPrevious IN ['', '0-HIGH', '1-MEDIUM', '2-LOW', '3-ZERO']\nRETURN count(n) as cnt\nUNION ALL\nMATCH (n:Organization)\nWHERE n.billingDetailsFrequency IS NOT NULL AND NOT n.billingDetailsFrequency IN ['', 'WEEKLY', 'BIWEEKLY', 'MONTHLY', 'QUARTERLY', 'BIANNUALLY','ANNUALLY']\nRETURN count(n) as cnt\nUNION ALL\nMATCH (n:Organization)\nWHERE n.billingDetailsRenewalCycle IS NOT NULL AND NOT n.billingDetailsRenewalCycle IN ['', 'WEEKLY', 'BIWEEKLY', 'MONTHLY', 'QUARTERLY', 'BIANNUALLY','ANNUALLY']\nRETURN count(n) as cnt\n} return sum(cnt)"
    },
    {
      "name": "Check emails not shared between users",
      "query": "MATCH (u:User)-[r1:HAS]->(e:Email)<-[r2:HAS]-(n:User) WHERE u <> n return count(e)"
    },
    {
      "name": "Check JobRole nodes without linked contact or user",
      "query": "MATCH (j:JobRole) WHERE NOT (j)--(:Contact|User) RETURN count(j)"
    }
  ]
}