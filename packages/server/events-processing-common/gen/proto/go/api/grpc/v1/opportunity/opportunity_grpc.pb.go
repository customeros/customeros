// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: opportunity.proto

package opportunity_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpportunityGrpcServiceClient is the client API for OpportunityGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpportunityGrpcServiceClient interface {
	CreateOpportunity(ctx context.Context, in *CreateOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error)
	UpdateRenewalOpportunity(ctx context.Context, in *UpdateRenewalOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error)
	UpdateOpportunity(ctx context.Context, in *UpdateOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error)
	CloseLooseOpportunity(ctx context.Context, in *CloseLooseOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error)
	UpdateRenewalOpportunityNextCycleDate(ctx context.Context, in *UpdateRenewalOpportunityNextCycleDateGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error)
}

type opportunityGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpportunityGrpcServiceClient(cc grpc.ClientConnInterface) OpportunityGrpcServiceClient {
	return &opportunityGrpcServiceClient{cc}
}

func (c *opportunityGrpcServiceClient) CreateOpportunity(ctx context.Context, in *CreateOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error) {
	out := new(OpportunityIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/opportunityGrpcService/CreateOpportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityGrpcServiceClient) UpdateRenewalOpportunity(ctx context.Context, in *UpdateRenewalOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error) {
	out := new(OpportunityIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/opportunityGrpcService/UpdateRenewalOpportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityGrpcServiceClient) UpdateOpportunity(ctx context.Context, in *UpdateOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error) {
	out := new(OpportunityIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/opportunityGrpcService/UpdateOpportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityGrpcServiceClient) CloseLooseOpportunity(ctx context.Context, in *CloseLooseOpportunityGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error) {
	out := new(OpportunityIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/opportunityGrpcService/CloseLooseOpportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityGrpcServiceClient) UpdateRenewalOpportunityNextCycleDate(ctx context.Context, in *UpdateRenewalOpportunityNextCycleDateGrpcRequest, opts ...grpc.CallOption) (*OpportunityIdGrpcResponse, error) {
	out := new(OpportunityIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/opportunityGrpcService/UpdateRenewalOpportunityNextCycleDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpportunityGrpcServiceServer is the server API for OpportunityGrpcService service.
// All implementations should embed UnimplementedOpportunityGrpcServiceServer
// for forward compatibility
type OpportunityGrpcServiceServer interface {
	CreateOpportunity(context.Context, *CreateOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error)
	UpdateRenewalOpportunity(context.Context, *UpdateRenewalOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error)
	UpdateOpportunity(context.Context, *UpdateOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error)
	CloseLooseOpportunity(context.Context, *CloseLooseOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error)
	UpdateRenewalOpportunityNextCycleDate(context.Context, *UpdateRenewalOpportunityNextCycleDateGrpcRequest) (*OpportunityIdGrpcResponse, error)
}

// UnimplementedOpportunityGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOpportunityGrpcServiceServer struct {
}

func (UnimplementedOpportunityGrpcServiceServer) CreateOpportunity(context.Context, *CreateOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpportunity not implemented")
}
func (UnimplementedOpportunityGrpcServiceServer) UpdateRenewalOpportunity(context.Context, *UpdateRenewalOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRenewalOpportunity not implemented")
}
func (UnimplementedOpportunityGrpcServiceServer) UpdateOpportunity(context.Context, *UpdateOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpportunity not implemented")
}
func (UnimplementedOpportunityGrpcServiceServer) CloseLooseOpportunity(context.Context, *CloseLooseOpportunityGrpcRequest) (*OpportunityIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseLooseOpportunity not implemented")
}
func (UnimplementedOpportunityGrpcServiceServer) UpdateRenewalOpportunityNextCycleDate(context.Context, *UpdateRenewalOpportunityNextCycleDateGrpcRequest) (*OpportunityIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRenewalOpportunityNextCycleDate not implemented")
}

// UnsafeOpportunityGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpportunityGrpcServiceServer will
// result in compilation errors.
type UnsafeOpportunityGrpcServiceServer interface {
	mustEmbedUnimplementedOpportunityGrpcServiceServer()
}

func RegisterOpportunityGrpcServiceServer(s grpc.ServiceRegistrar, srv OpportunityGrpcServiceServer) {
	s.RegisterService(&OpportunityGrpcService_ServiceDesc, srv)
}

func _OpportunityGrpcService_CreateOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpportunityGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityGrpcServiceServer).CreateOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opportunityGrpcService/CreateOpportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityGrpcServiceServer).CreateOpportunity(ctx, req.(*CreateOpportunityGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityGrpcService_UpdateRenewalOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRenewalOpportunityGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityGrpcServiceServer).UpdateRenewalOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opportunityGrpcService/UpdateRenewalOpportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityGrpcServiceServer).UpdateRenewalOpportunity(ctx, req.(*UpdateRenewalOpportunityGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityGrpcService_UpdateOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpportunityGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityGrpcServiceServer).UpdateOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opportunityGrpcService/UpdateOpportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityGrpcServiceServer).UpdateOpportunity(ctx, req.(*UpdateOpportunityGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityGrpcService_CloseLooseOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseLooseOpportunityGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityGrpcServiceServer).CloseLooseOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opportunityGrpcService/CloseLooseOpportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityGrpcServiceServer).CloseLooseOpportunity(ctx, req.(*CloseLooseOpportunityGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityGrpcService_UpdateRenewalOpportunityNextCycleDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRenewalOpportunityNextCycleDateGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityGrpcServiceServer).UpdateRenewalOpportunityNextCycleDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opportunityGrpcService/UpdateRenewalOpportunityNextCycleDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityGrpcServiceServer).UpdateRenewalOpportunityNextCycleDate(ctx, req.(*UpdateRenewalOpportunityNextCycleDateGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpportunityGrpcService_ServiceDesc is the grpc.ServiceDesc for OpportunityGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpportunityGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opportunityGrpcService",
	HandlerType: (*OpportunityGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOpportunity",
			Handler:    _OpportunityGrpcService_CreateOpportunity_Handler,
		},
		{
			MethodName: "UpdateRenewalOpportunity",
			Handler:    _OpportunityGrpcService_UpdateRenewalOpportunity_Handler,
		},
		{
			MethodName: "UpdateOpportunity",
			Handler:    _OpportunityGrpcService_UpdateOpportunity_Handler,
		},
		{
			MethodName: "CloseLooseOpportunity",
			Handler:    _OpportunityGrpcService_CloseLooseOpportunity_Handler,
		},
		{
			MethodName: "UpdateRenewalOpportunityNextCycleDate",
			Handler:    _OpportunityGrpcService_UpdateRenewalOpportunityNextCycleDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opportunity.proto",
}
