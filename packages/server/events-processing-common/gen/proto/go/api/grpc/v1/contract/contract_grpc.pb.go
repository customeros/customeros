// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: contract.proto

package contract_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractGrpcServiceClient is the client API for ContractGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractGrpcServiceClient interface {
	CreateContract(ctx context.Context, in *CreateContractGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error)
	UpdateContract(ctx context.Context, in *UpdateContractGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error)
	ResetRenewalOpportunityOnExpiration(ctx context.Context, in *ResetRenewalOpportunityOnExpirationGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error)
	CloseEndedContract(ctx context.Context, in *CloseEndedContractGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error)
}

type contractGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContractGrpcServiceClient(cc grpc.ClientConnInterface) ContractGrpcServiceClient {
	return &contractGrpcServiceClient{cc}
}

func (c *contractGrpcServiceClient) CreateContract(ctx context.Context, in *CreateContractGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error) {
	out := new(ContractIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/ContractGrpcService/CreateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractGrpcServiceClient) UpdateContract(ctx context.Context, in *UpdateContractGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error) {
	out := new(ContractIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/ContractGrpcService/UpdateContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractGrpcServiceClient) ResetRenewalOpportunityOnExpiration(ctx context.Context, in *ResetRenewalOpportunityOnExpirationGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error) {
	out := new(ContractIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/ContractGrpcService/ResetRenewalOpportunityOnExpiration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contractGrpcServiceClient) CloseEndedContract(ctx context.Context, in *CloseEndedContractGrpcRequest, opts ...grpc.CallOption) (*ContractIdGrpcResponse, error) {
	out := new(ContractIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/ContractGrpcService/CloseEndedContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractGrpcServiceServer is the server API for ContractGrpcService service.
// All implementations should embed UnimplementedContractGrpcServiceServer
// for forward compatibility
type ContractGrpcServiceServer interface {
	CreateContract(context.Context, *CreateContractGrpcRequest) (*ContractIdGrpcResponse, error)
	UpdateContract(context.Context, *UpdateContractGrpcRequest) (*ContractIdGrpcResponse, error)
	ResetRenewalOpportunityOnExpiration(context.Context, *ResetRenewalOpportunityOnExpirationGrpcRequest) (*ContractIdGrpcResponse, error)
	CloseEndedContract(context.Context, *CloseEndedContractGrpcRequest) (*ContractIdGrpcResponse, error)
}

// UnimplementedContractGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedContractGrpcServiceServer struct {
}

func (UnimplementedContractGrpcServiceServer) CreateContract(context.Context, *CreateContractGrpcRequest) (*ContractIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (UnimplementedContractGrpcServiceServer) UpdateContract(context.Context, *UpdateContractGrpcRequest) (*ContractIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (UnimplementedContractGrpcServiceServer) ResetRenewalOpportunityOnExpiration(context.Context, *ResetRenewalOpportunityOnExpirationGrpcRequest) (*ContractIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetRenewalOpportunityOnExpiration not implemented")
}
func (UnimplementedContractGrpcServiceServer) CloseEndedContract(context.Context, *CloseEndedContractGrpcRequest) (*ContractIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseEndedContract not implemented")
}

// UnsafeContractGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractGrpcServiceServer will
// result in compilation errors.
type UnsafeContractGrpcServiceServer interface {
	mustEmbedUnimplementedContractGrpcServiceServer()
}

func RegisterContractGrpcServiceServer(s grpc.ServiceRegistrar, srv ContractGrpcServiceServer) {
	s.RegisterService(&ContractGrpcService_ServiceDesc, srv)
}

func _ContractGrpcService_CreateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractGrpcServiceServer).CreateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContractGrpcService/CreateContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractGrpcServiceServer).CreateContract(ctx, req.(*CreateContractGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractGrpcService_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractGrpcServiceServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContractGrpcService/UpdateContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractGrpcServiceServer).UpdateContract(ctx, req.(*UpdateContractGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractGrpcService_ResetRenewalOpportunityOnExpiration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRenewalOpportunityOnExpirationGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractGrpcServiceServer).ResetRenewalOpportunityOnExpiration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContractGrpcService/ResetRenewalOpportunityOnExpiration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractGrpcServiceServer).ResetRenewalOpportunityOnExpiration(ctx, req.(*ResetRenewalOpportunityOnExpirationGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContractGrpcService_CloseEndedContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseEndedContractGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractGrpcServiceServer).CloseEndedContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContractGrpcService/CloseEndedContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractGrpcServiceServer).CloseEndedContract(ctx, req.(*CloseEndedContractGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractGrpcService_ServiceDesc is the grpc.ServiceDesc for ContractGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ContractGrpcService",
	HandlerType: (*ContractGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContract",
			Handler:    _ContractGrpcService_CreateContract_Handler,
		},
		{
			MethodName: "UpdateContract",
			Handler:    _ContractGrpcService_UpdateContract_Handler,
		},
		{
			MethodName: "ResetRenewalOpportunityOnExpiration",
			Handler:    _ContractGrpcService_ResetRenewalOpportunityOnExpiration_Handler,
		},
		{
			MethodName: "CloseEndedContract",
			Handler:    _ContractGrpcService_CloseEndedContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}
