// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph"
)

type ExtensibleEntity interface {
	IsNode()
	IsExtensibleEntity()
	GetID() string
	GetTemplate() *EntityTemplate
}

type InteractionEventParticipant interface {
	IsInteractionEventParticipant()
}

type InteractionSessionParticipant interface {
	IsInteractionSessionParticipant()
}

type IssueParticipant interface {
	IsIssueParticipant()
}

type MeetingParticipant interface {
	IsMeetingParticipant()
}

type MetadataInterface interface {
	IsMetadataInterface()
	GetMetadata() *Metadata
}

type Node interface {
	IsNode()
	GetID() string
}

// Describes the number of pages and total elements included in a query response.
// **A `response` object.**
type Pages interface {
	IsPages()
	// The total number of pages included in the query response.
	// **Required.**
	GetTotalPages() int
	// The total number of elements included in the query response.
	// **Required.**
	GetTotalElements() int64
}

type SourceFields interface {
	IsNode()
	IsSourceFields()
	GetID() string
	GetSource() DataSource
	GetSourceOfTruth() DataSource
	GetAppSource() string
}

type SourceFieldsInterface interface {
	IsSourceFieldsInterface()
	GetSource() DataSource
	GetSourceOfTruth() DataSource
	GetAppSource() string
}

type TimelineEvent interface {
	IsTimelineEvent()
}

type Action struct {
	ID         string     `json:"id"`
	CreatedAt  time.Time  `json:"createdAt"`
	Content    *string    `json:"content,omitempty"`
	Source     DataSource `json:"source"`
	AppSource  string     `json:"appSource"`
	CreatedBy  *User      `json:"createdBy,omitempty"`
	ActionType ActionType `json:"actionType"`
	Metadata   *string    `json:"metadata,omitempty"`
}

func (Action) IsTimelineEvent() {}

type ActionItem struct {
	ID        string     `json:"id"`
	CreatedAt time.Time  `json:"createdAt"`
	Content   string     `json:"content"`
	Source    DataSource `json:"source"`
	AppSource string     `json:"appSource"`
}

type ActionResponse struct {
	Accepted bool `json:"accepted"`
}

type Attachment struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	BasePath      string     `json:"basePath"`
	CdnURL        string     `json:"cdnUrl"`
	FileName      string     `json:"fileName"`
	MimeType      string     `json:"mimeType"`
	Size          int64      `json:"size"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

func (Attachment) IsNode()            {}
func (this Attachment) GetID() string { return this.ID }

type AttachmentInput struct {
	ID        *string    `json:"id,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	CdnURL    string     `json:"cdnUrl"`
	BasePath  string     `json:"basePath"`
	FileName  string     `json:"fileName"`
	MimeType  string     `json:"mimeType"`
	Size      int64      `json:"size"`
	AppSource string     `json:"appSource"`
}

type BankAccount struct {
	Metadata            *Metadata `json:"metadata"`
	BankName            *string   `json:"bankName,omitempty"`
	Currency            *Currency `json:"currency,omitempty"`
	BankTransferEnabled bool      `json:"bankTransferEnabled"`
	AllowInternational  bool      `json:"allowInternational"`
	Iban                *string   `json:"iban,omitempty"`
	Bic                 *string   `json:"bic,omitempty"`
	SortCode            *string   `json:"sortCode,omitempty"`
	AccountNumber       *string   `json:"accountNumber,omitempty"`
	RoutingNumber       *string   `json:"routingNumber,omitempty"`
	OtherDetails        *string   `json:"otherDetails,omitempty"`
}

func (BankAccount) IsMetadataInterface()        {}
func (this BankAccount) GetMetadata() *Metadata { return this.Metadata }

type BankAccountCreateInput struct {
	Currency            *Currency `json:"currency,omitempty"`
	BankName            *string   `json:"bankName,omitempty"`
	BankTransferEnabled *bool     `json:"bankTransferEnabled,omitempty"`
	AllowInternational  *bool     `json:"allowInternational,omitempty"`
	Iban                *string   `json:"iban,omitempty"`
	Bic                 *string   `json:"bic,omitempty"`
	SortCode            *string   `json:"sortCode,omitempty"`
	AccountNumber       *string   `json:"accountNumber,omitempty"`
	RoutingNumber       *string   `json:"routingNumber,omitempty"`
	OtherDetails        *string   `json:"otherDetails,omitempty"`
}

type BankAccountUpdateInput struct {
	ID                  string    `json:"id"`
	Currency            *Currency `json:"currency,omitempty"`
	BankName            *string   `json:"bankName,omitempty"`
	BankTransferEnabled *bool     `json:"bankTransferEnabled,omitempty"`
	AllowInternational  *bool     `json:"allowInternational,omitempty"`
	Iban                *string   `json:"iban,omitempty"`
	Bic                 *string   `json:"bic,omitempty"`
	SortCode            *string   `json:"sortCode,omitempty"`
	AccountNumber       *string   `json:"accountNumber,omitempty"`
	RoutingNumber       *string   `json:"routingNumber,omitempty"`
	OtherDetails        *string   `json:"otherDetails,omitempty"`
}

type BillingDetails struct {
	BillingCycle           *ContractBillingCycle `json:"billingCycle,omitempty"`
	BillingCycleInMonths   *int64                `json:"billingCycleInMonths,omitempty"`
	InvoicingStarted       *time.Time            `json:"invoicingStarted,omitempty"`
	NextInvoicing          *time.Time            `json:"nextInvoicing,omitempty"`
	AddressLine1           *string               `json:"addressLine1,omitempty"`
	AddressLine2           *string               `json:"addressLine2,omitempty"`
	Locality               *string               `json:"locality,omitempty"`
	Region                 *string               `json:"region,omitempty"`
	Country                *string               `json:"country,omitempty"`
	PostalCode             *string               `json:"postalCode,omitempty"`
	OrganizationLegalName  *string               `json:"organizationLegalName,omitempty"`
	BillingEmail           *string               `json:"billingEmail,omitempty"`
	BillingEmailCc         []string              `json:"billingEmailCC,omitempty"`
	BillingEmailBcc        []string              `json:"billingEmailBCC,omitempty"`
	InvoiceNote            *string               `json:"invoiceNote,omitempty"`
	CanPayWithCard         *bool                 `json:"canPayWithCard,omitempty"`
	CanPayWithDirectDebit  *bool                 `json:"canPayWithDirectDebit,omitempty"`
	CanPayWithBankTransfer *bool                 `json:"canPayWithBankTransfer,omitempty"`
	PayOnline              *bool                 `json:"payOnline,omitempty"`
	PayAutomatically       *bool                 `json:"payAutomatically,omitempty"`
	Check                  *bool                 `json:"check,omitempty"`
	DueDays                *int64                `json:"dueDays,omitempty"`
}

type BillingDetailsInput struct {
	// Deprecated, use billingCycleInMonths instead.
	BillingCycle           *ContractBillingCycle `json:"billingCycle,omitempty"`
	BillingCycleInMonths   *int64                `json:"billingCycleInMonths,omitempty"`
	InvoicingStarted       *time.Time            `json:"invoicingStarted,omitempty"`
	AddressLine1           *string               `json:"addressLine1,omitempty"`
	AddressLine2           *string               `json:"addressLine2,omitempty"`
	Locality               *string               `json:"locality,omitempty"`
	Region                 *string               `json:"region,omitempty"`
	Country                *string               `json:"country,omitempty"`
	PostalCode             *string               `json:"postalCode,omitempty"`
	OrganizationLegalName  *string               `json:"organizationLegalName,omitempty"`
	BillingEmail           *string               `json:"billingEmail,omitempty"`
	BillingEmailCc         []string              `json:"billingEmailCC,omitempty"`
	BillingEmailBcc        []string              `json:"billingEmailBCC,omitempty"`
	InvoiceNote            *string               `json:"invoiceNote,omitempty"`
	CanPayWithCard         *bool                 `json:"canPayWithCard,omitempty"`
	CanPayWithDirectDebit  *bool                 `json:"canPayWithDirectDebit,omitempty"`
	CanPayWithBankTransfer *bool                 `json:"canPayWithBankTransfer,omitempty"`
	PayOnline              *bool                 `json:"payOnline,omitempty"`
	PayAutomatically       *bool                 `json:"payAutomatically,omitempty"`
	Check                  *bool                 `json:"check,omitempty"`
	DueDays                *int64                `json:"dueDays,omitempty"`
}

type BillingProfile struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	LegalName     string     `json:"legalName"`
	TaxID         string     `json:"taxId"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

func (BillingProfile) IsSourceFields()                   {}
func (this BillingProfile) GetID() string                { return this.ID }
func (this BillingProfile) GetSource() DataSource        { return this.Source }
func (this BillingProfile) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this BillingProfile) GetAppSource() string         { return this.AppSource }

func (BillingProfile) IsNode() {}

type BillingProfileInput struct {
	OrganizationID string     `json:"organizationId"`
	LegalName      *string    `json:"legalName,omitempty"`
	TaxID          *string    `json:"taxId,omitempty"`
	CreatedAt      *time.Time `json:"createdAt,omitempty"`
}

type BillingProfileLinkEmailInput struct {
	OrganizationID   string `json:"organizationId"`
	BillingProfileID string `json:"billingProfileId"`
	EmailID          string `json:"emailId"`
	Primary          *bool  `json:"primary,omitempty"`
}

type BillingProfileLinkLocationInput struct {
	OrganizationID   string `json:"organizationId"`
	BillingProfileID string `json:"billingProfileId"`
	LocationID       string `json:"locationId"`
}

type BillingProfileUpdateInput struct {
	OrganizationID   string     `json:"organizationId"`
	BillingProfileID string     `json:"billingProfileId"`
	LegalName        *string    `json:"legalName,omitempty"`
	TaxID            *string    `json:"taxId,omitempty"`
	UpdatedAt        *time.Time `json:"updatedAt,omitempty"`
}

// Describes the relationship a Contact has with a Organization.
// **A `return` object**
type Calendar struct {
	ID            string       `json:"id"`
	CalType       CalendarType `json:"calType"`
	CreatedAt     time.Time    `json:"createdAt"`
	UpdatedAt     time.Time    `json:"updatedAt"`
	Link          *string      `json:"link,omitempty"`
	Primary       bool         `json:"primary"`
	Source        DataSource   `json:"source"`
	SourceOfTruth DataSource   `json:"sourceOfTruth"`
	AppSource     string       `json:"appSource"`
}

type ColumnView struct {
	ColumnID   int            `json:"columnId"`
	ColumnType ColumnViewType `json:"columnType"`
	Width      int            `json:"width"`
	Visible    bool           `json:"visible"`
	Name       string         `json:"name"`
	Filter     string         `json:"filter"`
}

type ColumnViewInput struct {
	ColumnID   int            `json:"columnId"`
	ColumnType ColumnViewType `json:"columnType"`
	Width      int            `json:"width"`
	Visible    bool           `json:"visible"`
	Name       string         `json:"name"`
	Filter     string         `json:"filter"`
}

type Comment struct {
	ID            string            `json:"id"`
	Content       *string           `json:"content,omitempty"`
	ContentType   *string           `json:"contentType,omitempty"`
	CreatedAt     time.Time         `json:"createdAt"`
	UpdatedAt     time.Time         `json:"updatedAt"`
	CreatedBy     *User             `json:"createdBy,omitempty"`
	Source        DataSource        `json:"source"`
	SourceOfTruth DataSource        `json:"sourceOfTruth"`
	AppSource     string            `json:"appSource"`
	ExternalLinks []*ExternalSystem `json:"externalLinks"`
}

type Conditionals struct {
	MinimumChargePeriod *ChargePeriod `json:"minimumChargePeriod,omitempty"`
	MinimumChargeAmount float64       `json:"minimumChargeAmount"`
}

// A contact represents an individual in customerOS.
// **A `response` object.**
type Contact struct {
	Metadata *Metadata `json:"metadata"`
	// Deprecated, use metadata instead
	ID string `json:"id"`
	// Deprecated
	Title  *string `json:"title,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	// The name of the contact in customerOS, alternative for firstName + lastName.
	Name *string `json:"name,omitempty"`
	// The first name of the contact in customerOS.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact in customerOS.
	LastName        *string `json:"lastName,omitempty"`
	Username        *string `json:"username,omitempty"`
	Description     *string `json:"description,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	Hide            *bool   `json:"hide,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	// **Required**
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	// Deprecated
	Label         *string    `json:"label,omitempty"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     *string    `json:"appSource,omitempty"`
	Tags          []*Tag     `json:"tags,omitempty"`
	// `organizationName` and `jobTitle` of the contact if it has been associated with an organization.
	// **Required.  If no values it returns an empty array.**
	JobRoles      []*JobRole        `json:"jobRoles"`
	Organizations *OrganizationPage `json:"organizations"`
	// All phone numbers associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	PhoneNumbers []*PhoneNumber `json:"phoneNumbers"`
	// All email addresses associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	Emails []*Email `json:"emails"`
	// All locations associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	Locations []*Location `json:"locations"`
	Socials   []*Social   `json:"socials"`
	// All users associated on linkedin to this contact
	ConnectedUsers []*User `json:"connectedUsers"`
	// User defined metadata appended to the contact record in customerOS.
	// **Required.  If no values it returns an empty array.**
	CustomFields []*CustomField `json:"customFields"`
	FieldSets    []*FieldSet    `json:"fieldSets"`
	// Template of the contact in customerOS.
	Template *EntityTemplate `json:"template,omitempty"`
	// Contact owner (user)
	Owner                    *User           `json:"owner,omitempty"`
	TimelineEvents           []TimelineEvent `json:"timelineEvents"`
	TimelineEventsTotalCount int64           `json:"timelineEventsTotalCount"`
}

func (Contact) IsExtensibleEntity()               {}
func (this Contact) GetID() string                { return this.ID }
func (this Contact) GetTemplate() *EntityTemplate { return this.Template }

func (Contact) IsNode() {}

func (Contact) IsMetadataInterface()        {}
func (this Contact) GetMetadata() *Metadata { return this.Metadata }

// Create an individual in customerOS.
// **A `create` object.**
type ContactInput struct {
	// Deprecated
	TemplateID *string `json:"templateId,omitempty"`
	// The prefix of the contact.
	Prefix *string `json:"prefix,omitempty"`
	// The first name of the contact.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact.
	LastName        *string `json:"lastName,omitempty"`
	Name            *string `json:"name,omitempty"`
	Description     *string `json:"description,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	Username        *string `json:"username,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Deprecated
	CustomFields []*CustomFieldInput `json:"customFields,omitempty"`
	// Deprecated
	FieldSets []*FieldSetInput `json:"fieldSets,omitempty"`
	// An email addresses associated with the contact.
	Email *EmailInput `json:"email,omitempty"`
	// A phone number associated with the contact.
	PhoneNumber *PhoneNumberInput `json:"phoneNumber,omitempty"`
	// Deprecated
	OwnerID           *string                       `json:"ownerId,omitempty"`
	ExternalReference *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
	AppSource         *string                       `json:"appSource,omitempty"`
	SocialURL         *string                       `json:"socialUrl,omitempty"`
}

type ContactOrganizationInput struct {
	ContactID      string `json:"contactId"`
	OrganizationID string `json:"organizationId"`
}

type ContactParticipant struct {
	ContactParticipant *Contact `json:"contactParticipant"`
	Type               *string  `json:"type,omitempty"`
}

func (ContactParticipant) IsInteractionEventParticipant() {}

func (ContactParticipant) IsInteractionSessionParticipant() {}

func (ContactParticipant) IsIssueParticipant() {}

func (ContactParticipant) IsMeetingParticipant() {}

type ContactTagInput struct {
	ContactID string            `json:"contactId"`
	Tag       *TagIDOrNameInput `json:"tag"`
}

// Updates data fields associated with an existing customer record in customerOS.
// **An `update` object.**
type ContactUpdateInput struct {
	ID              string  `json:"id"`
	Patch           *bool   `json:"patch,omitempty"`
	FirstName       *string `json:"firstName,omitempty"`
	LastName        *string `json:"lastName,omitempty"`
	Name            *string `json:"name,omitempty"`
	Prefix          *string `json:"prefix,omitempty"`
	Description     *string `json:"description,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	Username        *string `json:"username,omitempty"`
}

// Specifies how many pages of contact information has been returned in the query response.
// **A `response` object.**
type ContactsPage struct {
	// A contact entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*Contact `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (ContactsPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this ContactsPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this ContactsPage) GetTotalElements() int64 { return this.TotalElements }

type Contract struct {
	Metadata                *Metadata          `json:"metadata"`
	BillingDetails          *BillingDetails    `json:"billingDetails,omitempty"`
	ContractEnded           *time.Time         `json:"contractEnded,omitempty"`
	ContractLineItems       []*ServiceLineItem `json:"contractLineItems,omitempty"`
	ContractName            string             `json:"contractName"`
	CommittedPeriodInMonths *int64             `json:"committedPeriodInMonths,omitempty"`
	ContractSigned          *time.Time         `json:"contractSigned,omitempty"`
	ContractURL             *string            `json:"contractUrl,omitempty"`
	Currency                *Currency          `json:"currency,omitempty"`
	CreatedBy               *User              `json:"createdBy,omitempty"`
	ExternalLinks           []*ExternalSystem  `json:"externalLinks"`
	BillingEnabled          bool               `json:"billingEnabled"`
	Opportunities           []*Opportunity     `json:"opportunities,omitempty"`
	Owner                   *User              `json:"owner,omitempty"`
	ServiceStarted          *time.Time         `json:"serviceStarted,omitempty"`
	ContractStatus          ContractStatus     `json:"contractStatus"`
	AutoRenew               bool               `json:"autoRenew"`
	Approved                bool               `json:"approved"`
	Attachments             []*Attachment      `json:"attachments,omitempty"`
	Invoices                []*Invoice         `json:"invoices"`
	UpcomingInvoices        []*Invoice         `json:"upcomingInvoices"`
	Ltv                     float64            `json:"ltv"`
	// Deprecated, use committedPeriodInMonths instead.
	CommittedPeriods *int64 `json:"committedPeriods,omitempty"`
	// Deprecated, use committedPeriodInMonths instead.
	ContractRenewalCycle ContractRenewalCycle `json:"contractRenewalCycle"`
	// Deprecated, use contractStatus instead.
	Status ContractStatus `json:"status"`
	// Deprecated, use serviceStarted instead.
	ServiceStartedAt *time.Time `json:"serviceStartedAt,omitempty"`
	// Deprecated, use contractName instead.
	Name string `json:"name"`
	// Deprecated, use contractSigned instead.
	SignedAt *time.Time `json:"signedAt,omitempty"`
	// Deprecated, use contractRenewalCycle instead.
	RenewalCycle ContractRenewalCycle `json:"renewalCycle"`
	// Deprecated, use billingDetails instead.
	OrganizationLegalName *string `json:"organizationLegalName,omitempty"`
	// Deprecated, use billingDetails instead.
	InvoiceEmail *string `json:"invoiceEmail,omitempty"`
	// Deprecated, use metadata instead.
	ID string `json:"id"`
	// Deprecated, use metadata instead.
	CreatedAt time.Time `json:"createdAt"`
	// Deprecated, use metadata instead.
	UpdatedAt time.Time `json:"updatedAt"`
	// Deprecated, use metadata instead.
	Source DataSource `json:"source"`
	// Deprecated, use metadata instead.
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	// Deprecated, use metadata instead.
	AppSource string `json:"appSource"`
	// Deprecated, use committedPeriods instead.
	RenewalPeriods *int64 `json:"renewalPeriods,omitempty"`
	// Deprecated, use contractEnded instead.
	EndedAt *time.Time `json:"endedAt,omitempty"`
	// Deprecated, use contractLineItems instead.
	ServiceLineItems []*ServiceLineItem `json:"serviceLineItems,omitempty"`
	// Deprecated, use billingDetails instead.
	InvoiceNote *string `json:"invoiceNote,omitempty"`
	// Deprecated, use billingDetails instead.
	BillingCycle *ContractBillingCycle `json:"billingCycle,omitempty"`
	// Deprecated, use billingDetails instead.
	InvoicingStartDate *time.Time `json:"invoicingStartDate,omitempty"`
	// Deprecated, use billingDetails instead.
	AddressLine1 *string `json:"addressLine1,omitempty"`
	// Deprecated, use billingDetails instead.
	AddressLine2 *string `json:"addressLine2,omitempty"`
	// Deprecated, use billingDetails instead.
	Zip *string `json:"zip,omitempty"`
	// Deprecated, use billingDetails instead.
	Locality *string `json:"locality,omitempty"`
	// Deprecated, use billingDetails instead.
	Country *string `json:"country,omitempty"`
}

func (Contract) IsMetadataInterface()        {}
func (this Contract) GetMetadata() *Metadata { return this.Metadata }

type ContractInput struct {
	OrganizationID          string     `json:"organizationId"`
	ContractName            *string    `json:"contractName,omitempty"`
	CommittedPeriodInMonths *int64     `json:"committedPeriodInMonths,omitempty"`
	AppSource               *string    `json:"appSource,omitempty"`
	ContractURL             *string    `json:"contractUrl,omitempty"`
	ServiceStarted          *time.Time `json:"serviceStarted,omitempty"`
	ContractSigned          *time.Time `json:"contractSigned,omitempty"`
	Currency                *Currency  `json:"currency,omitempty"`
	BillingEnabled          *bool      `json:"billingEnabled,omitempty"`
	AutoRenew               *bool      `json:"autoRenew,omitempty"`
	DueDays                 *int64     `json:"dueDays,omitempty"`
	Approved                *bool      `json:"approved,omitempty"`
	// Deprecated, use committedPeriodInMonths instead.
	ContractRenewalCycle *ContractRenewalCycle `json:"contractRenewalCycle,omitempty"`
	// Deprecated, use committedPeriodInMonths instead.
	CommittedPeriods *int64 `json:"committedPeriods,omitempty"`
	// Deprecated
	InvoicingStartDate *time.Time `json:"invoicingStartDate,omitempty"`
	// Deprecated
	ExternalReference *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
	// Deprecated
	BillingCycle *ContractBillingCycle `json:"billingCycle,omitempty"`
	// Deprecated
	RenewalPeriods *int64 `json:"renewalPeriods,omitempty"`
	// Deprecated
	RenewalCycle *ContractRenewalCycle `json:"renewalCycle,omitempty"`
	// Deprecated
	SignedAt *time.Time `json:"signedAt,omitempty"`
	// Deprecated
	ServiceStartedAt *time.Time `json:"serviceStartedAt,omitempty"`
	// Deprecated
	Name *string `json:"name,omitempty"`
}

type ContractPage struct {
	Content        []*Contract `json:"content"`
	TotalPages     int         `json:"totalPages"`
	TotalElements  int64       `json:"totalElements"`
	TotalAvailable int64       `json:"totalAvailable"`
}

func (ContractPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this ContractPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this ContractPage) GetTotalElements() int64 { return this.TotalElements }

type ContractRenewalInput struct {
	ContractID  string     `json:"contractId"`
	RenewalDate *time.Time `json:"renewalDate,omitempty"`
}

type ContractUpdateInput struct {
	ContractID              string               `json:"contractId"`
	Patch                   *bool                `json:"patch,omitempty"`
	ContractName            *string              `json:"contractName,omitempty"`
	ContractURL             *string              `json:"contractUrl,omitempty"`
	CommittedPeriodInMonths *int64               `json:"committedPeriodInMonths,omitempty"`
	ServiceStarted          *time.Time           `json:"serviceStarted,omitempty"`
	ContractSigned          *time.Time           `json:"contractSigned,omitempty"`
	ContractEnded           *time.Time           `json:"contractEnded,omitempty"`
	Currency                *Currency            `json:"currency,omitempty"`
	BillingDetails          *BillingDetailsInput `json:"billingDetails,omitempty"`
	AppSource               *string              `json:"appSource,omitempty"`
	BillingEnabled          *bool                `json:"billingEnabled,omitempty"`
	AutoRenew               *bool                `json:"autoRenew,omitempty"`
	Approved                *bool                `json:"approved,omitempty"`
	// Deprecated, use committedPeriodInMonths instead.
	ContractRenewalCycle *ContractRenewalCycle `json:"contractRenewalCycle,omitempty"`
	// Deprecated, use committedPeriodInMonths instead.
	CommittedPeriods *int64 `json:"committedPeriods,omitempty"`
	// Deprecated
	CanPayWithCard *bool `json:"canPayWithCard,omitempty"`
	// Deprecated
	CanPayWithDirectDebit *bool `json:"canPayWithDirectDebit,omitempty"`
	// Deprecated
	CanPayWithBankTransfer *bool `json:"canPayWithBankTransfer,omitempty"`
	// Deprecated
	InvoicingStartDate *time.Time `json:"invoicingStartDate,omitempty"`
	// Deprecated
	AddressLine1 *string `json:"addressLine1,omitempty"`
	// Deprecated
	AddressLine2 *string `json:"addressLine2,omitempty"`
	// Deprecated
	Locality *string `json:"locality,omitempty"`
	// Deprecated
	Country *string `json:"country,omitempty"`
	// Deprecated
	Zip *string `json:"zip,omitempty"`
	// Deprecated
	BillingCycle *ContractBillingCycle `json:"billingCycle,omitempty"`
	// Deprecated
	InvoiceNote *string `json:"invoiceNote,omitempty"`
	// Deprecated
	EndedAt *time.Time `json:"endedAt,omitempty"`
	// Deprecated
	RenewalPeriods *int64 `json:"renewalPeriods,omitempty"`
	// Deprecated
	InvoiceEmail *string `json:"invoiceEmail,omitempty"`
	// Deprecated
	OrganizationLegalName *string `json:"organizationLegalName,omitempty"`
	// Deprecated
	RenewalCycle *ContractRenewalCycle `json:"renewalCycle,omitempty"`
	// Deprecated
	SignedAt *time.Time `json:"signedAt,omitempty"`
	// Deprecated
	ServiceStartedAt *time.Time `json:"serviceStartedAt,omitempty"`
	// Deprecated
	Name *string `json:"name,omitempty"`
}

type Country struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CodeA2    string `json:"codeA2"`
	CodeA3    string `json:"codeA3"`
	PhoneCode string `json:"phoneCode"`
}

// Describes a custom, user-defined field associated with a `Contact`.
// **A `return` object.**
type CustomField struct {
	// The unique ID associated with the custom field.
	// **Required**
	ID string `json:"id"`
	// The name of the custom field.
	// **Required**
	Name string `json:"name"`
	// Datatype of the custom field.
	// **Required**
	Datatype CustomFieldDataType `json:"datatype"`
	// The value of the custom field.
	// **Required**
	Value graph.AnyTypeValue `json:"value"`
	// The source of the custom field value
	Source    DataSource           `json:"source"`
	CreatedAt time.Time            `json:"createdAt"`
	UpdatedAt time.Time            `json:"updatedAt"`
	Template  *CustomFieldTemplate `json:"template,omitempty"`
}

func (CustomField) IsNode()            {}
func (this CustomField) GetID() string { return this.ID }

type CustomFieldEntityType struct {
	ID         string     `json:"id"`
	EntityType EntityType `json:"entityType"`
}

// Describes a custom, user-defined field associated with a `Contact` of type String.
// **A `create` object.**
type CustomFieldInput struct {
	// Deprecated
	ID *string `json:"id,omitempty"`
	// The name of the custom field.
	Name *string `json:"name,omitempty"`
	// Datatype of the custom field.
	Datatype *CustomFieldDataType `json:"datatype,omitempty"`
	// The value of the custom field.
	// **Required**
	Value      graph.AnyTypeValue `json:"value"`
	TemplateID *string            `json:"templateId,omitempty"`
}

type CustomFieldTemplate struct {
	ID        string                  `json:"id"`
	CreatedAt time.Time               `json:"createdAt"`
	UpdatedAt time.Time               `json:"updatedAt"`
	Name      string                  `json:"name"`
	Type      CustomFieldTemplateType `json:"type"`
	Order     int                     `json:"order"`
	Mandatory bool                    `json:"mandatory"`
	Length    *int                    `json:"length,omitempty"`
	Min       *int                    `json:"min,omitempty"`
	Max       *int                    `json:"max,omitempty"`
}

func (CustomFieldTemplate) IsNode()            {}
func (this CustomFieldTemplate) GetID() string { return this.ID }

type CustomFieldTemplateInput struct {
	Name      string                  `json:"name"`
	Type      CustomFieldTemplateType `json:"type"`
	Order     int                     `json:"order"`
	Mandatory *bool                   `json:"mandatory,omitempty"`
	Length    *int                    `json:"length,omitempty"`
	Min       *int                    `json:"min,omitempty"`
	Max       *int                    `json:"max,omitempty"`
}

// Describes a custom, user-defined field associated with a `Contact`.
// **An `update` object.**
type CustomFieldUpdateInput struct {
	// The unique ID associated with the custom field.
	// **Required**
	ID string `json:"id"`
	// The name of the custom field.
	// **Required**
	Name string `json:"name"`
	// Datatype of the custom field.
	// **Required**
	Datatype CustomFieldDataType `json:"datatype"`
	// The value of the custom field.
	// **Required**
	Value graph.AnyTypeValue `json:"value"`
}

type CustomerContact struct {
	ID    string         `json:"id"`
	Email *CustomerEmail `json:"email"`
}

type CustomerContactInput struct {
	// The prefix of the contact.
	Prefix *string `json:"prefix,omitempty"`
	// The first name of the contact.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact.
	LastName    *string `json:"lastName,omitempty"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Timezone    *string `json:"timezone,omitempty"`
	// An email addresses associted with the contact.
	Email *EmailInput `json:"email,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	AppSource *string    `json:"appSource,omitempty"`
}

type CustomerEmail struct {
	ID string `json:"id"`
}

type CustomerJobRole struct {
	ID string `json:"id"`
}

type CustomerUser struct {
	ID      string           `json:"id"`
	JobRole *CustomerJobRole `json:"jobRole"`
}

type DashboardARRBreakdown struct {
	ArrBreakdown       float64                          `json:"arrBreakdown"`
	IncreasePercentage string                           `json:"increasePercentage"`
	PerMonth           []*DashboardARRBreakdownPerMonth `json:"perMonth"`
}

type DashboardARRBreakdownPerMonth struct {
	Year            int     `json:"year"`
	Month           int     `json:"month"`
	NewlyContracted float64 `json:"newlyContracted"`
	Renewals        float64 `json:"renewals"`
	Upsells         float64 `json:"upsells"`
	Downgrades      float64 `json:"downgrades"`
	Cancellations   float64 `json:"cancellations"`
	Churned         float64 `json:"churned"`
}

type DashboardCustomerMap struct {
	OrganizationID     string                    `json:"organizationId"`
	Organization       *Organization             `json:"organization"`
	State              DashboardCustomerMapState `json:"state"`
	Arr                float64                   `json:"arr"`
	ContractSignedDate time.Time                 `json:"contractSignedDate"`
}

type DashboardGrossRevenueRetention struct {
	GrossRevenueRetention float64 `json:"grossRevenueRetention"`
	// Deprecated
	IncreasePercentage      string                                    `json:"increasePercentage"`
	IncreasePercentageValue float64                                   `json:"increasePercentageValue"`
	PerMonth                []*DashboardGrossRevenueRetentionPerMonth `json:"perMonth"`
}

type DashboardGrossRevenueRetentionPerMonth struct {
	Year       int     `json:"year"`
	Month      int     `json:"month"`
	Percentage float64 `json:"percentage"`
}

type DashboardMRRPerCustomer struct {
	MrrPerCustomer     float64                            `json:"mrrPerCustomer"`
	IncreasePercentage string                             `json:"increasePercentage"`
	PerMonth           []*DashboardMRRPerCustomerPerMonth `json:"perMonth"`
}

type DashboardMRRPerCustomerPerMonth struct {
	Year  int     `json:"year"`
	Month int     `json:"month"`
	Value float64 `json:"value"`
}

type DashboardNewCustomers struct {
	ThisMonthCount              int                              `json:"thisMonthCount"`
	ThisMonthIncreasePercentage string                           `json:"thisMonthIncreasePercentage"`
	PerMonth                    []*DashboardNewCustomersPerMonth `json:"perMonth"`
}

type DashboardNewCustomersPerMonth struct {
	Year  int `json:"year"`
	Month int `json:"month"`
	Count int `json:"count"`
}

type DashboardOnboardingCompletion struct {
	CompletionPercentage float64                                  `json:"completionPercentage"`
	IncreasePercentage   float64                                  `json:"increasePercentage"`
	PerMonth             []*DashboardOnboardingCompletionPerMonth `json:"perMonth"`
}

type DashboardOnboardingCompletionPerMonth struct {
	Year  int     `json:"year"`
	Month int     `json:"month"`
	Value float64 `json:"value"`
}

type DashboardPeriodInput struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

type DashboardRetentionRate struct {
	RetentionRate float64 `json:"retentionRate"`
	// Deprecated
	IncreasePercentage      string                            `json:"increasePercentage"`
	IncreasePercentageValue float64                           `json:"increasePercentageValue"`
	PerMonth                []*DashboardRetentionRatePerMonth `json:"perMonth"`
}

type DashboardRetentionRatePerMonth struct {
	Year       int `json:"year"`
	Month      int `json:"month"`
	RenewCount int `json:"renewCount"`
	ChurnCount int `json:"churnCount"`
}

type DashboardRevenueAtRisk struct {
	HighConfidence float64 `json:"highConfidence"`
	AtRisk         float64 `json:"atRisk"`
}

type DashboardTimeToOnboard struct {
	TimeToOnboard      *float64                          `json:"timeToOnboard,omitempty"`
	IncreasePercentage *float64                          `json:"increasePercentage,omitempty"`
	PerMonth           []*DashboardTimeToOnboardPerMonth `json:"perMonth"`
}

type DashboardTimeToOnboardPerMonth struct {
	Year  int     `json:"year"`
	Month int     `json:"month"`
	Value float64 `json:"value"`
}

type DeleteResponse struct {
	Accepted  bool `json:"accepted"`
	Completed bool `json:"completed"`
}

// Describes an email address associated with a `Contact` in customerOS.
// **A `return` object.**
type Email struct {
	// The unique ID associated with the contact in customerOS.
	// **Required**
	ID string `json:"id"`
	// An email address assocaited with the contact in customerOS.
	Email                  *string                 `json:"email,omitempty"`
	RawEmail               *string                 `json:"rawEmail,omitempty"`
	EmailValidationDetails *EmailValidationDetails `json:"emailValidationDetails"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary       bool            `json:"primary"`
	Source        DataSource      `json:"source"`
	SourceOfTruth DataSource      `json:"sourceOfTruth"`
	AppSource     string          `json:"appSource"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
	Users         []*User         `json:"users"`
	Contacts      []*Contact      `json:"contacts"`
	Organizations []*Organization `json:"organizations"`
}

// Describes an email address associated with a `Contact` in customerOS.
// **A `create` object.**
type EmailInput struct {
	// An email address associated with the contact in customerOS.
	// **Required.**
	Email string `json:"email"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary   *bool   `json:"primary,omitempty"`
	AppSource *string `json:"appSource,omitempty"`
}

type EmailParticipant struct {
	EmailParticipant *Email  `json:"emailParticipant"`
	Type             *string `json:"type,omitempty"`
}

func (EmailParticipant) IsInteractionEventParticipant() {}

func (EmailParticipant) IsInteractionSessionParticipant() {}

func (EmailParticipant) IsMeetingParticipant() {}

// Describes an email address associated with a `Contact` in customerOS.
// **An `update` object.**
type EmailRelationUpdateInput struct {
	// An email address assocaited with the contact in customerOS.
	// **Required.**
	ID string `json:"id"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary *bool `json:"primary,omitempty"`
	// Deprecated
	Email *string `json:"email,omitempty"`
}

type EmailUpdateAddressInput struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

type EmailValidationDetails struct {
	Verified          bool              `json:"verified"`
	VerifyingCheckAll bool              `json:"verifyingCheckAll"`
	IsValidSyntax     *bool             `json:"isValidSyntax,omitempty"`
	IsRisky           *bool             `json:"isRisky,omitempty"`
	IsFirewalled      *bool             `json:"isFirewalled,omitempty"`
	Provider          *string           `json:"provider,omitempty"`
	Firewall          *string           `json:"firewall,omitempty"`
	IsCatchAll        *bool             `json:"isCatchAll,omitempty"`
	CanConnectSMTP    *bool             `json:"canConnectSmtp,omitempty"`
	IsMailboxFull     *bool             `json:"isMailboxFull,omitempty"`
	IsRoleAccount     *bool             `json:"isRoleAccount,omitempty"`
	IsFreeAccount     *bool             `json:"isFreeAccount,omitempty"`
	SMTPSuccess       *bool             `json:"smtpSuccess,omitempty"`
	Deliverable       *EmailDeliverable `json:"deliverable,omitempty"`
	IsPrimaryDomain   *bool             `json:"isPrimaryDomain,omitempty"`
	PrimaryDomain     *string           `json:"primaryDomain,omitempty"`
	AlternateEmail    *string           `json:"alternateEmail,omitempty"`
	IsDeliverable     *bool             `json:"isDeliverable,omitempty"`
}

type EntityTemplate struct {
	ID                   string                   `json:"id"`
	Version              int                      `json:"version"`
	Name                 string                   `json:"name"`
	Extends              *EntityTemplateExtension `json:"extends,omitempty"`
	FieldSetTemplates    []*FieldSetTemplate      `json:"fieldSetTemplates"`
	CustomFieldTemplates []*CustomFieldTemplate   `json:"customFieldTemplates"`
	CreatedAt            time.Time                `json:"createdAt"`
	UpdatedAt            time.Time                `json:"updatedAt"`
}

func (EntityTemplate) IsNode()            {}
func (this EntityTemplate) GetID() string { return this.ID }

type EntityTemplateInput struct {
	Name                      string                      `json:"name"`
	Extends                   *EntityTemplateExtension    `json:"extends,omitempty"`
	FieldSetTemplateInputs    []*FieldSetTemplateInput    `json:"fieldSetTemplateInputs,omitempty"`
	CustomFieldTemplateInputs []*CustomFieldTemplateInput `json:"customFieldTemplateInputs,omitempty"`
}

type ExternalSystem struct {
	Type           ExternalSystemType `json:"type"`
	SyncDate       *time.Time         `json:"syncDate,omitempty"`
	ExternalID     *string            `json:"externalId,omitempty"`
	ExternalURL    *string            `json:"externalUrl,omitempty"`
	ExternalSource *string            `json:"externalSource,omitempty"`
}

type ExternalSystemInput struct {
	Name string `json:"name"`
}

type ExternalSystemInstance struct {
	Type          ExternalSystemType           `json:"type"`
	StripeDetails *ExternalSystemStripeDetails `json:"stripeDetails,omitempty"`
}

type ExternalSystemReferenceInput struct {
	ExternalID     string             `json:"externalId"`
	SyncDate       *time.Time         `json:"syncDate,omitempty"`
	Type           ExternalSystemType `json:"type"`
	ExternalURL    *string            `json:"externalUrl,omitempty"`
	ExternalSource *string            `json:"externalSource,omitempty"`
}

type ExternalSystemStripeDetails struct {
	PaymentMethodTypes []string `json:"paymentMethodTypes"`
}

type FieldSet struct {
	ID           string            `json:"id"`
	Name         string            `json:"name"`
	CreatedAt    time.Time         `json:"createdAt"`
	UpdatedAt    time.Time         `json:"updatedAt"`
	CustomFields []*CustomField    `json:"customFields"`
	Template     *FieldSetTemplate `json:"template,omitempty"`
	Source       DataSource        `json:"source"`
}

type FieldSetInput struct {
	ID           *string             `json:"id,omitempty"`
	Name         string              `json:"name"`
	CustomFields []*CustomFieldInput `json:"customFields,omitempty"`
	TemplateID   *string             `json:"templateId,omitempty"`
}

type FieldSetTemplate struct {
	ID                   string                 `json:"id"`
	CreatedAt            time.Time              `json:"createdAt"`
	UpdatedAt            time.Time              `json:"updatedAt"`
	Name                 string                 `json:"name"`
	Order                int                    `json:"order"`
	CustomFieldTemplates []*CustomFieldTemplate `json:"customFieldTemplates"`
}

func (FieldSetTemplate) IsNode()            {}
func (this FieldSetTemplate) GetID() string { return this.ID }

type FieldSetTemplateInput struct {
	Name                      string                      `json:"name"`
	Order                     int                         `json:"order"`
	CustomFieldTemplateInputs []*CustomFieldTemplateInput `json:"customFieldTemplateInputs,omitempty"`
}

type FieldSetUpdateInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Filter struct {
	Not    *Filter     `json:"NOT,omitempty"`
	And    []*Filter   `json:"AND,omitempty"`
	Or     []*Filter   `json:"OR,omitempty"`
	Filter *FilterItem `json:"filter,omitempty"`
}

type FilterItem struct {
	Property      string             `json:"property"`
	Operation     ComparisonOperator `json:"operation"`
	Value         graph.AnyTypeValue `json:"value"`
	CaseSensitive *bool              `json:"caseSensitive,omitempty"`
	IncludeEmpty  *bool              `json:"includeEmpty,omitempty"`
}

type Flow struct {
	Metadata    *Metadata       `json:"metadata"`
	Name        string          `json:"name"`
	Description string          `json:"description"`
	Status      FlowStatus      `json:"status"`
	Sequences   []*FlowSequence `json:"sequences"`
}

func (Flow) IsMetadataInterface()        {}
func (this Flow) GetMetadata() *Metadata { return this.Metadata }

type FlowSequence struct {
	Metadata    *Metadata              `json:"metadata"`
	Name        string                 `json:"name"`
	Description string                 `json:"description"`
	Status      FlowSequenceStatus     `json:"status"`
	Flow        *Flow                  `json:"flow"`
	Steps       []*FlowSequenceStep    `json:"steps"`
	Contacts    []*FlowSequenceContact `json:"contacts"`
	Senders     []*FlowSequenceSender  `json:"senders"`
}

func (FlowSequence) IsMetadataInterface()        {}
func (this FlowSequence) GetMetadata() *Metadata { return this.Metadata }

type FlowSequenceContact struct {
	Metadata *Metadata `json:"metadata"`
	Contact  *Contact  `json:"contact"`
	Email    *Email    `json:"email"`
}

func (FlowSequenceContact) IsMetadataInterface()        {}
func (this FlowSequenceContact) GetMetadata() *Metadata { return this.Metadata }

type FlowSequenceCreateInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	FlowID      *string `json:"flowId,omitempty"`
	FlowName    *string `json:"flowName,omitempty"`
}

type FlowSequenceSender struct {
	Metadata *Metadata `json:"metadata"`
	Mailbox  string    `json:"mailbox"`
}

func (FlowSequenceSender) IsMetadataInterface()        {}
func (this FlowSequenceSender) GetMetadata() *Metadata { return this.Metadata }

type FlowSequenceStep struct {
	Metadata *Metadata                `json:"metadata"`
	Name     string                   `json:"name"`
	Status   FlowSequenceStepStatus   `json:"status"`
	Type     FlowSequenceStepType     `json:"type"`
	Subtype  *FlowSequenceStepSubtype `json:"subtype,omitempty"`
	Body     string                   `json:"body"`
}

func (FlowSequenceStep) IsMetadataInterface()        {}
func (this FlowSequenceStep) GetMetadata() *Metadata { return this.Metadata }

type FlowSequenceUpdateInput struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type GCliAttributeKeyValuePair struct {
	Key     string  `json:"key"`
	Value   string  `json:"value"`
	Display *string `json:"display,omitempty"`
}

type GCliItem struct {
	ID      string                       `json:"id"`
	Type    GCliSearchResultType         `json:"type"`
	Display string                       `json:"display"`
	Data    []*GCliAttributeKeyValuePair `json:"data,omitempty"`
}

type GlobalCache struct {
	User                *User                    `json:"user"`
	IsOwner             bool                     `json:"isOwner"`
	InactiveEmailTokens []*GlobalCacheEmailToken `json:"inactiveEmailTokens"`
	ActiveEmailTokens   []*GlobalCacheEmailToken `json:"activeEmailTokens"`
	Mailboxes           []string                 `json:"mailboxes"`
	GCliCache           []*GCliItem              `json:"gCliCache"`
	MinARRForecastValue float64                  `json:"minARRForecastValue"`
	MaxARRForecastValue float64                  `json:"maxARRForecastValue"`
	ContractsExist      bool                     `json:"contractsExist"`
	CdnLogoURL          string                   `json:"cdnLogoUrl"`
}

type GlobalCacheEmailToken struct {
	Email    string `json:"email"`
	Provider string `json:"provider"`
}

type InteractionEvent struct {
	ID                           string                        `json:"id"`
	CreatedAt                    time.Time                     `json:"createdAt"`
	CustomerOSInternalIdentifier *string                       `json:"customerOSInternalIdentifier,omitempty"`
	EventIdentifier              *string                       `json:"eventIdentifier,omitempty"`
	Channel                      string                        `json:"channel"`
	Content                      *string                       `json:"content,omitempty"`
	ContentType                  *string                       `json:"contentType,omitempty"`
	ChannelData                  *string                       `json:"channelData,omitempty"`
	InteractionSession           *InteractionSession           `json:"interactionSession,omitempty"`
	Issue                        *Issue                        `json:"issue,omitempty"`
	Meeting                      *Meeting                      `json:"meeting,omitempty"`
	SentBy                       []InteractionEventParticipant `json:"sentBy"`
	SentTo                       []InteractionEventParticipant `json:"sentTo"`
	RepliesTo                    *InteractionEvent             `json:"repliesTo,omitempty"`
	Includes                     []*Attachment                 `json:"includes"`
	Actions                      []*Action                     `json:"actions,omitempty"`
	ActionItems                  []*ActionItem                 `json:"actionItems,omitempty"`
	Source                       DataSource                    `json:"source"`
	SourceOfTruth                DataSource                    `json:"sourceOfTruth"`
	AppSource                    string                        `json:"appSource"`
	EventType                    *string                       `json:"eventType,omitempty"`
	ExternalLinks                []*ExternalSystem             `json:"externalLinks"`
}

func (InteractionEvent) IsNode()            {}
func (this InteractionEvent) GetID() string { return this.ID }

func (InteractionEvent) IsTimelineEvent() {}

type InteractionSession struct {
	ID            string                          `json:"id"`
	CreatedAt     time.Time                       `json:"createdAt"`
	UpdatedAt     time.Time                       `json:"updatedAt"`
	Identifier    string                          `json:"identifier"`
	Name          string                          `json:"name"`
	Status        string                          `json:"status"`
	Type          *string                         `json:"type,omitempty"`
	Channel       *string                         `json:"channel,omitempty"`
	ChannelData   *string                         `json:"channelData,omitempty"`
	Source        DataSource                      `json:"source"`
	SourceOfTruth DataSource                      `json:"sourceOfTruth"`
	AppSource     string                          `json:"appSource"`
	Events        []*InteractionEvent             `json:"events"`
	AttendedBy    []InteractionSessionParticipant `json:"attendedBy"`
}

func (InteractionSession) IsNode()            {}
func (this InteractionSession) GetID() string { return this.ID }

func (InteractionSession) IsTimelineEvent() {}

type Invoice struct {
	Metadata           *Metadata      `json:"metadata"`
	Organization       *Organization  `json:"organization"`
	Contract           *Contract      `json:"contract"`
	DryRun             bool           `json:"dryRun"`
	Postpaid           bool           `json:"postpaid"`
	OffCycle           bool           `json:"offCycle"`
	Preview            bool           `json:"preview"`
	AmountDue          float64        `json:"amountDue"`
	AmountPaid         float64        `json:"amountPaid"`
	AmountRemaining    float64        `json:"amountRemaining"`
	InvoiceNumber      string         `json:"invoiceNumber"`
	InvoicePeriodStart time.Time      `json:"invoicePeriodStart"`
	InvoicePeriodEnd   time.Time      `json:"invoicePeriodEnd"`
	InvoiceURL         string         `json:"invoiceUrl"`
	Due                time.Time      `json:"due"`
	Issued             time.Time      `json:"issued"`
	Currency           string         `json:"currency"`
	RepositoryFileID   string         `json:"repositoryFileId"`
	InvoiceLineItems   []*InvoiceLine `json:"invoiceLineItems"`
	Status             *InvoiceStatus `json:"status,omitempty"`
	Note               *string        `json:"note,omitempty"`
	// Deprecated
	DomesticPaymentsBankInfo *string `json:"domesticPaymentsBankInfo,omitempty"`
	// Deprecated
	InternationalPaymentsBankInfo *string          `json:"internationalPaymentsBankInfo,omitempty"`
	Customer                      *InvoiceCustomer `json:"customer"`
	Provider                      *InvoiceProvider `json:"provider"`
	Paid                          bool             `json:"paid"`
	Subtotal                      float64          `json:"subtotal"`
	TaxDue                        float64          `json:"taxDue"`
	PaymentLink                   *string          `json:"paymentLink,omitempty"`
	BillingCycleInMonths          int64            `json:"billingCycleInMonths"`
}

func (Invoice) IsMetadataInterface()        {}
func (this Invoice) GetMetadata() *Metadata { return this.Metadata }

type InvoiceCustomer struct {
	Name            *string `json:"name,omitempty"`
	Email           *string `json:"email,omitempty"`
	AddressLine1    *string `json:"addressLine1,omitempty"`
	AddressLine2    *string `json:"addressLine2,omitempty"`
	AddressZip      *string `json:"addressZip,omitempty"`
	AddressLocality *string `json:"addressLocality,omitempty"`
	AddressCountry  *string `json:"addressCountry,omitempty"`
	AddressRegion   *string `json:"addressRegion,omitempty"`
}

type InvoiceLine struct {
	Metadata         *Metadata        `json:"metadata"`
	Description      string           `json:"description"`
	Price            float64          `json:"price"`
	Quantity         int64            `json:"quantity"`
	Subtotal         float64          `json:"subtotal"`
	TaxDue           float64          `json:"taxDue"`
	Total            float64          `json:"total"`
	ContractLineItem *ServiceLineItem `json:"contractLineItem"`
}

func (InvoiceLine) IsMetadataInterface()        {}
func (this InvoiceLine) GetMetadata() *Metadata { return this.Metadata }

type InvoiceLineSimulate struct {
	Key         string  `json:"key"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Quantity    int64   `json:"quantity"`
	Subtotal    float64 `json:"subtotal"`
	TaxDue      float64 `json:"taxDue"`
	Total       float64 `json:"total"`
}

type InvoiceProvider struct {
	LogoURL              *string `json:"logoUrl,omitempty"`
	LogoRepositoryFileID *string `json:"logoRepositoryFileId,omitempty"`
	Name                 *string `json:"name,omitempty"`
	AddressLine1         *string `json:"addressLine1,omitempty"`
	AddressLine2         *string `json:"addressLine2,omitempty"`
	AddressZip           *string `json:"addressZip,omitempty"`
	AddressLocality      *string `json:"addressLocality,omitempty"`
	AddressCountry       *string `json:"addressCountry,omitempty"`
	AddressRegion        *string `json:"addressRegion,omitempty"`
}

type InvoiceSimulate struct {
	Postpaid           bool                   `json:"postpaid"`
	OffCycle           bool                   `json:"offCycle"`
	InvoiceNumber      string                 `json:"invoiceNumber"`
	InvoicePeriodStart time.Time              `json:"invoicePeriodStart"`
	InvoicePeriodEnd   time.Time              `json:"invoicePeriodEnd"`
	Due                time.Time              `json:"due"`
	Issued             time.Time              `json:"issued"`
	Currency           string                 `json:"currency"`
	InvoiceLineItems   []*InvoiceLineSimulate `json:"invoiceLineItems"`
	Note               string                 `json:"note"`
	Customer           *InvoiceCustomer       `json:"customer"`
	Provider           *InvoiceProvider       `json:"provider"`
	Amount             float64                `json:"amount"`
	Subtotal           float64                `json:"subtotal"`
	Total              float64                `json:"total"`
	TaxDue             float64                `json:"taxDue"`
}

type InvoiceSimulateInput struct {
	ContractID   string                             `json:"contractId"`
	ServiceLines []*InvoiceSimulateServiceLineInput `json:"serviceLines"`
}

type InvoiceSimulateServiceLineInput struct {
	Key               string     `json:"key"`
	ServiceLineItemID *string    `json:"serviceLineItemId,omitempty"`
	ParentID          *string    `json:"parentId,omitempty"`
	Description       string     `json:"description"`
	BillingCycle      BilledType `json:"billingCycle"`
	Price             float64    `json:"price"`
	Quantity          int64      `json:"quantity"`
	ServiceStarted    time.Time  `json:"serviceStarted"`
	TaxRate           *float64   `json:"taxRate,omitempty"`
	CloseVersion      *bool      `json:"closeVersion,omitempty"`
}

type InvoiceUpdateInput struct {
	ID     string         `json:"id"`
	Status *InvoiceStatus `json:"status,omitempty"`
	Patch  bool           `json:"patch"`
}

type InvoicesPage struct {
	Content        []*Invoice `json:"content"`
	TotalPages     int        `json:"totalPages"`
	TotalElements  int64      `json:"totalElements"`
	TotalAvailable int64      `json:"totalAvailable"`
}

func (InvoicesPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this InvoicesPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this InvoicesPage) GetTotalElements() int64 { return this.TotalElements }

type Issue struct {
	ID                string              `json:"id"`
	CreatedAt         time.Time           `json:"createdAt"`
	UpdatedAt         time.Time           `json:"updatedAt"`
	Subject           *string             `json:"subject,omitempty"`
	IssueStatus       string              `json:"issueStatus"`
	Priority          *string             `json:"priority,omitempty"`
	Description       *string             `json:"description,omitempty"`
	Tags              []*Tag              `json:"tags,omitempty"`
	InteractionEvents []*InteractionEvent `json:"interactionEvents"`
	Comments          []*Comment          `json:"comments"`
	ExternalLinks     []*ExternalSystem   `json:"externalLinks"`
	SubmittedBy       IssueParticipant    `json:"submittedBy,omitempty"`
	ReportedBy        IssueParticipant    `json:"reportedBy,omitempty"`
	AssignedTo        []IssueParticipant  `json:"assignedTo"`
	FollowedBy        []IssueParticipant  `json:"followedBy"`
	Source            DataSource          `json:"source"`
	SourceOfTruth     DataSource          `json:"sourceOfTruth"`
	AppSource         string              `json:"appSource"`
	// Deprecated: Use issueStatus field instead
	Status string `json:"status"`
}

func (Issue) IsSourceFields()                   {}
func (this Issue) GetID() string                { return this.ID }
func (this Issue) GetSource() DataSource        { return this.Source }
func (this Issue) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this Issue) GetAppSource() string         { return this.AppSource }

func (Issue) IsNode() {}

func (Issue) IsTimelineEvent() {}

type IssueSummaryByStatus struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

// Describes the relationship a Contact has with a Organization.
// **A `return` object**
type JobRole struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	// Organization associated with a Contact.
	// **Required.**
	Organization *Organization `json:"organization,omitempty"`
	Contact      *Contact      `json:"contact,omitempty"`
	// The Contact's job title.
	JobTitle      *string    `json:"jobTitle,omitempty"`
	Primary       bool       `json:"primary"`
	Description   *string    `json:"description,omitempty"`
	Company       *string    `json:"company,omitempty"`
	StartedAt     *time.Time `json:"startedAt,omitempty"`
	EndedAt       *time.Time `json:"endedAt,omitempty"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

// Describes the relationship a Contact has with an Organization.
// **A `create` object**
type JobRoleInput struct {
	OrganizationID *string    `json:"organizationId,omitempty"`
	JobTitle       *string    `json:"jobTitle,omitempty"`
	Primary        *bool      `json:"primary,omitempty"`
	StartedAt      *time.Time `json:"startedAt,omitempty"`
	EndedAt        *time.Time `json:"endedAt,omitempty"`
	AppSource      *string    `json:"appSource,omitempty"`
	Description    *string    `json:"description,omitempty"`
	Company        *string    `json:"company,omitempty"`
}

type JobRoleParticipant struct {
	JobRoleParticipant *JobRole `json:"jobRoleParticipant"`
	Type               *string  `json:"type,omitempty"`
}

func (JobRoleParticipant) IsInteractionEventParticipant() {}

// Describes the relationship a Contact has with an Organization.
// **A `create` object**
type JobRoleUpdateInput struct {
	ID             string     `json:"id"`
	StartedAt      *time.Time `json:"startedAt,omitempty"`
	EndedAt        *time.Time `json:"endedAt,omitempty"`
	OrganizationID *string    `json:"organizationId,omitempty"`
	JobTitle       *string    `json:"jobTitle,omitempty"`
	Primary        *bool      `json:"primary,omitempty"`
	Description    *string    `json:"description,omitempty"`
	Company        *string    `json:"company,omitempty"`
}

type LastTouchpoint struct {
	LastTouchPointAt              *time.Time          `json:"lastTouchPointAt,omitempty"`
	LastTouchPointType            *LastTouchpointType `json:"lastTouchPointType,omitempty"`
	LastTouchPointTimelineEventID *string             `json:"lastTouchPointTimelineEventId,omitempty"`
	LastTouchPointTimelineEvent   TimelineEvent       `json:"lastTouchPointTimelineEvent,omitempty"`
}

type LinkOrganizationsInput struct {
	OrganizationID string  `json:"organizationId"`
	SubsidiaryID   string  `json:"subsidiaryId"`
	Type           *string `json:"type,omitempty"`
}

type LinkedOrganization struct {
	Organization *Organization `json:"organization"`
	Type         *string       `json:"type,omitempty"`
}

type Location struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
	Name          *string    `json:"name,omitempty"`
	RawAddress    *string    `json:"rawAddress,omitempty"`
	Country       *string    `json:"country,omitempty"`
	CountryCodeA2 *string    `json:"countryCodeA2,omitempty"`
	CountryCodeA3 *string    `json:"countryCodeA3,omitempty"`
	Region        *string    `json:"region,omitempty"`
	District      *string    `json:"district,omitempty"`
	Locality      *string    `json:"locality,omitempty"`
	Street        *string    `json:"street,omitempty"`
	Address       *string    `json:"address,omitempty"`
	Address2      *string    `json:"address2,omitempty"`
	Zip           *string    `json:"zip,omitempty"`
	AddressType   *string    `json:"addressType,omitempty"`
	HouseNumber   *string    `json:"houseNumber,omitempty"`
	PostalCode    *string    `json:"postalCode,omitempty"`
	PlusFour      *string    `json:"plusFour,omitempty"`
	Commercial    *bool      `json:"commercial,omitempty"`
	Predirection  *string    `json:"predirection,omitempty"`
	Latitude      *float64   `json:"latitude,omitempty"`
	Longitude     *float64   `json:"longitude,omitempty"`
	TimeZone      *string    `json:"timeZone,omitempty"`
	UtcOffset     *float64   `json:"utcOffset,omitempty"`
}

func (Location) IsSourceFields()                   {}
func (this Location) GetID() string                { return this.ID }
func (this Location) GetSource() DataSource        { return this.Source }
func (this Location) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this Location) GetAppSource() string         { return this.AppSource }

func (Location) IsNode() {}

type LocationUpdateInput struct {
	ID           string   `json:"id"`
	Name         *string  `json:"name,omitempty"`
	RawAddress   *string  `json:"rawAddress,omitempty"`
	Country      *string  `json:"country,omitempty"`
	Region       *string  `json:"region,omitempty"`
	District     *string  `json:"district,omitempty"`
	Locality     *string  `json:"locality,omitempty"`
	Street       *string  `json:"street,omitempty"`
	Address      *string  `json:"address,omitempty"`
	Address2     *string  `json:"address2,omitempty"`
	Zip          *string  `json:"zip,omitempty"`
	AddressType  *string  `json:"addressType,omitempty"`
	HouseNumber  *string  `json:"houseNumber,omitempty"`
	PostalCode   *string  `json:"postalCode,omitempty"`
	PlusFour     *string  `json:"plusFour,omitempty"`
	Commercial   *bool    `json:"commercial,omitempty"`
	Predirection *string  `json:"predirection,omitempty"`
	Latitude     *float64 `json:"latitude,omitempty"`
	Longitude    *float64 `json:"longitude,omitempty"`
	TimeZone     *string  `json:"timeZone,omitempty"`
	UtcOffset    *float64 `json:"utcOffset,omitempty"`
}

type LogEntry struct {
	ID            string            `json:"id"`
	Content       *string           `json:"content,omitempty"`
	ContentType   *string           `json:"contentType,omitempty"`
	CreatedAt     time.Time         `json:"createdAt"`
	UpdatedAt     time.Time         `json:"updatedAt"`
	StartedAt     time.Time         `json:"startedAt"`
	CreatedBy     *User             `json:"createdBy,omitempty"`
	Tags          []*Tag            `json:"tags"`
	Source        DataSource        `json:"source"`
	SourceOfTruth DataSource        `json:"sourceOfTruth"`
	AppSource     string            `json:"appSource"`
	ExternalLinks []*ExternalSystem `json:"externalLinks"`
}

func (LogEntry) IsTimelineEvent() {}

type LogEntryInput struct {
	Content     *string             `json:"content,omitempty"`
	ContentType *string             `json:"contentType,omitempty"`
	Tags        []*TagIDOrNameInput `json:"tags,omitempty"`
	StartedAt   *time.Time          `json:"startedAt,omitempty"`
	AppSource   *string             `json:"appSource,omitempty"`
}

type LogEntryUpdateInput struct {
	Content     *string    `json:"content,omitempty"`
	ContentType *string    `json:"contentType,omitempty"`
	StartedAt   *time.Time `json:"startedAt,omitempty"`
}

type Mailbox struct {
	Mailbox string `json:"mailbox"`
}

type MasterPlan struct {
	ID                string                 `json:"id"`
	CreatedAt         time.Time              `json:"createdAt"`
	UpdatedAt         time.Time              `json:"updatedAt"`
	Name              string                 `json:"name"`
	Source            DataSource             `json:"source"`
	SourceOfTruth     DataSource             `json:"sourceOfTruth"`
	AppSource         string                 `json:"appSource"`
	Retired           bool                   `json:"retired"`
	Milestones        []*MasterPlanMilestone `json:"milestones"`
	RetiredMilestones []*MasterPlanMilestone `json:"retiredMilestones"`
}

func (MasterPlan) IsSourceFields()                   {}
func (this MasterPlan) GetID() string                { return this.ID }
func (this MasterPlan) GetSource() DataSource        { return this.Source }
func (this MasterPlan) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this MasterPlan) GetAppSource() string         { return this.AppSource }

func (MasterPlan) IsNode() {}

type MasterPlanInput struct {
	Name *string `json:"name,omitempty"`
}

type MasterPlanMilestone struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Name          string     `json:"name"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
	Order         int64      `json:"order"`
	DurationHours int64      `json:"durationHours"`
	Optional      bool       `json:"optional"`
	Items         []string   `json:"items"`
	Retired       bool       `json:"retired"`
}

func (MasterPlanMilestone) IsSourceFields()                   {}
func (this MasterPlanMilestone) GetID() string                { return this.ID }
func (this MasterPlanMilestone) GetSource() DataSource        { return this.Source }
func (this MasterPlanMilestone) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this MasterPlanMilestone) GetAppSource() string         { return this.AppSource }

func (MasterPlanMilestone) IsNode() {}

type MasterPlanMilestoneInput struct {
	MasterPlanID  string   `json:"masterPlanId"`
	Name          *string  `json:"name,omitempty"`
	Order         int64    `json:"order"`
	DurationHours int64    `json:"durationHours"`
	Optional      bool     `json:"optional"`
	Items         []string `json:"items"`
}

type MasterPlanMilestoneReorderInput struct {
	MasterPlanID string   `json:"masterPlanId"`
	OrderedIds   []string `json:"orderedIds"`
}

type MasterPlanMilestoneUpdateInput struct {
	MasterPlanID  string   `json:"masterPlanId"`
	ID            string   `json:"id"`
	Name          *string  `json:"name,omitempty"`
	Order         *int64   `json:"order,omitempty"`
	DurationHours *int64   `json:"durationHours,omitempty"`
	Optional      *bool    `json:"optional,omitempty"`
	Retired       *bool    `json:"retired,omitempty"`
	Items         []string `json:"items,omitempty"`
}

type MasterPlanUpdateInput struct {
	ID      string  `json:"id"`
	Name    *string `json:"name,omitempty"`
	Retired *bool   `json:"retired,omitempty"`
}

type Meeting struct {
	ID                 string               `json:"id"`
	Name               *string              `json:"name,omitempty"`
	CreatedAt          time.Time            `json:"createdAt"`
	UpdatedAt          time.Time            `json:"updatedAt"`
	StartedAt          *time.Time           `json:"startedAt,omitempty"`
	EndedAt            *time.Time           `json:"endedAt,omitempty"`
	ConferenceURL      *string              `json:"conferenceUrl,omitempty"`
	MeetingExternalURL *string              `json:"meetingExternalUrl,omitempty"`
	AttendedBy         []MeetingParticipant `json:"attendedBy"`
	CreatedBy          []MeetingParticipant `json:"createdBy"`
	Includes           []*Attachment        `json:"includes"`
	Note               []*Note              `json:"note"`
	Events             []*InteractionEvent  `json:"events"`
	Recording          *Attachment          `json:"recording,omitempty"`
	AppSource          string               `json:"appSource"`
	Source             DataSource           `json:"source"`
	SourceOfTruth      DataSource           `json:"sourceOfTruth"`
	Agenda             *string              `json:"agenda,omitempty"`
	AgendaContentType  *string              `json:"agendaContentType,omitempty"`
	ExternalSystem     []*ExternalSystem    `json:"externalSystem"`
	Status             MeetingStatus        `json:"status"`
}

func (Meeting) IsNode()            {}
func (this Meeting) GetID() string { return this.ID }

func (Meeting) IsTimelineEvent() {}

type MeetingInput struct {
	Name               *string                       `json:"name,omitempty"`
	AttendedBy         []*MeetingParticipantInput    `json:"attendedBy,omitempty"`
	CreatedBy          []*MeetingParticipantInput    `json:"createdBy,omitempty"`
	CreatedAt          *time.Time                    `json:"createdAt,omitempty"`
	StartedAt          *time.Time                    `json:"startedAt,omitempty"`
	EndedAt            *time.Time                    `json:"endedAt,omitempty"`
	ConferenceURL      *string                       `json:"conferenceUrl,omitempty"`
	MeetingExternalURL *string                       `json:"meetingExternalUrl,omitempty"`
	Agenda             *string                       `json:"agenda,omitempty"`
	AgendaContentType  *string                       `json:"agendaContentType,omitempty"`
	Note               *NoteInput                    `json:"note,omitempty"`
	AppSource          *string                       `json:"appSource,omitempty"`
	ExternalSystem     *ExternalSystemReferenceInput `json:"externalSystem,omitempty"`
	Status             *MeetingStatus                `json:"status,omitempty"`
}

type MeetingParticipantInput struct {
	ContactID      *string `json:"contactId,omitempty"`
	UserID         *string `json:"userId,omitempty"`
	OrganizationID *string `json:"organizationId,omitempty"`
}

type MeetingUpdateInput struct {
	Name               *string                       `json:"name,omitempty"`
	StartedAt          *time.Time                    `json:"startedAt,omitempty"`
	EndedAt            *time.Time                    `json:"endedAt,omitempty"`
	ConferenceURL      *string                       `json:"conferenceUrl,omitempty"`
	MeetingExternalURL *string                       `json:"meetingExternalUrl,omitempty"`
	Agenda             *string                       `json:"agenda,omitempty"`
	AgendaContentType  *string                       `json:"agendaContentType,omitempty"`
	Note               *NoteUpdateInput              `json:"note,omitempty"`
	AppSource          *string                       `json:"appSource,omitempty"`
	Status             *MeetingStatus                `json:"status,omitempty"`
	ExternalSystem     *ExternalSystemReferenceInput `json:"externalSystem,omitempty"`
}

// Specifies how many pages of meeting information has been returned in the query response.
// **A `response` object.**
type MeetingsPage struct {
	// A contact entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*Meeting `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (MeetingsPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this MeetingsPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this MeetingsPage) GetTotalElements() int64 { return this.TotalElements }

type Metadata struct {
	ID            string     `json:"id"`
	Created       time.Time  `json:"created"`
	LastUpdated   time.Time  `json:"lastUpdated"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
	// Aggregate version from event store db
	Version *int64 `json:"version,omitempty"`
}

func (Metadata) IsSourceFieldsInterface()          {}
func (this Metadata) GetSource() DataSource        { return this.Source }
func (this Metadata) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this Metadata) GetAppSource() string         { return this.AppSource }

func (Metadata) IsNode()            {}
func (this Metadata) GetID() string { return this.ID }

type Mutation struct {
}

type Note struct {
	ID            string        `json:"id"`
	Content       *string       `json:"content,omitempty"`
	ContentType   *string       `json:"contentType,omitempty"`
	CreatedAt     time.Time     `json:"createdAt"`
	UpdatedAt     time.Time     `json:"updatedAt"`
	CreatedBy     *User         `json:"createdBy,omitempty"`
	Includes      []*Attachment `json:"includes"`
	Source        DataSource    `json:"source"`
	SourceOfTruth DataSource    `json:"sourceOfTruth"`
	AppSource     string        `json:"appSource"`
}

func (Note) IsTimelineEvent() {}

type NoteInput struct {
	Content     *string `json:"content,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
	AppSource   *string `json:"appSource,omitempty"`
}

type NotePage struct {
	Content       []*Note `json:"content"`
	TotalPages    int     `json:"totalPages"`
	TotalElements int64   `json:"totalElements"`
}

func (NotePage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this NotePage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this NotePage) GetTotalElements() int64 { return this.TotalElements }

type NoteUpdateInput struct {
	ID          string  `json:"id"`
	Content     *string `json:"content,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
}

type Offering struct {
	Metadata              *Metadata         `json:"metadata"`
	Name                  string            `json:"name"`
	Active                bool              `json:"active"`
	Type                  *OfferingType     `json:"type,omitempty"`
	PricingModel          *PricingModel     `json:"pricingModel,omitempty"`
	PricingPeriodInMonths int64             `json:"pricingPeriodInMonths"`
	Currency              *Currency         `json:"currency,omitempty"`
	Price                 float64           `json:"price"`
	PriceCalculated       bool              `json:"priceCalculated"`
	Taxable               bool              `json:"taxable"`
	PriceCalculation      *PriceCalculation `json:"priceCalculation"`
	Conditional           bool              `json:"conditional"`
	Conditionals          *Conditionals     `json:"conditionals"`
	ExternalLinks         []*ExternalSystem `json:"externalLinks"`
}

func (Offering) IsMetadataInterface()        {}
func (this Offering) GetMetadata() *Metadata { return this.Metadata }

type OfferingCreateInput struct {
	Name                                   *string          `json:"name,omitempty"`
	Active                                 *bool            `json:"active,omitempty"`
	Type                                   *OfferingType    `json:"type,omitempty"`
	PricingModel                           *PricingModel    `json:"pricingModel,omitempty"`
	PricingPeriodInMonths                  *int64           `json:"pricingPeriodInMonths,omitempty"`
	Currency                               *Currency        `json:"currency,omitempty"`
	Price                                  *float64         `json:"price,omitempty"`
	PriceCalculated                        *bool            `json:"priceCalculated,omitempty"`
	Conditional                            *bool            `json:"conditional,omitempty"`
	Taxable                                *bool            `json:"taxable,omitempty"`
	PriceCalculationType                   *CalculationType `json:"priceCalculationType,omitempty"`
	PriceCalculationRevenueSharePercentage *float64         `json:"priceCalculationRevenueSharePercentage,omitempty"`
	ConditionalsMinimumChargePeriod        *ChargePeriod    `json:"conditionalsMinimumChargePeriod,omitempty"`
	ConditionalsMinimumChargeAmount        *float64         `json:"conditionalsMinimumChargeAmount,omitempty"`
}

type OfferingUpdateInput struct {
	ID                                     string           `json:"id"`
	Name                                   *string          `json:"name,omitempty"`
	Active                                 *bool            `json:"active,omitempty"`
	Type                                   *OfferingType    `json:"type,omitempty"`
	PricingModel                           *PricingModel    `json:"pricingModel,omitempty"`
	PricingPeriodInMonths                  *int64           `json:"pricingPeriodInMonths,omitempty"`
	Currency                               *Currency        `json:"currency,omitempty"`
	Price                                  *float64         `json:"price,omitempty"`
	PriceCalculated                        *bool            `json:"priceCalculated,omitempty"`
	Conditional                            *bool            `json:"conditional,omitempty"`
	Taxable                                *bool            `json:"taxable,omitempty"`
	PriceCalculationType                   *CalculationType `json:"priceCalculationType,omitempty"`
	PriceCalculationRevenueSharePercentage *float64         `json:"priceCalculationRevenueSharePercentage,omitempty"`
	ConditionalsMinimumChargePeriod        *ChargePeriod    `json:"conditionalsMinimumChargePeriod,omitempty"`
	ConditionalsMinimumChargeAmount        *float64         `json:"conditionalsMinimumChargeAmount,omitempty"`
}

type OnboardingDetails struct {
	Status    OnboardingStatus `json:"status"`
	Comments  *string          `json:"comments,omitempty"`
	UpdatedAt *time.Time       `json:"updatedAt,omitempty"`
}

type OnboardingStatusInput struct {
	OrganizationID string           `json:"organizationId"`
	Status         OnboardingStatus `json:"status"`
	Comments       *string          `json:"comments,omitempty"`
}

type Opportunity struct {
	Metadata               *Metadata                    `json:"metadata"`
	Name                   string                       `json:"name"`
	Amount                 float64                      `json:"amount"`
	MaxAmount              float64                      `json:"maxAmount"`
	Currency               *Currency                    `json:"currency,omitempty"`
	LikelihoodRate         int64                        `json:"likelihoodRate"`
	InternalType           InternalType                 `json:"internalType"`
	ExternalType           string                       `json:"externalType"`
	InternalStage          InternalStage                `json:"internalStage"`
	ExternalStage          string                       `json:"externalStage"`
	EstimatedClosedAt      *time.Time                   `json:"estimatedClosedAt,omitempty"`
	GeneralNotes           string                       `json:"generalNotes"`
	NextSteps              string                       `json:"nextSteps"`
	RenewedAt              *time.Time                   `json:"renewedAt,omitempty"`
	RenewalApproved        bool                         `json:"renewalApproved"`
	RenewalLikelihood      OpportunityRenewalLikelihood `json:"renewalLikelihood"`
	RenewalUpdatedByUserID string                       `json:"renewalUpdatedByUserId"`
	RenewalUpdatedByUserAt *time.Time                   `json:"renewalUpdatedByUserAt,omitempty"`
	RenewalAdjustedRate    int64                        `json:"renewalAdjustedRate"`
	Comments               string                       `json:"comments"`
	StageLastUpdated       *time.Time                   `json:"stageLastUpdated,omitempty"`
	Organization           *Organization                `json:"organization,omitempty"`
	CreatedBy              *User                        `json:"createdBy,omitempty"`
	Owner                  *User                        `json:"owner,omitempty"`
	ExternalLinks          []*ExternalSystem            `json:"externalLinks"`
	// Deprecated, use metadata
	ID string `json:"id"`
	// Deprecated, use metadata
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Deprecated, use metadata
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// Deprecated, use metadata
	Source *DataSource `json:"source,omitempty"`
	// Deprecated, use metadata
	SourceOfTruth *DataSource `json:"sourceOfTruth,omitempty"`
	// Deprecated, use metadata
	AppSource *string `json:"appSource,omitempty"`
}

func (Opportunity) IsMetadataInterface()        {}
func (this Opportunity) GetMetadata() *Metadata { return this.Metadata }

type OpportunityCreateInput struct {
	OrganizationID      string        `json:"organizationId"`
	Name                *string       `json:"name,omitempty"`
	InternalType        *InternalType `json:"internalType,omitempty"`
	ExternalType        *string       `json:"externalType,omitempty"`
	ExternalStage       *string       `json:"externalStage,omitempty"`
	EstimatedClosedDate *time.Time    `json:"estimatedClosedDate,omitempty"`
	GeneralNotes        *string       `json:"generalNotes,omitempty"`
	NextSteps           *string       `json:"nextSteps,omitempty"`
	Comments            *string       `json:"comments,omitempty"`
	MaxAmount           *float64      `json:"maxAmount,omitempty"`
	Currency            *Currency     `json:"currency,omitempty"`
	LikelihoodRate      *int64        `json:"likelihoodRate,omitempty"`
}

type OpportunityPage struct {
	Content        []*Opportunity `json:"content"`
	TotalPages     int            `json:"totalPages"`
	TotalElements  int64          `json:"totalElements"`
	TotalAvailable int64          `json:"totalAvailable"`
}

func (OpportunityPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this OpportunityPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this OpportunityPage) GetTotalElements() int64 { return this.TotalElements }

type OpportunityRenewalUpdateAllForOrganizationInput struct {
	OrganizationID      string                        `json:"organizationId"`
	RenewalLikelihood   *OpportunityRenewalLikelihood `json:"renewalLikelihood,omitempty"`
	RenewalAdjustedRate *int64                        `json:"renewalAdjustedRate,omitempty"`
}

type OpportunityRenewalUpdateInput struct {
	OpportunityID       string                        `json:"opportunityId"`
	Amount              *float64                      `json:"amount,omitempty"`
	Comments            *string                       `json:"comments,omitempty"`
	AppSource           *string                       `json:"appSource,omitempty"`
	OwnerUserID         *string                       `json:"ownerUserId,omitempty"`
	RenewalLikelihood   *OpportunityRenewalLikelihood `json:"renewalLikelihood,omitempty"`
	RenewalAdjustedRate *int64                        `json:"renewalAdjustedRate,omitempty"`
	// Deprecated
	Name *string `json:"name,omitempty"`
}

type OpportunityUpdateInput struct {
	OpportunityID       string         `json:"opportunityId"`
	Name                *string        `json:"name,omitempty"`
	Amount              *float64       `json:"amount,omitempty"`
	InternalStage       *InternalStage `json:"internalStage,omitempty"`
	ExternalType        *string        `json:"externalType,omitempty"`
	ExternalStage       *string        `json:"externalStage,omitempty"`
	EstimatedClosedDate *time.Time     `json:"estimatedClosedDate,omitempty"`
	NextSteps           *string        `json:"nextSteps,omitempty"`
	LikelihoodRate      *int64         `json:"likelihoodRate,omitempty"`
	MaxAmount           *float64       `json:"maxAmount,omitempty"`
	Currency            *Currency      `json:"currency,omitempty"`
}

type OrgAccountDetails struct {
	RenewalSummary *RenewalSummary    `json:"renewalSummary,omitempty"`
	Onboarding     *OnboardingDetails `json:"onboarding,omitempty"`
	Churned        *time.Time         `json:"churned,omitempty"`
	Ltv            *float64           `json:"ltv,omitempty"`
	LtvCurrency    *Currency          `json:"ltvCurrency,omitempty"`
}

type Organization struct {
	Metadata                 *Metadata                     `json:"metadata"`
	AccountDetails           *OrgAccountDetails            `json:"accountDetails,omitempty"`
	Contracts                []*Contract                   `json:"contracts,omitempty"`
	Opportunities            []*Opportunity                `json:"opportunities,omitempty"`
	CustomerOsID             string                        `json:"customerOsId"`
	CustomFields             []*CustomField                `json:"customFields"`
	CustomID                 *string                       `json:"customId,omitempty"`
	Description              *string                       `json:"description,omitempty"`
	Domains                  []string                      `json:"domains"`
	SlackChannelID           *string                       `json:"slackChannelId,omitempty"`
	EmployeeGrowthRate       *string                       `json:"employeeGrowthRate,omitempty"`
	Employees                *int64                        `json:"employees,omitempty"`
	Headquarters             *string                       `json:"headquarters,omitempty"`
	Industry                 *string                       `json:"industry,omitempty"`
	IndustryGroup            *string                       `json:"industryGroup,omitempty"`
	LastFundingAmount        *string                       `json:"lastFundingAmount,omitempty"`
	LastFundingRound         *FundingRound                 `json:"lastFundingRound,omitempty"`
	LastTouchpoint           *LastTouchpoint               `json:"lastTouchpoint,omitempty"`
	Locations                []*Location                   `json:"locations"`
	Logo                     *string                       `json:"logo,omitempty"`
	Icon                     *string                       `json:"icon,omitempty"`
	Market                   *Market                       `json:"market,omitempty"`
	Name                     string                        `json:"name"`
	Notes                    *string                       `json:"notes,omitempty"`
	Owner                    *User                         `json:"owner,omitempty"`
	ParentCompanies          []*LinkedOrganization         `json:"parentCompanies"`
	Public                   *bool                         `json:"public,omitempty"`
	SocialMedia              []*Social                     `json:"socialMedia"`
	SubIndustry              *string                       `json:"subIndustry,omitempty"`
	Subsidiaries             []*LinkedOrganization         `json:"subsidiaries"`
	Tags                     []*Tag                        `json:"tags,omitempty"`
	TargetAudience           *string                       `json:"targetAudience,omitempty"`
	TimelineEvents           []TimelineEvent               `json:"timelineEvents"`
	ValueProposition         *string                       `json:"valueProposition,omitempty"`
	Website                  *string                       `json:"website,omitempty"`
	YearFounded              *int64                        `json:"yearFounded,omitempty"`
	Stage                    *OrganizationStage            `json:"stage,omitempty"`
	StageLastUpdated         *time.Time                    `json:"stageLastUpdated,omitempty"`
	Relationship             *OrganizationRelationship     `json:"relationship,omitempty"`
	LeadSource               *string                       `json:"leadSource,omitempty"`
	IcpFit                   bool                          `json:"icpFit"`
	Hide                     bool                          `json:"hide"`
	Contacts                 *ContactsPage                 `json:"contacts"`
	JobRoles                 []*JobRole                    `json:"jobRoles"`
	Emails                   []*Email                      `json:"emails"`
	PhoneNumbers             []*PhoneNumber                `json:"phoneNumbers"`
	SuggestedMergeTo         []*SuggestedMergeOrganization `json:"suggestedMergeTo"`
	FieldSets                []*FieldSet                   `json:"fieldSets"`
	EntityTemplate           *EntityTemplate               `json:"entityTemplate,omitempty"`
	TimelineEventsTotalCount int64                         `json:"timelineEventsTotalCount"`
	ExternalLinks            []*ExternalSystem             `json:"externalLinks"`
	IssueSummaryByStatus     []*IssueSummaryByStatus       `json:"issueSummaryByStatus"`
	ContactCount             int64                         `json:"contactCount"`
	InboundCommsCount        int64                         `json:"inboundCommsCount"`
	OutboundCommsCount       int64                         `json:"outboundCommsCount"`
	// Deprecated, use relationship instead
	IsCustomer *bool `json:"isCustomer,omitempty"`
	// Deprecated
	Socials []*Social `json:"socials"`
	// Deprecated
	IsPublic *bool `json:"isPublic,omitempty"`
	// Deprecated
	Note *string `json:"note,omitempty"`
	// Deprecated
	LogoURL *string `json:"logoUrl,omitempty"`
	// Deprecated
	ID string `json:"id"`
	// Deprecated
	CreatedAt time.Time `json:"createdAt"`
	// Deprecated
	UpdatedAt time.Time `json:"updatedAt"`
	// Deprecated
	Source DataSource `json:"source"`
	// Deprecated
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	// Deprecated
	AppSource string `json:"appSource"`
	// Deprecated
	ReferenceID *string `json:"referenceId,omitempty"`
	// Deprecated
	LastTouchPointAt *time.Time `json:"lastTouchPointAt,omitempty"`
	// Deprecated
	LastTouchPointType *LastTouchpointType `json:"lastTouchPointType,omitempty"`
	// Deprecated
	LastTouchPointTimelineEventID *string `json:"lastTouchPointTimelineEventId,omitempty"`
	// Deprecated
	LastTouchPointTimelineEvent TimelineEvent `json:"lastTouchPointTimelineEvent,omitempty"`
	// Deprecated
	SubsidiaryOf []*LinkedOrganization `json:"subsidiaryOf"`
}

func (Organization) IsMetadataInterface()        {}
func (this Organization) GetMetadata() *Metadata { return this.Metadata }

type OrganizationInput struct {
	// The name of the organization.
	// **Required.**
	CustomID           *string                   `json:"customId,omitempty"`
	Name               *string                   `json:"name,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Notes              *string                   `json:"notes,omitempty"`
	Domains            []string                  `json:"domains,omitempty"`
	Website            *string                   `json:"website,omitempty"`
	Industry           *string                   `json:"industry,omitempty"`
	SubIndustry        *string                   `json:"subIndustry,omitempty"`
	IndustryGroup      *string                   `json:"industryGroup,omitempty"`
	Public             *bool                     `json:"public,omitempty"`
	CustomFields       []*CustomFieldInput       `json:"customFields,omitempty"`
	Market             *Market                   `json:"market,omitempty"`
	Logo               *string                   `json:"logo,omitempty"`
	Icon               *string                   `json:"icon,omitempty"`
	EmployeeGrowthRate *string                   `json:"employeeGrowthRate,omitempty"`
	Headquarters       *string                   `json:"headquarters,omitempty"`
	YearFounded        *int64                    `json:"yearFounded,omitempty"`
	Employees          *int64                    `json:"employees,omitempty"`
	SlackChannelID     *string                   `json:"slackChannelId,omitempty"`
	AppSource          *string                   `json:"appSource,omitempty"`
	Stage              *OrganizationStage        `json:"stage,omitempty"`
	Relationship       *OrganizationRelationship `json:"relationship,omitempty"`
	LeadSource         *string                   `json:"leadSource,omitempty"`
	// Deprecated, use relationship instead
	IsCustomer *bool `json:"isCustomer,omitempty"`
	// Deprecated
	FieldSets []*FieldSetInput `json:"fieldSets,omitempty"`
	// Deprecated
	TemplateID *string `json:"templateId,omitempty"`
	// Deprecated
	IsPublic *bool `json:"isPublic,omitempty"`
	// Deprecated
	ReferenceID *string `json:"referenceId,omitempty"`
	// Deprecated
	Note *string `json:"note,omitempty"`
	// Deprecated
	LogoURL *string `json:"logoUrl,omitempty"`
}

type OrganizationPage struct {
	Content        []*Organization `json:"content"`
	TotalPages     int             `json:"totalPages"`
	TotalElements  int64           `json:"totalElements"`
	TotalAvailable int64           `json:"totalAvailable"`
}

func (OrganizationPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this OrganizationPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this OrganizationPage) GetTotalElements() int64 { return this.TotalElements }

type OrganizationParticipant struct {
	OrganizationParticipant *Organization `json:"organizationParticipant"`
	Type                    *string       `json:"type,omitempty"`
}

func (OrganizationParticipant) IsInteractionEventParticipant() {}

func (OrganizationParticipant) IsIssueParticipant() {}

func (OrganizationParticipant) IsMeetingParticipant() {}

type OrganizationPlan struct {
	ID                string                         `json:"id"`
	CreatedAt         time.Time                      `json:"createdAt"`
	UpdatedAt         time.Time                      `json:"updatedAt"`
	Name              string                         `json:"name"`
	Source            DataSource                     `json:"source"`
	SourceOfTruth     DataSource                     `json:"sourceOfTruth"`
	AppSource         string                         `json:"appSource"`
	Retired           bool                           `json:"retired"`
	Milestones        []*OrganizationPlanMilestone   `json:"milestones"`
	RetiredMilestones []*OrganizationPlanMilestone   `json:"retiredMilestones"`
	StatusDetails     *OrganizationPlanStatusDetails `json:"statusDetails"`
	MasterPlanID      string                         `json:"masterPlanId"`
}

func (OrganizationPlan) IsSourceFields()                   {}
func (this OrganizationPlan) GetID() string                { return this.ID }
func (this OrganizationPlan) GetSource() DataSource        { return this.Source }
func (this OrganizationPlan) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this OrganizationPlan) GetAppSource() string         { return this.AppSource }

func (OrganizationPlan) IsNode() {}

type OrganizationPlanInput struct {
	Name           *string `json:"name,omitempty"`
	MasterPlanID   *string `json:"masterPlanId,omitempty"`
	OrganizationID string  `json:"organizationId"`
}

type OrganizationPlanMilestone struct {
	ID            string                                  `json:"id"`
	CreatedAt     time.Time                               `json:"createdAt"`
	UpdatedAt     time.Time                               `json:"updatedAt"`
	Name          string                                  `json:"name"`
	Source        DataSource                              `json:"source"`
	SourceOfTruth DataSource                              `json:"sourceOfTruth"`
	AppSource     string                                  `json:"appSource"`
	Order         int64                                   `json:"order"`
	DueDate       time.Time                               `json:"dueDate"`
	Optional      bool                                    `json:"optional"`
	Items         []*OrganizationPlanMilestoneItem        `json:"items"`
	Retired       bool                                    `json:"retired"`
	StatusDetails *OrganizationPlanMilestoneStatusDetails `json:"statusDetails"`
	Adhoc         bool                                    `json:"adhoc"`
}

func (OrganizationPlanMilestone) IsSourceFields()                   {}
func (this OrganizationPlanMilestone) GetID() string                { return this.ID }
func (this OrganizationPlanMilestone) GetSource() DataSource        { return this.Source }
func (this OrganizationPlanMilestone) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this OrganizationPlanMilestone) GetAppSource() string         { return this.AppSource }

func (OrganizationPlanMilestone) IsNode() {}

type OrganizationPlanMilestoneInput struct {
	OrganizationPlanID string    `json:"organizationPlanId"`
	Name               *string   `json:"name,omitempty"`
	Order              int64     `json:"order"`
	DueDate            time.Time `json:"dueDate"`
	CreatedAt          time.Time `json:"createdAt"`
	Optional           bool      `json:"optional"`
	Items              []string  `json:"items"`
	OrganizationID     string    `json:"organizationId"`
	Adhoc              bool      `json:"adhoc"`
}

type OrganizationPlanMilestoneItem struct {
	Status    OnboardingPlanMilestoneItemStatus `json:"status"`
	UpdatedAt time.Time                         `json:"updatedAt"`
	Text      string                            `json:"text"`
	UUID      string                            `json:"uuid"`
}

type OrganizationPlanMilestoneItemInput struct {
	Status    OnboardingPlanMilestoneItemStatus `json:"status"`
	UpdatedAt time.Time                         `json:"updatedAt"`
	Text      string                            `json:"text"`
	UUID      *string                           `json:"uuid,omitempty"`
}

type OrganizationPlanMilestoneReorderInput struct {
	OrganizationPlanID string   `json:"organizationPlanId"`
	OrganizationID     string   `json:"organizationId"`
	OrderedIds         []string `json:"orderedIds"`
}

type OrganizationPlanMilestoneStatusDetails struct {
	Status    OnboardingPlanMilestoneStatus `json:"status"`
	UpdatedAt time.Time                     `json:"updatedAt"`
	Text      string                        `json:"text"`
}

type OrganizationPlanMilestoneStatusDetailsInput struct {
	Status    OnboardingPlanMilestoneStatus `json:"status"`
	UpdatedAt time.Time                     `json:"updatedAt"`
	Text      string                        `json:"text"`
}

type OrganizationPlanMilestoneUpdateInput struct {
	OrganizationPlanID string                                       `json:"organizationPlanId"`
	ID                 string                                       `json:"id"`
	Name               *string                                      `json:"name,omitempty"`
	Order              *int64                                       `json:"order,omitempty"`
	DueDate            *time.Time                                   `json:"dueDate,omitempty"`
	UpdatedAt          time.Time                                    `json:"updatedAt"`
	Optional           *bool                                        `json:"optional,omitempty"`
	Retired            *bool                                        `json:"retired,omitempty"`
	Items              []*OrganizationPlanMilestoneItemInput        `json:"items,omitempty"`
	StatusDetails      *OrganizationPlanMilestoneStatusDetailsInput `json:"statusDetails,omitempty"`
	OrganizationID     string                                       `json:"organizationId"`
	Adhoc              *bool                                        `json:"adhoc,omitempty"`
}

type OrganizationPlanStatusDetails struct {
	Status    OnboardingPlanStatus `json:"status"`
	UpdatedAt time.Time            `json:"updatedAt"`
	Text      string               `json:"text"`
}

type OrganizationPlanStatusDetailsInput struct {
	Status    OnboardingPlanStatus `json:"status"`
	UpdatedAt time.Time            `json:"updatedAt"`
	Text      string               `json:"text"`
}

type OrganizationPlanUpdateInput struct {
	ID             string                              `json:"id"`
	Name           *string                             `json:"name,omitempty"`
	Retired        *bool                               `json:"retired,omitempty"`
	StatusDetails  *OrganizationPlanStatusDetailsInput `json:"statusDetails,omitempty"`
	OrganizationID string                              `json:"organizationId"`
}

type OrganizationTagInput struct {
	OrganizationID string            `json:"organizationId"`
	Tag            *TagIDOrNameInput `json:"tag"`
}

type OrganizationUpdateInput struct {
	ID       string  `json:"id"`
	CustomID *string `json:"customId,omitempty"`
	// Deprecated
	Patch              *bool                     `json:"patch,omitempty"`
	Name               *string                   `json:"name,omitempty"`
	Description        *string                   `json:"description,omitempty"`
	Notes              *string                   `json:"notes,omitempty"`
	Website            *string                   `json:"website,omitempty"`
	Industry           *string                   `json:"industry,omitempty"`
	SubIndustry        *string                   `json:"subIndustry,omitempty"`
	IndustryGroup      *string                   `json:"industryGroup,omitempty"`
	Public             *bool                     `json:"public,omitempty"`
	Market             *Market                   `json:"market,omitempty"`
	Employees          *int64                    `json:"employees,omitempty"`
	TargetAudience     *string                   `json:"targetAudience,omitempty"`
	ValueProposition   *string                   `json:"valueProposition,omitempty"`
	LastFundingRound   *FundingRound             `json:"lastFundingRound,omitempty"`
	LastFundingAmount  *string                   `json:"lastFundingAmount,omitempty"`
	Logo               *string                   `json:"logo,omitempty"`
	Icon               *string                   `json:"icon,omitempty"`
	EmployeeGrowthRate *string                   `json:"employeeGrowthRate,omitempty"`
	Headquarters       *string                   `json:"headquarters,omitempty"`
	YearFounded        *int64                    `json:"yearFounded,omitempty"`
	SlackChannelID     *string                   `json:"slackChannelId,omitempty"`
	Stage              *OrganizationStage        `json:"stage,omitempty"`
	Relationship       *OrganizationRelationship `json:"relationship,omitempty"`
	IcpFit             *bool                     `json:"icpFit,omitempty"`
	// Deprecated, use relationship instead
	IsCustomer *bool `json:"isCustomer,omitempty"`
	// Deprecated, use public instead
	IsPublic *bool `json:"isPublic,omitempty"`
	// Deprecated, use logo instead
	LogoURL *string `json:"logoUrl,omitempty"`
	// Deprecated
	Domains []string `json:"domains,omitempty"`
	// Deprecatedm, use notes instead
	Note *string `json:"note,omitempty"`
	// Deprecated, use customId instead
	ReferenceID *string `json:"referenceId,omitempty"`
}

type PageView struct {
	ID             string     `json:"id"`
	StartedAt      time.Time  `json:"startedAt"`
	EndedAt        time.Time  `json:"endedAt"`
	PageTitle      string     `json:"pageTitle"`
	PageURL        string     `json:"pageUrl"`
	Application    string     `json:"application"`
	SessionID      string     `json:"sessionId"`
	OrderInSession int64      `json:"orderInSession"`
	EngagedTime    int64      `json:"engagedTime"`
	Source         DataSource `json:"source"`
	SourceOfTruth  DataSource `json:"sourceOfTruth"`
	AppSource      string     `json:"appSource"`
}

func (PageView) IsNode()            {}
func (this PageView) GetID() string { return this.ID }

func (PageView) IsSourceFields() {}

func (this PageView) GetSource() DataSource        { return this.Source }
func (this PageView) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this PageView) GetAppSource() string         { return this.AppSource }

func (PageView) IsTimelineEvent() {}

// If provided as part of the request, results will be filtered down to the `page` and `limit` specified.
type Pagination struct {
	// The results page to return in the response.
	// **Required.**
	Page int `json:"page"`
	// The maximum number of results in the response.
	// **Required.**
	Limit int `json:"limit"`
}

// Describes a phone number associated with a `Contact` in customerOS.
// **A `return` object.**
type PhoneNumber struct {
	// The unique ID associated with the phone number.
	// **Required**
	ID string `json:"id"`
	// The phone number in e164 format.
	E164           *string  `json:"e164,omitempty"`
	RawPhoneNumber *string  `json:"rawPhoneNumber,omitempty"`
	Validated      *bool    `json:"validated,omitempty"`
	Country        *Country `json:"country,omitempty"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary       bool            `json:"primary"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
	Source        DataSource      `json:"source"`
	AppSource     *string         `json:"appSource,omitempty"`
	Users         []*User         `json:"users"`
	Contacts      []*Contact      `json:"contacts"`
	Organizations []*Organization `json:"organizations"`
}

// Describes a phone number associated with a `Contact` in customerOS.
// **A `create` object.**
type PhoneNumberInput struct {
	// The phone number in e164 format.
	// **Required**
	PhoneNumber   string  `json:"phoneNumber"`
	CountryCodeA2 *string `json:"countryCodeA2,omitempty"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary *bool `json:"primary,omitempty"`
}

type PhoneNumberParticipant struct {
	PhoneNumberParticipant *PhoneNumber `json:"phoneNumberParticipant"`
	Type                   *string      `json:"type,omitempty"`
}

func (PhoneNumberParticipant) IsInteractionEventParticipant() {}

func (PhoneNumberParticipant) IsInteractionSessionParticipant() {}

// Describes a phone number associated with a `Contact` in customerOS.
// **An `update` object.**
type PhoneNumberRelationUpdateInput struct {
	// The unique ID associated with the phone number.
	// **Required**
	ID string `json:"id"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary *bool `json:"primary,omitempty"`
	// Deprecated
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// Deprecated
	CountryCodeA2 *string `json:"countryCodeA2,omitempty"`
}

// Describes a phone number associated with a `Contact` in customerOS.
// **An `update` object.**
type PhoneNumberUpdateInput struct {
	ID            string  `json:"id"`
	PhoneNumber   string  `json:"phoneNumber"`
	CountryCodeA2 *string `json:"countryCodeA2,omitempty"`
}

type PriceCalculation struct {
	CalculationType        *CalculationType `json:"calculationType,omitempty"`
	RevenueSharePercentage float64          `json:"revenueSharePercentage"`
}

type Query struct {
}

type Reminder struct {
	Metadata  *Metadata  `json:"metadata"`
	Content   *string    `json:"content,omitempty"`
	Owner     *User      `json:"owner,omitempty"`
	DueDate   *time.Time `json:"dueDate,omitempty"`
	Dismissed *bool      `json:"dismissed,omitempty"`
}

func (Reminder) IsMetadataInterface()        {}
func (this Reminder) GetMetadata() *Metadata { return this.Metadata }

type ReminderInput struct {
	Content        string    `json:"content"`
	DueDate        time.Time `json:"dueDate"`
	OrganizationID string    `json:"organizationId"`
	UserID         string    `json:"userId"`
}

type ReminderUpdateInput struct {
	ID        string     `json:"id"`
	Content   *string    `json:"content,omitempty"`
	DueDate   *time.Time `json:"dueDate,omitempty"`
	Dismissed *bool      `json:"dismissed,omitempty"`
}

type RenewalRecord struct {
	Organization *Organization `json:"organization"`
	Contract     *Contract     `json:"contract"`
	Opportunity  *Opportunity  `json:"opportunity,omitempty"`
}

type RenewalSummary struct {
	ArrForecast       *float64                      `json:"arrForecast,omitempty"`
	MaxArrForecast    *float64                      `json:"maxArrForecast,omitempty"`
	RenewalLikelihood *OpportunityRenewalLikelihood `json:"renewalLikelihood,omitempty"`
	NextRenewalDate   *time.Time                    `json:"nextRenewalDate,omitempty"`
}

type RenewalsPage struct {
	Content        []*RenewalRecord `json:"content"`
	TotalPages     int              `json:"totalPages"`
	TotalElements  int64            `json:"totalElements"`
	TotalAvailable int64            `json:"totalAvailable"`
}

func (RenewalsPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this RenewalsPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this RenewalsPage) GetTotalElements() int64 { return this.TotalElements }

// Describes the success or failure of the GraphQL call.
// **A `return` object**
type Result struct {
	// The result of the GraphQL call.
	// **Required.**
	Result bool `json:"result"`
}

type ServiceLineItem struct {
	Metadata       *Metadata         `json:"metadata"`
	BillingCycle   BilledType        `json:"billingCycle"`
	Comments       string            `json:"comments"`
	Description    string            `json:"description"`
	ParentID       string            `json:"parentId"`
	Price          float64           `json:"price"`
	Quantity       int64             `json:"quantity"`
	ServiceEnded   *time.Time        `json:"serviceEnded,omitempty"`
	ServiceStarted time.Time         `json:"serviceStarted"`
	Tax            *Tax              `json:"tax"`
	CreatedBy      *User             `json:"createdBy,omitempty"`
	ExternalLinks  []*ExternalSystem `json:"externalLinks"`
	Closed         bool              `json:"closed"`
}

func (ServiceLineItem) IsMetadataInterface()        {}
func (this ServiceLineItem) GetMetadata() *Metadata { return this.Metadata }

type ServiceLineItemBulkUpdateInput struct {
	ServiceLineItems []*ServiceLineItemBulkUpdateItem `json:"serviceLineItems"`
	ContractID       string                           `json:"contractId"`
	InvoiceNote      *string                          `json:"invoiceNote,omitempty"`
}

type ServiceLineItemBulkUpdateItem struct {
	ServiceLineItemID       *string     `json:"serviceLineItemId,omitempty"`
	Name                    *string     `json:"name,omitempty"`
	Billed                  *BilledType `json:"billed,omitempty"`
	Price                   *float64    `json:"price,omitempty"`
	Quantity                *int64      `json:"quantity,omitempty"`
	VatRate                 *float64    `json:"vatRate,omitempty"`
	Comments                *string     `json:"comments,omitempty"`
	IsRetroactiveCorrection *bool       `json:"isRetroactiveCorrection,omitempty"`
	ServiceStarted          *time.Time  `json:"serviceStarted,omitempty"`
	CloseVersion            *bool       `json:"closeVersion,omitempty"`
	NewVersion              *bool       `json:"newVersion,omitempty"`
}

type ServiceLineItemCloseInput struct {
	ID           string     `json:"id"`
	EndedAt      *time.Time `json:"endedAt,omitempty"`
	ServiceEnded *time.Time `json:"serviceEnded,omitempty"`
}

type ServiceLineItemInput struct {
	ContractID     string      `json:"contractId"`
	Description    *string     `json:"description,omitempty"`
	BillingCycle   *BilledType `json:"billingCycle,omitempty"`
	Price          *float64    `json:"price,omitempty"`
	Quantity       *int64      `json:"quantity,omitempty"`
	Tax            *TaxInput   `json:"tax,omitempty"`
	AppSource      *string     `json:"appSource,omitempty"`
	ServiceStarted *time.Time  `json:"serviceStarted,omitempty"`
	ServiceEnded   *time.Time  `json:"serviceEnded,omitempty"`
}

type ServiceLineItemNewVersionInput struct {
	ID             *string    `json:"id,omitempty"`
	Description    *string    `json:"description,omitempty"`
	Price          *float64   `json:"price,omitempty"`
	Quantity       *int64     `json:"quantity,omitempty"`
	Tax            *TaxInput  `json:"tax,omitempty"`
	Comments       *string    `json:"comments,omitempty"`
	AppSource      *string    `json:"appSource,omitempty"`
	ServiceStarted *time.Time `json:"serviceStarted,omitempty"`
}

type ServiceLineItemUpdateInput struct {
	ID          *string `json:"id,omitempty"`
	Description *string `json:"description,omitempty"`
	// Deprecated: billing cycle is not updatable.
	BillingCycle            *BilledType `json:"billingCycle,omitempty"`
	Price                   *float64    `json:"price,omitempty"`
	Quantity                *int64      `json:"quantity,omitempty"`
	Tax                     *TaxInput   `json:"tax,omitempty"`
	Comments                *string     `json:"comments,omitempty"`
	AppSource               *string     `json:"appSource,omitempty"`
	IsRetroactiveCorrection *bool       `json:"isRetroactiveCorrection,omitempty"`
	ServiceStarted          *time.Time  `json:"serviceStarted,omitempty"`
	ServiceEnded            *time.Time  `json:"serviceEnded,omitempty"`
}

type SlackChannel struct {
	Metadata     *Metadata     `json:"metadata"`
	Organization *Organization `json:"organization,omitempty"`
	ChannelID    string        `json:"channelId"`
	ChannelName  string        `json:"channelName"`
}

type SlackChannelPage struct {
	Content        []*SlackChannel `json:"content"`
	TotalPages     int             `json:"totalPages"`
	TotalElements  int64           `json:"totalElements"`
	TotalAvailable int64           `json:"totalAvailable"`
}

func (SlackChannelPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this SlackChannelPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this SlackChannelPage) GetTotalElements() int64 { return this.TotalElements }

type Social struct {
	Metadata       *Metadata  `json:"metadata"`
	ID             string     `json:"id"`
	URL            string     `json:"url"`
	Alias          string     `json:"alias"`
	FollowersCount int64      `json:"followersCount"`
	ExternalID     string     `json:"externalId"`
	CreatedAt      time.Time  `json:"createdAt"`
	UpdatedAt      time.Time  `json:"updatedAt"`
	Source         DataSource `json:"source"`
	SourceOfTruth  DataSource `json:"sourceOfTruth"`
	AppSource      string     `json:"appSource"`
}

func (Social) IsSourceFields()                   {}
func (this Social) GetID() string                { return this.ID }
func (this Social) GetSource() DataSource        { return this.Source }
func (this Social) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this Social) GetAppSource() string         { return this.AppSource }

func (Social) IsNode() {}

type SocialInput struct {
	URL       string  `json:"url"`
	AppSource *string `json:"appSource,omitempty"`
}

type SocialUpdateInput struct {
	ID  string `json:"id"`
	URL string `json:"url"`
}

type SortBy struct {
	By            string           `json:"by"`
	Direction     SortingDirection `json:"direction"`
	CaseSensitive *bool            `json:"caseSensitive,omitempty"`
}

type State struct {
	ID      string   `json:"id"`
	Country *Country `json:"country"`
	Name    string   `json:"name"`
	Code    string   `json:"code"`
}

type SuggestedMergeOrganization struct {
	Organization *Organization `json:"organization"`
	Confidence   *float64      `json:"confidence,omitempty"`
	SuggestedAt  *time.Time    `json:"suggestedAt,omitempty"`
	SuggestedBy  *string       `json:"suggestedBy,omitempty"`
}

type TableViewDef struct {
	ID        string        `json:"id"`
	Name      string        `json:"name"`
	TableType TableViewType `json:"tableType"`
	TableID   TableIDType   `json:"tableId"`
	Order     int           `json:"order"`
	Icon      string        `json:"icon"`
	Columns   []*ColumnView `json:"columns"`
	Filters   string        `json:"filters"`
	Sorting   string        `json:"sorting"`
	IsPreset  bool          `json:"isPreset"`
	IsShared  bool          `json:"isShared"`
	CreatedAt time.Time     `json:"createdAt"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

func (TableViewDef) IsNode()            {}
func (this TableViewDef) GetID() string { return this.ID }

type TableViewDefCreateInput struct {
	TableType TableViewType      `json:"tableType"`
	TableID   TableIDType        `json:"tableId"`
	Name      string             `json:"name"`
	Order     int                `json:"order"`
	Icon      string             `json:"icon"`
	Columns   []*ColumnViewInput `json:"columns"`
	Filters   string             `json:"filters"`
	Sorting   string             `json:"sorting"`
	IsPreset  bool               `json:"isPreset"`
	IsShared  bool               `json:"isShared"`
}

type TableViewDefUpdateInput struct {
	ID      string             `json:"id"`
	Name    string             `json:"name"`
	Order   int                `json:"order"`
	Icon    string             `json:"icon"`
	Columns []*ColumnViewInput `json:"columns"`
	Filters string             `json:"filters"`
	Sorting string             `json:"sorting"`
}

type Tag struct {
	Metadata  *Metadata  `json:"metadata"`
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	Source    DataSource `json:"source"`
	AppSource string     `json:"appSource"`
}

type TagIDOrNameInput struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type TagInput struct {
	Name      string  `json:"name"`
	AppSource *string `json:"appSource,omitempty"`
}

type TagUpdateInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Tax struct {
	SalesTax bool    `json:"salesTax"`
	Vat      bool    `json:"vat"`
	TaxRate  float64 `json:"taxRate"`
}

type TaxInput struct {
	TaxRate float64 `json:"taxRate"`
}

type TenantBillableInfo struct {
	WhitelistedOrganizations int64 `json:"whitelistedOrganizations"`
	WhitelistedContacts      int64 `json:"whitelistedContacts"`
	GreylistedOrganizations  int64 `json:"greylistedOrganizations"`
	GreylistedContacts       int64 `json:"greylistedContacts"`
}

type TenantBillingProfile struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
	// Deprecated
	Email        string `json:"email"`
	Phone        string `json:"phone"`
	AddressLine1 string `json:"addressLine1"`
	AddressLine2 string `json:"addressLine2"`
	AddressLine3 string `json:"addressLine3"`
	Locality     string `json:"locality"`
	Country      string `json:"country"`
	Region       string `json:"region"`
	Zip          string `json:"zip"`
	LegalName    string `json:"legalName"`
	// Deprecated
	DomesticPaymentsBankInfo *string `json:"domesticPaymentsBankInfo,omitempty"`
	// Deprecated
	InternationalPaymentsBankInfo *string `json:"internationalPaymentsBankInfo,omitempty"`
	VatNumber                     string  `json:"vatNumber"`
	SendInvoicesFrom              string  `json:"sendInvoicesFrom"`
	SendInvoicesBcc               string  `json:"sendInvoicesBcc"`
	// Deprecated
	CanPayWithCard *bool `json:"canPayWithCard,omitempty"`
	// Deprecated
	CanPayWithDirectDebitSepa *bool `json:"canPayWithDirectDebitSEPA,omitempty"`
	// Deprecated
	CanPayWithDirectDebitAch *bool `json:"canPayWithDirectDebitACH,omitempty"`
	// Deprecated
	CanPayWithDirectDebitBacs *bool `json:"canPayWithDirectDebitBacs,omitempty"`
	CanPayWithBankTransfer    bool  `json:"canPayWithBankTransfer"`
	CanPayWithPigeon          bool  `json:"canPayWithPigeon"`
	Check                     bool  `json:"check"`
}

func (TenantBillingProfile) IsSourceFields()                   {}
func (this TenantBillingProfile) GetID() string                { return this.ID }
func (this TenantBillingProfile) GetSource() DataSource        { return this.Source }
func (this TenantBillingProfile) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this TenantBillingProfile) GetAppSource() string         { return this.AppSource }

func (TenantBillingProfile) IsNode() {}

type TenantBillingProfileInput struct {
	// Deprecated
	Email        *string `json:"email,omitempty"`
	Phone        *string `json:"phone,omitempty"`
	AddressLine1 *string `json:"addressLine1,omitempty"`
	AddressLine2 *string `json:"addressLine2,omitempty"`
	AddressLine3 *string `json:"addressLine3,omitempty"`
	Locality     *string `json:"locality,omitempty"`
	Country      *string `json:"country,omitempty"`
	Region       *string `json:"region,omitempty"`
	Zip          *string `json:"zip,omitempty"`
	LegalName    *string `json:"legalName,omitempty"`
	// Deprecated
	DomesticPaymentsBankInfo *string `json:"domesticPaymentsBankInfo,omitempty"`
	// Deprecated
	InternationalPaymentsBankInfo *string `json:"internationalPaymentsBankInfo,omitempty"`
	VatNumber                     string  `json:"vatNumber"`
	SendInvoicesFrom              string  `json:"sendInvoicesFrom"`
	SendInvoicesBcc               *string `json:"sendInvoicesBcc,omitempty"`
	// Deprecated
	CanPayWithCard *bool `json:"canPayWithCard,omitempty"`
	// Deprecated
	CanPayWithDirectDebitSepa *bool `json:"canPayWithDirectDebitSEPA,omitempty"`
	// Deprecated
	CanPayWithDirectDebitAch *bool `json:"canPayWithDirectDebitACH,omitempty"`
	// Deprecated
	CanPayWithDirectDebitBacs *bool `json:"canPayWithDirectDebitBacs,omitempty"`
	CanPayWithBankTransfer    bool  `json:"canPayWithBankTransfer"`
	CanPayWithPigeon          bool  `json:"canPayWithPigeon"`
	Check                     bool  `json:"check"`
}

type TenantBillingProfileUpdateInput struct {
	ID    string `json:"id"`
	Patch *bool  `json:"patch,omitempty"`
	// Deprecated
	Email        *string `json:"email,omitempty"`
	Phone        *string `json:"phone,omitempty"`
	AddressLine1 *string `json:"addressLine1,omitempty"`
	AddressLine2 *string `json:"addressLine2,omitempty"`
	AddressLine3 *string `json:"addressLine3,omitempty"`
	Locality     *string `json:"locality,omitempty"`
	Country      *string `json:"country,omitempty"`
	Region       *string `json:"region,omitempty"`
	Zip          *string `json:"zip,omitempty"`
	LegalName    *string `json:"legalName,omitempty"`
	// Deprecated
	DomesticPaymentsBankInfo *string `json:"domesticPaymentsBankInfo,omitempty"`
	// Deprecated
	InternationalPaymentsBankInfo *string `json:"internationalPaymentsBankInfo,omitempty"`
	VatNumber                     *string `json:"vatNumber,omitempty"`
	SendInvoicesFrom              *string `json:"sendInvoicesFrom,omitempty"`
	SendInvoicesBcc               *string `json:"sendInvoicesBcc,omitempty"`
	// Deprecated
	CanPayWithCard *bool `json:"canPayWithCard,omitempty"`
	// Deprecated
	CanPayWithDirectDebitSepa *bool `json:"canPayWithDirectDebitSEPA,omitempty"`
	// Deprecated
	CanPayWithDirectDebitAch *bool `json:"canPayWithDirectDebitACH,omitempty"`
	// Deprecated
	CanPayWithDirectDebitBacs *bool `json:"canPayWithDirectDebitBacs,omitempty"`
	CanPayWithBankTransfer    *bool `json:"canPayWithBankTransfer,omitempty"`
	CanPayWithPigeon          *bool `json:"canPayWithPigeon,omitempty"`
	Check                     *bool `json:"check,omitempty"`
}

type TenantInput struct {
	Name      string  `json:"name"`
	AppSource *string `json:"appSource,omitempty"`
}

type TenantSettings struct {
	LogoRepositoryFileID *string                                        `json:"logoRepositoryFileId,omitempty"`
	BaseCurrency         *Currency                                      `json:"baseCurrency,omitempty"`
	BillingEnabled       bool                                           `json:"billingEnabled"`
	OpportunityStages    []*TenantSettingsOpportunityStageConfiguration `json:"opportunityStages"`
	WorkspaceLogo        *string                                        `json:"workspaceLogo,omitempty"`
	WorkspaceName        *string                                        `json:"workspaceName,omitempty"`
	// Deprecated
	LogoURL string `json:"logoUrl"`
}

type TenantSettingsInput struct {
	// Deprecated
	Patch                *bool     `json:"patch,omitempty"`
	LogoURL              *string   `json:"logoUrl,omitempty"`
	LogoRepositoryFileID *string   `json:"logoRepositoryFileId,omitempty"`
	BaseCurrency         *Currency `json:"baseCurrency,omitempty"`
	WorkspaceLogo        *string   `json:"workspaceLogo,omitempty"`
	WorkspaceName        *string   `json:"workspaceName,omitempty"`
	BillingEnabled       *bool     `json:"billingEnabled,omitempty"`
}

type TenantSettingsOpportunityStageConfiguration struct {
	ID             string `json:"id"`
	Value          string `json:"value"`
	Order          int    `json:"order"`
	Label          string `json:"label"`
	Visible        bool   `json:"visible"`
	LikelihoodRate int64  `json:"likelihoodRate"`
}

type TenantSettingsOpportunityStageConfigurationInput struct {
	ID             string  `json:"id"`
	Label          *string `json:"label,omitempty"`
	Visible        *bool   `json:"visible,omitempty"`
	LikelihoodRate *int64  `json:"likelihoodRate,omitempty"`
}

type TimeRange struct {
	// The start time of the time range.
	// **Required.**
	From time.Time `json:"from"`
	// The end time of the time range.
	// **Required.**
	To time.Time `json:"to"`
}

// Describes the User of customerOS.  A user is the person who logs into the Openline platform.
// **A `return` object**
type User struct {
	// The unique ID associated with the customerOS user.
	// **Required**
	ID string `json:"id"`
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName        string  `json:"lastName"`
	Name            *string `json:"name,omitempty"`
	Internal        bool    `json:"internal"`
	Bot             bool    `json:"bot"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	Roles           []Role  `json:"roles"`
	// All email addresses associated with a user in customerOS.
	// **Required.  If no values it returns an empty array.**
	Emails       []*Email       `json:"emails,omitempty"`
	PhoneNumbers []*PhoneNumber `json:"phoneNumbers"`
	// Timestamp of user creation.
	// **Required**
	CreatedAt     time.Time   `json:"createdAt"`
	UpdatedAt     time.Time   `json:"updatedAt"`
	JobRoles      []*JobRole  `json:"jobRoles"`
	Calendars     []*Calendar `json:"calendars"`
	Source        DataSource  `json:"source"`
	SourceOfTruth DataSource  `json:"sourceOfTruth"`
	AppSource     string      `json:"appSource"`
}

// Describes the User of customerOS.  A user is the person who logs into the Openline platform.
// **A `create` object.**
type UserInput struct {
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName        string  `json:"lastName"`
	Name            *string `json:"name,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	// The email address of the customerOS user.
	// **Required**
	Email *EmailInput `json:"email"`
	// The name of the app performing the create.
	// **Optional**
	AppSource *string `json:"appSource,omitempty"`
	// The Job Roles of the user.
	// **Optional**
	JobRoles []*JobRoleInput `json:"jobRoles,omitempty"`
}

// Specifies how many pages of `User` information has been returned in the query response.
// **A `return` object.**
type UserPage struct {
	// A `User` entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*User `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (UserPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this UserPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this UserPage) GetTotalElements() int64 { return this.TotalElements }

type UserParticipant struct {
	UserParticipant *User   `json:"userParticipant"`
	Type            *string `json:"type,omitempty"`
}

func (UserParticipant) IsInteractionEventParticipant() {}

func (UserParticipant) IsInteractionSessionParticipant() {}

func (UserParticipant) IsIssueParticipant() {}

func (UserParticipant) IsMeetingParticipant() {}

type UserUpdateInput struct {
	ID string `json:"id"`
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName        string  `json:"lastName"`
	Name            *string `json:"name,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
}

type Workflow struct {
	ID           string       `json:"id"`
	Name         *string      `json:"name,omitempty"`
	Type         WorkflowType `json:"type"`
	Live         bool         `json:"live"`
	Condition    string       `json:"condition"`
	ActionParam1 string       `json:"actionParam1"`
}

func (Workflow) IsNode()            {}
func (this Workflow) GetID() string { return this.ID }

type WorkflowCreateInput struct {
	Type         WorkflowType `json:"type"`
	Name         *string      `json:"name,omitempty"`
	Live         *bool        `json:"live,omitempty"`
	Condition    *string      `json:"condition,omitempty"`
	ActionParam1 *string      `json:"actionParam1,omitempty"`
}

type WorkflowUpdateInput struct {
	ID           string  `json:"id"`
	Name         *string `json:"name,omitempty"`
	Live         *bool   `json:"live,omitempty"`
	Condition    *string `json:"condition,omitempty"`
	ActionParam1 *string `json:"actionParam1,omitempty"`
}

type ActionType string

const (
	ActionTypeCreated                        ActionType = "CREATED"
	ActionTypeRenewalLikelihoodUpdated       ActionType = "RENEWAL_LIKELIHOOD_UPDATED"
	ActionTypeRenewalForecastUpdated         ActionType = "RENEWAL_FORECAST_UPDATED"
	ActionTypeContractStatusUpdated          ActionType = "CONTRACT_STATUS_UPDATED"
	ActionTypeServiceLineItemPriceUpdated    ActionType = "SERVICE_LINE_ITEM_PRICE_UPDATED"
	ActionTypeServiceLineItemQuantityUpdated ActionType = "SERVICE_LINE_ITEM_QUANTITY_UPDATED"
	ActionTypeInteractionEventRead           ActionType = "INTERACTION_EVENT_READ"
	// Deprecated
	ActionTypeServiceLineItemBilledTypeUpdated          ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_UPDATED"
	ActionTypeServiceLineItemBilledTypeRecurringCreated ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_RECURRING_CREATED"
	ActionTypeServiceLineItemBilledTypeOnceCreated      ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_ONCE_CREATED"
	ActionTypeServiceLineItemBilledTypeUsageCreated     ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_USAGE_CREATED"
	ActionTypeContractRenewed                           ActionType = "CONTRACT_RENEWED"
	ActionTypeServiceLineItemRemoved                    ActionType = "SERVICE_LINE_ITEM_REMOVED"
	ActionTypeOnboardingStatusChanged                   ActionType = "ONBOARDING_STATUS_CHANGED"
	ActionTypeInvoiceIssued                             ActionType = "INVOICE_ISSUED"
	ActionTypeInvoicePaid                               ActionType = "INVOICE_PAID"
	ActionTypeInvoiceVoided                             ActionType = "INVOICE_VOIDED"
	ActionTypeInvoiceOverdue                            ActionType = "INVOICE_OVERDUE"
	ActionTypeInvoiceSent                               ActionType = "INVOICE_SENT"
)

var AllActionType = []ActionType{
	ActionTypeCreated,
	ActionTypeRenewalLikelihoodUpdated,
	ActionTypeRenewalForecastUpdated,
	ActionTypeContractStatusUpdated,
	ActionTypeServiceLineItemPriceUpdated,
	ActionTypeServiceLineItemQuantityUpdated,
	ActionTypeInteractionEventRead,
	ActionTypeServiceLineItemBilledTypeUpdated,
	ActionTypeServiceLineItemBilledTypeRecurringCreated,
	ActionTypeServiceLineItemBilledTypeOnceCreated,
	ActionTypeServiceLineItemBilledTypeUsageCreated,
	ActionTypeContractRenewed,
	ActionTypeServiceLineItemRemoved,
	ActionTypeOnboardingStatusChanged,
	ActionTypeInvoiceIssued,
	ActionTypeInvoicePaid,
	ActionTypeInvoiceVoided,
	ActionTypeInvoiceOverdue,
	ActionTypeInvoiceSent,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeCreated, ActionTypeRenewalLikelihoodUpdated, ActionTypeRenewalForecastUpdated, ActionTypeContractStatusUpdated, ActionTypeServiceLineItemPriceUpdated, ActionTypeServiceLineItemQuantityUpdated, ActionTypeInteractionEventRead, ActionTypeServiceLineItemBilledTypeUpdated, ActionTypeServiceLineItemBilledTypeRecurringCreated, ActionTypeServiceLineItemBilledTypeOnceCreated, ActionTypeServiceLineItemBilledTypeUsageCreated, ActionTypeContractRenewed, ActionTypeServiceLineItemRemoved, ActionTypeOnboardingStatusChanged, ActionTypeInvoiceIssued, ActionTypeInvoicePaid, ActionTypeInvoiceVoided, ActionTypeInvoiceOverdue, ActionTypeInvoiceSent:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BilledType string

const (
	// Deprecated
	BilledTypeNone      BilledType = "NONE"
	BilledTypeMonthly   BilledType = "MONTHLY"
	BilledTypeQuarterly BilledType = "QUARTERLY"
	BilledTypeAnnually  BilledType = "ANNUALLY"
	BilledTypeOnce      BilledType = "ONCE"
	// Deprecated
	BilledTypeUsage BilledType = "USAGE"
)

var AllBilledType = []BilledType{
	BilledTypeNone,
	BilledTypeMonthly,
	BilledTypeQuarterly,
	BilledTypeAnnually,
	BilledTypeOnce,
	BilledTypeUsage,
}

func (e BilledType) IsValid() bool {
	switch e {
	case BilledTypeNone, BilledTypeMonthly, BilledTypeQuarterly, BilledTypeAnnually, BilledTypeOnce, BilledTypeUsage:
		return true
	}
	return false
}

func (e BilledType) String() string {
	return string(e)
}

func (e *BilledType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BilledType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BilledType", str)
	}
	return nil
}

func (e BilledType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CalculationType string

const (
	CalculationTypeRevenueShare CalculationType = "REVENUE_SHARE"
)

var AllCalculationType = []CalculationType{
	CalculationTypeRevenueShare,
}

func (e CalculationType) IsValid() bool {
	switch e {
	case CalculationTypeRevenueShare:
		return true
	}
	return false
}

func (e CalculationType) String() string {
	return string(e)
}

func (e *CalculationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CalculationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CalculationType", str)
	}
	return nil
}

func (e CalculationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CalendarType string

const (
	CalendarTypeCalcom CalendarType = "CALCOM"
	CalendarTypeGoogle CalendarType = "GOOGLE"
)

var AllCalendarType = []CalendarType{
	CalendarTypeCalcom,
	CalendarTypeGoogle,
}

func (e CalendarType) IsValid() bool {
	switch e {
	case CalendarTypeCalcom, CalendarTypeGoogle:
		return true
	}
	return false
}

func (e CalendarType) String() string {
	return string(e)
}

func (e *CalendarType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CalendarType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CalendarType", str)
	}
	return nil
}

func (e CalendarType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChargePeriod string

const (
	ChargePeriodMonthly   ChargePeriod = "MONTHLY"
	ChargePeriodQuarterly ChargePeriod = "QUARTERLY"
	ChargePeriodAnnually  ChargePeriod = "ANNUALLY"
)

var AllChargePeriod = []ChargePeriod{
	ChargePeriodMonthly,
	ChargePeriodQuarterly,
	ChargePeriodAnnually,
}

func (e ChargePeriod) IsValid() bool {
	switch e {
	case ChargePeriodMonthly, ChargePeriodQuarterly, ChargePeriodAnnually:
		return true
	}
	return false
}

func (e ChargePeriod) String() string {
	return string(e)
}

func (e *ChargePeriod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChargePeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChargePeriod", str)
	}
	return nil
}

func (e ChargePeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ColumnViewType string

const (
	ColumnViewTypeInvoicesIssueDate                   ColumnViewType = "INVOICES_ISSUE_DATE"
	ColumnViewTypeInvoicesIssueDatePast               ColumnViewType = "INVOICES_ISSUE_DATE_PAST"
	ColumnViewTypeInvoicesDueDate                     ColumnViewType = "INVOICES_DUE_DATE"
	ColumnViewTypeInvoicesContract                    ColumnViewType = "INVOICES_CONTRACT"
	ColumnViewTypeInvoicesBillingCycle                ColumnViewType = "INVOICES_BILLING_CYCLE"
	ColumnViewTypeInvoicesInvoiceNumber               ColumnViewType = "INVOICES_INVOICE_NUMBER"
	ColumnViewTypeInvoicesAmount                      ColumnViewType = "INVOICES_AMOUNT"
	ColumnViewTypeInvoicesInvoiceStatus               ColumnViewType = "INVOICES_INVOICE_STATUS"
	ColumnViewTypeInvoicesInvoicePreview              ColumnViewType = "INVOICES_INVOICE_PREVIEW"
	ColumnViewTypeInvoicesOrganization                ColumnViewType = "INVOICES_ORGANIZATION"
	ColumnViewTypeOrganizationsAvatar                 ColumnViewType = "ORGANIZATIONS_AVATAR"
	ColumnViewTypeOrganizationsName                   ColumnViewType = "ORGANIZATIONS_NAME"
	ColumnViewTypeOrganizationsWebsite                ColumnViewType = "ORGANIZATIONS_WEBSITE"
	ColumnViewTypeOrganizationsRelationship           ColumnViewType = "ORGANIZATIONS_RELATIONSHIP"
	ColumnViewTypeOrganizationsOnboardingStatus       ColumnViewType = "ORGANIZATIONS_ONBOARDING_STATUS"
	ColumnViewTypeOrganizationsRenewalLikelihood      ColumnViewType = "ORGANIZATIONS_RENEWAL_LIKELIHOOD"
	ColumnViewTypeOrganizationsRenewalDate            ColumnViewType = "ORGANIZATIONS_RENEWAL_DATE"
	ColumnViewTypeOrganizationsForecastArr            ColumnViewType = "ORGANIZATIONS_FORECAST_ARR"
	ColumnViewTypeOrganizationsOwner                  ColumnViewType = "ORGANIZATIONS_OWNER"
	ColumnViewTypeOrganizationsLastTouchpoint         ColumnViewType = "ORGANIZATIONS_LAST_TOUCHPOINT"
	ColumnViewTypeOrganizationsLastTouchpointDate     ColumnViewType = "ORGANIZATIONS_LAST_TOUCHPOINT_DATE"
	ColumnViewTypeOrganizationsStage                  ColumnViewType = "ORGANIZATIONS_STAGE"
	ColumnViewTypeOrganizationsContactCount           ColumnViewType = "ORGANIZATIONS_CONTACT_COUNT"
	ColumnViewTypeOrganizationsSocials                ColumnViewType = "ORGANIZATIONS_SOCIALS"
	ColumnViewTypeOrganizationsLeadSource             ColumnViewType = "ORGANIZATIONS_LEAD_SOURCE"
	ColumnViewTypeOrganizationsCreatedDate            ColumnViewType = "ORGANIZATIONS_CREATED_DATE"
	ColumnViewTypeOrganizationsEmployeeCount          ColumnViewType = "ORGANIZATIONS_EMPLOYEE_COUNT"
	ColumnViewTypeOrganizationsYearFounded            ColumnViewType = "ORGANIZATIONS_YEAR_FOUNDED"
	ColumnViewTypeOrganizationsIndustry               ColumnViewType = "ORGANIZATIONS_INDUSTRY"
	ColumnViewTypeOrganizationsChurnDate              ColumnViewType = "ORGANIZATIONS_CHURN_DATE"
	ColumnViewTypeOrganizationsLtv                    ColumnViewType = "ORGANIZATIONS_LTV"
	ColumnViewTypeOrganizationsCity                   ColumnViewType = "ORGANIZATIONS_CITY"
	ColumnViewTypeOrganizationsIsPublic               ColumnViewType = "ORGANIZATIONS_IS_PUBLIC"
	ColumnViewTypeOrganizationsLinkedinFollowerCount  ColumnViewType = "ORGANIZATIONS_LINKEDIN_FOLLOWER_COUNT"
	ColumnViewTypeOrganizationsTags                   ColumnViewType = "ORGANIZATIONS_TAGS"
	ColumnViewTypeOrganizationsHeadquarters           ColumnViewType = "ORGANIZATIONS_HEADQUARTERS"
	ColumnViewTypeContactsAvatar                      ColumnViewType = "CONTACTS_AVATAR"
	ColumnViewTypeContactsName                        ColumnViewType = "CONTACTS_NAME"
	ColumnViewTypeContactsOrganization                ColumnViewType = "CONTACTS_ORGANIZATION"
	ColumnViewTypeContactsEmails                      ColumnViewType = "CONTACTS_EMAILS"
	ColumnViewTypeContactsPhoneNumbers                ColumnViewType = "CONTACTS_PHONE_NUMBERS"
	ColumnViewTypeContactsLinkedin                    ColumnViewType = "CONTACTS_LINKEDIN"
	ColumnViewTypeContactsCity                        ColumnViewType = "CONTACTS_CITY"
	ColumnViewTypeContactsPersona                     ColumnViewType = "CONTACTS_PERSONA"
	ColumnViewTypeContactsLastInteraction             ColumnViewType = "CONTACTS_LAST_INTERACTION"
	ColumnViewTypeContactsCountry                     ColumnViewType = "CONTACTS_COUNTRY"
	ColumnViewTypeContactsRegion                      ColumnViewType = "CONTACTS_REGION"
	ColumnViewTypeContactsSkills                      ColumnViewType = "CONTACTS_SKILLS"
	ColumnViewTypeContactsSchools                     ColumnViewType = "CONTACTS_SCHOOLS"
	ColumnViewTypeContactsLanguages                   ColumnViewType = "CONTACTS_LANGUAGES"
	ColumnViewTypeContactsTimeInCurrentRole           ColumnViewType = "CONTACTS_TIME_IN_CURRENT_ROLE"
	ColumnViewTypeContactsExperience                  ColumnViewType = "CONTACTS_EXPERIENCE"
	ColumnViewTypeContactsLinkedinFollowerCount       ColumnViewType = "CONTACTS_LINKEDIN_FOLLOWER_COUNT"
	ColumnViewTypeContactsJobTitle                    ColumnViewType = "CONTACTS_JOB_TITLE"
	ColumnViewTypeContactsTags                        ColumnViewType = "CONTACTS_TAGS"
	ColumnViewTypeContactsConnections                 ColumnViewType = "CONTACTS_CONNECTIONS"
	ColumnViewTypeOpportunitiesCommonColumn           ColumnViewType = "OPPORTUNITIES_COMMON_COLUMN"
	ColumnViewTypeOpportunitiesName                   ColumnViewType = "OPPORTUNITIES_NAME"
	ColumnViewTypeOpportunitiesOrganization           ColumnViewType = "OPPORTUNITIES_ORGANIZATION"
	ColumnViewTypeOpportunitiesStage                  ColumnViewType = "OPPORTUNITIES_STAGE"
	ColumnViewTypeOpportunitiesEstimatedArr           ColumnViewType = "OPPORTUNITIES_ESTIMATED_ARR"
	ColumnViewTypeOpportunitiesOwner                  ColumnViewType = "OPPORTUNITIES_OWNER"
	ColumnViewTypeOpportunitiesTimeInStage            ColumnViewType = "OPPORTUNITIES_TIME_IN_STAGE"
	ColumnViewTypeOpportunitiesCreatedDate            ColumnViewType = "OPPORTUNITIES_CREATED_DATE"
	ColumnViewTypeOpportunitiesNextStep               ColumnViewType = "OPPORTUNITIES_NEXT_STEP"
	ColumnViewTypeContractsName                       ColumnViewType = "CONTRACTS_NAME"
	ColumnViewTypeContractsEnded                      ColumnViewType = "CONTRACTS_ENDED"
	ColumnViewTypeContractsPeriod                     ColumnViewType = "CONTRACTS_PERIOD"
	ColumnViewTypeContractsCurrency                   ColumnViewType = "CONTRACTS_CURRENCY"
	ColumnViewTypeContractsStatus                     ColumnViewType = "CONTRACTS_STATUS"
	ColumnViewTypeContractsRenewal                    ColumnViewType = "CONTRACTS_RENEWAL"
	ColumnViewTypeContractsLtv                        ColumnViewType = "CONTRACTS_LTV"
	ColumnViewTypeContractsRenewalDate                ColumnViewType = "CONTRACTS_RENEWAL_DATE"
	ColumnViewTypeContractsForecastArr                ColumnViewType = "CONTRACTS_FORECAST_ARR"
	ColumnViewTypeContractsOwner                      ColumnViewType = "CONTRACTS_OWNER"
	ColumnViewTypeContractsHealth                     ColumnViewType = "CONTRACTS_HEALTH"
	ColumnViewTypeFlowName                            ColumnViewType = "FLOW_NAME"
	ColumnViewTypeFlowStatus                          ColumnViewType = "FLOW_STATUS"
	ColumnViewTypeFlowSequenceName                    ColumnViewType = "FLOW_SEQUENCE_NAME"
	ColumnViewTypeFlowSequenceStatus                  ColumnViewType = "FLOW_SEQUENCE_STATUS"
	ColumnViewTypeFlowSequenceContactCount            ColumnViewType = "FLOW_SEQUENCE_CONTACT_COUNT"
	ColumnViewTypeFlowSequenceStatusPendingCount      ColumnViewType = "FLOW_SEQUENCE_STATUS_PENDING_COUNT"
	ColumnViewTypeFlowSequenceStatusInProgressCount   ColumnViewType = "FLOW_SEQUENCE_STATUS_IN_PROGRESS_COUNT"
	ColumnViewTypeFlowSequenceStatusSuccessfulCount   ColumnViewType = "FLOW_SEQUENCE_STATUS_SUCCESSFUL_COUNT"
	ColumnViewTypeFlowSequenceStatusUnsuccessfulCount ColumnViewType = "FLOW_SEQUENCE_STATUS_UNSUCCESSFUL_COUNT"
)

var AllColumnViewType = []ColumnViewType{
	ColumnViewTypeInvoicesIssueDate,
	ColumnViewTypeInvoicesIssueDatePast,
	ColumnViewTypeInvoicesDueDate,
	ColumnViewTypeInvoicesContract,
	ColumnViewTypeInvoicesBillingCycle,
	ColumnViewTypeInvoicesInvoiceNumber,
	ColumnViewTypeInvoicesAmount,
	ColumnViewTypeInvoicesInvoiceStatus,
	ColumnViewTypeInvoicesInvoicePreview,
	ColumnViewTypeInvoicesOrganization,
	ColumnViewTypeOrganizationsAvatar,
	ColumnViewTypeOrganizationsName,
	ColumnViewTypeOrganizationsWebsite,
	ColumnViewTypeOrganizationsRelationship,
	ColumnViewTypeOrganizationsOnboardingStatus,
	ColumnViewTypeOrganizationsRenewalLikelihood,
	ColumnViewTypeOrganizationsRenewalDate,
	ColumnViewTypeOrganizationsForecastArr,
	ColumnViewTypeOrganizationsOwner,
	ColumnViewTypeOrganizationsLastTouchpoint,
	ColumnViewTypeOrganizationsLastTouchpointDate,
	ColumnViewTypeOrganizationsStage,
	ColumnViewTypeOrganizationsContactCount,
	ColumnViewTypeOrganizationsSocials,
	ColumnViewTypeOrganizationsLeadSource,
	ColumnViewTypeOrganizationsCreatedDate,
	ColumnViewTypeOrganizationsEmployeeCount,
	ColumnViewTypeOrganizationsYearFounded,
	ColumnViewTypeOrganizationsIndustry,
	ColumnViewTypeOrganizationsChurnDate,
	ColumnViewTypeOrganizationsLtv,
	ColumnViewTypeOrganizationsCity,
	ColumnViewTypeOrganizationsIsPublic,
	ColumnViewTypeOrganizationsLinkedinFollowerCount,
	ColumnViewTypeOrganizationsTags,
	ColumnViewTypeOrganizationsHeadquarters,
	ColumnViewTypeContactsAvatar,
	ColumnViewTypeContactsName,
	ColumnViewTypeContactsOrganization,
	ColumnViewTypeContactsEmails,
	ColumnViewTypeContactsPhoneNumbers,
	ColumnViewTypeContactsLinkedin,
	ColumnViewTypeContactsCity,
	ColumnViewTypeContactsPersona,
	ColumnViewTypeContactsLastInteraction,
	ColumnViewTypeContactsCountry,
	ColumnViewTypeContactsRegion,
	ColumnViewTypeContactsSkills,
	ColumnViewTypeContactsSchools,
	ColumnViewTypeContactsLanguages,
	ColumnViewTypeContactsTimeInCurrentRole,
	ColumnViewTypeContactsExperience,
	ColumnViewTypeContactsLinkedinFollowerCount,
	ColumnViewTypeContactsJobTitle,
	ColumnViewTypeContactsTags,
	ColumnViewTypeContactsConnections,
	ColumnViewTypeOpportunitiesCommonColumn,
	ColumnViewTypeOpportunitiesName,
	ColumnViewTypeOpportunitiesOrganization,
	ColumnViewTypeOpportunitiesStage,
	ColumnViewTypeOpportunitiesEstimatedArr,
	ColumnViewTypeOpportunitiesOwner,
	ColumnViewTypeOpportunitiesTimeInStage,
	ColumnViewTypeOpportunitiesCreatedDate,
	ColumnViewTypeOpportunitiesNextStep,
	ColumnViewTypeContractsName,
	ColumnViewTypeContractsEnded,
	ColumnViewTypeContractsPeriod,
	ColumnViewTypeContractsCurrency,
	ColumnViewTypeContractsStatus,
	ColumnViewTypeContractsRenewal,
	ColumnViewTypeContractsLtv,
	ColumnViewTypeContractsRenewalDate,
	ColumnViewTypeContractsForecastArr,
	ColumnViewTypeContractsOwner,
	ColumnViewTypeContractsHealth,
	ColumnViewTypeFlowName,
	ColumnViewTypeFlowStatus,
	ColumnViewTypeFlowSequenceName,
	ColumnViewTypeFlowSequenceStatus,
	ColumnViewTypeFlowSequenceContactCount,
	ColumnViewTypeFlowSequenceStatusPendingCount,
	ColumnViewTypeFlowSequenceStatusInProgressCount,
	ColumnViewTypeFlowSequenceStatusSuccessfulCount,
	ColumnViewTypeFlowSequenceStatusUnsuccessfulCount,
}

func (e ColumnViewType) IsValid() bool {
	switch e {
	case ColumnViewTypeInvoicesIssueDate, ColumnViewTypeInvoicesIssueDatePast, ColumnViewTypeInvoicesDueDate, ColumnViewTypeInvoicesContract, ColumnViewTypeInvoicesBillingCycle, ColumnViewTypeInvoicesInvoiceNumber, ColumnViewTypeInvoicesAmount, ColumnViewTypeInvoicesInvoiceStatus, ColumnViewTypeInvoicesInvoicePreview, ColumnViewTypeInvoicesOrganization, ColumnViewTypeOrganizationsAvatar, ColumnViewTypeOrganizationsName, ColumnViewTypeOrganizationsWebsite, ColumnViewTypeOrganizationsRelationship, ColumnViewTypeOrganizationsOnboardingStatus, ColumnViewTypeOrganizationsRenewalLikelihood, ColumnViewTypeOrganizationsRenewalDate, ColumnViewTypeOrganizationsForecastArr, ColumnViewTypeOrganizationsOwner, ColumnViewTypeOrganizationsLastTouchpoint, ColumnViewTypeOrganizationsLastTouchpointDate, ColumnViewTypeOrganizationsStage, ColumnViewTypeOrganizationsContactCount, ColumnViewTypeOrganizationsSocials, ColumnViewTypeOrganizationsLeadSource, ColumnViewTypeOrganizationsCreatedDate, ColumnViewTypeOrganizationsEmployeeCount, ColumnViewTypeOrganizationsYearFounded, ColumnViewTypeOrganizationsIndustry, ColumnViewTypeOrganizationsChurnDate, ColumnViewTypeOrganizationsLtv, ColumnViewTypeOrganizationsCity, ColumnViewTypeOrganizationsIsPublic, ColumnViewTypeOrganizationsLinkedinFollowerCount, ColumnViewTypeOrganizationsTags, ColumnViewTypeOrganizationsHeadquarters, ColumnViewTypeContactsAvatar, ColumnViewTypeContactsName, ColumnViewTypeContactsOrganization, ColumnViewTypeContactsEmails, ColumnViewTypeContactsPhoneNumbers, ColumnViewTypeContactsLinkedin, ColumnViewTypeContactsCity, ColumnViewTypeContactsPersona, ColumnViewTypeContactsLastInteraction, ColumnViewTypeContactsCountry, ColumnViewTypeContactsRegion, ColumnViewTypeContactsSkills, ColumnViewTypeContactsSchools, ColumnViewTypeContactsLanguages, ColumnViewTypeContactsTimeInCurrentRole, ColumnViewTypeContactsExperience, ColumnViewTypeContactsLinkedinFollowerCount, ColumnViewTypeContactsJobTitle, ColumnViewTypeContactsTags, ColumnViewTypeContactsConnections, ColumnViewTypeOpportunitiesCommonColumn, ColumnViewTypeOpportunitiesName, ColumnViewTypeOpportunitiesOrganization, ColumnViewTypeOpportunitiesStage, ColumnViewTypeOpportunitiesEstimatedArr, ColumnViewTypeOpportunitiesOwner, ColumnViewTypeOpportunitiesTimeInStage, ColumnViewTypeOpportunitiesCreatedDate, ColumnViewTypeOpportunitiesNextStep, ColumnViewTypeContractsName, ColumnViewTypeContractsEnded, ColumnViewTypeContractsPeriod, ColumnViewTypeContractsCurrency, ColumnViewTypeContractsStatus, ColumnViewTypeContractsRenewal, ColumnViewTypeContractsLtv, ColumnViewTypeContractsRenewalDate, ColumnViewTypeContractsForecastArr, ColumnViewTypeContractsOwner, ColumnViewTypeContractsHealth, ColumnViewTypeFlowName, ColumnViewTypeFlowStatus, ColumnViewTypeFlowSequenceName, ColumnViewTypeFlowSequenceStatus, ColumnViewTypeFlowSequenceContactCount, ColumnViewTypeFlowSequenceStatusPendingCount, ColumnViewTypeFlowSequenceStatusInProgressCount, ColumnViewTypeFlowSequenceStatusSuccessfulCount, ColumnViewTypeFlowSequenceStatusUnsuccessfulCount:
		return true
	}
	return false
}

func (e ColumnViewType) String() string {
	return string(e)
}

func (e *ColumnViewType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ColumnViewType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ColumnViewType", str)
	}
	return nil
}

func (e ColumnViewType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComparisonOperator string

const (
	ComparisonOperatorEq         ComparisonOperator = "EQ"
	ComparisonOperatorContains   ComparisonOperator = "CONTAINS"
	ComparisonOperatorStartsWith ComparisonOperator = "STARTS_WITH"
	ComparisonOperatorLte        ComparisonOperator = "LTE"
	ComparisonOperatorGte        ComparisonOperator = "GTE"
	ComparisonOperatorIn         ComparisonOperator = "IN"
	ComparisonOperatorBetween    ComparisonOperator = "BETWEEN"
	ComparisonOperatorIsNull     ComparisonOperator = "IS_NULL"
	ComparisonOperatorIsEmpty    ComparisonOperator = "IS_EMPTY"
	ComparisonOperatorLt         ComparisonOperator = "LT"
	ComparisonOperatorGt         ComparisonOperator = "GT"
)

var AllComparisonOperator = []ComparisonOperator{
	ComparisonOperatorEq,
	ComparisonOperatorContains,
	ComparisonOperatorStartsWith,
	ComparisonOperatorLte,
	ComparisonOperatorGte,
	ComparisonOperatorIn,
	ComparisonOperatorBetween,
	ComparisonOperatorIsNull,
	ComparisonOperatorIsEmpty,
	ComparisonOperatorLt,
	ComparisonOperatorGt,
}

func (e ComparisonOperator) IsValid() bool {
	switch e {
	case ComparisonOperatorEq, ComparisonOperatorContains, ComparisonOperatorStartsWith, ComparisonOperatorLte, ComparisonOperatorGte, ComparisonOperatorIn, ComparisonOperatorBetween, ComparisonOperatorIsNull, ComparisonOperatorIsEmpty, ComparisonOperatorLt, ComparisonOperatorGt:
		return true
	}
	return false
}

func (e ComparisonOperator) String() string {
	return string(e)
}

func (e *ComparisonOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComparisonOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComparisonOperator", str)
	}
	return nil
}

func (e ComparisonOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Deprecated
type ContractBillingCycle string

const (
	ContractBillingCycleNone             ContractBillingCycle = "NONE"
	ContractBillingCycleMonthlyBilling   ContractBillingCycle = "MONTHLY_BILLING"
	ContractBillingCycleQuarterlyBilling ContractBillingCycle = "QUARTERLY_BILLING"
	ContractBillingCycleAnnualBilling    ContractBillingCycle = "ANNUAL_BILLING"
	ContractBillingCycleCustomBilling    ContractBillingCycle = "CUSTOM_BILLING"
)

var AllContractBillingCycle = []ContractBillingCycle{
	ContractBillingCycleNone,
	ContractBillingCycleMonthlyBilling,
	ContractBillingCycleQuarterlyBilling,
	ContractBillingCycleAnnualBilling,
	ContractBillingCycleCustomBilling,
}

func (e ContractBillingCycle) IsValid() bool {
	switch e {
	case ContractBillingCycleNone, ContractBillingCycleMonthlyBilling, ContractBillingCycleQuarterlyBilling, ContractBillingCycleAnnualBilling, ContractBillingCycleCustomBilling:
		return true
	}
	return false
}

func (e ContractBillingCycle) String() string {
	return string(e)
}

func (e *ContractBillingCycle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractBillingCycle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractBillingCycle", str)
	}
	return nil
}

func (e ContractBillingCycle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Deprecated
type ContractRenewalCycle string

const (
	ContractRenewalCycleNone             ContractRenewalCycle = "NONE"
	ContractRenewalCycleMonthlyRenewal   ContractRenewalCycle = "MONTHLY_RENEWAL"
	ContractRenewalCycleQuarterlyRenewal ContractRenewalCycle = "QUARTERLY_RENEWAL"
	ContractRenewalCycleAnnualRenewal    ContractRenewalCycle = "ANNUAL_RENEWAL"
)

var AllContractRenewalCycle = []ContractRenewalCycle{
	ContractRenewalCycleNone,
	ContractRenewalCycleMonthlyRenewal,
	ContractRenewalCycleQuarterlyRenewal,
	ContractRenewalCycleAnnualRenewal,
}

func (e ContractRenewalCycle) IsValid() bool {
	switch e {
	case ContractRenewalCycleNone, ContractRenewalCycleMonthlyRenewal, ContractRenewalCycleQuarterlyRenewal, ContractRenewalCycleAnnualRenewal:
		return true
	}
	return false
}

func (e ContractRenewalCycle) String() string {
	return string(e)
}

func (e *ContractRenewalCycle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractRenewalCycle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractRenewalCycle", str)
	}
	return nil
}

func (e ContractRenewalCycle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContractStatus string

const (
	ContractStatusUndefined     ContractStatus = "UNDEFINED"
	ContractStatusDraft         ContractStatus = "DRAFT"
	ContractStatusScheduled     ContractStatus = "SCHEDULED"
	ContractStatusLive          ContractStatus = "LIVE"
	ContractStatusEnded         ContractStatus = "ENDED"
	ContractStatusOutOfContract ContractStatus = "OUT_OF_CONTRACT"
)

var AllContractStatus = []ContractStatus{
	ContractStatusUndefined,
	ContractStatusDraft,
	ContractStatusScheduled,
	ContractStatusLive,
	ContractStatusEnded,
	ContractStatusOutOfContract,
}

func (e ContractStatus) IsValid() bool {
	switch e {
	case ContractStatusUndefined, ContractStatusDraft, ContractStatusScheduled, ContractStatusLive, ContractStatusEnded, ContractStatusOutOfContract:
		return true
	}
	return false
}

func (e ContractStatus) String() string {
	return string(e)
}

func (e *ContractStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractStatus", str)
	}
	return nil
}

func (e ContractStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Currency string

const (
	CurrencyAud Currency = "AUD"
	CurrencyBrl Currency = "BRL"
	CurrencyCad Currency = "CAD"
	CurrencyChf Currency = "CHF"
	CurrencyCny Currency = "CNY"
	CurrencyEur Currency = "EUR"
	CurrencyGbp Currency = "GBP"
	CurrencyHkd Currency = "HKD"
	CurrencyInr Currency = "INR"
	CurrencyJpy Currency = "JPY"
	CurrencyKrw Currency = "KRW"
	CurrencyMxn Currency = "MXN"
	CurrencyNok Currency = "NOK"
	CurrencyNzd Currency = "NZD"
	CurrencyRon Currency = "RON"
	CurrencySek Currency = "SEK"
	CurrencySgd Currency = "SGD"
	CurrencyTry Currency = "TRY"
	CurrencyUsd Currency = "USD"
	CurrencyZar Currency = "ZAR"
)

var AllCurrency = []Currency{
	CurrencyAud,
	CurrencyBrl,
	CurrencyCad,
	CurrencyChf,
	CurrencyCny,
	CurrencyEur,
	CurrencyGbp,
	CurrencyHkd,
	CurrencyInr,
	CurrencyJpy,
	CurrencyKrw,
	CurrencyMxn,
	CurrencyNok,
	CurrencyNzd,
	CurrencyRon,
	CurrencySek,
	CurrencySgd,
	CurrencyTry,
	CurrencyUsd,
	CurrencyZar,
}

func (e Currency) IsValid() bool {
	switch e {
	case CurrencyAud, CurrencyBrl, CurrencyCad, CurrencyChf, CurrencyCny, CurrencyEur, CurrencyGbp, CurrencyHkd, CurrencyInr, CurrencyJpy, CurrencyKrw, CurrencyMxn, CurrencyNok, CurrencyNzd, CurrencyRon, CurrencySek, CurrencySgd, CurrencyTry, CurrencyUsd, CurrencyZar:
		return true
	}
	return false
}

func (e Currency) String() string {
	return string(e)
}

func (e *Currency) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Currency(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Currency", str)
	}
	return nil
}

func (e Currency) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomFieldDataType string

const (
	CustomFieldDataTypeText     CustomFieldDataType = "TEXT"
	CustomFieldDataTypeBool     CustomFieldDataType = "BOOL"
	CustomFieldDataTypeDatetime CustomFieldDataType = "DATETIME"
	CustomFieldDataTypeInteger  CustomFieldDataType = "INTEGER"
	CustomFieldDataTypeDecimal  CustomFieldDataType = "DECIMAL"
)

var AllCustomFieldDataType = []CustomFieldDataType{
	CustomFieldDataTypeText,
	CustomFieldDataTypeBool,
	CustomFieldDataTypeDatetime,
	CustomFieldDataTypeInteger,
	CustomFieldDataTypeDecimal,
}

func (e CustomFieldDataType) IsValid() bool {
	switch e {
	case CustomFieldDataTypeText, CustomFieldDataTypeBool, CustomFieldDataTypeDatetime, CustomFieldDataTypeInteger, CustomFieldDataTypeDecimal:
		return true
	}
	return false
}

func (e CustomFieldDataType) String() string {
	return string(e)
}

func (e *CustomFieldDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomFieldDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomFieldDataType", str)
	}
	return nil
}

func (e CustomFieldDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomFieldTemplateType string

const (
	CustomFieldTemplateTypeText CustomFieldTemplateType = "TEXT"
	CustomFieldTemplateTypeLink CustomFieldTemplateType = "LINK"
)

var AllCustomFieldTemplateType = []CustomFieldTemplateType{
	CustomFieldTemplateTypeText,
	CustomFieldTemplateTypeLink,
}

func (e CustomFieldTemplateType) IsValid() bool {
	switch e {
	case CustomFieldTemplateTypeText, CustomFieldTemplateTypeLink:
		return true
	}
	return false
}

func (e CustomFieldTemplateType) String() string {
	return string(e)
}

func (e *CustomFieldTemplateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomFieldTemplateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomFieldTemplateType", str)
	}
	return nil
}

func (e CustomFieldTemplateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DashboardCustomerMapState string

const (
	DashboardCustomerMapStateOk DashboardCustomerMapState = "OK"
	// Deprecated
	DashboardCustomerMapStateAtRisk     DashboardCustomerMapState = "AT_RISK"
	DashboardCustomerMapStateChurned    DashboardCustomerMapState = "CHURNED"
	DashboardCustomerMapStateHighRisk   DashboardCustomerMapState = "HIGH_RISK"
	DashboardCustomerMapStateMediumRisk DashboardCustomerMapState = "MEDIUM_RISK"
)

var AllDashboardCustomerMapState = []DashboardCustomerMapState{
	DashboardCustomerMapStateOk,
	DashboardCustomerMapStateAtRisk,
	DashboardCustomerMapStateChurned,
	DashboardCustomerMapStateHighRisk,
	DashboardCustomerMapStateMediumRisk,
}

func (e DashboardCustomerMapState) IsValid() bool {
	switch e {
	case DashboardCustomerMapStateOk, DashboardCustomerMapStateAtRisk, DashboardCustomerMapStateChurned, DashboardCustomerMapStateHighRisk, DashboardCustomerMapStateMediumRisk:
		return true
	}
	return false
}

func (e DashboardCustomerMapState) String() string {
	return string(e)
}

func (e *DashboardCustomerMapState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DashboardCustomerMapState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DashboardCustomerMapState", str)
	}
	return nil
}

func (e DashboardCustomerMapState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataSource string

const (
	DataSourceNa             DataSource = "NA"
	DataSourceOpenline       DataSource = "OPENLINE"
	DataSourceWebscrape      DataSource = "WEBSCRAPE"
	DataSourceHubspot        DataSource = "HUBSPOT"
	DataSourceZendeskSupport DataSource = "ZENDESK_SUPPORT"
	DataSourcePipedrive      DataSource = "PIPEDRIVE"
	DataSourceSLACk          DataSource = "SLACK"
	DataSourceIntercom       DataSource = "INTERCOM"
	DataSourceSalesforce     DataSource = "SALESFORCE"
	DataSourceStripe         DataSource = "STRIPE"
	DataSourceMixpanel       DataSource = "MIXPANEL"
	DataSourceClose          DataSource = "CLOSE"
	DataSourceOutlook        DataSource = "OUTLOOK"
	DataSourceUnthread       DataSource = "UNTHREAD"
	DataSourceShopify        DataSource = "SHOPIFY"
	DataSourceAttio          DataSource = "ATTIO"
	DataSourceZendeskSell    DataSource = "ZENDESK_SELL"
	DataSourceMailstack      DataSource = "MAILSTACK"
)

var AllDataSource = []DataSource{
	DataSourceNa,
	DataSourceOpenline,
	DataSourceWebscrape,
	DataSourceHubspot,
	DataSourceZendeskSupport,
	DataSourcePipedrive,
	DataSourceSLACk,
	DataSourceIntercom,
	DataSourceSalesforce,
	DataSourceStripe,
	DataSourceMixpanel,
	DataSourceClose,
	DataSourceOutlook,
	DataSourceUnthread,
	DataSourceShopify,
	DataSourceAttio,
	DataSourceZendeskSell,
	DataSourceMailstack,
}

func (e DataSource) IsValid() bool {
	switch e {
	case DataSourceNa, DataSourceOpenline, DataSourceWebscrape, DataSourceHubspot, DataSourceZendeskSupport, DataSourcePipedrive, DataSourceSLACk, DataSourceIntercom, DataSourceSalesforce, DataSourceStripe, DataSourceMixpanel, DataSourceClose, DataSourceOutlook, DataSourceUnthread, DataSourceShopify, DataSourceAttio, DataSourceZendeskSell, DataSourceMailstack:
		return true
	}
	return false
}

func (e DataSource) String() string {
	return string(e)
}

func (e *DataSource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataSource", str)
	}
	return nil
}

func (e DataSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailDeliverable string

const (
	EmailDeliverableUnknown       EmailDeliverable = "UNKNOWN"
	EmailDeliverableDeliverable   EmailDeliverable = "DELIVERABLE"
	EmailDeliverableUndeliverable EmailDeliverable = "UNDELIVERABLE"
)

var AllEmailDeliverable = []EmailDeliverable{
	EmailDeliverableUnknown,
	EmailDeliverableDeliverable,
	EmailDeliverableUndeliverable,
}

func (e EmailDeliverable) IsValid() bool {
	switch e {
	case EmailDeliverableUnknown, EmailDeliverableDeliverable, EmailDeliverableUndeliverable:
		return true
	}
	return false
}

func (e EmailDeliverable) String() string {
	return string(e)
}

func (e *EmailDeliverable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailDeliverable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailDeliverable", str)
	}
	return nil
}

func (e EmailDeliverable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Describes the type of email address (WORK, PERSONAL, etc).
// **A `return` object.
type EmailLabel string

const (
	EmailLabelMain     EmailLabel = "MAIN"
	EmailLabelWork     EmailLabel = "WORK"
	EmailLabelPersonal EmailLabel = "PERSONAL"
	EmailLabelOther    EmailLabel = "OTHER"
)

var AllEmailLabel = []EmailLabel{
	EmailLabelMain,
	EmailLabelWork,
	EmailLabelPersonal,
	EmailLabelOther,
}

func (e EmailLabel) IsValid() bool {
	switch e {
	case EmailLabelMain, EmailLabelWork, EmailLabelPersonal, EmailLabelOther:
		return true
	}
	return false
}

func (e EmailLabel) String() string {
	return string(e)
}

func (e *EmailLabel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailLabel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailLabel", str)
	}
	return nil
}

func (e EmailLabel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EntityTemplateExtension string

const (
	EntityTemplateExtensionContact      EntityTemplateExtension = "CONTACT"
	EntityTemplateExtensionOrganization EntityTemplateExtension = "ORGANIZATION"
)

var AllEntityTemplateExtension = []EntityTemplateExtension{
	EntityTemplateExtensionContact,
	EntityTemplateExtensionOrganization,
}

func (e EntityTemplateExtension) IsValid() bool {
	switch e {
	case EntityTemplateExtensionContact, EntityTemplateExtensionOrganization:
		return true
	}
	return false
}

func (e EntityTemplateExtension) String() string {
	return string(e)
}

func (e *EntityTemplateExtension) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntityTemplateExtension(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntityTemplateExtension", str)
	}
	return nil
}

func (e EntityTemplateExtension) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EntityType string

const (
	EntityTypeContact      EntityType = "Contact"
	EntityTypeOrganization EntityType = "Organization"
)

var AllEntityType = []EntityType{
	EntityTypeContact,
	EntityTypeOrganization,
}

func (e EntityType) IsValid() bool {
	switch e {
	case EntityTypeContact, EntityTypeOrganization:
		return true
	}
	return false
}

func (e EntityType) String() string {
	return string(e)
}

func (e *EntityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntityType", str)
	}
	return nil
}

func (e EntityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExternalSystemType string

const (
	ExternalSystemTypeHubspot        ExternalSystemType = "HUBSPOT"
	ExternalSystemTypeZendeskSupport ExternalSystemType = "ZENDESK_SUPPORT"
	ExternalSystemTypeCalcom         ExternalSystemType = "CALCOM"
	ExternalSystemTypePipedrive      ExternalSystemType = "PIPEDRIVE"
	ExternalSystemTypeSLACk          ExternalSystemType = "SLACK"
	ExternalSystemTypeIntercom       ExternalSystemType = "INTERCOM"
	ExternalSystemTypeSalesforce     ExternalSystemType = "SALESFORCE"
	ExternalSystemTypeStripe         ExternalSystemType = "STRIPE"
	ExternalSystemTypeMixpanel       ExternalSystemType = "MIXPANEL"
	ExternalSystemTypeClose          ExternalSystemType = "CLOSE"
	ExternalSystemTypeOutlook        ExternalSystemType = "OUTLOOK"
	ExternalSystemTypeUnthread       ExternalSystemType = "UNTHREAD"
	ExternalSystemTypeAttio          ExternalSystemType = "ATTIO"
	ExternalSystemTypeWeconnect      ExternalSystemType = "WECONNECT"
	ExternalSystemTypeZendeskSell    ExternalSystemType = "ZENDESK_SELL"
)

var AllExternalSystemType = []ExternalSystemType{
	ExternalSystemTypeHubspot,
	ExternalSystemTypeZendeskSupport,
	ExternalSystemTypeCalcom,
	ExternalSystemTypePipedrive,
	ExternalSystemTypeSLACk,
	ExternalSystemTypeIntercom,
	ExternalSystemTypeSalesforce,
	ExternalSystemTypeStripe,
	ExternalSystemTypeMixpanel,
	ExternalSystemTypeClose,
	ExternalSystemTypeOutlook,
	ExternalSystemTypeUnthread,
	ExternalSystemTypeAttio,
	ExternalSystemTypeWeconnect,
	ExternalSystemTypeZendeskSell,
}

func (e ExternalSystemType) IsValid() bool {
	switch e {
	case ExternalSystemTypeHubspot, ExternalSystemTypeZendeskSupport, ExternalSystemTypeCalcom, ExternalSystemTypePipedrive, ExternalSystemTypeSLACk, ExternalSystemTypeIntercom, ExternalSystemTypeSalesforce, ExternalSystemTypeStripe, ExternalSystemTypeMixpanel, ExternalSystemTypeClose, ExternalSystemTypeOutlook, ExternalSystemTypeUnthread, ExternalSystemTypeAttio, ExternalSystemTypeWeconnect, ExternalSystemTypeZendeskSell:
		return true
	}
	return false
}

func (e ExternalSystemType) String() string {
	return string(e)
}

func (e *ExternalSystemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExternalSystemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExternalSystemType", str)
	}
	return nil
}

func (e ExternalSystemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlowSequenceStatus string

const (
	FlowSequenceStatusInactive FlowSequenceStatus = "INACTIVE"
	FlowSequenceStatusActive   FlowSequenceStatus = "ACTIVE"
	FlowSequenceStatusPaused   FlowSequenceStatus = "PAUSED"
	FlowSequenceStatusArchived FlowSequenceStatus = "ARCHIVED"
)

var AllFlowSequenceStatus = []FlowSequenceStatus{
	FlowSequenceStatusInactive,
	FlowSequenceStatusActive,
	FlowSequenceStatusPaused,
	FlowSequenceStatusArchived,
}

func (e FlowSequenceStatus) IsValid() bool {
	switch e {
	case FlowSequenceStatusInactive, FlowSequenceStatusActive, FlowSequenceStatusPaused, FlowSequenceStatusArchived:
		return true
	}
	return false
}

func (e FlowSequenceStatus) String() string {
	return string(e)
}

func (e *FlowSequenceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlowSequenceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlowSequenceStatus", str)
	}
	return nil
}

func (e FlowSequenceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlowSequenceStepStatus string

const (
	FlowSequenceStepStatusInactive FlowSequenceStepStatus = "INACTIVE"
	FlowSequenceStepStatusActive   FlowSequenceStepStatus = "ACTIVE"
	FlowSequenceStepStatusPaused   FlowSequenceStepStatus = "PAUSED"
	FlowSequenceStepStatusArchived FlowSequenceStepStatus = "ARCHIVED"
)

var AllFlowSequenceStepStatus = []FlowSequenceStepStatus{
	FlowSequenceStepStatusInactive,
	FlowSequenceStepStatusActive,
	FlowSequenceStepStatusPaused,
	FlowSequenceStepStatusArchived,
}

func (e FlowSequenceStepStatus) IsValid() bool {
	switch e {
	case FlowSequenceStepStatusInactive, FlowSequenceStepStatusActive, FlowSequenceStepStatusPaused, FlowSequenceStepStatusArchived:
		return true
	}
	return false
}

func (e FlowSequenceStepStatus) String() string {
	return string(e)
}

func (e *FlowSequenceStepStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlowSequenceStepStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlowSequenceStepStatus", str)
	}
	return nil
}

func (e FlowSequenceStepStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlowSequenceStepSubtype string

const (
	FlowSequenceStepSubtypeLinkedinConnectionRequest FlowSequenceStepSubtype = "LINKEDIN_CONNECTION_REQUEST"
	FlowSequenceStepSubtypeLinkedinMessage           FlowSequenceStepSubtype = "LINKEDIN_MESSAGE"
)

var AllFlowSequenceStepSubtype = []FlowSequenceStepSubtype{
	FlowSequenceStepSubtypeLinkedinConnectionRequest,
	FlowSequenceStepSubtypeLinkedinMessage,
}

func (e FlowSequenceStepSubtype) IsValid() bool {
	switch e {
	case FlowSequenceStepSubtypeLinkedinConnectionRequest, FlowSequenceStepSubtypeLinkedinMessage:
		return true
	}
	return false
}

func (e FlowSequenceStepSubtype) String() string {
	return string(e)
}

func (e *FlowSequenceStepSubtype) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlowSequenceStepSubtype(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlowSequenceStepSubtype", str)
	}
	return nil
}

func (e FlowSequenceStepSubtype) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlowSequenceStepType string

const (
	FlowSequenceStepTypeEmail    FlowSequenceStepType = "EMAIL"
	FlowSequenceStepTypeLinkedin FlowSequenceStepType = "LINKEDIN"
)

var AllFlowSequenceStepType = []FlowSequenceStepType{
	FlowSequenceStepTypeEmail,
	FlowSequenceStepTypeLinkedin,
}

func (e FlowSequenceStepType) IsValid() bool {
	switch e {
	case FlowSequenceStepTypeEmail, FlowSequenceStepTypeLinkedin:
		return true
	}
	return false
}

func (e FlowSequenceStepType) String() string {
	return string(e)
}

func (e *FlowSequenceStepType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlowSequenceStepType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlowSequenceStepType", str)
	}
	return nil
}

func (e FlowSequenceStepType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FlowStatus string

const (
	FlowStatusInactive FlowStatus = "INACTIVE"
	FlowStatusActive   FlowStatus = "ACTIVE"
	FlowStatusPaused   FlowStatus = "PAUSED"
	FlowStatusArchived FlowStatus = "ARCHIVED"
)

var AllFlowStatus = []FlowStatus{
	FlowStatusInactive,
	FlowStatusActive,
	FlowStatusPaused,
	FlowStatusArchived,
}

func (e FlowStatus) IsValid() bool {
	switch e {
	case FlowStatusInactive, FlowStatusActive, FlowStatusPaused, FlowStatusArchived:
		return true
	}
	return false
}

func (e FlowStatus) String() string {
	return string(e)
}

func (e *FlowStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FlowStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FlowStatus", str)
	}
	return nil
}

func (e FlowStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FundingRound string

const (
	FundingRoundPreSeed          FundingRound = "PRE_SEED"
	FundingRoundSeed             FundingRound = "SEED"
	FundingRoundSeriesA          FundingRound = "SERIES_A"
	FundingRoundSeriesB          FundingRound = "SERIES_B"
	FundingRoundSeriesC          FundingRound = "SERIES_C"
	FundingRoundSeriesD          FundingRound = "SERIES_D"
	FundingRoundSeriesE          FundingRound = "SERIES_E"
	FundingRoundSeriesF          FundingRound = "SERIES_F"
	FundingRoundIPO              FundingRound = "IPO"
	FundingRoundFriendsAndFamily FundingRound = "FRIENDS_AND_FAMILY"
	FundingRoundAngel            FundingRound = "ANGEL"
	FundingRoundBridge           FundingRound = "BRIDGE"
)

var AllFundingRound = []FundingRound{
	FundingRoundPreSeed,
	FundingRoundSeed,
	FundingRoundSeriesA,
	FundingRoundSeriesB,
	FundingRoundSeriesC,
	FundingRoundSeriesD,
	FundingRoundSeriesE,
	FundingRoundSeriesF,
	FundingRoundIPO,
	FundingRoundFriendsAndFamily,
	FundingRoundAngel,
	FundingRoundBridge,
}

func (e FundingRound) IsValid() bool {
	switch e {
	case FundingRoundPreSeed, FundingRoundSeed, FundingRoundSeriesA, FundingRoundSeriesB, FundingRoundSeriesC, FundingRoundSeriesD, FundingRoundSeriesE, FundingRoundSeriesF, FundingRoundIPO, FundingRoundFriendsAndFamily, FundingRoundAngel, FundingRoundBridge:
		return true
	}
	return false
}

func (e FundingRound) String() string {
	return string(e)
}

func (e *FundingRound) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FundingRound(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FundingRound", str)
	}
	return nil
}

func (e FundingRound) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GCliCacheItemType string

const (
	GCliCacheItemTypeState        GCliCacheItemType = "STATE"
	GCliCacheItemTypeContact      GCliCacheItemType = "CONTACT"
	GCliCacheItemTypeOrganization GCliCacheItemType = "ORGANIZATION"
)

var AllGCliCacheItemType = []GCliCacheItemType{
	GCliCacheItemTypeState,
	GCliCacheItemTypeContact,
	GCliCacheItemTypeOrganization,
}

func (e GCliCacheItemType) IsValid() bool {
	switch e {
	case GCliCacheItemTypeState, GCliCacheItemTypeContact, GCliCacheItemTypeOrganization:
		return true
	}
	return false
}

func (e GCliCacheItemType) String() string {
	return string(e)
}

func (e *GCliCacheItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GCliCacheItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GCliCacheItemType", str)
	}
	return nil
}

func (e GCliCacheItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GCliSearchResultType string

const (
	GCliSearchResultTypeEmail                    GCliSearchResultType = "EMAIL"
	GCliSearchResultTypeContact                  GCliSearchResultType = "CONTACT"
	GCliSearchResultTypeOrganization             GCliSearchResultType = "ORGANIZATION"
	GCliSearchResultTypeOrganizationRelationship GCliSearchResultType = "ORGANIZATION_RELATIONSHIP"
	GCliSearchResultTypeState                    GCliSearchResultType = "STATE"
)

var AllGCliSearchResultType = []GCliSearchResultType{
	GCliSearchResultTypeEmail,
	GCliSearchResultTypeContact,
	GCliSearchResultTypeOrganization,
	GCliSearchResultTypeOrganizationRelationship,
	GCliSearchResultTypeState,
}

func (e GCliSearchResultType) IsValid() bool {
	switch e {
	case GCliSearchResultTypeEmail, GCliSearchResultTypeContact, GCliSearchResultTypeOrganization, GCliSearchResultTypeOrganizationRelationship, GCliSearchResultTypeState:
		return true
	}
	return false
}

func (e GCliSearchResultType) String() string {
	return string(e)
}

func (e *GCliSearchResultType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GCliSearchResultType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GCliSearchResultType", str)
	}
	return nil
}

func (e GCliSearchResultType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InternalStage string

const (
	InternalStageOpen       InternalStage = "OPEN"
	InternalStageClosedWon  InternalStage = "CLOSED_WON"
	InternalStageClosedLost InternalStage = "CLOSED_LOST"
)

var AllInternalStage = []InternalStage{
	InternalStageOpen,
	InternalStageClosedWon,
	InternalStageClosedLost,
}

func (e InternalStage) IsValid() bool {
	switch e {
	case InternalStageOpen, InternalStageClosedWon, InternalStageClosedLost:
		return true
	}
	return false
}

func (e InternalStage) String() string {
	return string(e)
}

func (e *InternalStage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InternalStage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InternalStage", str)
	}
	return nil
}

func (e InternalStage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InternalType string

const (
	InternalTypeNbo       InternalType = "NBO"
	InternalTypeUpsell    InternalType = "UPSELL"
	InternalTypeCrossSell InternalType = "CROSS_SELL"
	InternalTypeRenewal   InternalType = "RENEWAL"
)

var AllInternalType = []InternalType{
	InternalTypeNbo,
	InternalTypeUpsell,
	InternalTypeCrossSell,
	InternalTypeRenewal,
}

func (e InternalType) IsValid() bool {
	switch e {
	case InternalTypeNbo, InternalTypeUpsell, InternalTypeCrossSell, InternalTypeRenewal:
		return true
	}
	return false
}

func (e InternalType) String() string {
	return string(e)
}

func (e *InternalType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InternalType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InternalType", str)
	}
	return nil
}

func (e InternalType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InvoiceStatus string

const (
	InvoiceStatusInitialized InvoiceStatus = "INITIALIZED"
	// Deprecated, replaced by INITIALIZED
	InvoiceStatusDraft     InvoiceStatus = "DRAFT"
	InvoiceStatusDue       InvoiceStatus = "DUE"
	InvoiceStatusOverdue   InvoiceStatus = "OVERDUE"
	InvoiceStatusPaid      InvoiceStatus = "PAID"
	InvoiceStatusVoid      InvoiceStatus = "VOID"
	InvoiceStatusScheduled InvoiceStatus = "SCHEDULED"
	InvoiceStatusOnHold    InvoiceStatus = "ON_HOLD"
	InvoiceStatusEmpty     InvoiceStatus = "EMPTY"
)

var AllInvoiceStatus = []InvoiceStatus{
	InvoiceStatusInitialized,
	InvoiceStatusDraft,
	InvoiceStatusDue,
	InvoiceStatusOverdue,
	InvoiceStatusPaid,
	InvoiceStatusVoid,
	InvoiceStatusScheduled,
	InvoiceStatusOnHold,
	InvoiceStatusEmpty,
}

func (e InvoiceStatus) IsValid() bool {
	switch e {
	case InvoiceStatusInitialized, InvoiceStatusDraft, InvoiceStatusDue, InvoiceStatusOverdue, InvoiceStatusPaid, InvoiceStatusVoid, InvoiceStatusScheduled, InvoiceStatusOnHold, InvoiceStatusEmpty:
		return true
	}
	return false
}

func (e InvoiceStatus) String() string {
	return string(e)
}

func (e *InvoiceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvoiceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InvoiceStatus", str)
	}
	return nil
}

func (e InvoiceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LastTouchpointType string

const (
	LastTouchpointTypePageView                      LastTouchpointType = "PAGE_VIEW"
	LastTouchpointTypeInteractionSession            LastTouchpointType = "INTERACTION_SESSION"
	LastTouchpointTypeNote                          LastTouchpointType = "NOTE"
	LastTouchpointTypeInteractionEventEmailSent     LastTouchpointType = "INTERACTION_EVENT_EMAIL_SENT"
	LastTouchpointTypeInteractionEventEmailReceived LastTouchpointType = "INTERACTION_EVENT_EMAIL_RECEIVED"
	LastTouchpointTypeInteractionEventPhoneCall     LastTouchpointType = "INTERACTION_EVENT_PHONE_CALL"
	LastTouchpointTypeInteractionEventChat          LastTouchpointType = "INTERACTION_EVENT_CHAT"
	LastTouchpointTypeMeeting                       LastTouchpointType = "MEETING"
	LastTouchpointTypeActionCreated                 LastTouchpointType = "ACTION_CREATED"
	LastTouchpointTypeAction                        LastTouchpointType = "ACTION"
	LastTouchpointTypeLogEntry                      LastTouchpointType = "LOG_ENTRY"
	LastTouchpointTypeIssueCreated                  LastTouchpointType = "ISSUE_CREATED"
	LastTouchpointTypeIssueUpdated                  LastTouchpointType = "ISSUE_UPDATED"
)

var AllLastTouchpointType = []LastTouchpointType{
	LastTouchpointTypePageView,
	LastTouchpointTypeInteractionSession,
	LastTouchpointTypeNote,
	LastTouchpointTypeInteractionEventEmailSent,
	LastTouchpointTypeInteractionEventEmailReceived,
	LastTouchpointTypeInteractionEventPhoneCall,
	LastTouchpointTypeInteractionEventChat,
	LastTouchpointTypeMeeting,
	LastTouchpointTypeActionCreated,
	LastTouchpointTypeAction,
	LastTouchpointTypeLogEntry,
	LastTouchpointTypeIssueCreated,
	LastTouchpointTypeIssueUpdated,
}

func (e LastTouchpointType) IsValid() bool {
	switch e {
	case LastTouchpointTypePageView, LastTouchpointTypeInteractionSession, LastTouchpointTypeNote, LastTouchpointTypeInteractionEventEmailSent, LastTouchpointTypeInteractionEventEmailReceived, LastTouchpointTypeInteractionEventPhoneCall, LastTouchpointTypeInteractionEventChat, LastTouchpointTypeMeeting, LastTouchpointTypeActionCreated, LastTouchpointTypeAction, LastTouchpointTypeLogEntry, LastTouchpointTypeIssueCreated, LastTouchpointTypeIssueUpdated:
		return true
	}
	return false
}

func (e LastTouchpointType) String() string {
	return string(e)
}

func (e *LastTouchpointType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LastTouchpointType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LastTouchpointType", str)
	}
	return nil
}

func (e LastTouchpointType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Market string

const (
	MarketB2b         Market = "B2B"
	MarketB2c         Market = "B2C"
	MarketMarketplace Market = "MARKETPLACE"
)

var AllMarket = []Market{
	MarketB2b,
	MarketB2c,
	MarketMarketplace,
}

func (e Market) IsValid() bool {
	switch e {
	case MarketB2b, MarketB2c, MarketMarketplace:
		return true
	}
	return false
}

func (e Market) String() string {
	return string(e)
}

func (e *Market) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Market(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Market", str)
	}
	return nil
}

func (e Market) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MeetingStatus string

const (
	MeetingStatusUndefined MeetingStatus = "UNDEFINED"
	MeetingStatusAccepted  MeetingStatus = "ACCEPTED"
	MeetingStatusCanceled  MeetingStatus = "CANCELED"
)

var AllMeetingStatus = []MeetingStatus{
	MeetingStatusUndefined,
	MeetingStatusAccepted,
	MeetingStatusCanceled,
}

func (e MeetingStatus) IsValid() bool {
	switch e {
	case MeetingStatusUndefined, MeetingStatusAccepted, MeetingStatusCanceled:
		return true
	}
	return false
}

func (e MeetingStatus) String() string {
	return string(e)
}

func (e *MeetingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeetingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeetingStatus", str)
	}
	return nil
}

func (e MeetingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OfferingType string

const (
	OfferingTypeProduct OfferingType = "PRODUCT"
	OfferingTypeService OfferingType = "SERVICE"
)

var AllOfferingType = []OfferingType{
	OfferingTypeProduct,
	OfferingTypeService,
}

func (e OfferingType) IsValid() bool {
	switch e {
	case OfferingTypeProduct, OfferingTypeService:
		return true
	}
	return false
}

func (e OfferingType) String() string {
	return string(e)
}

func (e *OfferingType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OfferingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OfferingType", str)
	}
	return nil
}

func (e OfferingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingPlanMilestoneItemStatus string

const (
	OnboardingPlanMilestoneItemStatusNotDone     OnboardingPlanMilestoneItemStatus = "NOT_DONE"
	OnboardingPlanMilestoneItemStatusSkipped     OnboardingPlanMilestoneItemStatus = "SKIPPED"
	OnboardingPlanMilestoneItemStatusDone        OnboardingPlanMilestoneItemStatus = "DONE"
	OnboardingPlanMilestoneItemStatusNotDoneLate OnboardingPlanMilestoneItemStatus = "NOT_DONE_LATE"
	OnboardingPlanMilestoneItemStatusSkippedLate OnboardingPlanMilestoneItemStatus = "SKIPPED_LATE"
	OnboardingPlanMilestoneItemStatusDoneLate    OnboardingPlanMilestoneItemStatus = "DONE_LATE"
)

var AllOnboardingPlanMilestoneItemStatus = []OnboardingPlanMilestoneItemStatus{
	OnboardingPlanMilestoneItemStatusNotDone,
	OnboardingPlanMilestoneItemStatusSkipped,
	OnboardingPlanMilestoneItemStatusDone,
	OnboardingPlanMilestoneItemStatusNotDoneLate,
	OnboardingPlanMilestoneItemStatusSkippedLate,
	OnboardingPlanMilestoneItemStatusDoneLate,
}

func (e OnboardingPlanMilestoneItemStatus) IsValid() bool {
	switch e {
	case OnboardingPlanMilestoneItemStatusNotDone, OnboardingPlanMilestoneItemStatusSkipped, OnboardingPlanMilestoneItemStatusDone, OnboardingPlanMilestoneItemStatusNotDoneLate, OnboardingPlanMilestoneItemStatusSkippedLate, OnboardingPlanMilestoneItemStatusDoneLate:
		return true
	}
	return false
}

func (e OnboardingPlanMilestoneItemStatus) String() string {
	return string(e)
}

func (e *OnboardingPlanMilestoneItemStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingPlanMilestoneItemStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingPlanMilestoneItemStatus", str)
	}
	return nil
}

func (e OnboardingPlanMilestoneItemStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingPlanMilestoneStatus string

const (
	OnboardingPlanMilestoneStatusNotStarted     OnboardingPlanMilestoneStatus = "NOT_STARTED"
	OnboardingPlanMilestoneStatusStarted        OnboardingPlanMilestoneStatus = "STARTED"
	OnboardingPlanMilestoneStatusDone           OnboardingPlanMilestoneStatus = "DONE"
	OnboardingPlanMilestoneStatusNotStartedLate OnboardingPlanMilestoneStatus = "NOT_STARTED_LATE"
	OnboardingPlanMilestoneStatusStartedLate    OnboardingPlanMilestoneStatus = "STARTED_LATE"
	OnboardingPlanMilestoneStatusDoneLate       OnboardingPlanMilestoneStatus = "DONE_LATE"
)

var AllOnboardingPlanMilestoneStatus = []OnboardingPlanMilestoneStatus{
	OnboardingPlanMilestoneStatusNotStarted,
	OnboardingPlanMilestoneStatusStarted,
	OnboardingPlanMilestoneStatusDone,
	OnboardingPlanMilestoneStatusNotStartedLate,
	OnboardingPlanMilestoneStatusStartedLate,
	OnboardingPlanMilestoneStatusDoneLate,
}

func (e OnboardingPlanMilestoneStatus) IsValid() bool {
	switch e {
	case OnboardingPlanMilestoneStatusNotStarted, OnboardingPlanMilestoneStatusStarted, OnboardingPlanMilestoneStatusDone, OnboardingPlanMilestoneStatusNotStartedLate, OnboardingPlanMilestoneStatusStartedLate, OnboardingPlanMilestoneStatusDoneLate:
		return true
	}
	return false
}

func (e OnboardingPlanMilestoneStatus) String() string {
	return string(e)
}

func (e *OnboardingPlanMilestoneStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingPlanMilestoneStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingPlanMilestoneStatus", str)
	}
	return nil
}

func (e OnboardingPlanMilestoneStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingPlanStatus string

const (
	OnboardingPlanStatusNotStarted     OnboardingPlanStatus = "NOT_STARTED"
	OnboardingPlanStatusOnTrack        OnboardingPlanStatus = "ON_TRACK"
	OnboardingPlanStatusLate           OnboardingPlanStatus = "LATE"
	OnboardingPlanStatusDone           OnboardingPlanStatus = "DONE"
	OnboardingPlanStatusNotStartedLate OnboardingPlanStatus = "NOT_STARTED_LATE"
	OnboardingPlanStatusDoneLate       OnboardingPlanStatus = "DONE_LATE"
)

var AllOnboardingPlanStatus = []OnboardingPlanStatus{
	OnboardingPlanStatusNotStarted,
	OnboardingPlanStatusOnTrack,
	OnboardingPlanStatusLate,
	OnboardingPlanStatusDone,
	OnboardingPlanStatusNotStartedLate,
	OnboardingPlanStatusDoneLate,
}

func (e OnboardingPlanStatus) IsValid() bool {
	switch e {
	case OnboardingPlanStatusNotStarted, OnboardingPlanStatusOnTrack, OnboardingPlanStatusLate, OnboardingPlanStatusDone, OnboardingPlanStatusNotStartedLate, OnboardingPlanStatusDoneLate:
		return true
	}
	return false
}

func (e OnboardingPlanStatus) String() string {
	return string(e)
}

func (e *OnboardingPlanStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingPlanStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingPlanStatus", str)
	}
	return nil
}

func (e OnboardingPlanStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingStatus string

const (
	OnboardingStatusNotApplicable OnboardingStatus = "NOT_APPLICABLE"
	OnboardingStatusNotStarted    OnboardingStatus = "NOT_STARTED"
	OnboardingStatusOnTrack       OnboardingStatus = "ON_TRACK"
	OnboardingStatusLate          OnboardingStatus = "LATE"
	OnboardingStatusStuck         OnboardingStatus = "STUCK"
	OnboardingStatusDone          OnboardingStatus = "DONE"
	OnboardingStatusSuccessful    OnboardingStatus = "SUCCESSFUL"
)

var AllOnboardingStatus = []OnboardingStatus{
	OnboardingStatusNotApplicable,
	OnboardingStatusNotStarted,
	OnboardingStatusOnTrack,
	OnboardingStatusLate,
	OnboardingStatusStuck,
	OnboardingStatusDone,
	OnboardingStatusSuccessful,
}

func (e OnboardingStatus) IsValid() bool {
	switch e {
	case OnboardingStatusNotApplicable, OnboardingStatusNotStarted, OnboardingStatusOnTrack, OnboardingStatusLate, OnboardingStatusStuck, OnboardingStatusDone, OnboardingStatusSuccessful:
		return true
	}
	return false
}

func (e OnboardingStatus) String() string {
	return string(e)
}

func (e *OnboardingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingStatus", str)
	}
	return nil
}

func (e OnboardingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OpportunityRenewalLikelihood string

const (
	OpportunityRenewalLikelihoodHighRenewal   OpportunityRenewalLikelihood = "HIGH_RENEWAL"
	OpportunityRenewalLikelihoodMediumRenewal OpportunityRenewalLikelihood = "MEDIUM_RENEWAL"
	OpportunityRenewalLikelihoodLowRenewal    OpportunityRenewalLikelihood = "LOW_RENEWAL"
	OpportunityRenewalLikelihoodZeroRenewal   OpportunityRenewalLikelihood = "ZERO_RENEWAL"
)

var AllOpportunityRenewalLikelihood = []OpportunityRenewalLikelihood{
	OpportunityRenewalLikelihoodHighRenewal,
	OpportunityRenewalLikelihoodMediumRenewal,
	OpportunityRenewalLikelihoodLowRenewal,
	OpportunityRenewalLikelihoodZeroRenewal,
}

func (e OpportunityRenewalLikelihood) IsValid() bool {
	switch e {
	case OpportunityRenewalLikelihoodHighRenewal, OpportunityRenewalLikelihoodMediumRenewal, OpportunityRenewalLikelihoodLowRenewal, OpportunityRenewalLikelihoodZeroRenewal:
		return true
	}
	return false
}

func (e OpportunityRenewalLikelihood) String() string {
	return string(e)
}

func (e *OpportunityRenewalLikelihood) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OpportunityRenewalLikelihood(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OpportunityRenewalLikelihood", str)
	}
	return nil
}

func (e OpportunityRenewalLikelihood) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrganizationRelationship string

const (
	OrganizationRelationshipCustomer       OrganizationRelationship = "CUSTOMER"
	OrganizationRelationshipProspect       OrganizationRelationship = "PROSPECT"
	OrganizationRelationshipNotAFit        OrganizationRelationship = "NOT_A_FIT"
	OrganizationRelationshipFormerCustomer OrganizationRelationship = "FORMER_CUSTOMER"
)

var AllOrganizationRelationship = []OrganizationRelationship{
	OrganizationRelationshipCustomer,
	OrganizationRelationshipProspect,
	OrganizationRelationshipNotAFit,
	OrganizationRelationshipFormerCustomer,
}

func (e OrganizationRelationship) IsValid() bool {
	switch e {
	case OrganizationRelationshipCustomer, OrganizationRelationshipProspect, OrganizationRelationshipNotAFit, OrganizationRelationshipFormerCustomer:
		return true
	}
	return false
}

func (e OrganizationRelationship) String() string {
	return string(e)
}

func (e *OrganizationRelationship) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationRelationship(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationRelationship", str)
	}
	return nil
}

func (e OrganizationRelationship) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrganizationStage string

const (
	OrganizationStageEngaged        OrganizationStage = "ENGAGED"
	OrganizationStageInitialValue   OrganizationStage = "INITIAL_VALUE"
	OrganizationStageLead           OrganizationStage = "LEAD"
	OrganizationStageMaxValue       OrganizationStage = "MAX_VALUE"
	OrganizationStageOnboarding     OrganizationStage = "ONBOARDING"
	OrganizationStagePendingChurn   OrganizationStage = "PENDING_CHURN"
	OrganizationStageReadyToBuy     OrganizationStage = "READY_TO_BUY"
	OrganizationStageRecurringValue OrganizationStage = "RECURRING_VALUE"
	OrganizationStageTarget         OrganizationStage = "TARGET"
	OrganizationStageTrial          OrganizationStage = "TRIAL"
	OrganizationStageUnqualified    OrganizationStage = "UNQUALIFIED"
)

var AllOrganizationStage = []OrganizationStage{
	OrganizationStageEngaged,
	OrganizationStageInitialValue,
	OrganizationStageLead,
	OrganizationStageMaxValue,
	OrganizationStageOnboarding,
	OrganizationStagePendingChurn,
	OrganizationStageReadyToBuy,
	OrganizationStageRecurringValue,
	OrganizationStageTarget,
	OrganizationStageTrial,
	OrganizationStageUnqualified,
}

func (e OrganizationStage) IsValid() bool {
	switch e {
	case OrganizationStageEngaged, OrganizationStageInitialValue, OrganizationStageLead, OrganizationStageMaxValue, OrganizationStageOnboarding, OrganizationStagePendingChurn, OrganizationStageReadyToBuy, OrganizationStageRecurringValue, OrganizationStageTarget, OrganizationStageTrial, OrganizationStageUnqualified:
		return true
	}
	return false
}

func (e OrganizationStage) String() string {
	return string(e)
}

func (e *OrganizationStage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrganizationStage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrganizationStage", str)
	}
	return nil
}

func (e OrganizationStage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The honorific title of an individual.
// **A `response` object.**
type PersonTitle string

const (
	// For men, regardless of marital status.
	PersonTitleMr PersonTitle = "MR"
	// For married women.
	PersonTitleMrs PersonTitle = "MRS"
	// For girls, unmarried women, and married women who continue to use their maiden name.
	PersonTitleMiss PersonTitle = "MISS"
	// For women, regardless of marital status, or when marital status is unknown.
	PersonTitleMs PersonTitle = "MS"
	// For the holder of a doctoral degree.
	PersonTitleDr PersonTitle = "DR"
)

var AllPersonTitle = []PersonTitle{
	PersonTitleMr,
	PersonTitleMrs,
	PersonTitleMiss,
	PersonTitleMs,
	PersonTitleDr,
}

func (e PersonTitle) IsValid() bool {
	switch e {
	case PersonTitleMr, PersonTitleMrs, PersonTitleMiss, PersonTitleMs, PersonTitleDr:
		return true
	}
	return false
}

func (e PersonTitle) String() string {
	return string(e)
}

func (e *PersonTitle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PersonTitle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PersonTitle", str)
	}
	return nil
}

func (e PersonTitle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Defines the type of phone number.
// **A `response` object. **
type PhoneNumberLabel string

const (
	PhoneNumberLabelMain   PhoneNumberLabel = "MAIN"
	PhoneNumberLabelWork   PhoneNumberLabel = "WORK"
	PhoneNumberLabelHome   PhoneNumberLabel = "HOME"
	PhoneNumberLabelMobile PhoneNumberLabel = "MOBILE"
	PhoneNumberLabelOther  PhoneNumberLabel = "OTHER"
)

var AllPhoneNumberLabel = []PhoneNumberLabel{
	PhoneNumberLabelMain,
	PhoneNumberLabelWork,
	PhoneNumberLabelHome,
	PhoneNumberLabelMobile,
	PhoneNumberLabelOther,
}

func (e PhoneNumberLabel) IsValid() bool {
	switch e {
	case PhoneNumberLabelMain, PhoneNumberLabelWork, PhoneNumberLabelHome, PhoneNumberLabelMobile, PhoneNumberLabelOther:
		return true
	}
	return false
}

func (e PhoneNumberLabel) String() string {
	return string(e)
}

func (e *PhoneNumberLabel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhoneNumberLabel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhoneNumberLabel", str)
	}
	return nil
}

func (e PhoneNumberLabel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PricingModel string

const (
	PricingModelSubscription PricingModel = "SUBSCRIPTION"
	PricingModelOneTime      PricingModel = "ONE_TIME"
	PricingModelUsage        PricingModel = "USAGE"
)

var AllPricingModel = []PricingModel{
	PricingModelSubscription,
	PricingModelOneTime,
	PricingModelUsage,
}

func (e PricingModel) IsValid() bool {
	switch e {
	case PricingModelSubscription, PricingModelOneTime, PricingModelUsage:
		return true
	}
	return false
}

func (e PricingModel) String() string {
	return string(e)
}

func (e *PricingModel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PricingModel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PricingModel", str)
	}
	return nil
}

func (e PricingModel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser          Role = "USER"
	RoleOwner         Role = "OWNER"
	RoleAdmin         Role = "ADMIN"
	RolePlatformOwner Role = "PLATFORM_OWNER"
)

var AllRole = []Role{
	RoleUser,
	RoleOwner,
	RoleAdmin,
	RolePlatformOwner,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleOwner, RoleAdmin, RolePlatformOwner:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortingDirection string

const (
	SortingDirectionAsc  SortingDirection = "ASC"
	SortingDirectionDesc SortingDirection = "DESC"
)

var AllSortingDirection = []SortingDirection{
	SortingDirectionAsc,
	SortingDirectionDesc,
}

func (e SortingDirection) IsValid() bool {
	switch e {
	case SortingDirectionAsc, SortingDirectionDesc:
		return true
	}
	return false
}

func (e SortingDirection) String() string {
	return string(e)
}

func (e *SortingDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortingDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortingDirection", str)
	}
	return nil
}

func (e SortingDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TableIDType string

const (
	TableIDTypeOrganizations                  TableIDType = "ORGANIZATIONS"
	TableIDTypeCustomers                      TableIDType = "CUSTOMERS"
	TableIDTypeTargets                        TableIDType = "TARGETS"
	TableIDTypeUpcomingInvoices               TableIDType = "UPCOMING_INVOICES"
	TableIDTypePastInvoices                   TableIDType = "PAST_INVOICES"
	TableIDTypeContacts                       TableIDType = "CONTACTS"
	TableIDTypeContactsForTargetOrganizations TableIDType = "CONTACTS_FOR_TARGET_ORGANIZATIONS"
	TableIDTypeOpportunities                  TableIDType = "OPPORTUNITIES"
	TableIDTypeOpportunitiesRecords           TableIDType = "OPPORTUNITIES_RECORDS"
	TableIDTypeContracts                      TableIDType = "CONTRACTS"
	TableIDTypeFlowSequences                  TableIDType = "FLOW_SEQUENCES"
)

var AllTableIDType = []TableIDType{
	TableIDTypeOrganizations,
	TableIDTypeCustomers,
	TableIDTypeTargets,
	TableIDTypeUpcomingInvoices,
	TableIDTypePastInvoices,
	TableIDTypeContacts,
	TableIDTypeContactsForTargetOrganizations,
	TableIDTypeOpportunities,
	TableIDTypeOpportunitiesRecords,
	TableIDTypeContracts,
	TableIDTypeFlowSequences,
}

func (e TableIDType) IsValid() bool {
	switch e {
	case TableIDTypeOrganizations, TableIDTypeCustomers, TableIDTypeTargets, TableIDTypeUpcomingInvoices, TableIDTypePastInvoices, TableIDTypeContacts, TableIDTypeContactsForTargetOrganizations, TableIDTypeOpportunities, TableIDTypeOpportunitiesRecords, TableIDTypeContracts, TableIDTypeFlowSequences:
		return true
	}
	return false
}

func (e TableIDType) String() string {
	return string(e)
}

func (e *TableIDType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TableIDType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TableIdType", str)
	}
	return nil
}

func (e TableIDType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TableViewType string

const (
	TableViewTypeOrganizations TableViewType = "ORGANIZATIONS"
	TableViewTypeInvoices      TableViewType = "INVOICES"
	TableViewTypeContacts      TableViewType = "CONTACTS"
	TableViewTypeOpportunities TableViewType = "OPPORTUNITIES"
	TableViewTypeContracts     TableViewType = "CONTRACTS"
	TableViewTypeFlow          TableViewType = "FLOW"
)

var AllTableViewType = []TableViewType{
	TableViewTypeOrganizations,
	TableViewTypeInvoices,
	TableViewTypeContacts,
	TableViewTypeOpportunities,
	TableViewTypeContracts,
	TableViewTypeFlow,
}

func (e TableViewType) IsValid() bool {
	switch e {
	case TableViewTypeOrganizations, TableViewTypeInvoices, TableViewTypeContacts, TableViewTypeOpportunities, TableViewTypeContracts, TableViewTypeFlow:
		return true
	}
	return false
}

func (e TableViewType) String() string {
	return string(e)
}

func (e *TableViewType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TableViewType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TableViewType", str)
	}
	return nil
}

func (e TableViewType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimelineEventType string

const (
	TimelineEventTypePageView           TimelineEventType = "PAGE_VIEW"
	TimelineEventTypeInteractionSession TimelineEventType = "INTERACTION_SESSION"
	TimelineEventTypeNote               TimelineEventType = "NOTE"
	TimelineEventTypeInteractionEvent   TimelineEventType = "INTERACTION_EVENT"
	TimelineEventTypeAnalysis           TimelineEventType = "ANALYSIS"
	TimelineEventTypeIssue              TimelineEventType = "ISSUE"
	TimelineEventTypeMeeting            TimelineEventType = "MEETING"
	TimelineEventTypeAction             TimelineEventType = "ACTION"
	TimelineEventTypeLogEntry           TimelineEventType = "LOG_ENTRY"
	TimelineEventTypeOrder              TimelineEventType = "ORDER"
)

var AllTimelineEventType = []TimelineEventType{
	TimelineEventTypePageView,
	TimelineEventTypeInteractionSession,
	TimelineEventTypeNote,
	TimelineEventTypeInteractionEvent,
	TimelineEventTypeAnalysis,
	TimelineEventTypeIssue,
	TimelineEventTypeMeeting,
	TimelineEventTypeAction,
	TimelineEventTypeLogEntry,
	TimelineEventTypeOrder,
}

func (e TimelineEventType) IsValid() bool {
	switch e {
	case TimelineEventTypePageView, TimelineEventTypeInteractionSession, TimelineEventTypeNote, TimelineEventTypeInteractionEvent, TimelineEventTypeAnalysis, TimelineEventTypeIssue, TimelineEventTypeMeeting, TimelineEventTypeAction, TimelineEventTypeLogEntry, TimelineEventTypeOrder:
		return true
	}
	return false
}

func (e TimelineEventType) String() string {
	return string(e)
}

func (e *TimelineEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimelineEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimelineEventType", str)
	}
	return nil
}

func (e TimelineEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorkflowType string

const (
	WorkflowTypeIdealCustomerProfile WorkflowType = "IDEAL_CUSTOMER_PROFILE"
	WorkflowTypeIdealContactPersona  WorkflowType = "IDEAL_CONTACT_PERSONA"
)

var AllWorkflowType = []WorkflowType{
	WorkflowTypeIdealCustomerProfile,
	WorkflowTypeIdealContactPersona,
}

func (e WorkflowType) IsValid() bool {
	switch e {
	case WorkflowTypeIdealCustomerProfile, WorkflowTypeIdealContactPersona:
		return true
	}
	return false
}

func (e WorkflowType) String() string {
	return string(e)
}

func (e *WorkflowType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorkflowType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorkflowType", str)
	}
	return nil
}

func (e WorkflowType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
