// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Analysis() AnalysisResolver
	ColumnDef() ColumnDefResolver
	ColumnType() ColumnTypeResolver
	Comment() CommentResolver
	Contact() ContactResolver
	Contract() ContractResolver
	CustomField() CustomFieldResolver
	DashboardCustomerMap() DashboardCustomerMapResolver
	Email() EmailResolver
	EntityTemplate() EntityTemplateResolver
	FieldSet() FieldSetResolver
	FieldSetTemplate() FieldSetTemplateResolver
	InteractionEvent() InteractionEventResolver
	InteractionSession() InteractionSessionResolver
	Invoice() InvoiceResolver
	Issue() IssueResolver
	JobRole() JobRoleResolver
	LastTouchpoint() LastTouchpointResolver
	LogEntry() LogEntryResolver
	MasterPlan() MasterPlanResolver
	Meeting() MeetingResolver
	Mutation() MutationResolver
	Note() NoteResolver
	Opportunity() OpportunityResolver
	Organization() OrganizationResolver
	OrganizationPlan() OrganizationPlanResolver
	PhoneNumber() PhoneNumberResolver
	Player() PlayerResolver
	Query() QueryResolver
	Reminder() ReminderResolver
	ServiceLineItem() ServiceLineItemResolver
	SlackChannel() SlackChannelResolver
	TableViewDef() TableViewDefResolver
	User() UserResolver
	ViewType() ViewTypeResolver
}

type DirectiveRoot struct {
	HasIdentityId func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasRole       func(ctx context.Context, obj interface{}, next graphql.Resolver, roles []model.Role) (res interface{}, err error)
	HasTenant     func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Action struct {
		ActionType func(childComplexity int) int
		AppSource  func(childComplexity int) int
		Content    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		ID         func(childComplexity int) int
		Metadata   func(childComplexity int) int
		Source     func(childComplexity int) int
	}

	ActionItem struct {
		AppSource func(childComplexity int) int
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Source    func(childComplexity int) int
	}

	Analysis struct {
		AnalysisType  func(childComplexity int) int
		AppSource     func(childComplexity int) int
		Content       func(childComplexity int) int
		ContentType   func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Describes     func(childComplexity int) int
		ID            func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
	}

	Attachment struct {
		AppSource     func(childComplexity int) int
		BasePath      func(childComplexity int) int
		CdnURL        func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		FileName      func(childComplexity int) int
		ID            func(childComplexity int) int
		MimeType      func(childComplexity int) int
		Size          func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
	}

	BankAccount struct {
		AccountNumber       func(childComplexity int) int
		AllowInternational  func(childComplexity int) int
		BankName            func(childComplexity int) int
		BankTransferEnabled func(childComplexity int) int
		Bic                 func(childComplexity int) int
		Currency            func(childComplexity int) int
		Iban                func(childComplexity int) int
		Metadata            func(childComplexity int) int
		OtherDetails        func(childComplexity int) int
		RoutingNumber       func(childComplexity int) int
		SortCode            func(childComplexity int) int
	}

	BillingDetails struct {
		AddressLine1           func(childComplexity int) int
		AddressLine2           func(childComplexity int) int
		BillingCycle           func(childComplexity int) int
		BillingEmail           func(childComplexity int) int
		CanPayWithBankTransfer func(childComplexity int) int
		CanPayWithCard         func(childComplexity int) int
		CanPayWithDirectDebit  func(childComplexity int) int
		Country                func(childComplexity int) int
		InvoiceNote            func(childComplexity int) int
		InvoicingStarted       func(childComplexity int) int
		Locality               func(childComplexity int) int
		NextInvoicing          func(childComplexity int) int
		OrganizationLegalName  func(childComplexity int) int
		PayAutomatically       func(childComplexity int) int
		PayOnline              func(childComplexity int) int
		PostalCode             func(childComplexity int) int
		Region                 func(childComplexity int) int
	}

	BillingProfile struct {
		AppSource     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		LegalName     func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		TaxID         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	Calendar struct {
		AppSource     func(childComplexity int) int
		CalType       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Link          func(childComplexity int) int
		Primary       func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	ColumnDef struct {
		ColumnType    func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ID            func(childComplexity int) int
		IsDefaultSort func(childComplexity int) int
		IsFilterable  func(childComplexity int) int
		IsSortable    func(childComplexity int) int
		IsVisible     func(childComplexity int) int
		Type          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	ColumnType struct {
		CreatedAt  func(childComplexity int) int
		CreatedBy  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		ViewTypeID func(childComplexity int) int
	}

	Comment struct {
		AppSource     func(childComplexity int) int
		Content       func(childComplexity int) int
		ContentType   func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ExternalLinks func(childComplexity int) int
		ID            func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	Contact struct {
		AppSource                func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		CustomFields             func(childComplexity int) int
		Description              func(childComplexity int) int
		Emails                   func(childComplexity int) int
		FieldSets                func(childComplexity int) int
		FirstName                func(childComplexity int) int
		ID                       func(childComplexity int) int
		JobRoles                 func(childComplexity int) int
		Label                    func(childComplexity int) int
		LastName                 func(childComplexity int) int
		Locations                func(childComplexity int) int
		Name                     func(childComplexity int) int
		Notes                    func(childComplexity int, pagination *model.Pagination) int
		NotesByTime              func(childComplexity int, pagination *model.TimeRange) int
		Organizations            func(childComplexity int, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) int
		Owner                    func(childComplexity int) int
		PhoneNumbers             func(childComplexity int) int
		Prefix                   func(childComplexity int) int
		ProfilePhotoURL          func(childComplexity int) int
		Socials                  func(childComplexity int) int
		Source                   func(childComplexity int) int
		SourceOfTruth            func(childComplexity int) int
		Tags                     func(childComplexity int) int
		Template                 func(childComplexity int) int
		TimelineEvents           func(childComplexity int, from *time.Time, size int, timelineEventTypes []model.TimelineEventType) int
		TimelineEventsTotalCount func(childComplexity int, timelineEventTypes []model.TimelineEventType) int
		Timezone                 func(childComplexity int) int
		Title                    func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
	}

	ContactParticipant struct {
		ContactParticipant func(childComplexity int) int
		Type               func(childComplexity int) int
	}

	ContactsPage struct {
		Content       func(childComplexity int) int
		TotalElements func(childComplexity int) int
		TotalPages    func(childComplexity int) int
	}

	Contract struct {
		AddressLine1          func(childComplexity int) int
		AddressLine2          func(childComplexity int) int
		AppSource             func(childComplexity int) int
		BillingCycle          func(childComplexity int) int
		BillingDetails        func(childComplexity int) int
		BillingEnabled        func(childComplexity int) int
		CommittedPeriods      func(childComplexity int) int
		ContractEnded         func(childComplexity int) int
		ContractLineItems     func(childComplexity int) int
		ContractName          func(childComplexity int) int
		ContractRenewalCycle  func(childComplexity int) int
		ContractSigned        func(childComplexity int) int
		ContractStatus        func(childComplexity int) int
		ContractURL           func(childComplexity int) int
		Country               func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		CreatedBy             func(childComplexity int) int
		Currency              func(childComplexity int) int
		EndedAt               func(childComplexity int) int
		ExternalLinks         func(childComplexity int) int
		ID                    func(childComplexity int) int
		InvoiceEmail          func(childComplexity int) int
		InvoiceNote           func(childComplexity int) int
		InvoicingStartDate    func(childComplexity int) int
		Locality              func(childComplexity int) int
		Metadata              func(childComplexity int) int
		Name                  func(childComplexity int) int
		Opportunities         func(childComplexity int) int
		OrganizationLegalName func(childComplexity int) int
		Owner                 func(childComplexity int) int
		RenewalCycle          func(childComplexity int) int
		RenewalPeriods        func(childComplexity int) int
		ServiceLineItems      func(childComplexity int) int
		ServiceStarted        func(childComplexity int) int
		ServiceStartedAt      func(childComplexity int) int
		SignedAt              func(childComplexity int) int
		Source                func(childComplexity int) int
		SourceOfTruth         func(childComplexity int) int
		Status                func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		Zip                   func(childComplexity int) int
	}

	Country struct {
		CodeA2    func(childComplexity int) int
		CodeA3    func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		PhoneCode func(childComplexity int) int
	}

	CustomField struct {
		CreatedAt func(childComplexity int) int
		Datatype  func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Source    func(childComplexity int) int
		Template  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	CustomFieldTemplate struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Length    func(childComplexity int) int
		Mandatory func(childComplexity int) int
		Max       func(childComplexity int) int
		Min       func(childComplexity int) int
		Name      func(childComplexity int) int
		Order     func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	CustomerContact struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
	}

	CustomerEmail struct {
		ID func(childComplexity int) int
	}

	CustomerJobRole struct {
		ID func(childComplexity int) int
	}

	CustomerUser struct {
		ID      func(childComplexity int) int
		JobRole func(childComplexity int) int
	}

	DashboardARRBreakdown struct {
		ArrBreakdown       func(childComplexity int) int
		IncreasePercentage func(childComplexity int) int
		PerMonth           func(childComplexity int) int
	}

	DashboardARRBreakdownPerMonth struct {
		Cancellations   func(childComplexity int) int
		Churned         func(childComplexity int) int
		Downgrades      func(childComplexity int) int
		Month           func(childComplexity int) int
		NewlyContracted func(childComplexity int) int
		Renewals        func(childComplexity int) int
		Upsells         func(childComplexity int) int
		Year            func(childComplexity int) int
	}

	DashboardCustomerMap struct {
		Arr                func(childComplexity int) int
		ContractSignedDate func(childComplexity int) int
		Organization       func(childComplexity int) int
		OrganizationID     func(childComplexity int) int
		State              func(childComplexity int) int
	}

	DashboardGrossRevenueRetention struct {
		GrossRevenueRetention   func(childComplexity int) int
		IncreasePercentage      func(childComplexity int) int
		IncreasePercentageValue func(childComplexity int) int
		PerMonth                func(childComplexity int) int
	}

	DashboardGrossRevenueRetentionPerMonth struct {
		Month      func(childComplexity int) int
		Percentage func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	DashboardMRRPerCustomer struct {
		IncreasePercentage func(childComplexity int) int
		MrrPerCustomer     func(childComplexity int) int
		PerMonth           func(childComplexity int) int
	}

	DashboardMRRPerCustomerPerMonth struct {
		Month func(childComplexity int) int
		Value func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	DashboardNewCustomers struct {
		PerMonth                    func(childComplexity int) int
		ThisMonthCount              func(childComplexity int) int
		ThisMonthIncreasePercentage func(childComplexity int) int
	}

	DashboardNewCustomersPerMonth struct {
		Count func(childComplexity int) int
		Month func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	DashboardOnboardingCompletion struct {
		CompletionPercentage func(childComplexity int) int
		IncreasePercentage   func(childComplexity int) int
		PerMonth             func(childComplexity int) int
	}

	DashboardOnboardingCompletionPerMonth struct {
		Month func(childComplexity int) int
		Value func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	DashboardRetentionRate struct {
		IncreasePercentage      func(childComplexity int) int
		IncreasePercentageValue func(childComplexity int) int
		PerMonth                func(childComplexity int) int
		RetentionRate           func(childComplexity int) int
	}

	DashboardRetentionRatePerMonth struct {
		ChurnCount func(childComplexity int) int
		Month      func(childComplexity int) int
		RenewCount func(childComplexity int) int
		Year       func(childComplexity int) int
	}

	DashboardRevenueAtRisk struct {
		AtRisk         func(childComplexity int) int
		HighConfidence func(childComplexity int) int
	}

	DashboardTimeToOnboard struct {
		IncreasePercentage func(childComplexity int) int
		PerMonth           func(childComplexity int) int
		TimeToOnboard      func(childComplexity int) int
	}

	DashboardTimeToOnboardPerMonth struct {
		Month func(childComplexity int) int
		Value func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	DeleteResponse struct {
		Accepted  func(childComplexity int) int
		Completed func(childComplexity int) int
	}

	Email struct {
		AppSource              func(childComplexity int) int
		Contacts               func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		Email                  func(childComplexity int) int
		EmailValidationDetails func(childComplexity int) int
		ID                     func(childComplexity int) int
		Label                  func(childComplexity int) int
		Organizations          func(childComplexity int) int
		Primary                func(childComplexity int) int
		RawEmail               func(childComplexity int) int
		Source                 func(childComplexity int) int
		SourceOfTruth          func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
		Users                  func(childComplexity int) int
	}

	EmailParticipant struct {
		EmailParticipant func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	EmailValidationDetails struct {
		AcceptsMail    func(childComplexity int) int
		CanConnectSMTP func(childComplexity int) int
		Error          func(childComplexity int) int
		HasFullInbox   func(childComplexity int) int
		IsCatchAll     func(childComplexity int) int
		IsDeliverable  func(childComplexity int) int
		IsDisabled     func(childComplexity int) int
		IsReachable    func(childComplexity int) int
		IsValidSyntax  func(childComplexity int) int
		Validated      func(childComplexity int) int
	}

	EntityTemplate struct {
		CreatedAt            func(childComplexity int) int
		CustomFieldTemplates func(childComplexity int) int
		Extends              func(childComplexity int) int
		FieldSetTemplates    func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
		Version              func(childComplexity int) int
	}

	ExternalSystem struct {
		ExternalID     func(childComplexity int) int
		ExternalSource func(childComplexity int) int
		ExternalURL    func(childComplexity int) int
		SyncDate       func(childComplexity int) int
		Type           func(childComplexity int) int
	}

	ExternalSystemInstance struct {
		StripeDetails func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	ExternalSystemStripeDetails struct {
		PaymentMethodTypes func(childComplexity int) int
	}

	FieldSet struct {
		CreatedAt    func(childComplexity int) int
		CustomFields func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Source       func(childComplexity int) int
		Template     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	FieldSetTemplate struct {
		CreatedAt            func(childComplexity int) int
		CustomFieldTemplates func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Order                func(childComplexity int) int
		UpdatedAt            func(childComplexity int) int
	}

	GCliAttributeKeyValuePair struct {
		Display func(childComplexity int) int
		Key     func(childComplexity int) int
		Value   func(childComplexity int) int
	}

	GCliItem struct {
		Data    func(childComplexity int) int
		Display func(childComplexity int) int
		ID      func(childComplexity int) int
		Type    func(childComplexity int) int
	}

	GlobalCache struct {
		CdnLogoURL           func(childComplexity int) int
		ContractsExist       func(childComplexity int) int
		GCliCache            func(childComplexity int) int
		IsGoogleActive       func(childComplexity int) int
		IsGoogleTokenExpired func(childComplexity int) int
		IsOwner              func(childComplexity int) int
		MaxARRForecastValue  func(childComplexity int) int
		MinARRForecastValue  func(childComplexity int) int
		User                 func(childComplexity int) int
	}

	InteractionEvent struct {
		ActionItems        func(childComplexity int) int
		AppSource          func(childComplexity int) int
		Channel            func(childComplexity int) int
		ChannelData        func(childComplexity int) int
		Content            func(childComplexity int) int
		ContentType        func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		EventIdentifier    func(childComplexity int) int
		EventType          func(childComplexity int) int
		ExternalLinks      func(childComplexity int) int
		ID                 func(childComplexity int) int
		Includes           func(childComplexity int) int
		InteractionSession func(childComplexity int) int
		Issue              func(childComplexity int) int
		Meeting            func(childComplexity int) int
		RepliesTo          func(childComplexity int) int
		SentBy             func(childComplexity int) int
		SentTo             func(childComplexity int) int
		Source             func(childComplexity int) int
		SourceOfTruth      func(childComplexity int) int
		Summary            func(childComplexity int) int
	}

	InteractionSession struct {
		AppSource         func(childComplexity int) int
		AttendedBy        func(childComplexity int) int
		Channel           func(childComplexity int) int
		ChannelData       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		DescribedBy       func(childComplexity int) int
		EndedAt           func(childComplexity int) int
		Events            func(childComplexity int) int
		ID                func(childComplexity int) int
		Includes          func(childComplexity int) int
		Name              func(childComplexity int) int
		SessionIdentifier func(childComplexity int) int
		Source            func(childComplexity int) int
		SourceOfTruth     func(childComplexity int) int
		StartedAt         func(childComplexity int) int
		Status            func(childComplexity int) int
		Type              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	Invoice struct {
		AmountDue                     func(childComplexity int) int
		AmountPaid                    func(childComplexity int) int
		AmountRemaining               func(childComplexity int) int
		Contract                      func(childComplexity int) int
		Currency                      func(childComplexity int) int
		Customer                      func(childComplexity int) int
		DomesticPaymentsBankInfo      func(childComplexity int) int
		DryRun                        func(childComplexity int) int
		Due                           func(childComplexity int) int
		InternationalPaymentsBankInfo func(childComplexity int) int
		InvoiceLineItems              func(childComplexity int) int
		InvoiceNumber                 func(childComplexity int) int
		InvoicePeriodEnd              func(childComplexity int) int
		InvoicePeriodStart            func(childComplexity int) int
		InvoiceURL                    func(childComplexity int) int
		Metadata                      func(childComplexity int) int
		Note                          func(childComplexity int) int
		OffCycle                      func(childComplexity int) int
		Organization                  func(childComplexity int) int
		Paid                          func(childComplexity int) int
		Postpaid                      func(childComplexity int) int
		Provider                      func(childComplexity int) int
		RepositoryFileID              func(childComplexity int) int
		Status                        func(childComplexity int) int
		Subtotal                      func(childComplexity int) int
		TaxDue                        func(childComplexity int) int
	}

	InvoiceCustomer struct {
		AddressCountry  func(childComplexity int) int
		AddressLine1    func(childComplexity int) int
		AddressLine2    func(childComplexity int) int
		AddressLocality func(childComplexity int) int
		AddressZip      func(childComplexity int) int
		Email           func(childComplexity int) int
		Name            func(childComplexity int) int
	}

	InvoiceLine struct {
		Description func(childComplexity int) int
		Metadata    func(childComplexity int) int
		Price       func(childComplexity int) int
		Quantity    func(childComplexity int) int
		Subtotal    func(childComplexity int) int
		TaxDue      func(childComplexity int) int
		Total       func(childComplexity int) int
	}

	InvoiceProvider struct {
		AddressCountry       func(childComplexity int) int
		AddressLine1         func(childComplexity int) int
		AddressLine2         func(childComplexity int) int
		AddressLocality      func(childComplexity int) int
		AddressZip           func(childComplexity int) int
		LogoRepositoryFileID func(childComplexity int) int
		LogoURL              func(childComplexity int) int
		Name                 func(childComplexity int) int
	}

	InvoicesPage struct {
		Content       func(childComplexity int) int
		TotalElements func(childComplexity int) int
		TotalPages    func(childComplexity int) int
	}

	InvoicingCycle struct {
		AppSource     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		Type          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	Issue struct {
		AppSource         func(childComplexity int) int
		AssignedTo        func(childComplexity int) int
		Comments          func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Description       func(childComplexity int) int
		ExternalLinks     func(childComplexity int) int
		FollowedBy        func(childComplexity int) int
		ID                func(childComplexity int) int
		InteractionEvents func(childComplexity int) int
		Priority          func(childComplexity int) int
		ReportedBy        func(childComplexity int) int
		Source            func(childComplexity int) int
		SourceOfTruth     func(childComplexity int) int
		Status            func(childComplexity int) int
		Subject           func(childComplexity int) int
		SubmittedBy       func(childComplexity int) int
		Tags              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	IssueSummaryByStatus struct {
		Count  func(childComplexity int) int
		Status func(childComplexity int) int
	}

	JobRole struct {
		AppSource     func(childComplexity int) int
		Company       func(childComplexity int) int
		Contact       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Description   func(childComplexity int) int
		EndedAt       func(childComplexity int) int
		ID            func(childComplexity int) int
		JobTitle      func(childComplexity int) int
		Organization  func(childComplexity int) int
		Primary       func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		StartedAt     func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	JobRoleParticipant struct {
		JobRoleParticipant func(childComplexity int) int
		Type               func(childComplexity int) int
	}

	LastTouchpoint struct {
		LastTouchPointAt              func(childComplexity int) int
		LastTouchPointTimelineEvent   func(childComplexity int) int
		LastTouchPointTimelineEventID func(childComplexity int) int
		LastTouchPointType            func(childComplexity int) int
	}

	LinkedOrganization struct {
		Organization func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	Location struct {
		Address       func(childComplexity int) int
		Address2      func(childComplexity int) int
		AddressType   func(childComplexity int) int
		AppSource     func(childComplexity int) int
		Commercial    func(childComplexity int) int
		Country       func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		District      func(childComplexity int) int
		HouseNumber   func(childComplexity int) int
		ID            func(childComplexity int) int
		Latitude      func(childComplexity int) int
		Locality      func(childComplexity int) int
		Longitude     func(childComplexity int) int
		Name          func(childComplexity int) int
		PlusFour      func(childComplexity int) int
		PostalCode    func(childComplexity int) int
		Predirection  func(childComplexity int) int
		RawAddress    func(childComplexity int) int
		Region        func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		Street        func(childComplexity int) int
		TimeZone      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UtcOffset     func(childComplexity int) int
		Zip           func(childComplexity int) int
	}

	LogEntry struct {
		AppSource     func(childComplexity int) int
		Content       func(childComplexity int) int
		ContentType   func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ExternalLinks func(childComplexity int) int
		ID            func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		StartedAt     func(childComplexity int) int
		Tags          func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	MasterPlan struct {
		AppSource         func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		Milestones        func(childComplexity int) int
		Name              func(childComplexity int) int
		Retired           func(childComplexity int) int
		RetiredMilestones func(childComplexity int) int
		Source            func(childComplexity int) int
		SourceOfTruth     func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	MasterPlanMilestone struct {
		AppSource     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DurationHours func(childComplexity int) int
		ID            func(childComplexity int) int
		Items         func(childComplexity int) int
		Name          func(childComplexity int) int
		Optional      func(childComplexity int) int
		Order         func(childComplexity int) int
		Retired       func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	Meeting struct {
		Agenda             func(childComplexity int) int
		AgendaContentType  func(childComplexity int) int
		AppSource          func(childComplexity int) int
		AttendedBy         func(childComplexity int) int
		ConferenceURL      func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CreatedBy          func(childComplexity int) int
		DescribedBy        func(childComplexity int) int
		EndedAt            func(childComplexity int) int
		Events             func(childComplexity int) int
		ExternalSystem     func(childComplexity int) int
		ID                 func(childComplexity int) int
		Includes           func(childComplexity int) int
		MeetingExternalURL func(childComplexity int) int
		Name               func(childComplexity int) int
		Note               func(childComplexity int) int
		Recording          func(childComplexity int) int
		Source             func(childComplexity int) int
		SourceOfTruth      func(childComplexity int) int
		StartedAt          func(childComplexity int) int
		Status             func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
	}

	MeetingsPage struct {
		Content       func(childComplexity int) int
		TotalElements func(childComplexity int) int
		TotalPages    func(childComplexity int) int
	}

	Metadata struct {
		AppSource     func(childComplexity int) int
		Created       func(childComplexity int) int
		ID            func(childComplexity int) int
		LastUpdated   func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
	}

	Mutation struct {
		AnalysisCreate                          func(childComplexity int, analysis model.AnalysisInput) int
		AttachmentCreate                        func(childComplexity int, input model.AttachmentInput) int
		BankAccountCreate                       func(childComplexity int, input *model.BankAccountCreateInput) int
		BankAccountDelete                       func(childComplexity int, id string) int
		BankAccountUpdate                       func(childComplexity int, input *model.BankAccountUpdateInput) int
		BillingProfileCreate                    func(childComplexity int, input model.BillingProfileInput) int
		BillingProfileLinkEmail                 func(childComplexity int, input model.BillingProfileLinkEmailInput) int
		BillingProfileLinkLocation              func(childComplexity int, input model.BillingProfileLinkLocationInput) int
		BillingProfileUnlinkEmail               func(childComplexity int, input model.BillingProfileLinkEmailInput) int
		BillingProfileUnlinkLocation            func(childComplexity int, input model.BillingProfileLinkLocationInput) int
		BillingProfileUpdate                    func(childComplexity int, input model.BillingProfileUpdateInput) int
		ContactAddNewLocation                   func(childComplexity int, contactID string) int
		ContactAddOrganizationByID              func(childComplexity int, input model.ContactOrganizationInput) int
		ContactAddSocial                        func(childComplexity int, contactID string, input model.SocialInput) int
		ContactAddTagByID                       func(childComplexity int, input model.ContactTagInput) int
		ContactArchive                          func(childComplexity int, contactID string) int
		ContactCreate                           func(childComplexity int, input model.ContactInput) int
		ContactHardDelete                       func(childComplexity int, contactID string) int
		ContactMerge                            func(childComplexity int, primaryContactID string, mergedContactIds []string) int
		ContactRemoveLocation                   func(childComplexity int, contactID string, locationID string) int
		ContactRemoveOrganizationByID           func(childComplexity int, input model.ContactOrganizationInput) int
		ContactRemoveTagByID                    func(childComplexity int, input model.ContactTagInput) int
		ContactRestoreFromArchive               func(childComplexity int, contactID string) int
		ContactUpdate                           func(childComplexity int, input model.ContactUpdateInput) int
		ContractCreate                          func(childComplexity int, input model.ContractInput) int
		ContractDelete                          func(childComplexity int, id string) int
		ContractLineItemClose                   func(childComplexity int, input model.ServiceLineItemCloseInput) int
		ContractLineItemCreate                  func(childComplexity int, input model.ServiceLineItemInput) int
		ContractLineItemUpdate                  func(childComplexity int, input model.ServiceLineItemUpdateInput) int
		ContractUpdate                          func(childComplexity int, input model.ContractUpdateInput) int
		CustomFieldDeleteFromContactByID        func(childComplexity int, contactID string, id string) int
		CustomFieldDeleteFromContactByName      func(childComplexity int, contactID string, fieldName string) int
		CustomFieldDeleteFromFieldSetByID       func(childComplexity int, contactID string, fieldSetID string, id string) int
		CustomFieldMergeToContact               func(childComplexity int, contactID string, input model.CustomFieldInput) int
		CustomFieldMergeToFieldSet              func(childComplexity int, contactID string, fieldSetID string, input model.CustomFieldInput) int
		CustomFieldTemplateCreate               func(childComplexity int, input model.CustomFieldTemplateInput) int
		CustomFieldUpdateInContact              func(childComplexity int, contactID string, input model.CustomFieldUpdateInput) int
		CustomFieldUpdateInFieldSet             func(childComplexity int, contactID string, fieldSetID string, input model.CustomFieldUpdateInput) int
		CustomFieldsMergeAndUpdateInContact     func(childComplexity int, contactID string, customFields []*model.CustomFieldInput, fieldSets []*model.FieldSetInput) int
		CustomerContactCreate                   func(childComplexity int, input model.CustomerContactInput) int
		CustomerUserAddJobRole                  func(childComplexity int, id string, jobRoleInput model.JobRoleInput) int
		EmailDelete                             func(childComplexity int, id string) int
		EmailMergeToContact                     func(childComplexity int, contactID string, input model.EmailInput) int
		EmailMergeToOrganization                func(childComplexity int, organizationID string, input model.EmailInput) int
		EmailMergeToUser                        func(childComplexity int, userID string, input model.EmailInput) int
		EmailRemoveFromContact                  func(childComplexity int, contactID string, email string) int
		EmailRemoveFromContactByID              func(childComplexity int, contactID string, id string) int
		EmailRemoveFromOrganization             func(childComplexity int, organizationID string, email string) int
		EmailRemoveFromOrganizationByID         func(childComplexity int, organizationID string, id string) int
		EmailRemoveFromUser                     func(childComplexity int, userID string, email string) int
		EmailRemoveFromUserByID                 func(childComplexity int, userID string, id string) int
		EmailUpdateInContact                    func(childComplexity int, contactID string, input model.EmailUpdateInput) int
		EmailUpdateInOrganization               func(childComplexity int, organizationID string, input model.EmailUpdateInput) int
		EmailUpdateInUser                       func(childComplexity int, userID string, input model.EmailUpdateInput) int
		EntityTemplateCreate                    func(childComplexity int, input model.EntityTemplateInput) int
		FieldSetDeleteFromContact               func(childComplexity int, contactID string, id string) int
		FieldSetMergeToContact                  func(childComplexity int, contactID string, input model.FieldSetInput) int
		FieldSetUpdateInContact                 func(childComplexity int, contactID string, input model.FieldSetUpdateInput) int
		InteractionEventCreate                  func(childComplexity int, event model.InteractionEventInput) int
		InteractionEventLinkAttachment          func(childComplexity int, eventID string, attachmentID string) int
		InteractionSessionCreate                func(childComplexity int, session model.InteractionSessionInput) int
		InteractionSessionLinkAttachment        func(childComplexity int, sessionID string, attachmentID string) int
		InvoiceNextDryRunForContract            func(childComplexity int, contractID string) int
		InvoicePay                              func(childComplexity int, id string) int
		InvoiceSimulate                         func(childComplexity int, input model.InvoiceSimulateInput) int
		InvoiceUpdate                           func(childComplexity int, input model.InvoiceUpdateInput) int
		InvoiceVoid                             func(childComplexity int, id string) int
		InvoicingCycleCreate                    func(childComplexity int, input model.InvoicingCycleInput) int
		InvoicingCycleUpdate                    func(childComplexity int, input model.InvoicingCycleUpdateInput) int
		JobRoleCreate                           func(childComplexity int, contactID string, input model.JobRoleInput) int
		JobRoleDelete                           func(childComplexity int, contactID string, roleID string) int
		JobRoleUpdate                           func(childComplexity int, contactID string, input model.JobRoleUpdateInput) int
		LocationRemoveFromContact               func(childComplexity int, contactID string, locationID string) int
		LocationRemoveFromOrganization          func(childComplexity int, organizationID string, locationID string) int
		LocationUpdate                          func(childComplexity int, input model.LocationUpdateInput) int
		LogEntryAddTag                          func(childComplexity int, id string, input model.TagIDOrNameInput) int
		LogEntryCreateForOrganization           func(childComplexity int, organizationID string, input model.LogEntryInput) int
		LogEntryRemoveTag                       func(childComplexity int, id string, input model.TagIDOrNameInput) int
		LogEntryResetTags                       func(childComplexity int, id string, input []*model.TagIDOrNameInput) int
		LogEntryUpdate                          func(childComplexity int, id string, input model.LogEntryUpdateInput) int
		MasterPlanCreate                        func(childComplexity int, input model.MasterPlanInput) int
		MasterPlanCreateDefault                 func(childComplexity int, input model.MasterPlanInput) int
		MasterPlanDuplicate                     func(childComplexity int, id string) int
		MasterPlanMilestoneBulkUpdate           func(childComplexity int, input []*model.MasterPlanMilestoneUpdateInput) int
		MasterPlanMilestoneCreate               func(childComplexity int, input model.MasterPlanMilestoneInput) int
		MasterPlanMilestoneDuplicate            func(childComplexity int, masterPlanID string, id string) int
		MasterPlanMilestoneReorder              func(childComplexity int, input model.MasterPlanMilestoneReorderInput) int
		MasterPlanMilestoneUpdate               func(childComplexity int, input model.MasterPlanMilestoneUpdateInput) int
		MasterPlanUpdate                        func(childComplexity int, input model.MasterPlanUpdateInput) int
		MeetingAddNewLocation                   func(childComplexity int, meetingID string) int
		MeetingAddNote                          func(childComplexity int, meetingID string, note *model.NoteInput) int
		MeetingCreate                           func(childComplexity int, meeting model.MeetingInput) int
		MeetingLinkAttachment                   func(childComplexity int, meetingID string, attachmentID string) int
		MeetingLinkAttendedBy                   func(childComplexity int, meetingID string, participant model.MeetingParticipantInput) int
		MeetingLinkRecording                    func(childComplexity int, meetingID string, attachmentID string) int
		MeetingUnlinkAttachment                 func(childComplexity int, meetingID string, attachmentID string) int
		MeetingUnlinkAttendedBy                 func(childComplexity int, meetingID string, participant model.MeetingParticipantInput) int
		MeetingUnlinkRecording                  func(childComplexity int, meetingID string, attachmentID string) int
		MeetingUpdate                           func(childComplexity int, meetingID string, meeting model.MeetingUpdateInput) int
		NoteCreateForContact                    func(childComplexity int, contactID string, input model.NoteInput) int
		NoteCreateForOrganization               func(childComplexity int, organizationID string, input model.NoteInput) int
		NoteDelete                              func(childComplexity int, id string) int
		NoteLinkAttachment                      func(childComplexity int, noteID string, attachmentID string) int
		NoteUnlinkAttachment                    func(childComplexity int, noteID string, attachmentID string) int
		NoteUpdate                              func(childComplexity int, input model.NoteUpdateInput) int
		OpportunityRenewalUpdate                func(childComplexity int, input model.OpportunityRenewalUpdateInput, ownerUserID *string) int
		OpportunityUpdate                       func(childComplexity int, input model.OpportunityUpdateInput) int
		OrganizationAddNewLocation              func(childComplexity int, organizationID string) int
		OrganizationAddSocial                   func(childComplexity int, organizationID string, input model.SocialInput) int
		OrganizationAddSubsidiary               func(childComplexity int, input model.LinkOrganizationsInput) int
		OrganizationArchive                     func(childComplexity int, id string) int
		OrganizationArchiveAll                  func(childComplexity int, ids []string) int
		OrganizationCreate                      func(childComplexity int, input model.OrganizationInput) int
		OrganizationHide                        func(childComplexity int, id string) int
		OrganizationHideAll                     func(childComplexity int, ids []string) int
		OrganizationMerge                       func(childComplexity int, primaryOrganizationID string, mergedOrganizationIds []string) int
		OrganizationPlanCreate                  func(childComplexity int, input model.OrganizationPlanInput) int
		OrganizationPlanDuplicate               func(childComplexity int, id string, organizationID string) int
		OrganizationPlanMilestoneBulkUpdate     func(childComplexity int, input []*model.OrganizationPlanMilestoneUpdateInput) int
		OrganizationPlanMilestoneCreate         func(childComplexity int, input model.OrganizationPlanMilestoneInput) int
		OrganizationPlanMilestoneDuplicate      func(childComplexity int, organizationID string, organizationPlanID string, id string) int
		OrganizationPlanMilestoneReorder        func(childComplexity int, input model.OrganizationPlanMilestoneReorderInput) int
		OrganizationPlanMilestoneUpdate         func(childComplexity int, input model.OrganizationPlanMilestoneUpdateInput) int
		OrganizationPlanUpdate                  func(childComplexity int, input model.OrganizationPlanUpdateInput) int
		OrganizationRemoveSubsidiary            func(childComplexity int, organizationID string, subsidiaryID string) int
		OrganizationSetOwner                    func(childComplexity int, organizationID string, userID string) int
		OrganizationShow                        func(childComplexity int, id string) int
		OrganizationShowAll                     func(childComplexity int, ids []string) int
		OrganizationUnsetOwner                  func(childComplexity int, organizationID string) int
		OrganizationUpdate                      func(childComplexity int, input model.OrganizationUpdateInput) int
		OrganizationUpdateOnboardingStatus      func(childComplexity int, input model.OnboardingStatusInput) int
		PhoneNumberMergeToContact               func(childComplexity int, contactID string, input model.PhoneNumberInput) int
		PhoneNumberMergeToOrganization          func(childComplexity int, organizationID string, input model.PhoneNumberInput) int
		PhoneNumberMergeToUser                  func(childComplexity int, userID string, input model.PhoneNumberInput) int
		PhoneNumberRemoveFromContactByE164      func(childComplexity int, contactID string, e164 string) int
		PhoneNumberRemoveFromContactByID        func(childComplexity int, contactID string, id string) int
		PhoneNumberRemoveFromOrganizationByE164 func(childComplexity int, organizationID string, e164 string) int
		PhoneNumberRemoveFromOrganizationByID   func(childComplexity int, organizationID string, id string) int
		PhoneNumberRemoveFromUserByE164         func(childComplexity int, userID string, e164 string) int
		PhoneNumberRemoveFromUserByID           func(childComplexity int, userID string, id string) int
		PhoneNumberUpdateInContact              func(childComplexity int, contactID string, input model.PhoneNumberUpdateInput) int
		PhoneNumberUpdateInOrganization         func(childComplexity int, organizationID string, input model.PhoneNumberUpdateInput) int
		PhoneNumberUpdateInUser                 func(childComplexity int, userID string, input model.PhoneNumberUpdateInput) int
		PlayerMerge                             func(childComplexity int, userID string, input model.PlayerInput) int
		ReminderCreate                          func(childComplexity int, input model.ReminderInput) int
		ReminderUpdate                          func(childComplexity int, input model.ReminderUpdateInput) int
		ServiceLineItemBulkUpdate               func(childComplexity int, input model.ServiceLineItemBulkUpdateInput) int
		ServiceLineItemDelete                   func(childComplexity int, id string) int
		SocialRemove                            func(childComplexity int, socialID string) int
		SocialUpdate                            func(childComplexity int, input model.SocialUpdateInput) int
		TagCreate                               func(childComplexity int, input model.TagInput) int
		TagDelete                               func(childComplexity int, id string) int
		TagUpdate                               func(childComplexity int, input model.TagUpdateInput) int
		TenantAddBillingProfile                 func(childComplexity int, input model.TenantBillingProfileInput) int
		TenantMerge                             func(childComplexity int, tenant model.TenantInput) int
		TenantUpdateBillingProfile              func(childComplexity int, input model.TenantBillingProfileUpdateInput) int
		TenantUpdateSettings                    func(childComplexity int, input *model.TenantSettingsInput) int
		UserAddRole                             func(childComplexity int, id string, role model.Role) int
		UserAddRoleInTenant                     func(childComplexity int, id string, tenant string, role model.Role) int
		UserCreate                              func(childComplexity int, input model.UserInput) int
		UserDelete                              func(childComplexity int, id string) int
		UserDeleteInTenant                      func(childComplexity int, id string, tenant string) int
		UserRemoveRole                          func(childComplexity int, id string, role model.Role) int
		UserRemoveRoleInTenant                  func(childComplexity int, id string, tenant string, role model.Role) int
		UserUpdate                              func(childComplexity int, input model.UserUpdateInput) int
		WorkspaceMerge                          func(childComplexity int, workspace model.WorkspaceInput) int
		WorkspaceMergeToTenant                  func(childComplexity int, workspace model.WorkspaceInput, tenant string) int
	}

	Note struct {
		AppSource     func(childComplexity int) int
		Content       func(childComplexity int) int
		ContentType   func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CreatedBy     func(childComplexity int) int
		ID            func(childComplexity int) int
		Includes      func(childComplexity int) int
		Noted         func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	NotePage struct {
		Content       func(childComplexity int) int
		TotalElements func(childComplexity int) int
		TotalPages    func(childComplexity int) int
	}

	OnboardingDetails struct {
		Comments  func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Opportunity struct {
		Amount                 func(childComplexity int) int
		AppSource              func(childComplexity int) int
		Comments               func(childComplexity int) int
		CreatedAt              func(childComplexity int) int
		CreatedBy              func(childComplexity int) int
		EstimatedClosedAt      func(childComplexity int) int
		ExternalLinks          func(childComplexity int) int
		ExternalStage          func(childComplexity int) int
		ExternalType           func(childComplexity int) int
		GeneralNotes           func(childComplexity int) int
		ID                     func(childComplexity int) int
		InternalStage          func(childComplexity int) int
		InternalType           func(childComplexity int) int
		MaxAmount              func(childComplexity int) int
		Name                   func(childComplexity int) int
		NextSteps              func(childComplexity int) int
		Owner                  func(childComplexity int) int
		RenewalLikelihood      func(childComplexity int) int
		RenewalUpdatedByUserAt func(childComplexity int) int
		RenewalUpdatedByUserID func(childComplexity int) int
		RenewedAt              func(childComplexity int) int
		Source                 func(childComplexity int) int
		SourceOfTruth          func(childComplexity int) int
		UpdatedAt              func(childComplexity int) int
	}

	OrgAccountDetails struct {
		Onboarding     func(childComplexity int) int
		RenewalSummary func(childComplexity int) int
	}

	Organization struct {
		AccountDetails                func(childComplexity int) int
		AppSource                     func(childComplexity int) int
		Contacts                      func(childComplexity int, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) int
		Contracts                     func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		CustomFields                  func(childComplexity int) int
		CustomID                      func(childComplexity int) int
		CustomerOsID                  func(childComplexity int) int
		Description                   func(childComplexity int) int
		Domains                       func(childComplexity int) int
		Emails                        func(childComplexity int) int
		EmployeeGrowthRate            func(childComplexity int) int
		Employees                     func(childComplexity int) int
		EntityTemplate                func(childComplexity int) int
		ExternalLinks                 func(childComplexity int) int
		FieldSets                     func(childComplexity int) int
		Headquarters                  func(childComplexity int) int
		Hide                          func(childComplexity int) int
		ID                            func(childComplexity int) int
		Industry                      func(childComplexity int) int
		IndustryGroup                 func(childComplexity int) int
		IsCustomer                    func(childComplexity int) int
		IsPublic                      func(childComplexity int) int
		IssueSummaryByStatus          func(childComplexity int) int
		JobRoles                      func(childComplexity int) int
		LastFundingAmount             func(childComplexity int) int
		LastFundingRound              func(childComplexity int) int
		LastTouchPointAt              func(childComplexity int) int
		LastTouchPointTimelineEvent   func(childComplexity int) int
		LastTouchPointTimelineEventID func(childComplexity int) int
		LastTouchPointType            func(childComplexity int) int
		LastTouchpoint                func(childComplexity int) int
		Locations                     func(childComplexity int) int
		Logo                          func(childComplexity int) int
		LogoURL                       func(childComplexity int) int
		Market                        func(childComplexity int) int
		Metadata                      func(childComplexity int) int
		Name                          func(childComplexity int) int
		Note                          func(childComplexity int) int
		Notes                         func(childComplexity int) int
		Owner                         func(childComplexity int) int
		ParentCompanies               func(childComplexity int) int
		PhoneNumbers                  func(childComplexity int) int
		Public                        func(childComplexity int) int
		ReferenceID                   func(childComplexity int) int
		SlackChannelID                func(childComplexity int) int
		SocialMedia                   func(childComplexity int) int
		Socials                       func(childComplexity int) int
		Source                        func(childComplexity int) int
		SourceOfTruth                 func(childComplexity int) int
		SubIndustry                   func(childComplexity int) int
		Subsidiaries                  func(childComplexity int) int
		SubsidiaryOf                  func(childComplexity int) int
		SuggestedMergeTo              func(childComplexity int) int
		Tags                          func(childComplexity int) int
		TargetAudience                func(childComplexity int) int
		TimelineEvents                func(childComplexity int, from *time.Time, size int, timelineEventTypes []model.TimelineEventType) int
		TimelineEventsTotalCount      func(childComplexity int, timelineEventTypes []model.TimelineEventType) int
		UpdatedAt                     func(childComplexity int) int
		ValueProposition              func(childComplexity int) int
		Website                       func(childComplexity int) int
		YearFounded                   func(childComplexity int) int
	}

	OrganizationPage struct {
		Content        func(childComplexity int) int
		TotalAvailable func(childComplexity int) int
		TotalElements  func(childComplexity int) int
		TotalPages     func(childComplexity int) int
	}

	OrganizationParticipant struct {
		OrganizationParticipant func(childComplexity int) int
		Type                    func(childComplexity int) int
	}

	OrganizationPlan struct {
		AppSource         func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		ID                func(childComplexity int) int
		MasterPlanID      func(childComplexity int) int
		Milestones        func(childComplexity int) int
		Name              func(childComplexity int) int
		Retired           func(childComplexity int) int
		RetiredMilestones func(childComplexity int) int
		Source            func(childComplexity int) int
		SourceOfTruth     func(childComplexity int) int
		StatusDetails     func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	OrganizationPlanMilestone struct {
		Adhoc         func(childComplexity int) int
		AppSource     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DueDate       func(childComplexity int) int
		ID            func(childComplexity int) int
		Items         func(childComplexity int) int
		Name          func(childComplexity int) int
		Optional      func(childComplexity int) int
		Order         func(childComplexity int) int
		Retired       func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		StatusDetails func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	OrganizationPlanMilestoneItem struct {
		Status    func(childComplexity int) int
		Text      func(childComplexity int) int
		UUID      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	OrganizationPlanMilestoneStatusDetails struct {
		Status    func(childComplexity int) int
		Text      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	OrganizationPlanStatusDetails struct {
		Status    func(childComplexity int) int
		Text      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	PageView struct {
		AppSource      func(childComplexity int) int
		Application    func(childComplexity int) int
		EndedAt        func(childComplexity int) int
		EngagedTime    func(childComplexity int) int
		ID             func(childComplexity int) int
		OrderInSession func(childComplexity int) int
		PageTitle      func(childComplexity int) int
		PageURL        func(childComplexity int) int
		SessionID      func(childComplexity int) int
		Source         func(childComplexity int) int
		SourceOfTruth  func(childComplexity int) int
		StartedAt      func(childComplexity int) int
	}

	PhoneNumber struct {
		AppSource      func(childComplexity int) int
		Contacts       func(childComplexity int) int
		Country        func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		E164           func(childComplexity int) int
		ID             func(childComplexity int) int
		Label          func(childComplexity int) int
		Organizations  func(childComplexity int) int
		Primary        func(childComplexity int) int
		RawPhoneNumber func(childComplexity int) int
		Source         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		Users          func(childComplexity int) int
		Validated      func(childComplexity int) int
	}

	PhoneNumberParticipant struct {
		PhoneNumberParticipant func(childComplexity int) int
		Type                   func(childComplexity int) int
	}

	Player struct {
		AppSource     func(childComplexity int) int
		AuthID        func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		IdentityID    func(childComplexity int) int
		Provider      func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Users         func(childComplexity int) int
	}

	PlayerUser struct {
		Default func(childComplexity int) int
		Tenant  func(childComplexity int) int
		User    func(childComplexity int) int
	}

	Query struct {
		Analysis                              func(childComplexity int, id string) int
		Attachment                            func(childComplexity int, id string) int
		BankAccounts                          func(childComplexity int) int
		BillableInfo                          func(childComplexity int) int
		Contact                               func(childComplexity int, id string) int
		ContactByEmail                        func(childComplexity int, email string) int
		ContactByPhone                        func(childComplexity int, e164 string) int
		Contacts                              func(childComplexity int, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) int
		Contract                              func(childComplexity int, id string) int
		DashboardARRBreakdown                 func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardCustomerMap                  func(childComplexity int) int
		DashboardGrossRevenueRetention        func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardMRRPerCustomer               func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardNewCustomers                 func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardOnboardingCompletion         func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardRetentionRate                func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardRevenueAtRisk                func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardTimeToOnboard                func(childComplexity int, period *model.DashboardPeriodInput) int
		DashboardViewOrganizations            func(childComplexity int, pagination model.Pagination, where *model.Filter, sort *model.SortBy) int
		DashboardViewRenewals                 func(childComplexity int, pagination model.Pagination, where *model.Filter, sort *model.SortBy) int
		Email                                 func(childComplexity int, id string) int
		EntityTemplates                       func(childComplexity int, extends *model.EntityTemplateExtension) int
		ExternalMeetings                      func(childComplexity int, externalSystemID string, externalID *string, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) int
		ExternalSystemInstances               func(childComplexity int) int
		GcliSearch                            func(childComplexity int, keyword string, limit *int) int
		GlobalCache                           func(childComplexity int) int
		InteractionEvent                      func(childComplexity int, id string) int
		InteractionEventByEventIdentifier     func(childComplexity int, eventIdentifier string) int
		InteractionSession                    func(childComplexity int, id string) int
		InteractionSessionBySessionIdentifier func(childComplexity int, sessionIdentifier string) int
		Invoice                               func(childComplexity int, id string) int
		Invoices                              func(childComplexity int, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy, organizationID *string) int
		InvoicingCycle                        func(childComplexity int) int
		Issue                                 func(childComplexity int, id string) int
		LogEntry                              func(childComplexity int, id string) int
		MasterPlan                            func(childComplexity int, id string) int
		MasterPlans                           func(childComplexity int, retired *bool) int
		Meeting                               func(childComplexity int, id string) int
		Opportunity                           func(childComplexity int, id string) int
		Organization                          func(childComplexity int, id string) int
		OrganizationByCustomerOsID            func(childComplexity int, customerOsID string) int
		OrganizationDistinctOwners            func(childComplexity int) int
		OrganizationPlan                      func(childComplexity int, id string) int
		OrganizationPlans                     func(childComplexity int, retired *bool) int
		OrganizationPlansForOrganization      func(childComplexity int, organizationID string) int
		Organizations                         func(childComplexity int, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) int
		PhoneNumber                           func(childComplexity int, id string) int
		PlayerByAuthIDProvider                func(childComplexity int, authID string, provider string) int
		Reminder                              func(childComplexity int, id string) int
		RemindersForOrganization              func(childComplexity int, organizationID string, dismissed *bool) int
		ServiceLineItem                       func(childComplexity int, id string) int
		SlackChannels                         func(childComplexity int, pagination *model.Pagination) int
		TableViewDefs                         func(childComplexity int, pagination *model.Pagination, where *model.Filter, sort *model.SortBy) int
		Tags                                  func(childComplexity int) int
		Tenant                                func(childComplexity int) int
		TenantBillingProfile                  func(childComplexity int, id string) int
		TenantBillingProfiles                 func(childComplexity int) int
		TenantByEmail                         func(childComplexity int, email string) int
		TenantByWorkspace                     func(childComplexity int, workspace model.WorkspaceInput) int
		TenantSettings                        func(childComplexity int) int
		TimelineEvents                        func(childComplexity int, ids []string) int
		User                                  func(childComplexity int, id string) int
		UserByEmail                           func(childComplexity int, email string) int
		Users                                 func(childComplexity int, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) int
	}

	Reminder struct {
		Content   func(childComplexity int) int
		Dismissed func(childComplexity int) int
		DueDate   func(childComplexity int) int
		Metadata  func(childComplexity int) int
		Owner     func(childComplexity int) int
	}

	RenewalRecord struct {
		Contract     func(childComplexity int) int
		Opportunity  func(childComplexity int) int
		Organization func(childComplexity int) int
	}

	RenewalSummary struct {
		ArrForecast       func(childComplexity int) int
		MaxArrForecast    func(childComplexity int) int
		NextRenewalDate   func(childComplexity int) int
		RenewalLikelihood func(childComplexity int) int
	}

	RenewalsPage struct {
		Content        func(childComplexity int) int
		TotalAvailable func(childComplexity int) int
		TotalElements  func(childComplexity int) int
		TotalPages     func(childComplexity int) int
	}

	Result struct {
		Result func(childComplexity int) int
	}

	ServiceLineItem struct {
		BillingCycle   func(childComplexity int) int
		Comments       func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		Description    func(childComplexity int) int
		ExternalLinks  func(childComplexity int) int
		Metadata       func(childComplexity int) int
		ParentID       func(childComplexity int) int
		Price          func(childComplexity int) int
		Quantity       func(childComplexity int) int
		ServiceEnded   func(childComplexity int) int
		ServiceStarted func(childComplexity int) int
		Tax            func(childComplexity int) int
	}

	SlackChannel struct {
		ChannelID    func(childComplexity int) int
		ChannelName  func(childComplexity int) int
		Metadata     func(childComplexity int) int
		Organization func(childComplexity int) int
	}

	SlackChannelPage struct {
		Content        func(childComplexity int) int
		TotalAvailable func(childComplexity int) int
		TotalElements  func(childComplexity int) int
		TotalPages     func(childComplexity int) int
	}

	Social struct {
		AppSource     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		PlatformName  func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		URL           func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	State struct {
		Code    func(childComplexity int) int
		Country func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	SuggestedMergeOrganization struct {
		Confidence   func(childComplexity int) int
		Organization func(childComplexity int) int
		SuggestedAt  func(childComplexity int) int
		SuggestedBy  func(childComplexity int) int
	}

	TableViewDef struct {
		Columns   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		Filters   func(childComplexity int) int
		ID        func(childComplexity int) int
		Icon      func(childComplexity int) int
		Name      func(childComplexity int) int
		Order     func(childComplexity int) int
		Sorting   func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	TableViewDefPage struct {
		Content        func(childComplexity int) int
		TotalAvailable func(childComplexity int) int
		TotalElements  func(childComplexity int) int
		TotalPages     func(childComplexity int) int
	}

	Tag struct {
		AppSource func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Source    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Tax struct {
		SalesTax func(childComplexity int) int
		TaxRate  func(childComplexity int) int
		Vat      func(childComplexity int) int
	}

	TenantBillableInfo struct {
		GreylistedContacts       func(childComplexity int) int
		GreylistedOrganizations  func(childComplexity int) int
		WhitelistedContacts      func(childComplexity int) int
		WhitelistedOrganizations func(childComplexity int) int
	}

	TenantBillingProfile struct {
		AddressLine1                  func(childComplexity int) int
		AddressLine2                  func(childComplexity int) int
		AddressLine3                  func(childComplexity int) int
		AppSource                     func(childComplexity int) int
		CanPayWithBankTransfer        func(childComplexity int) int
		CanPayWithCard                func(childComplexity int) int
		CanPayWithDirectDebitAch      func(childComplexity int) int
		CanPayWithDirectDebitBacs     func(childComplexity int) int
		CanPayWithDirectDebitSepa     func(childComplexity int) int
		CanPayWithPigeon              func(childComplexity int) int
		Country                       func(childComplexity int) int
		CreatedAt                     func(childComplexity int) int
		DomesticPaymentsBankInfo      func(childComplexity int) int
		Email                         func(childComplexity int) int
		ID                            func(childComplexity int) int
		InternationalPaymentsBankInfo func(childComplexity int) int
		LegalName                     func(childComplexity int) int
		Locality                      func(childComplexity int) int
		Phone                         func(childComplexity int) int
		SendInvoicesBcc               func(childComplexity int) int
		SendInvoicesFrom              func(childComplexity int) int
		Source                        func(childComplexity int) int
		SourceOfTruth                 func(childComplexity int) int
		UpdatedAt                     func(childComplexity int) int
		VatNumber                     func(childComplexity int) int
		Zip                           func(childComplexity int) int
	}

	TenantSettings struct {
		BaseCurrency         func(childComplexity int) int
		BillingEnabled       func(childComplexity int) int
		LogoRepositoryFileID func(childComplexity int) int
		LogoURL              func(childComplexity int) int
	}

	User struct {
		AppSource       func(childComplexity int) int
		Bot             func(childComplexity int) int
		Calendars       func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Emails          func(childComplexity int) int
		FirstName       func(childComplexity int) int
		ID              func(childComplexity int) int
		Internal        func(childComplexity int) int
		JobRoles        func(childComplexity int) int
		LastName        func(childComplexity int) int
		Name            func(childComplexity int) int
		PhoneNumbers    func(childComplexity int) int
		Player          func(childComplexity int) int
		ProfilePhotoURL func(childComplexity int) int
		Roles           func(childComplexity int) int
		Source          func(childComplexity int) int
		SourceOfTruth   func(childComplexity int) int
		Timezone        func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
	}

	UserPage struct {
		Content       func(childComplexity int) int
		TotalElements func(childComplexity int) int
		TotalPages    func(childComplexity int) int
	}

	UserParticipant struct {
		Type            func(childComplexity int) int
		UserParticipant func(childComplexity int) int
	}

	ViewType struct {
		CreatedAt func(childComplexity int) int
		CreatedBy func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Workspace struct {
		AppSource     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Provider      func(childComplexity int) int
		Source        func(childComplexity int) int
		SourceOfTruth func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}
}

type AnalysisResolver interface {
	Describes(ctx context.Context, obj *model.Analysis) ([]model.DescriptionNode, error)
}
type ColumnDefResolver interface {
	CreatedBy(ctx context.Context, obj *model.ColumnDef) (*model.User, error)
}
type ColumnTypeResolver interface {
	CreatedBy(ctx context.Context, obj *model.ColumnType) (*model.User, error)
}
type CommentResolver interface {
	CreatedBy(ctx context.Context, obj *model.Comment) (*model.User, error)

	ExternalLinks(ctx context.Context, obj *model.Comment) ([]*model.ExternalSystem, error)
}
type ContactResolver interface {
	Tags(ctx context.Context, obj *model.Contact) ([]*model.Tag, error)
	JobRoles(ctx context.Context, obj *model.Contact) ([]*model.JobRole, error)
	Organizations(ctx context.Context, obj *model.Contact, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.OrganizationPage, error)
	PhoneNumbers(ctx context.Context, obj *model.Contact) ([]*model.PhoneNumber, error)
	Emails(ctx context.Context, obj *model.Contact) ([]*model.Email, error)
	Locations(ctx context.Context, obj *model.Contact) ([]*model.Location, error)
	Socials(ctx context.Context, obj *model.Contact) ([]*model.Social, error)
	CustomFields(ctx context.Context, obj *model.Contact) ([]*model.CustomField, error)
	FieldSets(ctx context.Context, obj *model.Contact) ([]*model.FieldSet, error)
	Template(ctx context.Context, obj *model.Contact) (*model.EntityTemplate, error)
	Owner(ctx context.Context, obj *model.Contact) (*model.User, error)
	Notes(ctx context.Context, obj *model.Contact, pagination *model.Pagination) (*model.NotePage, error)
	NotesByTime(ctx context.Context, obj *model.Contact, pagination *model.TimeRange) ([]*model.Note, error)
	TimelineEvents(ctx context.Context, obj *model.Contact, from *time.Time, size int, timelineEventTypes []model.TimelineEventType) ([]model.TimelineEvent, error)
	TimelineEventsTotalCount(ctx context.Context, obj *model.Contact, timelineEventTypes []model.TimelineEventType) (int64, error)
}
type ContractResolver interface {
	ContractLineItems(ctx context.Context, obj *model.Contract) ([]*model.ServiceLineItem, error)

	CreatedBy(ctx context.Context, obj *model.Contract) (*model.User, error)
	ExternalLinks(ctx context.Context, obj *model.Contract) ([]*model.ExternalSystem, error)

	Opportunities(ctx context.Context, obj *model.Contract) ([]*model.Opportunity, error)
	Owner(ctx context.Context, obj *model.Contract) (*model.User, error)

	ServiceLineItems(ctx context.Context, obj *model.Contract) ([]*model.ServiceLineItem, error)
}
type CustomFieldResolver interface {
	Template(ctx context.Context, obj *model.CustomField) (*model.CustomFieldTemplate, error)
}
type DashboardCustomerMapResolver interface {
	Organization(ctx context.Context, obj *model.DashboardCustomerMap) (*model.Organization, error)
}
type EmailResolver interface {
	Users(ctx context.Context, obj *model.Email) ([]*model.User, error)
	Contacts(ctx context.Context, obj *model.Email) ([]*model.Contact, error)
	Organizations(ctx context.Context, obj *model.Email) ([]*model.Organization, error)
}
type EntityTemplateResolver interface {
	FieldSetTemplates(ctx context.Context, obj *model.EntityTemplate) ([]*model.FieldSetTemplate, error)
	CustomFieldTemplates(ctx context.Context, obj *model.EntityTemplate) ([]*model.CustomFieldTemplate, error)
}
type FieldSetResolver interface {
	CustomFields(ctx context.Context, obj *model.FieldSet) ([]*model.CustomField, error)
	Template(ctx context.Context, obj *model.FieldSet) (*model.FieldSetTemplate, error)
}
type FieldSetTemplateResolver interface {
	CustomFieldTemplates(ctx context.Context, obj *model.FieldSetTemplate) ([]*model.CustomFieldTemplate, error)
}
type InteractionEventResolver interface {
	InteractionSession(ctx context.Context, obj *model.InteractionEvent) (*model.InteractionSession, error)
	Issue(ctx context.Context, obj *model.InteractionEvent) (*model.Issue, error)
	Meeting(ctx context.Context, obj *model.InteractionEvent) (*model.Meeting, error)
	SentBy(ctx context.Context, obj *model.InteractionEvent) ([]model.InteractionEventParticipant, error)
	SentTo(ctx context.Context, obj *model.InteractionEvent) ([]model.InteractionEventParticipant, error)
	RepliesTo(ctx context.Context, obj *model.InteractionEvent) (*model.InteractionEvent, error)
	Includes(ctx context.Context, obj *model.InteractionEvent) ([]*model.Attachment, error)
	Summary(ctx context.Context, obj *model.InteractionEvent) (*model.Analysis, error)
	ActionItems(ctx context.Context, obj *model.InteractionEvent) ([]*model.ActionItem, error)

	ExternalLinks(ctx context.Context, obj *model.InteractionEvent) ([]*model.ExternalSystem, error)
}
type InteractionSessionResolver interface {
	Events(ctx context.Context, obj *model.InteractionSession) ([]*model.InteractionEvent, error)
	AttendedBy(ctx context.Context, obj *model.InteractionSession) ([]model.InteractionSessionParticipant, error)
	Includes(ctx context.Context, obj *model.InteractionSession) ([]*model.Attachment, error)
	DescribedBy(ctx context.Context, obj *model.InteractionSession) ([]*model.Analysis, error)
}
type InvoiceResolver interface {
	Organization(ctx context.Context, obj *model.Invoice) (*model.Organization, error)
	Contract(ctx context.Context, obj *model.Invoice) (*model.Contract, error)

	InvoiceLineItems(ctx context.Context, obj *model.Invoice) ([]*model.InvoiceLine, error)
}
type IssueResolver interface {
	Tags(ctx context.Context, obj *model.Issue) ([]*model.Tag, error)
	InteractionEvents(ctx context.Context, obj *model.Issue) ([]*model.InteractionEvent, error)
	Comments(ctx context.Context, obj *model.Issue) ([]*model.Comment, error)
	ExternalLinks(ctx context.Context, obj *model.Issue) ([]*model.ExternalSystem, error)
	SubmittedBy(ctx context.Context, obj *model.Issue) (model.IssueParticipant, error)
	ReportedBy(ctx context.Context, obj *model.Issue) (model.IssueParticipant, error)
	AssignedTo(ctx context.Context, obj *model.Issue) ([]model.IssueParticipant, error)
	FollowedBy(ctx context.Context, obj *model.Issue) ([]model.IssueParticipant, error)
}
type JobRoleResolver interface {
	Organization(ctx context.Context, obj *model.JobRole) (*model.Organization, error)
	Contact(ctx context.Context, obj *model.JobRole) (*model.Contact, error)
}
type LastTouchpointResolver interface {
	LastTouchPointTimelineEvent(ctx context.Context, obj *model.LastTouchpoint) (model.TimelineEvent, error)
}
type LogEntryResolver interface {
	CreatedBy(ctx context.Context, obj *model.LogEntry) (*model.User, error)
	Tags(ctx context.Context, obj *model.LogEntry) ([]*model.Tag, error)

	ExternalLinks(ctx context.Context, obj *model.LogEntry) ([]*model.ExternalSystem, error)
}
type MasterPlanResolver interface {
	Milestones(ctx context.Context, obj *model.MasterPlan) ([]*model.MasterPlanMilestone, error)
	RetiredMilestones(ctx context.Context, obj *model.MasterPlan) ([]*model.MasterPlanMilestone, error)
}
type MeetingResolver interface {
	AttendedBy(ctx context.Context, obj *model.Meeting) ([]model.MeetingParticipant, error)
	CreatedBy(ctx context.Context, obj *model.Meeting) ([]model.MeetingParticipant, error)
	Includes(ctx context.Context, obj *model.Meeting) ([]*model.Attachment, error)
	DescribedBy(ctx context.Context, obj *model.Meeting) ([]*model.Analysis, error)
	Note(ctx context.Context, obj *model.Meeting) ([]*model.Note, error)
	Events(ctx context.Context, obj *model.Meeting) ([]*model.InteractionEvent, error)
	Recording(ctx context.Context, obj *model.Meeting) (*model.Attachment, error)

	ExternalSystem(ctx context.Context, obj *model.Meeting) ([]*model.ExternalSystem, error)
}
type MutationResolver interface {
	AnalysisCreate(ctx context.Context, analysis model.AnalysisInput) (*model.Analysis, error)
	AttachmentCreate(ctx context.Context, input model.AttachmentInput) (*model.Attachment, error)
	BankAccountCreate(ctx context.Context, input *model.BankAccountCreateInput) (*model.BankAccount, error)
	BankAccountUpdate(ctx context.Context, input *model.BankAccountUpdateInput) (*model.BankAccount, error)
	BankAccountDelete(ctx context.Context, id string) (*model.DeleteResponse, error)
	BillingProfileCreate(ctx context.Context, input model.BillingProfileInput) (string, error)
	BillingProfileUpdate(ctx context.Context, input model.BillingProfileUpdateInput) (string, error)
	BillingProfileLinkEmail(ctx context.Context, input model.BillingProfileLinkEmailInput) (string, error)
	BillingProfileUnlinkEmail(ctx context.Context, input model.BillingProfileLinkEmailInput) (string, error)
	BillingProfileLinkLocation(ctx context.Context, input model.BillingProfileLinkLocationInput) (string, error)
	BillingProfileUnlinkLocation(ctx context.Context, input model.BillingProfileLinkLocationInput) (string, error)
	ContactCreate(ctx context.Context, input model.ContactInput) (*model.Contact, error)
	CustomerContactCreate(ctx context.Context, input model.CustomerContactInput) (*model.CustomerContact, error)
	ContactUpdate(ctx context.Context, input model.ContactUpdateInput) (*model.Contact, error)
	ContactHardDelete(ctx context.Context, contactID string) (*model.Result, error)
	ContactArchive(ctx context.Context, contactID string) (*model.Result, error)
	ContactRestoreFromArchive(ctx context.Context, contactID string) (*model.Result, error)
	ContactMerge(ctx context.Context, primaryContactID string, mergedContactIds []string) (*model.Contact, error)
	ContactAddTagByID(ctx context.Context, input model.ContactTagInput) (*model.Contact, error)
	ContactRemoveTagByID(ctx context.Context, input model.ContactTagInput) (*model.Contact, error)
	ContactAddOrganizationByID(ctx context.Context, input model.ContactOrganizationInput) (*model.Contact, error)
	ContactRemoveOrganizationByID(ctx context.Context, input model.ContactOrganizationInput) (*model.Contact, error)
	ContactAddNewLocation(ctx context.Context, contactID string) (*model.Location, error)
	ContactRemoveLocation(ctx context.Context, contactID string, locationID string) (*model.Contact, error)
	ContactAddSocial(ctx context.Context, contactID string, input model.SocialInput) (*model.Social, error)
	ContractCreate(ctx context.Context, input model.ContractInput) (*model.Contract, error)
	ContractUpdate(ctx context.Context, input model.ContractUpdateInput) (*model.Contract, error)
	ContractDelete(ctx context.Context, id string) (*model.DeleteResponse, error)
	CustomFieldsMergeAndUpdateInContact(ctx context.Context, contactID string, customFields []*model.CustomFieldInput, fieldSets []*model.FieldSetInput) (*model.Contact, error)
	CustomFieldMergeToContact(ctx context.Context, contactID string, input model.CustomFieldInput) (*model.CustomField, error)
	CustomFieldUpdateInContact(ctx context.Context, contactID string, input model.CustomFieldUpdateInput) (*model.CustomField, error)
	CustomFieldDeleteFromContactByName(ctx context.Context, contactID string, fieldName string) (*model.Result, error)
	CustomFieldDeleteFromContactByID(ctx context.Context, contactID string, id string) (*model.Result, error)
	CustomFieldMergeToFieldSet(ctx context.Context, contactID string, fieldSetID string, input model.CustomFieldInput) (*model.CustomField, error)
	CustomFieldUpdateInFieldSet(ctx context.Context, contactID string, fieldSetID string, input model.CustomFieldUpdateInput) (*model.CustomField, error)
	CustomFieldDeleteFromFieldSetByID(ctx context.Context, contactID string, fieldSetID string, id string) (*model.Result, error)
	FieldSetMergeToContact(ctx context.Context, contactID string, input model.FieldSetInput) (*model.FieldSet, error)
	FieldSetUpdateInContact(ctx context.Context, contactID string, input model.FieldSetUpdateInput) (*model.FieldSet, error)
	FieldSetDeleteFromContact(ctx context.Context, contactID string, id string) (*model.Result, error)
	CustomFieldTemplateCreate(ctx context.Context, input model.CustomFieldTemplateInput) (*model.CustomFieldTemplate, error)
	EmailMergeToContact(ctx context.Context, contactID string, input model.EmailInput) (*model.Email, error)
	EmailUpdateInContact(ctx context.Context, contactID string, input model.EmailUpdateInput) (*model.Email, error)
	EmailRemoveFromContact(ctx context.Context, contactID string, email string) (*model.Result, error)
	EmailRemoveFromContactByID(ctx context.Context, contactID string, id string) (*model.Result, error)
	EmailMergeToUser(ctx context.Context, userID string, input model.EmailInput) (*model.Email, error)
	EmailUpdateInUser(ctx context.Context, userID string, input model.EmailUpdateInput) (*model.Email, error)
	EmailRemoveFromUser(ctx context.Context, userID string, email string) (*model.Result, error)
	EmailRemoveFromUserByID(ctx context.Context, userID string, id string) (*model.Result, error)
	EmailMergeToOrganization(ctx context.Context, organizationID string, input model.EmailInput) (*model.Email, error)
	EmailUpdateInOrganization(ctx context.Context, organizationID string, input model.EmailUpdateInput) (*model.Email, error)
	EmailRemoveFromOrganization(ctx context.Context, organizationID string, email string) (*model.Result, error)
	EmailRemoveFromOrganizationByID(ctx context.Context, organizationID string, id string) (*model.Result, error)
	EmailDelete(ctx context.Context, id string) (*model.Result, error)
	EntityTemplateCreate(ctx context.Context, input model.EntityTemplateInput) (*model.EntityTemplate, error)
	InteractionSessionCreate(ctx context.Context, session model.InteractionSessionInput) (*model.InteractionSession, error)
	InteractionSessionLinkAttachment(ctx context.Context, sessionID string, attachmentID string) (*model.InteractionSession, error)
	InteractionEventCreate(ctx context.Context, event model.InteractionEventInput) (*model.InteractionEvent, error)
	InteractionEventLinkAttachment(ctx context.Context, eventID string, attachmentID string) (*model.InteractionEvent, error)
	InvoiceNextDryRunForContract(ctx context.Context, contractID string) (string, error)
	InvoiceSimulate(ctx context.Context, input model.InvoiceSimulateInput) (string, error)
	InvoiceUpdate(ctx context.Context, input model.InvoiceUpdateInput) (*model.Invoice, error)
	InvoicePay(ctx context.Context, id string) (*model.Invoice, error)
	InvoiceVoid(ctx context.Context, id string) (*model.Invoice, error)
	InvoicingCycleCreate(ctx context.Context, input model.InvoicingCycleInput) (*model.InvoicingCycle, error)
	InvoicingCycleUpdate(ctx context.Context, input model.InvoicingCycleUpdateInput) (*model.InvoicingCycle, error)
	JobRoleDelete(ctx context.Context, contactID string, roleID string) (*model.Result, error)
	JobRoleCreate(ctx context.Context, contactID string, input model.JobRoleInput) (*model.JobRole, error)
	JobRoleUpdate(ctx context.Context, contactID string, input model.JobRoleUpdateInput) (*model.JobRole, error)
	LocationRemoveFromContact(ctx context.Context, contactID string, locationID string) (*model.Contact, error)
	LocationRemoveFromOrganization(ctx context.Context, organizationID string, locationID string) (*model.Organization, error)
	LocationUpdate(ctx context.Context, input model.LocationUpdateInput) (*model.Location, error)
	LogEntryCreateForOrganization(ctx context.Context, organizationID string, input model.LogEntryInput) (string, error)
	LogEntryUpdate(ctx context.Context, id string, input model.LogEntryUpdateInput) (string, error)
	LogEntryAddTag(ctx context.Context, id string, input model.TagIDOrNameInput) (string, error)
	LogEntryRemoveTag(ctx context.Context, id string, input model.TagIDOrNameInput) (string, error)
	LogEntryResetTags(ctx context.Context, id string, input []*model.TagIDOrNameInput) (string, error)
	MasterPlanCreate(ctx context.Context, input model.MasterPlanInput) (*model.MasterPlan, error)
	MasterPlanCreateDefault(ctx context.Context, input model.MasterPlanInput) (*model.MasterPlan, error)
	MasterPlanUpdate(ctx context.Context, input model.MasterPlanUpdateInput) (*model.MasterPlan, error)
	MasterPlanDuplicate(ctx context.Context, id string) (*model.MasterPlan, error)
	MasterPlanMilestoneCreate(ctx context.Context, input model.MasterPlanMilestoneInput) (*model.MasterPlanMilestone, error)
	MasterPlanMilestoneUpdate(ctx context.Context, input model.MasterPlanMilestoneUpdateInput) (*model.MasterPlanMilestone, error)
	MasterPlanMilestoneBulkUpdate(ctx context.Context, input []*model.MasterPlanMilestoneUpdateInput) ([]*model.MasterPlanMilestone, error)
	MasterPlanMilestoneReorder(ctx context.Context, input model.MasterPlanMilestoneReorderInput) (string, error)
	MasterPlanMilestoneDuplicate(ctx context.Context, masterPlanID string, id string) (*model.MasterPlanMilestone, error)
	MeetingCreate(ctx context.Context, meeting model.MeetingInput) (*model.Meeting, error)
	MeetingUpdate(ctx context.Context, meetingID string, meeting model.MeetingUpdateInput) (*model.Meeting, error)
	MeetingLinkAttendedBy(ctx context.Context, meetingID string, participant model.MeetingParticipantInput) (*model.Meeting, error)
	MeetingUnlinkAttendedBy(ctx context.Context, meetingID string, participant model.MeetingParticipantInput) (*model.Meeting, error)
	MeetingLinkAttachment(ctx context.Context, meetingID string, attachmentID string) (*model.Meeting, error)
	MeetingUnlinkAttachment(ctx context.Context, meetingID string, attachmentID string) (*model.Meeting, error)
	MeetingLinkRecording(ctx context.Context, meetingID string, attachmentID string) (*model.Meeting, error)
	MeetingUnlinkRecording(ctx context.Context, meetingID string, attachmentID string) (*model.Meeting, error)
	MeetingAddNewLocation(ctx context.Context, meetingID string) (*model.Location, error)
	MeetingAddNote(ctx context.Context, meetingID string, note *model.NoteInput) (*model.Meeting, error)
	NoteCreateForContact(ctx context.Context, contactID string, input model.NoteInput) (*model.Note, error)
	NoteCreateForOrganization(ctx context.Context, organizationID string, input model.NoteInput) (*model.Note, error)
	NoteUpdate(ctx context.Context, input model.NoteUpdateInput) (*model.Note, error)
	NoteDelete(ctx context.Context, id string) (*model.Result, error)
	NoteLinkAttachment(ctx context.Context, noteID string, attachmentID string) (*model.Note, error)
	NoteUnlinkAttachment(ctx context.Context, noteID string, attachmentID string) (*model.Note, error)
	OpportunityUpdate(ctx context.Context, input model.OpportunityUpdateInput) (*model.Opportunity, error)
	OpportunityRenewalUpdate(ctx context.Context, input model.OpportunityRenewalUpdateInput, ownerUserID *string) (*model.Opportunity, error)
	OrganizationCreate(ctx context.Context, input model.OrganizationInput) (*model.Organization, error)
	OrganizationUpdate(ctx context.Context, input model.OrganizationUpdateInput) (*model.Organization, error)
	OrganizationArchive(ctx context.Context, id string) (*model.Result, error)
	OrganizationArchiveAll(ctx context.Context, ids []string) (*model.Result, error)
	OrganizationHide(ctx context.Context, id string) (string, error)
	OrganizationHideAll(ctx context.Context, ids []string) (*model.Result, error)
	OrganizationShow(ctx context.Context, id string) (string, error)
	OrganizationShowAll(ctx context.Context, ids []string) (*model.Result, error)
	OrganizationMerge(ctx context.Context, primaryOrganizationID string, mergedOrganizationIds []string) (*model.Organization, error)
	OrganizationAddSubsidiary(ctx context.Context, input model.LinkOrganizationsInput) (*model.Organization, error)
	OrganizationRemoveSubsidiary(ctx context.Context, organizationID string, subsidiaryID string) (*model.Organization, error)
	OrganizationAddNewLocation(ctx context.Context, organizationID string) (*model.Location, error)
	OrganizationAddSocial(ctx context.Context, organizationID string, input model.SocialInput) (*model.Social, error)
	OrganizationSetOwner(ctx context.Context, organizationID string, userID string) (*model.Organization, error)
	OrganizationUnsetOwner(ctx context.Context, organizationID string) (*model.Organization, error)
	OrganizationUpdateOnboardingStatus(ctx context.Context, input model.OnboardingStatusInput) (*model.Organization, error)
	OrganizationPlanCreate(ctx context.Context, input model.OrganizationPlanInput) (*model.OrganizationPlan, error)
	OrganizationPlanUpdate(ctx context.Context, input model.OrganizationPlanUpdateInput) (*model.OrganizationPlan, error)
	OrganizationPlanDuplicate(ctx context.Context, id string, organizationID string) (*model.OrganizationPlan, error)
	OrganizationPlanMilestoneCreate(ctx context.Context, input model.OrganizationPlanMilestoneInput) (*model.OrganizationPlanMilestone, error)
	OrganizationPlanMilestoneUpdate(ctx context.Context, input model.OrganizationPlanMilestoneUpdateInput) (*model.OrganizationPlanMilestone, error)
	OrganizationPlanMilestoneBulkUpdate(ctx context.Context, input []*model.OrganizationPlanMilestoneUpdateInput) ([]*model.OrganizationPlanMilestone, error)
	OrganizationPlanMilestoneReorder(ctx context.Context, input model.OrganizationPlanMilestoneReorderInput) (string, error)
	OrganizationPlanMilestoneDuplicate(ctx context.Context, organizationID string, organizationPlanID string, id string) (*model.OrganizationPlanMilestone, error)
	PhoneNumberMergeToContact(ctx context.Context, contactID string, input model.PhoneNumberInput) (*model.PhoneNumber, error)
	PhoneNumberUpdateInContact(ctx context.Context, contactID string, input model.PhoneNumberUpdateInput) (*model.PhoneNumber, error)
	PhoneNumberRemoveFromContactByE164(ctx context.Context, contactID string, e164 string) (*model.Result, error)
	PhoneNumberRemoveFromContactByID(ctx context.Context, contactID string, id string) (*model.Result, error)
	PhoneNumberMergeToOrganization(ctx context.Context, organizationID string, input model.PhoneNumberInput) (*model.PhoneNumber, error)
	PhoneNumberUpdateInOrganization(ctx context.Context, organizationID string, input model.PhoneNumberUpdateInput) (*model.PhoneNumber, error)
	PhoneNumberRemoveFromOrganizationByE164(ctx context.Context, organizationID string, e164 string) (*model.Result, error)
	PhoneNumberRemoveFromOrganizationByID(ctx context.Context, organizationID string, id string) (*model.Result, error)
	PhoneNumberMergeToUser(ctx context.Context, userID string, input model.PhoneNumberInput) (*model.PhoneNumber, error)
	PhoneNumberUpdateInUser(ctx context.Context, userID string, input model.PhoneNumberUpdateInput) (*model.PhoneNumber, error)
	PhoneNumberRemoveFromUserByE164(ctx context.Context, userID string, e164 string) (*model.Result, error)
	PhoneNumberRemoveFromUserByID(ctx context.Context, userID string, id string) (*model.Result, error)
	PlayerMerge(ctx context.Context, userID string, input model.PlayerInput) (*model.Result, error)
	ReminderCreate(ctx context.Context, input model.ReminderInput) (*model.Reminder, error)
	ReminderUpdate(ctx context.Context, input model.ReminderUpdateInput) (*model.Reminder, error)
	ContractLineItemCreate(ctx context.Context, input model.ServiceLineItemInput) (*model.ServiceLineItem, error)
	ContractLineItemUpdate(ctx context.Context, input model.ServiceLineItemUpdateInput) (*model.ServiceLineItem, error)
	ContractLineItemClose(ctx context.Context, input model.ServiceLineItemCloseInput) (string, error)
	ServiceLineItemDelete(ctx context.Context, id string) (*model.DeleteResponse, error)
	ServiceLineItemBulkUpdate(ctx context.Context, input model.ServiceLineItemBulkUpdateInput) ([]string, error)
	SocialUpdate(ctx context.Context, input model.SocialUpdateInput) (*model.Social, error)
	SocialRemove(ctx context.Context, socialID string) (*model.Result, error)
	TagCreate(ctx context.Context, input model.TagInput) (*model.Tag, error)
	TagUpdate(ctx context.Context, input model.TagUpdateInput) (*model.Tag, error)
	TagDelete(ctx context.Context, id string) (*model.Result, error)
	TenantMerge(ctx context.Context, tenant model.TenantInput) (string, error)
	TenantAddBillingProfile(ctx context.Context, input model.TenantBillingProfileInput) (*model.TenantBillingProfile, error)
	TenantUpdateBillingProfile(ctx context.Context, input model.TenantBillingProfileUpdateInput) (*model.TenantBillingProfile, error)
	TenantUpdateSettings(ctx context.Context, input *model.TenantSettingsInput) (*model.TenantSettings, error)
	UserCreate(ctx context.Context, input model.UserInput) (*model.User, error)
	UserUpdate(ctx context.Context, input model.UserUpdateInput) (*model.User, error)
	UserAddRole(ctx context.Context, id string, role model.Role) (*model.User, error)
	UserRemoveRole(ctx context.Context, id string, role model.Role) (*model.User, error)
	UserAddRoleInTenant(ctx context.Context, id string, tenant string, role model.Role) (*model.User, error)
	UserRemoveRoleInTenant(ctx context.Context, id string, tenant string, role model.Role) (*model.User, error)
	UserDelete(ctx context.Context, id string) (*model.Result, error)
	UserDeleteInTenant(ctx context.Context, id string, tenant string) (*model.Result, error)
	CustomerUserAddJobRole(ctx context.Context, id string, jobRoleInput model.JobRoleInput) (*model.CustomerUser, error)
	WorkspaceMergeToTenant(ctx context.Context, workspace model.WorkspaceInput, tenant string) (*model.Result, error)
	WorkspaceMerge(ctx context.Context, workspace model.WorkspaceInput) (*model.Result, error)
}
type NoteResolver interface {
	CreatedBy(ctx context.Context, obj *model.Note) (*model.User, error)
	Noted(ctx context.Context, obj *model.Note) ([]model.NotedEntity, error)
	Includes(ctx context.Context, obj *model.Note) ([]*model.Attachment, error)
}
type OpportunityResolver interface {
	CreatedBy(ctx context.Context, obj *model.Opportunity) (*model.User, error)
	Owner(ctx context.Context, obj *model.Opportunity) (*model.User, error)

	ExternalLinks(ctx context.Context, obj *model.Opportunity) ([]*model.ExternalSystem, error)
}
type OrganizationResolver interface {
	Contracts(ctx context.Context, obj *model.Organization) ([]*model.Contract, error)

	CustomFields(ctx context.Context, obj *model.Organization) ([]*model.CustomField, error)

	Domains(ctx context.Context, obj *model.Organization) ([]string, error)

	Locations(ctx context.Context, obj *model.Organization) ([]*model.Location, error)

	Owner(ctx context.Context, obj *model.Organization) (*model.User, error)
	ParentCompanies(ctx context.Context, obj *model.Organization) ([]*model.LinkedOrganization, error)

	SocialMedia(ctx context.Context, obj *model.Organization) ([]*model.Social, error)

	Subsidiaries(ctx context.Context, obj *model.Organization) ([]*model.LinkedOrganization, error)
	Tags(ctx context.Context, obj *model.Organization) ([]*model.Tag, error)

	TimelineEvents(ctx context.Context, obj *model.Organization, from *time.Time, size int, timelineEventTypes []model.TimelineEventType) ([]model.TimelineEvent, error)

	Contacts(ctx context.Context, obj *model.Organization, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.ContactsPage, error)
	JobRoles(ctx context.Context, obj *model.Organization) ([]*model.JobRole, error)
	Emails(ctx context.Context, obj *model.Organization) ([]*model.Email, error)
	PhoneNumbers(ctx context.Context, obj *model.Organization) ([]*model.PhoneNumber, error)
	SuggestedMergeTo(ctx context.Context, obj *model.Organization) ([]*model.SuggestedMergeOrganization, error)
	FieldSets(ctx context.Context, obj *model.Organization) ([]*model.FieldSet, error)
	EntityTemplate(ctx context.Context, obj *model.Organization) (*model.EntityTemplate, error)
	TimelineEventsTotalCount(ctx context.Context, obj *model.Organization, timelineEventTypes []model.TimelineEventType) (int64, error)
	ExternalLinks(ctx context.Context, obj *model.Organization) ([]*model.ExternalSystem, error)
	IssueSummaryByStatus(ctx context.Context, obj *model.Organization) ([]*model.IssueSummaryByStatus, error)
	Socials(ctx context.Context, obj *model.Organization) ([]*model.Social, error)

	LastTouchPointTimelineEvent(ctx context.Context, obj *model.Organization) (model.TimelineEvent, error)
	SubsidiaryOf(ctx context.Context, obj *model.Organization) ([]*model.LinkedOrganization, error)
}
type OrganizationPlanResolver interface {
	Milestones(ctx context.Context, obj *model.OrganizationPlan) ([]*model.OrganizationPlanMilestone, error)
	RetiredMilestones(ctx context.Context, obj *model.OrganizationPlan) ([]*model.OrganizationPlanMilestone, error)
}
type PhoneNumberResolver interface {
	Country(ctx context.Context, obj *model.PhoneNumber) (*model.Country, error)

	Users(ctx context.Context, obj *model.PhoneNumber) ([]*model.User, error)
	Contacts(ctx context.Context, obj *model.PhoneNumber) ([]*model.Contact, error)
	Organizations(ctx context.Context, obj *model.PhoneNumber) ([]*model.Organization, error)
}
type PlayerResolver interface {
	Users(ctx context.Context, obj *model.Player) ([]*model.PlayerUser, error)
}
type QueryResolver interface {
	EntityTemplates(ctx context.Context, extends *model.EntityTemplateExtension) ([]*model.EntityTemplate, error)
	Analysis(ctx context.Context, id string) (*model.Analysis, error)
	Attachment(ctx context.Context, id string) (*model.Attachment, error)
	BankAccounts(ctx context.Context) ([]*model.BankAccount, error)
	GlobalCache(ctx context.Context) (*model.GlobalCache, error)
	Contact(ctx context.Context, id string) (*model.Contact, error)
	Contacts(ctx context.Context, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.ContactsPage, error)
	ContactByEmail(ctx context.Context, email string) (*model.Contact, error)
	ContactByPhone(ctx context.Context, e164 string) (*model.Contact, error)
	Contract(ctx context.Context, id string) (*model.Contract, error)
	DashboardViewOrganizations(ctx context.Context, pagination model.Pagination, where *model.Filter, sort *model.SortBy) (*model.OrganizationPage, error)
	DashboardViewRenewals(ctx context.Context, pagination model.Pagination, where *model.Filter, sort *model.SortBy) (*model.RenewalsPage, error)
	DashboardCustomerMap(ctx context.Context) ([]*model.DashboardCustomerMap, error)
	DashboardMRRPerCustomer(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardMRRPerCustomer, error)
	DashboardGrossRevenueRetention(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardGrossRevenueRetention, error)
	DashboardARRBreakdown(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardARRBreakdown, error)
	DashboardRevenueAtRisk(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardRevenueAtRisk, error)
	DashboardRetentionRate(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardRetentionRate, error)
	DashboardNewCustomers(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardNewCustomers, error)
	DashboardTimeToOnboard(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardTimeToOnboard, error)
	DashboardOnboardingCompletion(ctx context.Context, period *model.DashboardPeriodInput) (*model.DashboardOnboardingCompletion, error)
	Email(ctx context.Context, id string) (*model.Email, error)
	ExternalSystemInstances(ctx context.Context) ([]*model.ExternalSystemInstance, error)
	InteractionSession(ctx context.Context, id string) (*model.InteractionSession, error)
	InteractionSessionBySessionIdentifier(ctx context.Context, sessionIdentifier string) (*model.InteractionSession, error)
	InteractionEvent(ctx context.Context, id string) (*model.InteractionEvent, error)
	InteractionEventByEventIdentifier(ctx context.Context, eventIdentifier string) (*model.InteractionEvent, error)
	Invoice(ctx context.Context, id string) (*model.Invoice, error)
	Invoices(ctx context.Context, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy, organizationID *string) (*model.InvoicesPage, error)
	InvoicingCycle(ctx context.Context) (*model.InvoicingCycle, error)
	Issue(ctx context.Context, id string) (*model.Issue, error)
	LogEntry(ctx context.Context, id string) (*model.LogEntry, error)
	MasterPlan(ctx context.Context, id string) (*model.MasterPlan, error)
	MasterPlans(ctx context.Context, retired *bool) ([]*model.MasterPlan, error)
	Meeting(ctx context.Context, id string) (*model.Meeting, error)
	ExternalMeetings(ctx context.Context, externalSystemID string, externalID *string, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.MeetingsPage, error)
	Opportunity(ctx context.Context, id string) (*model.Opportunity, error)
	Organizations(ctx context.Context, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.OrganizationPage, error)
	Organization(ctx context.Context, id string) (*model.Organization, error)
	OrganizationByCustomerOsID(ctx context.Context, customerOsID string) (*model.Organization, error)
	OrganizationDistinctOwners(ctx context.Context) ([]*model.User, error)
	OrganizationPlan(ctx context.Context, id string) (*model.OrganizationPlan, error)
	OrganizationPlansForOrganization(ctx context.Context, organizationID string) ([]*model.OrganizationPlan, error)
	OrganizationPlans(ctx context.Context, retired *bool) ([]*model.OrganizationPlan, error)
	PhoneNumber(ctx context.Context, id string) (*model.PhoneNumber, error)
	PlayerByAuthIDProvider(ctx context.Context, authID string, provider string) (*model.Player, error)
	Reminder(ctx context.Context, id string) (*model.Reminder, error)
	RemindersForOrganization(ctx context.Context, organizationID string, dismissed *bool) ([]*model.Reminder, error)
	GcliSearch(ctx context.Context, keyword string, limit *int) ([]*model.GCliItem, error)
	ServiceLineItem(ctx context.Context, id string) (*model.ServiceLineItem, error)
	SlackChannels(ctx context.Context, pagination *model.Pagination) (*model.SlackChannelPage, error)
	Tags(ctx context.Context) ([]*model.Tag, error)
	Tenant(ctx context.Context) (string, error)
	TenantByWorkspace(ctx context.Context, workspace model.WorkspaceInput) (*string, error)
	TenantByEmail(ctx context.Context, email string) (*string, error)
	TenantBillingProfiles(ctx context.Context) ([]*model.TenantBillingProfile, error)
	TenantBillingProfile(ctx context.Context, id string) (*model.TenantBillingProfile, error)
	TenantSettings(ctx context.Context) (*model.TenantSettings, error)
	BillableInfo(ctx context.Context) (*model.TenantBillableInfo, error)
	TimelineEvents(ctx context.Context, ids []string) ([]model.TimelineEvent, error)
	Users(ctx context.Context, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.UserPage, error)
	User(ctx context.Context, id string) (*model.User, error)
	UserByEmail(ctx context.Context, email string) (*model.User, error)
	TableViewDefs(ctx context.Context, pagination *model.Pagination, where *model.Filter, sort *model.SortBy) (*model.TableViewDefPage, error)
}
type ReminderResolver interface {
	Owner(ctx context.Context, obj *model.Reminder) (*model.User, error)
}
type ServiceLineItemResolver interface {
	CreatedBy(ctx context.Context, obj *model.ServiceLineItem) (*model.User, error)
	ExternalLinks(ctx context.Context, obj *model.ServiceLineItem) ([]*model.ExternalSystem, error)
}
type SlackChannelResolver interface {
	Organization(ctx context.Context, obj *model.SlackChannel) (*model.Organization, error)
}
type TableViewDefResolver interface {
	CreatedBy(ctx context.Context, obj *model.TableViewDef) (*model.User, error)
}
type UserResolver interface {
	Player(ctx context.Context, obj *model.User) (*model.Player, error)
	Roles(ctx context.Context, obj *model.User) ([]model.Role, error)
	Emails(ctx context.Context, obj *model.User) ([]*model.Email, error)
	PhoneNumbers(ctx context.Context, obj *model.User) ([]*model.PhoneNumber, error)

	JobRoles(ctx context.Context, obj *model.User) ([]*model.JobRole, error)
	Calendars(ctx context.Context, obj *model.User) ([]*model.Calendar, error)
}
type ViewTypeResolver interface {
	CreatedBy(ctx context.Context, obj *model.ViewType) (*model.User, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Action.actionType":
		if e.complexity.Action.ActionType == nil {
			break
		}

		return e.complexity.Action.ActionType(childComplexity), true

	case "Action.appSource":
		if e.complexity.Action.AppSource == nil {
			break
		}

		return e.complexity.Action.AppSource(childComplexity), true

	case "Action.content":
		if e.complexity.Action.Content == nil {
			break
		}

		return e.complexity.Action.Content(childComplexity), true

	case "Action.createdAt":
		if e.complexity.Action.CreatedAt == nil {
			break
		}

		return e.complexity.Action.CreatedAt(childComplexity), true

	case "Action.createdBy":
		if e.complexity.Action.CreatedBy == nil {
			break
		}

		return e.complexity.Action.CreatedBy(childComplexity), true

	case "Action.id":
		if e.complexity.Action.ID == nil {
			break
		}

		return e.complexity.Action.ID(childComplexity), true

	case "Action.metadata":
		if e.complexity.Action.Metadata == nil {
			break
		}

		return e.complexity.Action.Metadata(childComplexity), true

	case "Action.source":
		if e.complexity.Action.Source == nil {
			break
		}

		return e.complexity.Action.Source(childComplexity), true

	case "ActionItem.appSource":
		if e.complexity.ActionItem.AppSource == nil {
			break
		}

		return e.complexity.ActionItem.AppSource(childComplexity), true

	case "ActionItem.content":
		if e.complexity.ActionItem.Content == nil {
			break
		}

		return e.complexity.ActionItem.Content(childComplexity), true

	case "ActionItem.createdAt":
		if e.complexity.ActionItem.CreatedAt == nil {
			break
		}

		return e.complexity.ActionItem.CreatedAt(childComplexity), true

	case "ActionItem.id":
		if e.complexity.ActionItem.ID == nil {
			break
		}

		return e.complexity.ActionItem.ID(childComplexity), true

	case "ActionItem.source":
		if e.complexity.ActionItem.Source == nil {
			break
		}

		return e.complexity.ActionItem.Source(childComplexity), true

	case "Analysis.analysisType":
		if e.complexity.Analysis.AnalysisType == nil {
			break
		}

		return e.complexity.Analysis.AnalysisType(childComplexity), true

	case "Analysis.appSource":
		if e.complexity.Analysis.AppSource == nil {
			break
		}

		return e.complexity.Analysis.AppSource(childComplexity), true

	case "Analysis.content":
		if e.complexity.Analysis.Content == nil {
			break
		}

		return e.complexity.Analysis.Content(childComplexity), true

	case "Analysis.contentType":
		if e.complexity.Analysis.ContentType == nil {
			break
		}

		return e.complexity.Analysis.ContentType(childComplexity), true

	case "Analysis.createdAt":
		if e.complexity.Analysis.CreatedAt == nil {
			break
		}

		return e.complexity.Analysis.CreatedAt(childComplexity), true

	case "Analysis.describes":
		if e.complexity.Analysis.Describes == nil {
			break
		}

		return e.complexity.Analysis.Describes(childComplexity), true

	case "Analysis.id":
		if e.complexity.Analysis.ID == nil {
			break
		}

		return e.complexity.Analysis.ID(childComplexity), true

	case "Analysis.source":
		if e.complexity.Analysis.Source == nil {
			break
		}

		return e.complexity.Analysis.Source(childComplexity), true

	case "Analysis.sourceOfTruth":
		if e.complexity.Analysis.SourceOfTruth == nil {
			break
		}

		return e.complexity.Analysis.SourceOfTruth(childComplexity), true

	case "Attachment.appSource":
		if e.complexity.Attachment.AppSource == nil {
			break
		}

		return e.complexity.Attachment.AppSource(childComplexity), true

	case "Attachment.basePath":
		if e.complexity.Attachment.BasePath == nil {
			break
		}

		return e.complexity.Attachment.BasePath(childComplexity), true

	case "Attachment.cdnUrl":
		if e.complexity.Attachment.CdnURL == nil {
			break
		}

		return e.complexity.Attachment.CdnURL(childComplexity), true

	case "Attachment.createdAt":
		if e.complexity.Attachment.CreatedAt == nil {
			break
		}

		return e.complexity.Attachment.CreatedAt(childComplexity), true

	case "Attachment.fileName":
		if e.complexity.Attachment.FileName == nil {
			break
		}

		return e.complexity.Attachment.FileName(childComplexity), true

	case "Attachment.id":
		if e.complexity.Attachment.ID == nil {
			break
		}

		return e.complexity.Attachment.ID(childComplexity), true

	case "Attachment.mimeType":
		if e.complexity.Attachment.MimeType == nil {
			break
		}

		return e.complexity.Attachment.MimeType(childComplexity), true

	case "Attachment.size":
		if e.complexity.Attachment.Size == nil {
			break
		}

		return e.complexity.Attachment.Size(childComplexity), true

	case "Attachment.source":
		if e.complexity.Attachment.Source == nil {
			break
		}

		return e.complexity.Attachment.Source(childComplexity), true

	case "Attachment.sourceOfTruth":
		if e.complexity.Attachment.SourceOfTruth == nil {
			break
		}

		return e.complexity.Attachment.SourceOfTruth(childComplexity), true

	case "BankAccount.accountNumber":
		if e.complexity.BankAccount.AccountNumber == nil {
			break
		}

		return e.complexity.BankAccount.AccountNumber(childComplexity), true

	case "BankAccount.allowInternational":
		if e.complexity.BankAccount.AllowInternational == nil {
			break
		}

		return e.complexity.BankAccount.AllowInternational(childComplexity), true

	case "BankAccount.bankName":
		if e.complexity.BankAccount.BankName == nil {
			break
		}

		return e.complexity.BankAccount.BankName(childComplexity), true

	case "BankAccount.bankTransferEnabled":
		if e.complexity.BankAccount.BankTransferEnabled == nil {
			break
		}

		return e.complexity.BankAccount.BankTransferEnabled(childComplexity), true

	case "BankAccount.bic":
		if e.complexity.BankAccount.Bic == nil {
			break
		}

		return e.complexity.BankAccount.Bic(childComplexity), true

	case "BankAccount.currency":
		if e.complexity.BankAccount.Currency == nil {
			break
		}

		return e.complexity.BankAccount.Currency(childComplexity), true

	case "BankAccount.iban":
		if e.complexity.BankAccount.Iban == nil {
			break
		}

		return e.complexity.BankAccount.Iban(childComplexity), true

	case "BankAccount.metadata":
		if e.complexity.BankAccount.Metadata == nil {
			break
		}

		return e.complexity.BankAccount.Metadata(childComplexity), true

	case "BankAccount.otherDetails":
		if e.complexity.BankAccount.OtherDetails == nil {
			break
		}

		return e.complexity.BankAccount.OtherDetails(childComplexity), true

	case "BankAccount.routingNumber":
		if e.complexity.BankAccount.RoutingNumber == nil {
			break
		}

		return e.complexity.BankAccount.RoutingNumber(childComplexity), true

	case "BankAccount.sortCode":
		if e.complexity.BankAccount.SortCode == nil {
			break
		}

		return e.complexity.BankAccount.SortCode(childComplexity), true

	case "BillingDetails.addressLine1":
		if e.complexity.BillingDetails.AddressLine1 == nil {
			break
		}

		return e.complexity.BillingDetails.AddressLine1(childComplexity), true

	case "BillingDetails.addressLine2":
		if e.complexity.BillingDetails.AddressLine2 == nil {
			break
		}

		return e.complexity.BillingDetails.AddressLine2(childComplexity), true

	case "BillingDetails.billingCycle":
		if e.complexity.BillingDetails.BillingCycle == nil {
			break
		}

		return e.complexity.BillingDetails.BillingCycle(childComplexity), true

	case "BillingDetails.billingEmail":
		if e.complexity.BillingDetails.BillingEmail == nil {
			break
		}

		return e.complexity.BillingDetails.BillingEmail(childComplexity), true

	case "BillingDetails.canPayWithBankTransfer":
		if e.complexity.BillingDetails.CanPayWithBankTransfer == nil {
			break
		}

		return e.complexity.BillingDetails.CanPayWithBankTransfer(childComplexity), true

	case "BillingDetails.canPayWithCard":
		if e.complexity.BillingDetails.CanPayWithCard == nil {
			break
		}

		return e.complexity.BillingDetails.CanPayWithCard(childComplexity), true

	case "BillingDetails.canPayWithDirectDebit":
		if e.complexity.BillingDetails.CanPayWithDirectDebit == nil {
			break
		}

		return e.complexity.BillingDetails.CanPayWithDirectDebit(childComplexity), true

	case "BillingDetails.country":
		if e.complexity.BillingDetails.Country == nil {
			break
		}

		return e.complexity.BillingDetails.Country(childComplexity), true

	case "BillingDetails.invoiceNote":
		if e.complexity.BillingDetails.InvoiceNote == nil {
			break
		}

		return e.complexity.BillingDetails.InvoiceNote(childComplexity), true

	case "BillingDetails.invoicingStarted":
		if e.complexity.BillingDetails.InvoicingStarted == nil {
			break
		}

		return e.complexity.BillingDetails.InvoicingStarted(childComplexity), true

	case "BillingDetails.locality":
		if e.complexity.BillingDetails.Locality == nil {
			break
		}

		return e.complexity.BillingDetails.Locality(childComplexity), true

	case "BillingDetails.nextInvoicing":
		if e.complexity.BillingDetails.NextInvoicing == nil {
			break
		}

		return e.complexity.BillingDetails.NextInvoicing(childComplexity), true

	case "BillingDetails.organizationLegalName":
		if e.complexity.BillingDetails.OrganizationLegalName == nil {
			break
		}

		return e.complexity.BillingDetails.OrganizationLegalName(childComplexity), true

	case "BillingDetails.payAutomatically":
		if e.complexity.BillingDetails.PayAutomatically == nil {
			break
		}

		return e.complexity.BillingDetails.PayAutomatically(childComplexity), true

	case "BillingDetails.payOnline":
		if e.complexity.BillingDetails.PayOnline == nil {
			break
		}

		return e.complexity.BillingDetails.PayOnline(childComplexity), true

	case "BillingDetails.postalCode":
		if e.complexity.BillingDetails.PostalCode == nil {
			break
		}

		return e.complexity.BillingDetails.PostalCode(childComplexity), true

	case "BillingDetails.region":
		if e.complexity.BillingDetails.Region == nil {
			break
		}

		return e.complexity.BillingDetails.Region(childComplexity), true

	case "BillingProfile.appSource":
		if e.complexity.BillingProfile.AppSource == nil {
			break
		}

		return e.complexity.BillingProfile.AppSource(childComplexity), true

	case "BillingProfile.createdAt":
		if e.complexity.BillingProfile.CreatedAt == nil {
			break
		}

		return e.complexity.BillingProfile.CreatedAt(childComplexity), true

	case "BillingProfile.id":
		if e.complexity.BillingProfile.ID == nil {
			break
		}

		return e.complexity.BillingProfile.ID(childComplexity), true

	case "BillingProfile.legalName":
		if e.complexity.BillingProfile.LegalName == nil {
			break
		}

		return e.complexity.BillingProfile.LegalName(childComplexity), true

	case "BillingProfile.source":
		if e.complexity.BillingProfile.Source == nil {
			break
		}

		return e.complexity.BillingProfile.Source(childComplexity), true

	case "BillingProfile.sourceOfTruth":
		if e.complexity.BillingProfile.SourceOfTruth == nil {
			break
		}

		return e.complexity.BillingProfile.SourceOfTruth(childComplexity), true

	case "BillingProfile.taxId":
		if e.complexity.BillingProfile.TaxID == nil {
			break
		}

		return e.complexity.BillingProfile.TaxID(childComplexity), true

	case "BillingProfile.updatedAt":
		if e.complexity.BillingProfile.UpdatedAt == nil {
			break
		}

		return e.complexity.BillingProfile.UpdatedAt(childComplexity), true

	case "Calendar.appSource":
		if e.complexity.Calendar.AppSource == nil {
			break
		}

		return e.complexity.Calendar.AppSource(childComplexity), true

	case "Calendar.calType":
		if e.complexity.Calendar.CalType == nil {
			break
		}

		return e.complexity.Calendar.CalType(childComplexity), true

	case "Calendar.createdAt":
		if e.complexity.Calendar.CreatedAt == nil {
			break
		}

		return e.complexity.Calendar.CreatedAt(childComplexity), true

	case "Calendar.id":
		if e.complexity.Calendar.ID == nil {
			break
		}

		return e.complexity.Calendar.ID(childComplexity), true

	case "Calendar.link":
		if e.complexity.Calendar.Link == nil {
			break
		}

		return e.complexity.Calendar.Link(childComplexity), true

	case "Calendar.primary":
		if e.complexity.Calendar.Primary == nil {
			break
		}

		return e.complexity.Calendar.Primary(childComplexity), true

	case "Calendar.source":
		if e.complexity.Calendar.Source == nil {
			break
		}

		return e.complexity.Calendar.Source(childComplexity), true

	case "Calendar.sourceOfTruth":
		if e.complexity.Calendar.SourceOfTruth == nil {
			break
		}

		return e.complexity.Calendar.SourceOfTruth(childComplexity), true

	case "Calendar.updatedAt":
		if e.complexity.Calendar.UpdatedAt == nil {
			break
		}

		return e.complexity.Calendar.UpdatedAt(childComplexity), true

	case "ColumnDef.columnType":
		if e.complexity.ColumnDef.ColumnType == nil {
			break
		}

		return e.complexity.ColumnDef.ColumnType(childComplexity), true

	case "ColumnDef.createdAt":
		if e.complexity.ColumnDef.CreatedAt == nil {
			break
		}

		return e.complexity.ColumnDef.CreatedAt(childComplexity), true

	case "ColumnDef.createdBy":
		if e.complexity.ColumnDef.CreatedBy == nil {
			break
		}

		return e.complexity.ColumnDef.CreatedBy(childComplexity), true

	case "ColumnDef.id":
		if e.complexity.ColumnDef.ID == nil {
			break
		}

		return e.complexity.ColumnDef.ID(childComplexity), true

	case "ColumnDef.isDefaultSort":
		if e.complexity.ColumnDef.IsDefaultSort == nil {
			break
		}

		return e.complexity.ColumnDef.IsDefaultSort(childComplexity), true

	case "ColumnDef.isFilterable":
		if e.complexity.ColumnDef.IsFilterable == nil {
			break
		}

		return e.complexity.ColumnDef.IsFilterable(childComplexity), true

	case "ColumnDef.isSortable":
		if e.complexity.ColumnDef.IsSortable == nil {
			break
		}

		return e.complexity.ColumnDef.IsSortable(childComplexity), true

	case "ColumnDef.isVisible":
		if e.complexity.ColumnDef.IsVisible == nil {
			break
		}

		return e.complexity.ColumnDef.IsVisible(childComplexity), true

	case "ColumnDef.type":
		if e.complexity.ColumnDef.Type == nil {
			break
		}

		return e.complexity.ColumnDef.Type(childComplexity), true

	case "ColumnDef.updatedAt":
		if e.complexity.ColumnDef.UpdatedAt == nil {
			break
		}

		return e.complexity.ColumnDef.UpdatedAt(childComplexity), true

	case "ColumnType.createdAt":
		if e.complexity.ColumnType.CreatedAt == nil {
			break
		}

		return e.complexity.ColumnType.CreatedAt(childComplexity), true

	case "ColumnType.createdBy":
		if e.complexity.ColumnType.CreatedBy == nil {
			break
		}

		return e.complexity.ColumnType.CreatedBy(childComplexity), true

	case "ColumnType.id":
		if e.complexity.ColumnType.ID == nil {
			break
		}

		return e.complexity.ColumnType.ID(childComplexity), true

	case "ColumnType.name":
		if e.complexity.ColumnType.Name == nil {
			break
		}

		return e.complexity.ColumnType.Name(childComplexity), true

	case "ColumnType.updatedAt":
		if e.complexity.ColumnType.UpdatedAt == nil {
			break
		}

		return e.complexity.ColumnType.UpdatedAt(childComplexity), true

	case "ColumnType.viewTypeId":
		if e.complexity.ColumnType.ViewTypeID == nil {
			break
		}

		return e.complexity.ColumnType.ViewTypeID(childComplexity), true

	case "Comment.appSource":
		if e.complexity.Comment.AppSource == nil {
			break
		}

		return e.complexity.Comment.AppSource(childComplexity), true

	case "Comment.content":
		if e.complexity.Comment.Content == nil {
			break
		}

		return e.complexity.Comment.Content(childComplexity), true

	case "Comment.contentType":
		if e.complexity.Comment.ContentType == nil {
			break
		}

		return e.complexity.Comment.ContentType(childComplexity), true

	case "Comment.createdAt":
		if e.complexity.Comment.CreatedAt == nil {
			break
		}

		return e.complexity.Comment.CreatedAt(childComplexity), true

	case "Comment.createdBy":
		if e.complexity.Comment.CreatedBy == nil {
			break
		}

		return e.complexity.Comment.CreatedBy(childComplexity), true

	case "Comment.externalLinks":
		if e.complexity.Comment.ExternalLinks == nil {
			break
		}

		return e.complexity.Comment.ExternalLinks(childComplexity), true

	case "Comment.id":
		if e.complexity.Comment.ID == nil {
			break
		}

		return e.complexity.Comment.ID(childComplexity), true

	case "Comment.source":
		if e.complexity.Comment.Source == nil {
			break
		}

		return e.complexity.Comment.Source(childComplexity), true

	case "Comment.sourceOfTruth":
		if e.complexity.Comment.SourceOfTruth == nil {
			break
		}

		return e.complexity.Comment.SourceOfTruth(childComplexity), true

	case "Comment.updatedAt":
		if e.complexity.Comment.UpdatedAt == nil {
			break
		}

		return e.complexity.Comment.UpdatedAt(childComplexity), true

	case "Contact.appSource":
		if e.complexity.Contact.AppSource == nil {
			break
		}

		return e.complexity.Contact.AppSource(childComplexity), true

	case "Contact.createdAt":
		if e.complexity.Contact.CreatedAt == nil {
			break
		}

		return e.complexity.Contact.CreatedAt(childComplexity), true

	case "Contact.customFields":
		if e.complexity.Contact.CustomFields == nil {
			break
		}

		return e.complexity.Contact.CustomFields(childComplexity), true

	case "Contact.description":
		if e.complexity.Contact.Description == nil {
			break
		}

		return e.complexity.Contact.Description(childComplexity), true

	case "Contact.emails":
		if e.complexity.Contact.Emails == nil {
			break
		}

		return e.complexity.Contact.Emails(childComplexity), true

	case "Contact.fieldSets":
		if e.complexity.Contact.FieldSets == nil {
			break
		}

		return e.complexity.Contact.FieldSets(childComplexity), true

	case "Contact.firstName":
		if e.complexity.Contact.FirstName == nil {
			break
		}

		return e.complexity.Contact.FirstName(childComplexity), true

	case "Contact.id":
		if e.complexity.Contact.ID == nil {
			break
		}

		return e.complexity.Contact.ID(childComplexity), true

	case "Contact.jobRoles":
		if e.complexity.Contact.JobRoles == nil {
			break
		}

		return e.complexity.Contact.JobRoles(childComplexity), true

	case "Contact.label":
		if e.complexity.Contact.Label == nil {
			break
		}

		return e.complexity.Contact.Label(childComplexity), true

	case "Contact.lastName":
		if e.complexity.Contact.LastName == nil {
			break
		}

		return e.complexity.Contact.LastName(childComplexity), true

	case "Contact.locations":
		if e.complexity.Contact.Locations == nil {
			break
		}

		return e.complexity.Contact.Locations(childComplexity), true

	case "Contact.name":
		if e.complexity.Contact.Name == nil {
			break
		}

		return e.complexity.Contact.Name(childComplexity), true

	case "Contact.notes":
		if e.complexity.Contact.Notes == nil {
			break
		}

		args, err := ec.field_Contact_notes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Contact.Notes(childComplexity, args["pagination"].(*model.Pagination)), true

	case "Contact.notesByTime":
		if e.complexity.Contact.NotesByTime == nil {
			break
		}

		args, err := ec.field_Contact_notesByTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Contact.NotesByTime(childComplexity, args["pagination"].(*model.TimeRange)), true

	case "Contact.organizations":
		if e.complexity.Contact.Organizations == nil {
			break
		}

		args, err := ec.field_Contact_organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Contact.Organizations(childComplexity, args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].([]*model.SortBy)), true

	case "Contact.owner":
		if e.complexity.Contact.Owner == nil {
			break
		}

		return e.complexity.Contact.Owner(childComplexity), true

	case "Contact.phoneNumbers":
		if e.complexity.Contact.PhoneNumbers == nil {
			break
		}

		return e.complexity.Contact.PhoneNumbers(childComplexity), true

	case "Contact.prefix":
		if e.complexity.Contact.Prefix == nil {
			break
		}

		return e.complexity.Contact.Prefix(childComplexity), true

	case "Contact.profilePhotoUrl":
		if e.complexity.Contact.ProfilePhotoURL == nil {
			break
		}

		return e.complexity.Contact.ProfilePhotoURL(childComplexity), true

	case "Contact.socials":
		if e.complexity.Contact.Socials == nil {
			break
		}

		return e.complexity.Contact.Socials(childComplexity), true

	case "Contact.source":
		if e.complexity.Contact.Source == nil {
			break
		}

		return e.complexity.Contact.Source(childComplexity), true

	case "Contact.sourceOfTruth":
		if e.complexity.Contact.SourceOfTruth == nil {
			break
		}

		return e.complexity.Contact.SourceOfTruth(childComplexity), true

	case "Contact.tags":
		if e.complexity.Contact.Tags == nil {
			break
		}

		return e.complexity.Contact.Tags(childComplexity), true

	case "Contact.template":
		if e.complexity.Contact.Template == nil {
			break
		}

		return e.complexity.Contact.Template(childComplexity), true

	case "Contact.timelineEvents":
		if e.complexity.Contact.TimelineEvents == nil {
			break
		}

		args, err := ec.field_Contact_timelineEvents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Contact.TimelineEvents(childComplexity, args["from"].(*time.Time), args["size"].(int), args["timelineEventTypes"].([]model.TimelineEventType)), true

	case "Contact.timelineEventsTotalCount":
		if e.complexity.Contact.TimelineEventsTotalCount == nil {
			break
		}

		args, err := ec.field_Contact_timelineEventsTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Contact.TimelineEventsTotalCount(childComplexity, args["timelineEventTypes"].([]model.TimelineEventType)), true

	case "Contact.timezone":
		if e.complexity.Contact.Timezone == nil {
			break
		}

		return e.complexity.Contact.Timezone(childComplexity), true

	case "Contact.title":
		if e.complexity.Contact.Title == nil {
			break
		}

		return e.complexity.Contact.Title(childComplexity), true

	case "Contact.updatedAt":
		if e.complexity.Contact.UpdatedAt == nil {
			break
		}

		return e.complexity.Contact.UpdatedAt(childComplexity), true

	case "ContactParticipant.contactParticipant":
		if e.complexity.ContactParticipant.ContactParticipant == nil {
			break
		}

		return e.complexity.ContactParticipant.ContactParticipant(childComplexity), true

	case "ContactParticipant.type":
		if e.complexity.ContactParticipant.Type == nil {
			break
		}

		return e.complexity.ContactParticipant.Type(childComplexity), true

	case "ContactsPage.content":
		if e.complexity.ContactsPage.Content == nil {
			break
		}

		return e.complexity.ContactsPage.Content(childComplexity), true

	case "ContactsPage.totalElements":
		if e.complexity.ContactsPage.TotalElements == nil {
			break
		}

		return e.complexity.ContactsPage.TotalElements(childComplexity), true

	case "ContactsPage.totalPages":
		if e.complexity.ContactsPage.TotalPages == nil {
			break
		}

		return e.complexity.ContactsPage.TotalPages(childComplexity), true

	case "Contract.addressLine1":
		if e.complexity.Contract.AddressLine1 == nil {
			break
		}

		return e.complexity.Contract.AddressLine1(childComplexity), true

	case "Contract.addressLine2":
		if e.complexity.Contract.AddressLine2 == nil {
			break
		}

		return e.complexity.Contract.AddressLine2(childComplexity), true

	case "Contract.appSource":
		if e.complexity.Contract.AppSource == nil {
			break
		}

		return e.complexity.Contract.AppSource(childComplexity), true

	case "Contract.billingCycle":
		if e.complexity.Contract.BillingCycle == nil {
			break
		}

		return e.complexity.Contract.BillingCycle(childComplexity), true

	case "Contract.billingDetails":
		if e.complexity.Contract.BillingDetails == nil {
			break
		}

		return e.complexity.Contract.BillingDetails(childComplexity), true

	case "Contract.billingEnabled":
		if e.complexity.Contract.BillingEnabled == nil {
			break
		}

		return e.complexity.Contract.BillingEnabled(childComplexity), true

	case "Contract.committedPeriods":
		if e.complexity.Contract.CommittedPeriods == nil {
			break
		}

		return e.complexity.Contract.CommittedPeriods(childComplexity), true

	case "Contract.contractEnded":
		if e.complexity.Contract.ContractEnded == nil {
			break
		}

		return e.complexity.Contract.ContractEnded(childComplexity), true

	case "Contract.contractLineItems":
		if e.complexity.Contract.ContractLineItems == nil {
			break
		}

		return e.complexity.Contract.ContractLineItems(childComplexity), true

	case "Contract.contractName":
		if e.complexity.Contract.ContractName == nil {
			break
		}

		return e.complexity.Contract.ContractName(childComplexity), true

	case "Contract.contractRenewalCycle":
		if e.complexity.Contract.ContractRenewalCycle == nil {
			break
		}

		return e.complexity.Contract.ContractRenewalCycle(childComplexity), true

	case "Contract.contractSigned":
		if e.complexity.Contract.ContractSigned == nil {
			break
		}

		return e.complexity.Contract.ContractSigned(childComplexity), true

	case "Contract.contractStatus":
		if e.complexity.Contract.ContractStatus == nil {
			break
		}

		return e.complexity.Contract.ContractStatus(childComplexity), true

	case "Contract.contractUrl":
		if e.complexity.Contract.ContractURL == nil {
			break
		}

		return e.complexity.Contract.ContractURL(childComplexity), true

	case "Contract.country":
		if e.complexity.Contract.Country == nil {
			break
		}

		return e.complexity.Contract.Country(childComplexity), true

	case "Contract.createdAt":
		if e.complexity.Contract.CreatedAt == nil {
			break
		}

		return e.complexity.Contract.CreatedAt(childComplexity), true

	case "Contract.createdBy":
		if e.complexity.Contract.CreatedBy == nil {
			break
		}

		return e.complexity.Contract.CreatedBy(childComplexity), true

	case "Contract.currency":
		if e.complexity.Contract.Currency == nil {
			break
		}

		return e.complexity.Contract.Currency(childComplexity), true

	case "Contract.endedAt":
		if e.complexity.Contract.EndedAt == nil {
			break
		}

		return e.complexity.Contract.EndedAt(childComplexity), true

	case "Contract.externalLinks":
		if e.complexity.Contract.ExternalLinks == nil {
			break
		}

		return e.complexity.Contract.ExternalLinks(childComplexity), true

	case "Contract.id":
		if e.complexity.Contract.ID == nil {
			break
		}

		return e.complexity.Contract.ID(childComplexity), true

	case "Contract.invoiceEmail":
		if e.complexity.Contract.InvoiceEmail == nil {
			break
		}

		return e.complexity.Contract.InvoiceEmail(childComplexity), true

	case "Contract.invoiceNote":
		if e.complexity.Contract.InvoiceNote == nil {
			break
		}

		return e.complexity.Contract.InvoiceNote(childComplexity), true

	case "Contract.invoicingStartDate":
		if e.complexity.Contract.InvoicingStartDate == nil {
			break
		}

		return e.complexity.Contract.InvoicingStartDate(childComplexity), true

	case "Contract.locality":
		if e.complexity.Contract.Locality == nil {
			break
		}

		return e.complexity.Contract.Locality(childComplexity), true

	case "Contract.metadata":
		if e.complexity.Contract.Metadata == nil {
			break
		}

		return e.complexity.Contract.Metadata(childComplexity), true

	case "Contract.name":
		if e.complexity.Contract.Name == nil {
			break
		}

		return e.complexity.Contract.Name(childComplexity), true

	case "Contract.opportunities":
		if e.complexity.Contract.Opportunities == nil {
			break
		}

		return e.complexity.Contract.Opportunities(childComplexity), true

	case "Contract.organizationLegalName":
		if e.complexity.Contract.OrganizationLegalName == nil {
			break
		}

		return e.complexity.Contract.OrganizationLegalName(childComplexity), true

	case "Contract.owner":
		if e.complexity.Contract.Owner == nil {
			break
		}

		return e.complexity.Contract.Owner(childComplexity), true

	case "Contract.renewalCycle":
		if e.complexity.Contract.RenewalCycle == nil {
			break
		}

		return e.complexity.Contract.RenewalCycle(childComplexity), true

	case "Contract.renewalPeriods":
		if e.complexity.Contract.RenewalPeriods == nil {
			break
		}

		return e.complexity.Contract.RenewalPeriods(childComplexity), true

	case "Contract.serviceLineItems":
		if e.complexity.Contract.ServiceLineItems == nil {
			break
		}

		return e.complexity.Contract.ServiceLineItems(childComplexity), true

	case "Contract.serviceStarted":
		if e.complexity.Contract.ServiceStarted == nil {
			break
		}

		return e.complexity.Contract.ServiceStarted(childComplexity), true

	case "Contract.serviceStartedAt":
		if e.complexity.Contract.ServiceStartedAt == nil {
			break
		}

		return e.complexity.Contract.ServiceStartedAt(childComplexity), true

	case "Contract.signedAt":
		if e.complexity.Contract.SignedAt == nil {
			break
		}

		return e.complexity.Contract.SignedAt(childComplexity), true

	case "Contract.source":
		if e.complexity.Contract.Source == nil {
			break
		}

		return e.complexity.Contract.Source(childComplexity), true

	case "Contract.sourceOfTruth":
		if e.complexity.Contract.SourceOfTruth == nil {
			break
		}

		return e.complexity.Contract.SourceOfTruth(childComplexity), true

	case "Contract.status":
		if e.complexity.Contract.Status == nil {
			break
		}

		return e.complexity.Contract.Status(childComplexity), true

	case "Contract.updatedAt":
		if e.complexity.Contract.UpdatedAt == nil {
			break
		}

		return e.complexity.Contract.UpdatedAt(childComplexity), true

	case "Contract.zip":
		if e.complexity.Contract.Zip == nil {
			break
		}

		return e.complexity.Contract.Zip(childComplexity), true

	case "Country.codeA2":
		if e.complexity.Country.CodeA2 == nil {
			break
		}

		return e.complexity.Country.CodeA2(childComplexity), true

	case "Country.codeA3":
		if e.complexity.Country.CodeA3 == nil {
			break
		}

		return e.complexity.Country.CodeA3(childComplexity), true

	case "Country.id":
		if e.complexity.Country.ID == nil {
			break
		}

		return e.complexity.Country.ID(childComplexity), true

	case "Country.name":
		if e.complexity.Country.Name == nil {
			break
		}

		return e.complexity.Country.Name(childComplexity), true

	case "Country.phoneCode":
		if e.complexity.Country.PhoneCode == nil {
			break
		}

		return e.complexity.Country.PhoneCode(childComplexity), true

	case "CustomField.createdAt":
		if e.complexity.CustomField.CreatedAt == nil {
			break
		}

		return e.complexity.CustomField.CreatedAt(childComplexity), true

	case "CustomField.datatype":
		if e.complexity.CustomField.Datatype == nil {
			break
		}

		return e.complexity.CustomField.Datatype(childComplexity), true

	case "CustomField.id":
		if e.complexity.CustomField.ID == nil {
			break
		}

		return e.complexity.CustomField.ID(childComplexity), true

	case "CustomField.name":
		if e.complexity.CustomField.Name == nil {
			break
		}

		return e.complexity.CustomField.Name(childComplexity), true

	case "CustomField.source":
		if e.complexity.CustomField.Source == nil {
			break
		}

		return e.complexity.CustomField.Source(childComplexity), true

	case "CustomField.template":
		if e.complexity.CustomField.Template == nil {
			break
		}

		return e.complexity.CustomField.Template(childComplexity), true

	case "CustomField.updatedAt":
		if e.complexity.CustomField.UpdatedAt == nil {
			break
		}

		return e.complexity.CustomField.UpdatedAt(childComplexity), true

	case "CustomField.value":
		if e.complexity.CustomField.Value == nil {
			break
		}

		return e.complexity.CustomField.Value(childComplexity), true

	case "CustomFieldTemplate.createdAt":
		if e.complexity.CustomFieldTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.CreatedAt(childComplexity), true

	case "CustomFieldTemplate.id":
		if e.complexity.CustomFieldTemplate.ID == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.ID(childComplexity), true

	case "CustomFieldTemplate.length":
		if e.complexity.CustomFieldTemplate.Length == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.Length(childComplexity), true

	case "CustomFieldTemplate.mandatory":
		if e.complexity.CustomFieldTemplate.Mandatory == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.Mandatory(childComplexity), true

	case "CustomFieldTemplate.max":
		if e.complexity.CustomFieldTemplate.Max == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.Max(childComplexity), true

	case "CustomFieldTemplate.min":
		if e.complexity.CustomFieldTemplate.Min == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.Min(childComplexity), true

	case "CustomFieldTemplate.name":
		if e.complexity.CustomFieldTemplate.Name == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.Name(childComplexity), true

	case "CustomFieldTemplate.order":
		if e.complexity.CustomFieldTemplate.Order == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.Order(childComplexity), true

	case "CustomFieldTemplate.type":
		if e.complexity.CustomFieldTemplate.Type == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.Type(childComplexity), true

	case "CustomFieldTemplate.updatedAt":
		if e.complexity.CustomFieldTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.CustomFieldTemplate.UpdatedAt(childComplexity), true

	case "CustomerContact.email":
		if e.complexity.CustomerContact.Email == nil {
			break
		}

		return e.complexity.CustomerContact.Email(childComplexity), true

	case "CustomerContact.id":
		if e.complexity.CustomerContact.ID == nil {
			break
		}

		return e.complexity.CustomerContact.ID(childComplexity), true

	case "CustomerEmail.id":
		if e.complexity.CustomerEmail.ID == nil {
			break
		}

		return e.complexity.CustomerEmail.ID(childComplexity), true

	case "CustomerJobRole.id":
		if e.complexity.CustomerJobRole.ID == nil {
			break
		}

		return e.complexity.CustomerJobRole.ID(childComplexity), true

	case "CustomerUser.id":
		if e.complexity.CustomerUser.ID == nil {
			break
		}

		return e.complexity.CustomerUser.ID(childComplexity), true

	case "CustomerUser.jobRole":
		if e.complexity.CustomerUser.JobRole == nil {
			break
		}

		return e.complexity.CustomerUser.JobRole(childComplexity), true

	case "DashboardARRBreakdown.arrBreakdown":
		if e.complexity.DashboardARRBreakdown.ArrBreakdown == nil {
			break
		}

		return e.complexity.DashboardARRBreakdown.ArrBreakdown(childComplexity), true

	case "DashboardARRBreakdown.increasePercentage":
		if e.complexity.DashboardARRBreakdown.IncreasePercentage == nil {
			break
		}

		return e.complexity.DashboardARRBreakdown.IncreasePercentage(childComplexity), true

	case "DashboardARRBreakdown.perMonth":
		if e.complexity.DashboardARRBreakdown.PerMonth == nil {
			break
		}

		return e.complexity.DashboardARRBreakdown.PerMonth(childComplexity), true

	case "DashboardARRBreakdownPerMonth.cancellations":
		if e.complexity.DashboardARRBreakdownPerMonth.Cancellations == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.Cancellations(childComplexity), true

	case "DashboardARRBreakdownPerMonth.churned":
		if e.complexity.DashboardARRBreakdownPerMonth.Churned == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.Churned(childComplexity), true

	case "DashboardARRBreakdownPerMonth.downgrades":
		if e.complexity.DashboardARRBreakdownPerMonth.Downgrades == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.Downgrades(childComplexity), true

	case "DashboardARRBreakdownPerMonth.month":
		if e.complexity.DashboardARRBreakdownPerMonth.Month == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.Month(childComplexity), true

	case "DashboardARRBreakdownPerMonth.newlyContracted":
		if e.complexity.DashboardARRBreakdownPerMonth.NewlyContracted == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.NewlyContracted(childComplexity), true

	case "DashboardARRBreakdownPerMonth.renewals":
		if e.complexity.DashboardARRBreakdownPerMonth.Renewals == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.Renewals(childComplexity), true

	case "DashboardARRBreakdownPerMonth.upsells":
		if e.complexity.DashboardARRBreakdownPerMonth.Upsells == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.Upsells(childComplexity), true

	case "DashboardARRBreakdownPerMonth.year":
		if e.complexity.DashboardARRBreakdownPerMonth.Year == nil {
			break
		}

		return e.complexity.DashboardARRBreakdownPerMonth.Year(childComplexity), true

	case "DashboardCustomerMap.arr":
		if e.complexity.DashboardCustomerMap.Arr == nil {
			break
		}

		return e.complexity.DashboardCustomerMap.Arr(childComplexity), true

	case "DashboardCustomerMap.contractSignedDate":
		if e.complexity.DashboardCustomerMap.ContractSignedDate == nil {
			break
		}

		return e.complexity.DashboardCustomerMap.ContractSignedDate(childComplexity), true

	case "DashboardCustomerMap.organization":
		if e.complexity.DashboardCustomerMap.Organization == nil {
			break
		}

		return e.complexity.DashboardCustomerMap.Organization(childComplexity), true

	case "DashboardCustomerMap.organizationId":
		if e.complexity.DashboardCustomerMap.OrganizationID == nil {
			break
		}

		return e.complexity.DashboardCustomerMap.OrganizationID(childComplexity), true

	case "DashboardCustomerMap.state":
		if e.complexity.DashboardCustomerMap.State == nil {
			break
		}

		return e.complexity.DashboardCustomerMap.State(childComplexity), true

	case "DashboardGrossRevenueRetention.grossRevenueRetention":
		if e.complexity.DashboardGrossRevenueRetention.GrossRevenueRetention == nil {
			break
		}

		return e.complexity.DashboardGrossRevenueRetention.GrossRevenueRetention(childComplexity), true

	case "DashboardGrossRevenueRetention.increasePercentage":
		if e.complexity.DashboardGrossRevenueRetention.IncreasePercentage == nil {
			break
		}

		return e.complexity.DashboardGrossRevenueRetention.IncreasePercentage(childComplexity), true

	case "DashboardGrossRevenueRetention.increasePercentageValue":
		if e.complexity.DashboardGrossRevenueRetention.IncreasePercentageValue == nil {
			break
		}

		return e.complexity.DashboardGrossRevenueRetention.IncreasePercentageValue(childComplexity), true

	case "DashboardGrossRevenueRetention.perMonth":
		if e.complexity.DashboardGrossRevenueRetention.PerMonth == nil {
			break
		}

		return e.complexity.DashboardGrossRevenueRetention.PerMonth(childComplexity), true

	case "DashboardGrossRevenueRetentionPerMonth.month":
		if e.complexity.DashboardGrossRevenueRetentionPerMonth.Month == nil {
			break
		}

		return e.complexity.DashboardGrossRevenueRetentionPerMonth.Month(childComplexity), true

	case "DashboardGrossRevenueRetentionPerMonth.percentage":
		if e.complexity.DashboardGrossRevenueRetentionPerMonth.Percentage == nil {
			break
		}

		return e.complexity.DashboardGrossRevenueRetentionPerMonth.Percentage(childComplexity), true

	case "DashboardGrossRevenueRetentionPerMonth.year":
		if e.complexity.DashboardGrossRevenueRetentionPerMonth.Year == nil {
			break
		}

		return e.complexity.DashboardGrossRevenueRetentionPerMonth.Year(childComplexity), true

	case "DashboardMRRPerCustomer.increasePercentage":
		if e.complexity.DashboardMRRPerCustomer.IncreasePercentage == nil {
			break
		}

		return e.complexity.DashboardMRRPerCustomer.IncreasePercentage(childComplexity), true

	case "DashboardMRRPerCustomer.mrrPerCustomer":
		if e.complexity.DashboardMRRPerCustomer.MrrPerCustomer == nil {
			break
		}

		return e.complexity.DashboardMRRPerCustomer.MrrPerCustomer(childComplexity), true

	case "DashboardMRRPerCustomer.perMonth":
		if e.complexity.DashboardMRRPerCustomer.PerMonth == nil {
			break
		}

		return e.complexity.DashboardMRRPerCustomer.PerMonth(childComplexity), true

	case "DashboardMRRPerCustomerPerMonth.month":
		if e.complexity.DashboardMRRPerCustomerPerMonth.Month == nil {
			break
		}

		return e.complexity.DashboardMRRPerCustomerPerMonth.Month(childComplexity), true

	case "DashboardMRRPerCustomerPerMonth.value":
		if e.complexity.DashboardMRRPerCustomerPerMonth.Value == nil {
			break
		}

		return e.complexity.DashboardMRRPerCustomerPerMonth.Value(childComplexity), true

	case "DashboardMRRPerCustomerPerMonth.year":
		if e.complexity.DashboardMRRPerCustomerPerMonth.Year == nil {
			break
		}

		return e.complexity.DashboardMRRPerCustomerPerMonth.Year(childComplexity), true

	case "DashboardNewCustomers.perMonth":
		if e.complexity.DashboardNewCustomers.PerMonth == nil {
			break
		}

		return e.complexity.DashboardNewCustomers.PerMonth(childComplexity), true

	case "DashboardNewCustomers.thisMonthCount":
		if e.complexity.DashboardNewCustomers.ThisMonthCount == nil {
			break
		}

		return e.complexity.DashboardNewCustomers.ThisMonthCount(childComplexity), true

	case "DashboardNewCustomers.thisMonthIncreasePercentage":
		if e.complexity.DashboardNewCustomers.ThisMonthIncreasePercentage == nil {
			break
		}

		return e.complexity.DashboardNewCustomers.ThisMonthIncreasePercentage(childComplexity), true

	case "DashboardNewCustomersPerMonth.count":
		if e.complexity.DashboardNewCustomersPerMonth.Count == nil {
			break
		}

		return e.complexity.DashboardNewCustomersPerMonth.Count(childComplexity), true

	case "DashboardNewCustomersPerMonth.month":
		if e.complexity.DashboardNewCustomersPerMonth.Month == nil {
			break
		}

		return e.complexity.DashboardNewCustomersPerMonth.Month(childComplexity), true

	case "DashboardNewCustomersPerMonth.year":
		if e.complexity.DashboardNewCustomersPerMonth.Year == nil {
			break
		}

		return e.complexity.DashboardNewCustomersPerMonth.Year(childComplexity), true

	case "DashboardOnboardingCompletion.completionPercentage":
		if e.complexity.DashboardOnboardingCompletion.CompletionPercentage == nil {
			break
		}

		return e.complexity.DashboardOnboardingCompletion.CompletionPercentage(childComplexity), true

	case "DashboardOnboardingCompletion.increasePercentage":
		if e.complexity.DashboardOnboardingCompletion.IncreasePercentage == nil {
			break
		}

		return e.complexity.DashboardOnboardingCompletion.IncreasePercentage(childComplexity), true

	case "DashboardOnboardingCompletion.perMonth":
		if e.complexity.DashboardOnboardingCompletion.PerMonth == nil {
			break
		}

		return e.complexity.DashboardOnboardingCompletion.PerMonth(childComplexity), true

	case "DashboardOnboardingCompletionPerMonth.month":
		if e.complexity.DashboardOnboardingCompletionPerMonth.Month == nil {
			break
		}

		return e.complexity.DashboardOnboardingCompletionPerMonth.Month(childComplexity), true

	case "DashboardOnboardingCompletionPerMonth.value":
		if e.complexity.DashboardOnboardingCompletionPerMonth.Value == nil {
			break
		}

		return e.complexity.DashboardOnboardingCompletionPerMonth.Value(childComplexity), true

	case "DashboardOnboardingCompletionPerMonth.year":
		if e.complexity.DashboardOnboardingCompletionPerMonth.Year == nil {
			break
		}

		return e.complexity.DashboardOnboardingCompletionPerMonth.Year(childComplexity), true

	case "DashboardRetentionRate.increasePercentage":
		if e.complexity.DashboardRetentionRate.IncreasePercentage == nil {
			break
		}

		return e.complexity.DashboardRetentionRate.IncreasePercentage(childComplexity), true

	case "DashboardRetentionRate.increasePercentageValue":
		if e.complexity.DashboardRetentionRate.IncreasePercentageValue == nil {
			break
		}

		return e.complexity.DashboardRetentionRate.IncreasePercentageValue(childComplexity), true

	case "DashboardRetentionRate.perMonth":
		if e.complexity.DashboardRetentionRate.PerMonth == nil {
			break
		}

		return e.complexity.DashboardRetentionRate.PerMonth(childComplexity), true

	case "DashboardRetentionRate.retentionRate":
		if e.complexity.DashboardRetentionRate.RetentionRate == nil {
			break
		}

		return e.complexity.DashboardRetentionRate.RetentionRate(childComplexity), true

	case "DashboardRetentionRatePerMonth.churnCount":
		if e.complexity.DashboardRetentionRatePerMonth.ChurnCount == nil {
			break
		}

		return e.complexity.DashboardRetentionRatePerMonth.ChurnCount(childComplexity), true

	case "DashboardRetentionRatePerMonth.month":
		if e.complexity.DashboardRetentionRatePerMonth.Month == nil {
			break
		}

		return e.complexity.DashboardRetentionRatePerMonth.Month(childComplexity), true

	case "DashboardRetentionRatePerMonth.renewCount":
		if e.complexity.DashboardRetentionRatePerMonth.RenewCount == nil {
			break
		}

		return e.complexity.DashboardRetentionRatePerMonth.RenewCount(childComplexity), true

	case "DashboardRetentionRatePerMonth.year":
		if e.complexity.DashboardRetentionRatePerMonth.Year == nil {
			break
		}

		return e.complexity.DashboardRetentionRatePerMonth.Year(childComplexity), true

	case "DashboardRevenueAtRisk.atRisk":
		if e.complexity.DashboardRevenueAtRisk.AtRisk == nil {
			break
		}

		return e.complexity.DashboardRevenueAtRisk.AtRisk(childComplexity), true

	case "DashboardRevenueAtRisk.highConfidence":
		if e.complexity.DashboardRevenueAtRisk.HighConfidence == nil {
			break
		}

		return e.complexity.DashboardRevenueAtRisk.HighConfidence(childComplexity), true

	case "DashboardTimeToOnboard.increasePercentage":
		if e.complexity.DashboardTimeToOnboard.IncreasePercentage == nil {
			break
		}

		return e.complexity.DashboardTimeToOnboard.IncreasePercentage(childComplexity), true

	case "DashboardTimeToOnboard.perMonth":
		if e.complexity.DashboardTimeToOnboard.PerMonth == nil {
			break
		}

		return e.complexity.DashboardTimeToOnboard.PerMonth(childComplexity), true

	case "DashboardTimeToOnboard.timeToOnboard":
		if e.complexity.DashboardTimeToOnboard.TimeToOnboard == nil {
			break
		}

		return e.complexity.DashboardTimeToOnboard.TimeToOnboard(childComplexity), true

	case "DashboardTimeToOnboardPerMonth.month":
		if e.complexity.DashboardTimeToOnboardPerMonth.Month == nil {
			break
		}

		return e.complexity.DashboardTimeToOnboardPerMonth.Month(childComplexity), true

	case "DashboardTimeToOnboardPerMonth.value":
		if e.complexity.DashboardTimeToOnboardPerMonth.Value == nil {
			break
		}

		return e.complexity.DashboardTimeToOnboardPerMonth.Value(childComplexity), true

	case "DashboardTimeToOnboardPerMonth.year":
		if e.complexity.DashboardTimeToOnboardPerMonth.Year == nil {
			break
		}

		return e.complexity.DashboardTimeToOnboardPerMonth.Year(childComplexity), true

	case "DeleteResponse.accepted":
		if e.complexity.DeleteResponse.Accepted == nil {
			break
		}

		return e.complexity.DeleteResponse.Accepted(childComplexity), true

	case "DeleteResponse.completed":
		if e.complexity.DeleteResponse.Completed == nil {
			break
		}

		return e.complexity.DeleteResponse.Completed(childComplexity), true

	case "Email.appSource":
		if e.complexity.Email.AppSource == nil {
			break
		}

		return e.complexity.Email.AppSource(childComplexity), true

	case "Email.contacts":
		if e.complexity.Email.Contacts == nil {
			break
		}

		return e.complexity.Email.Contacts(childComplexity), true

	case "Email.createdAt":
		if e.complexity.Email.CreatedAt == nil {
			break
		}

		return e.complexity.Email.CreatedAt(childComplexity), true

	case "Email.email":
		if e.complexity.Email.Email == nil {
			break
		}

		return e.complexity.Email.Email(childComplexity), true

	case "Email.emailValidationDetails":
		if e.complexity.Email.EmailValidationDetails == nil {
			break
		}

		return e.complexity.Email.EmailValidationDetails(childComplexity), true

	case "Email.id":
		if e.complexity.Email.ID == nil {
			break
		}

		return e.complexity.Email.ID(childComplexity), true

	case "Email.label":
		if e.complexity.Email.Label == nil {
			break
		}

		return e.complexity.Email.Label(childComplexity), true

	case "Email.organizations":
		if e.complexity.Email.Organizations == nil {
			break
		}

		return e.complexity.Email.Organizations(childComplexity), true

	case "Email.primary":
		if e.complexity.Email.Primary == nil {
			break
		}

		return e.complexity.Email.Primary(childComplexity), true

	case "Email.rawEmail":
		if e.complexity.Email.RawEmail == nil {
			break
		}

		return e.complexity.Email.RawEmail(childComplexity), true

	case "Email.source":
		if e.complexity.Email.Source == nil {
			break
		}

		return e.complexity.Email.Source(childComplexity), true

	case "Email.sourceOfTruth":
		if e.complexity.Email.SourceOfTruth == nil {
			break
		}

		return e.complexity.Email.SourceOfTruth(childComplexity), true

	case "Email.updatedAt":
		if e.complexity.Email.UpdatedAt == nil {
			break
		}

		return e.complexity.Email.UpdatedAt(childComplexity), true

	case "Email.users":
		if e.complexity.Email.Users == nil {
			break
		}

		return e.complexity.Email.Users(childComplexity), true

	case "EmailParticipant.emailParticipant":
		if e.complexity.EmailParticipant.EmailParticipant == nil {
			break
		}

		return e.complexity.EmailParticipant.EmailParticipant(childComplexity), true

	case "EmailParticipant.type":
		if e.complexity.EmailParticipant.Type == nil {
			break
		}

		return e.complexity.EmailParticipant.Type(childComplexity), true

	case "EmailValidationDetails.acceptsMail":
		if e.complexity.EmailValidationDetails.AcceptsMail == nil {
			break
		}

		return e.complexity.EmailValidationDetails.AcceptsMail(childComplexity), true

	case "EmailValidationDetails.canConnectSmtp":
		if e.complexity.EmailValidationDetails.CanConnectSMTP == nil {
			break
		}

		return e.complexity.EmailValidationDetails.CanConnectSMTP(childComplexity), true

	case "EmailValidationDetails.error":
		if e.complexity.EmailValidationDetails.Error == nil {
			break
		}

		return e.complexity.EmailValidationDetails.Error(childComplexity), true

	case "EmailValidationDetails.hasFullInbox":
		if e.complexity.EmailValidationDetails.HasFullInbox == nil {
			break
		}

		return e.complexity.EmailValidationDetails.HasFullInbox(childComplexity), true

	case "EmailValidationDetails.isCatchAll":
		if e.complexity.EmailValidationDetails.IsCatchAll == nil {
			break
		}

		return e.complexity.EmailValidationDetails.IsCatchAll(childComplexity), true

	case "EmailValidationDetails.isDeliverable":
		if e.complexity.EmailValidationDetails.IsDeliverable == nil {
			break
		}

		return e.complexity.EmailValidationDetails.IsDeliverable(childComplexity), true

	case "EmailValidationDetails.isDisabled":
		if e.complexity.EmailValidationDetails.IsDisabled == nil {
			break
		}

		return e.complexity.EmailValidationDetails.IsDisabled(childComplexity), true

	case "EmailValidationDetails.isReachable":
		if e.complexity.EmailValidationDetails.IsReachable == nil {
			break
		}

		return e.complexity.EmailValidationDetails.IsReachable(childComplexity), true

	case "EmailValidationDetails.isValidSyntax":
		if e.complexity.EmailValidationDetails.IsValidSyntax == nil {
			break
		}

		return e.complexity.EmailValidationDetails.IsValidSyntax(childComplexity), true

	case "EmailValidationDetails.validated":
		if e.complexity.EmailValidationDetails.Validated == nil {
			break
		}

		return e.complexity.EmailValidationDetails.Validated(childComplexity), true

	case "EntityTemplate.createdAt":
		if e.complexity.EntityTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.EntityTemplate.CreatedAt(childComplexity), true

	case "EntityTemplate.customFieldTemplates":
		if e.complexity.EntityTemplate.CustomFieldTemplates == nil {
			break
		}

		return e.complexity.EntityTemplate.CustomFieldTemplates(childComplexity), true

	case "EntityTemplate.extends":
		if e.complexity.EntityTemplate.Extends == nil {
			break
		}

		return e.complexity.EntityTemplate.Extends(childComplexity), true

	case "EntityTemplate.fieldSetTemplates":
		if e.complexity.EntityTemplate.FieldSetTemplates == nil {
			break
		}

		return e.complexity.EntityTemplate.FieldSetTemplates(childComplexity), true

	case "EntityTemplate.id":
		if e.complexity.EntityTemplate.ID == nil {
			break
		}

		return e.complexity.EntityTemplate.ID(childComplexity), true

	case "EntityTemplate.name":
		if e.complexity.EntityTemplate.Name == nil {
			break
		}

		return e.complexity.EntityTemplate.Name(childComplexity), true

	case "EntityTemplate.updatedAt":
		if e.complexity.EntityTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.EntityTemplate.UpdatedAt(childComplexity), true

	case "EntityTemplate.version":
		if e.complexity.EntityTemplate.Version == nil {
			break
		}

		return e.complexity.EntityTemplate.Version(childComplexity), true

	case "ExternalSystem.externalId":
		if e.complexity.ExternalSystem.ExternalID == nil {
			break
		}

		return e.complexity.ExternalSystem.ExternalID(childComplexity), true

	case "ExternalSystem.externalSource":
		if e.complexity.ExternalSystem.ExternalSource == nil {
			break
		}

		return e.complexity.ExternalSystem.ExternalSource(childComplexity), true

	case "ExternalSystem.externalUrl":
		if e.complexity.ExternalSystem.ExternalURL == nil {
			break
		}

		return e.complexity.ExternalSystem.ExternalURL(childComplexity), true

	case "ExternalSystem.syncDate":
		if e.complexity.ExternalSystem.SyncDate == nil {
			break
		}

		return e.complexity.ExternalSystem.SyncDate(childComplexity), true

	case "ExternalSystem.type":
		if e.complexity.ExternalSystem.Type == nil {
			break
		}

		return e.complexity.ExternalSystem.Type(childComplexity), true

	case "ExternalSystemInstance.stripeDetails":
		if e.complexity.ExternalSystemInstance.StripeDetails == nil {
			break
		}

		return e.complexity.ExternalSystemInstance.StripeDetails(childComplexity), true

	case "ExternalSystemInstance.type":
		if e.complexity.ExternalSystemInstance.Type == nil {
			break
		}

		return e.complexity.ExternalSystemInstance.Type(childComplexity), true

	case "ExternalSystemStripeDetails.paymentMethodTypes":
		if e.complexity.ExternalSystemStripeDetails.PaymentMethodTypes == nil {
			break
		}

		return e.complexity.ExternalSystemStripeDetails.PaymentMethodTypes(childComplexity), true

	case "FieldSet.createdAt":
		if e.complexity.FieldSet.CreatedAt == nil {
			break
		}

		return e.complexity.FieldSet.CreatedAt(childComplexity), true

	case "FieldSet.customFields":
		if e.complexity.FieldSet.CustomFields == nil {
			break
		}

		return e.complexity.FieldSet.CustomFields(childComplexity), true

	case "FieldSet.id":
		if e.complexity.FieldSet.ID == nil {
			break
		}

		return e.complexity.FieldSet.ID(childComplexity), true

	case "FieldSet.name":
		if e.complexity.FieldSet.Name == nil {
			break
		}

		return e.complexity.FieldSet.Name(childComplexity), true

	case "FieldSet.source":
		if e.complexity.FieldSet.Source == nil {
			break
		}

		return e.complexity.FieldSet.Source(childComplexity), true

	case "FieldSet.template":
		if e.complexity.FieldSet.Template == nil {
			break
		}

		return e.complexity.FieldSet.Template(childComplexity), true

	case "FieldSet.updatedAt":
		if e.complexity.FieldSet.UpdatedAt == nil {
			break
		}

		return e.complexity.FieldSet.UpdatedAt(childComplexity), true

	case "FieldSetTemplate.createdAt":
		if e.complexity.FieldSetTemplate.CreatedAt == nil {
			break
		}

		return e.complexity.FieldSetTemplate.CreatedAt(childComplexity), true

	case "FieldSetTemplate.customFieldTemplates":
		if e.complexity.FieldSetTemplate.CustomFieldTemplates == nil {
			break
		}

		return e.complexity.FieldSetTemplate.CustomFieldTemplates(childComplexity), true

	case "FieldSetTemplate.id":
		if e.complexity.FieldSetTemplate.ID == nil {
			break
		}

		return e.complexity.FieldSetTemplate.ID(childComplexity), true

	case "FieldSetTemplate.name":
		if e.complexity.FieldSetTemplate.Name == nil {
			break
		}

		return e.complexity.FieldSetTemplate.Name(childComplexity), true

	case "FieldSetTemplate.order":
		if e.complexity.FieldSetTemplate.Order == nil {
			break
		}

		return e.complexity.FieldSetTemplate.Order(childComplexity), true

	case "FieldSetTemplate.updatedAt":
		if e.complexity.FieldSetTemplate.UpdatedAt == nil {
			break
		}

		return e.complexity.FieldSetTemplate.UpdatedAt(childComplexity), true

	case "GCliAttributeKeyValuePair.display":
		if e.complexity.GCliAttributeKeyValuePair.Display == nil {
			break
		}

		return e.complexity.GCliAttributeKeyValuePair.Display(childComplexity), true

	case "GCliAttributeKeyValuePair.key":
		if e.complexity.GCliAttributeKeyValuePair.Key == nil {
			break
		}

		return e.complexity.GCliAttributeKeyValuePair.Key(childComplexity), true

	case "GCliAttributeKeyValuePair.value":
		if e.complexity.GCliAttributeKeyValuePair.Value == nil {
			break
		}

		return e.complexity.GCliAttributeKeyValuePair.Value(childComplexity), true

	case "GCliItem.data":
		if e.complexity.GCliItem.Data == nil {
			break
		}

		return e.complexity.GCliItem.Data(childComplexity), true

	case "GCliItem.display":
		if e.complexity.GCliItem.Display == nil {
			break
		}

		return e.complexity.GCliItem.Display(childComplexity), true

	case "GCliItem.id":
		if e.complexity.GCliItem.ID == nil {
			break
		}

		return e.complexity.GCliItem.ID(childComplexity), true

	case "GCliItem.type":
		if e.complexity.GCliItem.Type == nil {
			break
		}

		return e.complexity.GCliItem.Type(childComplexity), true

	case "GlobalCache.cdnLogoUrl":
		if e.complexity.GlobalCache.CdnLogoURL == nil {
			break
		}

		return e.complexity.GlobalCache.CdnLogoURL(childComplexity), true

	case "GlobalCache.contractsExist":
		if e.complexity.GlobalCache.ContractsExist == nil {
			break
		}

		return e.complexity.GlobalCache.ContractsExist(childComplexity), true

	case "GlobalCache.gCliCache":
		if e.complexity.GlobalCache.GCliCache == nil {
			break
		}

		return e.complexity.GlobalCache.GCliCache(childComplexity), true

	case "GlobalCache.isGoogleActive":
		if e.complexity.GlobalCache.IsGoogleActive == nil {
			break
		}

		return e.complexity.GlobalCache.IsGoogleActive(childComplexity), true

	case "GlobalCache.isGoogleTokenExpired":
		if e.complexity.GlobalCache.IsGoogleTokenExpired == nil {
			break
		}

		return e.complexity.GlobalCache.IsGoogleTokenExpired(childComplexity), true

	case "GlobalCache.isOwner":
		if e.complexity.GlobalCache.IsOwner == nil {
			break
		}

		return e.complexity.GlobalCache.IsOwner(childComplexity), true

	case "GlobalCache.maxARRForecastValue":
		if e.complexity.GlobalCache.MaxARRForecastValue == nil {
			break
		}

		return e.complexity.GlobalCache.MaxARRForecastValue(childComplexity), true

	case "GlobalCache.minARRForecastValue":
		if e.complexity.GlobalCache.MinARRForecastValue == nil {
			break
		}

		return e.complexity.GlobalCache.MinARRForecastValue(childComplexity), true

	case "GlobalCache.user":
		if e.complexity.GlobalCache.User == nil {
			break
		}

		return e.complexity.GlobalCache.User(childComplexity), true

	case "InteractionEvent.actionItems":
		if e.complexity.InteractionEvent.ActionItems == nil {
			break
		}

		return e.complexity.InteractionEvent.ActionItems(childComplexity), true

	case "InteractionEvent.appSource":
		if e.complexity.InteractionEvent.AppSource == nil {
			break
		}

		return e.complexity.InteractionEvent.AppSource(childComplexity), true

	case "InteractionEvent.channel":
		if e.complexity.InteractionEvent.Channel == nil {
			break
		}

		return e.complexity.InteractionEvent.Channel(childComplexity), true

	case "InteractionEvent.channelData":
		if e.complexity.InteractionEvent.ChannelData == nil {
			break
		}

		return e.complexity.InteractionEvent.ChannelData(childComplexity), true

	case "InteractionEvent.content":
		if e.complexity.InteractionEvent.Content == nil {
			break
		}

		return e.complexity.InteractionEvent.Content(childComplexity), true

	case "InteractionEvent.contentType":
		if e.complexity.InteractionEvent.ContentType == nil {
			break
		}

		return e.complexity.InteractionEvent.ContentType(childComplexity), true

	case "InteractionEvent.createdAt":
		if e.complexity.InteractionEvent.CreatedAt == nil {
			break
		}

		return e.complexity.InteractionEvent.CreatedAt(childComplexity), true

	case "InteractionEvent.eventIdentifier":
		if e.complexity.InteractionEvent.EventIdentifier == nil {
			break
		}

		return e.complexity.InteractionEvent.EventIdentifier(childComplexity), true

	case "InteractionEvent.eventType":
		if e.complexity.InteractionEvent.EventType == nil {
			break
		}

		return e.complexity.InteractionEvent.EventType(childComplexity), true

	case "InteractionEvent.externalLinks":
		if e.complexity.InteractionEvent.ExternalLinks == nil {
			break
		}

		return e.complexity.InteractionEvent.ExternalLinks(childComplexity), true

	case "InteractionEvent.id":
		if e.complexity.InteractionEvent.ID == nil {
			break
		}

		return e.complexity.InteractionEvent.ID(childComplexity), true

	case "InteractionEvent.includes":
		if e.complexity.InteractionEvent.Includes == nil {
			break
		}

		return e.complexity.InteractionEvent.Includes(childComplexity), true

	case "InteractionEvent.interactionSession":
		if e.complexity.InteractionEvent.InteractionSession == nil {
			break
		}

		return e.complexity.InteractionEvent.InteractionSession(childComplexity), true

	case "InteractionEvent.issue":
		if e.complexity.InteractionEvent.Issue == nil {
			break
		}

		return e.complexity.InteractionEvent.Issue(childComplexity), true

	case "InteractionEvent.meeting":
		if e.complexity.InteractionEvent.Meeting == nil {
			break
		}

		return e.complexity.InteractionEvent.Meeting(childComplexity), true

	case "InteractionEvent.repliesTo":
		if e.complexity.InteractionEvent.RepliesTo == nil {
			break
		}

		return e.complexity.InteractionEvent.RepliesTo(childComplexity), true

	case "InteractionEvent.sentBy":
		if e.complexity.InteractionEvent.SentBy == nil {
			break
		}

		return e.complexity.InteractionEvent.SentBy(childComplexity), true

	case "InteractionEvent.sentTo":
		if e.complexity.InteractionEvent.SentTo == nil {
			break
		}

		return e.complexity.InteractionEvent.SentTo(childComplexity), true

	case "InteractionEvent.source":
		if e.complexity.InteractionEvent.Source == nil {
			break
		}

		return e.complexity.InteractionEvent.Source(childComplexity), true

	case "InteractionEvent.sourceOfTruth":
		if e.complexity.InteractionEvent.SourceOfTruth == nil {
			break
		}

		return e.complexity.InteractionEvent.SourceOfTruth(childComplexity), true

	case "InteractionEvent.summary":
		if e.complexity.InteractionEvent.Summary == nil {
			break
		}

		return e.complexity.InteractionEvent.Summary(childComplexity), true

	case "InteractionSession.appSource":
		if e.complexity.InteractionSession.AppSource == nil {
			break
		}

		return e.complexity.InteractionSession.AppSource(childComplexity), true

	case "InteractionSession.attendedBy":
		if e.complexity.InteractionSession.AttendedBy == nil {
			break
		}

		return e.complexity.InteractionSession.AttendedBy(childComplexity), true

	case "InteractionSession.channel":
		if e.complexity.InteractionSession.Channel == nil {
			break
		}

		return e.complexity.InteractionSession.Channel(childComplexity), true

	case "InteractionSession.channelData":
		if e.complexity.InteractionSession.ChannelData == nil {
			break
		}

		return e.complexity.InteractionSession.ChannelData(childComplexity), true

	case "InteractionSession.createdAt":
		if e.complexity.InteractionSession.CreatedAt == nil {
			break
		}

		return e.complexity.InteractionSession.CreatedAt(childComplexity), true

	case "InteractionSession.describedBy":
		if e.complexity.InteractionSession.DescribedBy == nil {
			break
		}

		return e.complexity.InteractionSession.DescribedBy(childComplexity), true

	case "InteractionSession.endedAt":
		if e.complexity.InteractionSession.EndedAt == nil {
			break
		}

		return e.complexity.InteractionSession.EndedAt(childComplexity), true

	case "InteractionSession.events":
		if e.complexity.InteractionSession.Events == nil {
			break
		}

		return e.complexity.InteractionSession.Events(childComplexity), true

	case "InteractionSession.id":
		if e.complexity.InteractionSession.ID == nil {
			break
		}

		return e.complexity.InteractionSession.ID(childComplexity), true

	case "InteractionSession.includes":
		if e.complexity.InteractionSession.Includes == nil {
			break
		}

		return e.complexity.InteractionSession.Includes(childComplexity), true

	case "InteractionSession.name":
		if e.complexity.InteractionSession.Name == nil {
			break
		}

		return e.complexity.InteractionSession.Name(childComplexity), true

	case "InteractionSession.sessionIdentifier":
		if e.complexity.InteractionSession.SessionIdentifier == nil {
			break
		}

		return e.complexity.InteractionSession.SessionIdentifier(childComplexity), true

	case "InteractionSession.source":
		if e.complexity.InteractionSession.Source == nil {
			break
		}

		return e.complexity.InteractionSession.Source(childComplexity), true

	case "InteractionSession.sourceOfTruth":
		if e.complexity.InteractionSession.SourceOfTruth == nil {
			break
		}

		return e.complexity.InteractionSession.SourceOfTruth(childComplexity), true

	case "InteractionSession.startedAt":
		if e.complexity.InteractionSession.StartedAt == nil {
			break
		}

		return e.complexity.InteractionSession.StartedAt(childComplexity), true

	case "InteractionSession.status":
		if e.complexity.InteractionSession.Status == nil {
			break
		}

		return e.complexity.InteractionSession.Status(childComplexity), true

	case "InteractionSession.type":
		if e.complexity.InteractionSession.Type == nil {
			break
		}

		return e.complexity.InteractionSession.Type(childComplexity), true

	case "InteractionSession.updatedAt":
		if e.complexity.InteractionSession.UpdatedAt == nil {
			break
		}

		return e.complexity.InteractionSession.UpdatedAt(childComplexity), true

	case "Invoice.amountDue":
		if e.complexity.Invoice.AmountDue == nil {
			break
		}

		return e.complexity.Invoice.AmountDue(childComplexity), true

	case "Invoice.amountPaid":
		if e.complexity.Invoice.AmountPaid == nil {
			break
		}

		return e.complexity.Invoice.AmountPaid(childComplexity), true

	case "Invoice.amountRemaining":
		if e.complexity.Invoice.AmountRemaining == nil {
			break
		}

		return e.complexity.Invoice.AmountRemaining(childComplexity), true

	case "Invoice.contract":
		if e.complexity.Invoice.Contract == nil {
			break
		}

		return e.complexity.Invoice.Contract(childComplexity), true

	case "Invoice.currency":
		if e.complexity.Invoice.Currency == nil {
			break
		}

		return e.complexity.Invoice.Currency(childComplexity), true

	case "Invoice.customer":
		if e.complexity.Invoice.Customer == nil {
			break
		}

		return e.complexity.Invoice.Customer(childComplexity), true

	case "Invoice.domesticPaymentsBankInfo":
		if e.complexity.Invoice.DomesticPaymentsBankInfo == nil {
			break
		}

		return e.complexity.Invoice.DomesticPaymentsBankInfo(childComplexity), true

	case "Invoice.dryRun":
		if e.complexity.Invoice.DryRun == nil {
			break
		}

		return e.complexity.Invoice.DryRun(childComplexity), true

	case "Invoice.due":
		if e.complexity.Invoice.Due == nil {
			break
		}

		return e.complexity.Invoice.Due(childComplexity), true

	case "Invoice.internationalPaymentsBankInfo":
		if e.complexity.Invoice.InternationalPaymentsBankInfo == nil {
			break
		}

		return e.complexity.Invoice.InternationalPaymentsBankInfo(childComplexity), true

	case "Invoice.invoiceLineItems":
		if e.complexity.Invoice.InvoiceLineItems == nil {
			break
		}

		return e.complexity.Invoice.InvoiceLineItems(childComplexity), true

	case "Invoice.invoiceNumber":
		if e.complexity.Invoice.InvoiceNumber == nil {
			break
		}

		return e.complexity.Invoice.InvoiceNumber(childComplexity), true

	case "Invoice.invoicePeriodEnd":
		if e.complexity.Invoice.InvoicePeriodEnd == nil {
			break
		}

		return e.complexity.Invoice.InvoicePeriodEnd(childComplexity), true

	case "Invoice.invoicePeriodStart":
		if e.complexity.Invoice.InvoicePeriodStart == nil {
			break
		}

		return e.complexity.Invoice.InvoicePeriodStart(childComplexity), true

	case "Invoice.invoiceUrl":
		if e.complexity.Invoice.InvoiceURL == nil {
			break
		}

		return e.complexity.Invoice.InvoiceURL(childComplexity), true

	case "Invoice.metadata":
		if e.complexity.Invoice.Metadata == nil {
			break
		}

		return e.complexity.Invoice.Metadata(childComplexity), true

	case "Invoice.note":
		if e.complexity.Invoice.Note == nil {
			break
		}

		return e.complexity.Invoice.Note(childComplexity), true

	case "Invoice.offCycle":
		if e.complexity.Invoice.OffCycle == nil {
			break
		}

		return e.complexity.Invoice.OffCycle(childComplexity), true

	case "Invoice.organization":
		if e.complexity.Invoice.Organization == nil {
			break
		}

		return e.complexity.Invoice.Organization(childComplexity), true

	case "Invoice.paid":
		if e.complexity.Invoice.Paid == nil {
			break
		}

		return e.complexity.Invoice.Paid(childComplexity), true

	case "Invoice.postpaid":
		if e.complexity.Invoice.Postpaid == nil {
			break
		}

		return e.complexity.Invoice.Postpaid(childComplexity), true

	case "Invoice.provider":
		if e.complexity.Invoice.Provider == nil {
			break
		}

		return e.complexity.Invoice.Provider(childComplexity), true

	case "Invoice.repositoryFileId":
		if e.complexity.Invoice.RepositoryFileID == nil {
			break
		}

		return e.complexity.Invoice.RepositoryFileID(childComplexity), true

	case "Invoice.status":
		if e.complexity.Invoice.Status == nil {
			break
		}

		return e.complexity.Invoice.Status(childComplexity), true

	case "Invoice.subtotal":
		if e.complexity.Invoice.Subtotal == nil {
			break
		}

		return e.complexity.Invoice.Subtotal(childComplexity), true

	case "Invoice.taxDue":
		if e.complexity.Invoice.TaxDue == nil {
			break
		}

		return e.complexity.Invoice.TaxDue(childComplexity), true

	case "InvoiceCustomer.addressCountry":
		if e.complexity.InvoiceCustomer.AddressCountry == nil {
			break
		}

		return e.complexity.InvoiceCustomer.AddressCountry(childComplexity), true

	case "InvoiceCustomer.addressLine1":
		if e.complexity.InvoiceCustomer.AddressLine1 == nil {
			break
		}

		return e.complexity.InvoiceCustomer.AddressLine1(childComplexity), true

	case "InvoiceCustomer.addressLine2":
		if e.complexity.InvoiceCustomer.AddressLine2 == nil {
			break
		}

		return e.complexity.InvoiceCustomer.AddressLine2(childComplexity), true

	case "InvoiceCustomer.addressLocality":
		if e.complexity.InvoiceCustomer.AddressLocality == nil {
			break
		}

		return e.complexity.InvoiceCustomer.AddressLocality(childComplexity), true

	case "InvoiceCustomer.addressZip":
		if e.complexity.InvoiceCustomer.AddressZip == nil {
			break
		}

		return e.complexity.InvoiceCustomer.AddressZip(childComplexity), true

	case "InvoiceCustomer.email":
		if e.complexity.InvoiceCustomer.Email == nil {
			break
		}

		return e.complexity.InvoiceCustomer.Email(childComplexity), true

	case "InvoiceCustomer.name":
		if e.complexity.InvoiceCustomer.Name == nil {
			break
		}

		return e.complexity.InvoiceCustomer.Name(childComplexity), true

	case "InvoiceLine.description":
		if e.complexity.InvoiceLine.Description == nil {
			break
		}

		return e.complexity.InvoiceLine.Description(childComplexity), true

	case "InvoiceLine.metadata":
		if e.complexity.InvoiceLine.Metadata == nil {
			break
		}

		return e.complexity.InvoiceLine.Metadata(childComplexity), true

	case "InvoiceLine.price":
		if e.complexity.InvoiceLine.Price == nil {
			break
		}

		return e.complexity.InvoiceLine.Price(childComplexity), true

	case "InvoiceLine.quantity":
		if e.complexity.InvoiceLine.Quantity == nil {
			break
		}

		return e.complexity.InvoiceLine.Quantity(childComplexity), true

	case "InvoiceLine.subtotal":
		if e.complexity.InvoiceLine.Subtotal == nil {
			break
		}

		return e.complexity.InvoiceLine.Subtotal(childComplexity), true

	case "InvoiceLine.taxDue":
		if e.complexity.InvoiceLine.TaxDue == nil {
			break
		}

		return e.complexity.InvoiceLine.TaxDue(childComplexity), true

	case "InvoiceLine.total":
		if e.complexity.InvoiceLine.Total == nil {
			break
		}

		return e.complexity.InvoiceLine.Total(childComplexity), true

	case "InvoiceProvider.addressCountry":
		if e.complexity.InvoiceProvider.AddressCountry == nil {
			break
		}

		return e.complexity.InvoiceProvider.AddressCountry(childComplexity), true

	case "InvoiceProvider.addressLine1":
		if e.complexity.InvoiceProvider.AddressLine1 == nil {
			break
		}

		return e.complexity.InvoiceProvider.AddressLine1(childComplexity), true

	case "InvoiceProvider.addressLine2":
		if e.complexity.InvoiceProvider.AddressLine2 == nil {
			break
		}

		return e.complexity.InvoiceProvider.AddressLine2(childComplexity), true

	case "InvoiceProvider.addressLocality":
		if e.complexity.InvoiceProvider.AddressLocality == nil {
			break
		}

		return e.complexity.InvoiceProvider.AddressLocality(childComplexity), true

	case "InvoiceProvider.addressZip":
		if e.complexity.InvoiceProvider.AddressZip == nil {
			break
		}

		return e.complexity.InvoiceProvider.AddressZip(childComplexity), true

	case "InvoiceProvider.logoRepositoryFileId":
		if e.complexity.InvoiceProvider.LogoRepositoryFileID == nil {
			break
		}

		return e.complexity.InvoiceProvider.LogoRepositoryFileID(childComplexity), true

	case "InvoiceProvider.logoUrl":
		if e.complexity.InvoiceProvider.LogoURL == nil {
			break
		}

		return e.complexity.InvoiceProvider.LogoURL(childComplexity), true

	case "InvoiceProvider.name":
		if e.complexity.InvoiceProvider.Name == nil {
			break
		}

		return e.complexity.InvoiceProvider.Name(childComplexity), true

	case "InvoicesPage.content":
		if e.complexity.InvoicesPage.Content == nil {
			break
		}

		return e.complexity.InvoicesPage.Content(childComplexity), true

	case "InvoicesPage.totalElements":
		if e.complexity.InvoicesPage.TotalElements == nil {
			break
		}

		return e.complexity.InvoicesPage.TotalElements(childComplexity), true

	case "InvoicesPage.totalPages":
		if e.complexity.InvoicesPage.TotalPages == nil {
			break
		}

		return e.complexity.InvoicesPage.TotalPages(childComplexity), true

	case "InvoicingCycle.appSource":
		if e.complexity.InvoicingCycle.AppSource == nil {
			break
		}

		return e.complexity.InvoicingCycle.AppSource(childComplexity), true

	case "InvoicingCycle.createdAt":
		if e.complexity.InvoicingCycle.CreatedAt == nil {
			break
		}

		return e.complexity.InvoicingCycle.CreatedAt(childComplexity), true

	case "InvoicingCycle.id":
		if e.complexity.InvoicingCycle.ID == nil {
			break
		}

		return e.complexity.InvoicingCycle.ID(childComplexity), true

	case "InvoicingCycle.source":
		if e.complexity.InvoicingCycle.Source == nil {
			break
		}

		return e.complexity.InvoicingCycle.Source(childComplexity), true

	case "InvoicingCycle.sourceOfTruth":
		if e.complexity.InvoicingCycle.SourceOfTruth == nil {
			break
		}

		return e.complexity.InvoicingCycle.SourceOfTruth(childComplexity), true

	case "InvoicingCycle.type":
		if e.complexity.InvoicingCycle.Type == nil {
			break
		}

		return e.complexity.InvoicingCycle.Type(childComplexity), true

	case "InvoicingCycle.updatedAt":
		if e.complexity.InvoicingCycle.UpdatedAt == nil {
			break
		}

		return e.complexity.InvoicingCycle.UpdatedAt(childComplexity), true

	case "Issue.appSource":
		if e.complexity.Issue.AppSource == nil {
			break
		}

		return e.complexity.Issue.AppSource(childComplexity), true

	case "Issue.assignedTo":
		if e.complexity.Issue.AssignedTo == nil {
			break
		}

		return e.complexity.Issue.AssignedTo(childComplexity), true

	case "Issue.comments":
		if e.complexity.Issue.Comments == nil {
			break
		}

		return e.complexity.Issue.Comments(childComplexity), true

	case "Issue.createdAt":
		if e.complexity.Issue.CreatedAt == nil {
			break
		}

		return e.complexity.Issue.CreatedAt(childComplexity), true

	case "Issue.description":
		if e.complexity.Issue.Description == nil {
			break
		}

		return e.complexity.Issue.Description(childComplexity), true

	case "Issue.externalLinks":
		if e.complexity.Issue.ExternalLinks == nil {
			break
		}

		return e.complexity.Issue.ExternalLinks(childComplexity), true

	case "Issue.followedBy":
		if e.complexity.Issue.FollowedBy == nil {
			break
		}

		return e.complexity.Issue.FollowedBy(childComplexity), true

	case "Issue.id":
		if e.complexity.Issue.ID == nil {
			break
		}

		return e.complexity.Issue.ID(childComplexity), true

	case "Issue.interactionEvents":
		if e.complexity.Issue.InteractionEvents == nil {
			break
		}

		return e.complexity.Issue.InteractionEvents(childComplexity), true

	case "Issue.priority":
		if e.complexity.Issue.Priority == nil {
			break
		}

		return e.complexity.Issue.Priority(childComplexity), true

	case "Issue.reportedBy":
		if e.complexity.Issue.ReportedBy == nil {
			break
		}

		return e.complexity.Issue.ReportedBy(childComplexity), true

	case "Issue.source":
		if e.complexity.Issue.Source == nil {
			break
		}

		return e.complexity.Issue.Source(childComplexity), true

	case "Issue.sourceOfTruth":
		if e.complexity.Issue.SourceOfTruth == nil {
			break
		}

		return e.complexity.Issue.SourceOfTruth(childComplexity), true

	case "Issue.status":
		if e.complexity.Issue.Status == nil {
			break
		}

		return e.complexity.Issue.Status(childComplexity), true

	case "Issue.subject":
		if e.complexity.Issue.Subject == nil {
			break
		}

		return e.complexity.Issue.Subject(childComplexity), true

	case "Issue.submittedBy":
		if e.complexity.Issue.SubmittedBy == nil {
			break
		}

		return e.complexity.Issue.SubmittedBy(childComplexity), true

	case "Issue.tags":
		if e.complexity.Issue.Tags == nil {
			break
		}

		return e.complexity.Issue.Tags(childComplexity), true

	case "Issue.updatedAt":
		if e.complexity.Issue.UpdatedAt == nil {
			break
		}

		return e.complexity.Issue.UpdatedAt(childComplexity), true

	case "IssueSummaryByStatus.count":
		if e.complexity.IssueSummaryByStatus.Count == nil {
			break
		}

		return e.complexity.IssueSummaryByStatus.Count(childComplexity), true

	case "IssueSummaryByStatus.status":
		if e.complexity.IssueSummaryByStatus.Status == nil {
			break
		}

		return e.complexity.IssueSummaryByStatus.Status(childComplexity), true

	case "JobRole.appSource":
		if e.complexity.JobRole.AppSource == nil {
			break
		}

		return e.complexity.JobRole.AppSource(childComplexity), true

	case "JobRole.company":
		if e.complexity.JobRole.Company == nil {
			break
		}

		return e.complexity.JobRole.Company(childComplexity), true

	case "JobRole.contact":
		if e.complexity.JobRole.Contact == nil {
			break
		}

		return e.complexity.JobRole.Contact(childComplexity), true

	case "JobRole.createdAt":
		if e.complexity.JobRole.CreatedAt == nil {
			break
		}

		return e.complexity.JobRole.CreatedAt(childComplexity), true

	case "JobRole.description":
		if e.complexity.JobRole.Description == nil {
			break
		}

		return e.complexity.JobRole.Description(childComplexity), true

	case "JobRole.endedAt":
		if e.complexity.JobRole.EndedAt == nil {
			break
		}

		return e.complexity.JobRole.EndedAt(childComplexity), true

	case "JobRole.id":
		if e.complexity.JobRole.ID == nil {
			break
		}

		return e.complexity.JobRole.ID(childComplexity), true

	case "JobRole.jobTitle":
		if e.complexity.JobRole.JobTitle == nil {
			break
		}

		return e.complexity.JobRole.JobTitle(childComplexity), true

	case "JobRole.organization":
		if e.complexity.JobRole.Organization == nil {
			break
		}

		return e.complexity.JobRole.Organization(childComplexity), true

	case "JobRole.primary":
		if e.complexity.JobRole.Primary == nil {
			break
		}

		return e.complexity.JobRole.Primary(childComplexity), true

	case "JobRole.source":
		if e.complexity.JobRole.Source == nil {
			break
		}

		return e.complexity.JobRole.Source(childComplexity), true

	case "JobRole.sourceOfTruth":
		if e.complexity.JobRole.SourceOfTruth == nil {
			break
		}

		return e.complexity.JobRole.SourceOfTruth(childComplexity), true

	case "JobRole.startedAt":
		if e.complexity.JobRole.StartedAt == nil {
			break
		}

		return e.complexity.JobRole.StartedAt(childComplexity), true

	case "JobRole.updatedAt":
		if e.complexity.JobRole.UpdatedAt == nil {
			break
		}

		return e.complexity.JobRole.UpdatedAt(childComplexity), true

	case "JobRoleParticipant.jobRoleParticipant":
		if e.complexity.JobRoleParticipant.JobRoleParticipant == nil {
			break
		}

		return e.complexity.JobRoleParticipant.JobRoleParticipant(childComplexity), true

	case "JobRoleParticipant.type":
		if e.complexity.JobRoleParticipant.Type == nil {
			break
		}

		return e.complexity.JobRoleParticipant.Type(childComplexity), true

	case "LastTouchpoint.lastTouchPointAt":
		if e.complexity.LastTouchpoint.LastTouchPointAt == nil {
			break
		}

		return e.complexity.LastTouchpoint.LastTouchPointAt(childComplexity), true

	case "LastTouchpoint.lastTouchPointTimelineEvent":
		if e.complexity.LastTouchpoint.LastTouchPointTimelineEvent == nil {
			break
		}

		return e.complexity.LastTouchpoint.LastTouchPointTimelineEvent(childComplexity), true

	case "LastTouchpoint.lastTouchPointTimelineEventId":
		if e.complexity.LastTouchpoint.LastTouchPointTimelineEventID == nil {
			break
		}

		return e.complexity.LastTouchpoint.LastTouchPointTimelineEventID(childComplexity), true

	case "LastTouchpoint.lastTouchPointType":
		if e.complexity.LastTouchpoint.LastTouchPointType == nil {
			break
		}

		return e.complexity.LastTouchpoint.LastTouchPointType(childComplexity), true

	case "LinkedOrganization.organization":
		if e.complexity.LinkedOrganization.Organization == nil {
			break
		}

		return e.complexity.LinkedOrganization.Organization(childComplexity), true

	case "LinkedOrganization.type":
		if e.complexity.LinkedOrganization.Type == nil {
			break
		}

		return e.complexity.LinkedOrganization.Type(childComplexity), true

	case "Location.address":
		if e.complexity.Location.Address == nil {
			break
		}

		return e.complexity.Location.Address(childComplexity), true

	case "Location.address2":
		if e.complexity.Location.Address2 == nil {
			break
		}

		return e.complexity.Location.Address2(childComplexity), true

	case "Location.addressType":
		if e.complexity.Location.AddressType == nil {
			break
		}

		return e.complexity.Location.AddressType(childComplexity), true

	case "Location.appSource":
		if e.complexity.Location.AppSource == nil {
			break
		}

		return e.complexity.Location.AppSource(childComplexity), true

	case "Location.commercial":
		if e.complexity.Location.Commercial == nil {
			break
		}

		return e.complexity.Location.Commercial(childComplexity), true

	case "Location.country":
		if e.complexity.Location.Country == nil {
			break
		}

		return e.complexity.Location.Country(childComplexity), true

	case "Location.createdAt":
		if e.complexity.Location.CreatedAt == nil {
			break
		}

		return e.complexity.Location.CreatedAt(childComplexity), true

	case "Location.district":
		if e.complexity.Location.District == nil {
			break
		}

		return e.complexity.Location.District(childComplexity), true

	case "Location.houseNumber":
		if e.complexity.Location.HouseNumber == nil {
			break
		}

		return e.complexity.Location.HouseNumber(childComplexity), true

	case "Location.id":
		if e.complexity.Location.ID == nil {
			break
		}

		return e.complexity.Location.ID(childComplexity), true

	case "Location.latitude":
		if e.complexity.Location.Latitude == nil {
			break
		}

		return e.complexity.Location.Latitude(childComplexity), true

	case "Location.locality":
		if e.complexity.Location.Locality == nil {
			break
		}

		return e.complexity.Location.Locality(childComplexity), true

	case "Location.longitude":
		if e.complexity.Location.Longitude == nil {
			break
		}

		return e.complexity.Location.Longitude(childComplexity), true

	case "Location.name":
		if e.complexity.Location.Name == nil {
			break
		}

		return e.complexity.Location.Name(childComplexity), true

	case "Location.plusFour":
		if e.complexity.Location.PlusFour == nil {
			break
		}

		return e.complexity.Location.PlusFour(childComplexity), true

	case "Location.postalCode":
		if e.complexity.Location.PostalCode == nil {
			break
		}

		return e.complexity.Location.PostalCode(childComplexity), true

	case "Location.predirection":
		if e.complexity.Location.Predirection == nil {
			break
		}

		return e.complexity.Location.Predirection(childComplexity), true

	case "Location.rawAddress":
		if e.complexity.Location.RawAddress == nil {
			break
		}

		return e.complexity.Location.RawAddress(childComplexity), true

	case "Location.region":
		if e.complexity.Location.Region == nil {
			break
		}

		return e.complexity.Location.Region(childComplexity), true

	case "Location.source":
		if e.complexity.Location.Source == nil {
			break
		}

		return e.complexity.Location.Source(childComplexity), true

	case "Location.sourceOfTruth":
		if e.complexity.Location.SourceOfTruth == nil {
			break
		}

		return e.complexity.Location.SourceOfTruth(childComplexity), true

	case "Location.street":
		if e.complexity.Location.Street == nil {
			break
		}

		return e.complexity.Location.Street(childComplexity), true

	case "Location.timeZone":
		if e.complexity.Location.TimeZone == nil {
			break
		}

		return e.complexity.Location.TimeZone(childComplexity), true

	case "Location.updatedAt":
		if e.complexity.Location.UpdatedAt == nil {
			break
		}

		return e.complexity.Location.UpdatedAt(childComplexity), true

	case "Location.utcOffset":
		if e.complexity.Location.UtcOffset == nil {
			break
		}

		return e.complexity.Location.UtcOffset(childComplexity), true

	case "Location.zip":
		if e.complexity.Location.Zip == nil {
			break
		}

		return e.complexity.Location.Zip(childComplexity), true

	case "LogEntry.appSource":
		if e.complexity.LogEntry.AppSource == nil {
			break
		}

		return e.complexity.LogEntry.AppSource(childComplexity), true

	case "LogEntry.content":
		if e.complexity.LogEntry.Content == nil {
			break
		}

		return e.complexity.LogEntry.Content(childComplexity), true

	case "LogEntry.contentType":
		if e.complexity.LogEntry.ContentType == nil {
			break
		}

		return e.complexity.LogEntry.ContentType(childComplexity), true

	case "LogEntry.createdAt":
		if e.complexity.LogEntry.CreatedAt == nil {
			break
		}

		return e.complexity.LogEntry.CreatedAt(childComplexity), true

	case "LogEntry.createdBy":
		if e.complexity.LogEntry.CreatedBy == nil {
			break
		}

		return e.complexity.LogEntry.CreatedBy(childComplexity), true

	case "LogEntry.externalLinks":
		if e.complexity.LogEntry.ExternalLinks == nil {
			break
		}

		return e.complexity.LogEntry.ExternalLinks(childComplexity), true

	case "LogEntry.id":
		if e.complexity.LogEntry.ID == nil {
			break
		}

		return e.complexity.LogEntry.ID(childComplexity), true

	case "LogEntry.source":
		if e.complexity.LogEntry.Source == nil {
			break
		}

		return e.complexity.LogEntry.Source(childComplexity), true

	case "LogEntry.sourceOfTruth":
		if e.complexity.LogEntry.SourceOfTruth == nil {
			break
		}

		return e.complexity.LogEntry.SourceOfTruth(childComplexity), true

	case "LogEntry.startedAt":
		if e.complexity.LogEntry.StartedAt == nil {
			break
		}

		return e.complexity.LogEntry.StartedAt(childComplexity), true

	case "LogEntry.tags":
		if e.complexity.LogEntry.Tags == nil {
			break
		}

		return e.complexity.LogEntry.Tags(childComplexity), true

	case "LogEntry.updatedAt":
		if e.complexity.LogEntry.UpdatedAt == nil {
			break
		}

		return e.complexity.LogEntry.UpdatedAt(childComplexity), true

	case "MasterPlan.appSource":
		if e.complexity.MasterPlan.AppSource == nil {
			break
		}

		return e.complexity.MasterPlan.AppSource(childComplexity), true

	case "MasterPlan.createdAt":
		if e.complexity.MasterPlan.CreatedAt == nil {
			break
		}

		return e.complexity.MasterPlan.CreatedAt(childComplexity), true

	case "MasterPlan.id":
		if e.complexity.MasterPlan.ID == nil {
			break
		}

		return e.complexity.MasterPlan.ID(childComplexity), true

	case "MasterPlan.milestones":
		if e.complexity.MasterPlan.Milestones == nil {
			break
		}

		return e.complexity.MasterPlan.Milestones(childComplexity), true

	case "MasterPlan.name":
		if e.complexity.MasterPlan.Name == nil {
			break
		}

		return e.complexity.MasterPlan.Name(childComplexity), true

	case "MasterPlan.retired":
		if e.complexity.MasterPlan.Retired == nil {
			break
		}

		return e.complexity.MasterPlan.Retired(childComplexity), true

	case "MasterPlan.retiredMilestones":
		if e.complexity.MasterPlan.RetiredMilestones == nil {
			break
		}

		return e.complexity.MasterPlan.RetiredMilestones(childComplexity), true

	case "MasterPlan.source":
		if e.complexity.MasterPlan.Source == nil {
			break
		}

		return e.complexity.MasterPlan.Source(childComplexity), true

	case "MasterPlan.sourceOfTruth":
		if e.complexity.MasterPlan.SourceOfTruth == nil {
			break
		}

		return e.complexity.MasterPlan.SourceOfTruth(childComplexity), true

	case "MasterPlan.updatedAt":
		if e.complexity.MasterPlan.UpdatedAt == nil {
			break
		}

		return e.complexity.MasterPlan.UpdatedAt(childComplexity), true

	case "MasterPlanMilestone.appSource":
		if e.complexity.MasterPlanMilestone.AppSource == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.AppSource(childComplexity), true

	case "MasterPlanMilestone.createdAt":
		if e.complexity.MasterPlanMilestone.CreatedAt == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.CreatedAt(childComplexity), true

	case "MasterPlanMilestone.durationHours":
		if e.complexity.MasterPlanMilestone.DurationHours == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.DurationHours(childComplexity), true

	case "MasterPlanMilestone.id":
		if e.complexity.MasterPlanMilestone.ID == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.ID(childComplexity), true

	case "MasterPlanMilestone.items":
		if e.complexity.MasterPlanMilestone.Items == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.Items(childComplexity), true

	case "MasterPlanMilestone.name":
		if e.complexity.MasterPlanMilestone.Name == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.Name(childComplexity), true

	case "MasterPlanMilestone.optional":
		if e.complexity.MasterPlanMilestone.Optional == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.Optional(childComplexity), true

	case "MasterPlanMilestone.order":
		if e.complexity.MasterPlanMilestone.Order == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.Order(childComplexity), true

	case "MasterPlanMilestone.retired":
		if e.complexity.MasterPlanMilestone.Retired == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.Retired(childComplexity), true

	case "MasterPlanMilestone.source":
		if e.complexity.MasterPlanMilestone.Source == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.Source(childComplexity), true

	case "MasterPlanMilestone.sourceOfTruth":
		if e.complexity.MasterPlanMilestone.SourceOfTruth == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.SourceOfTruth(childComplexity), true

	case "MasterPlanMilestone.updatedAt":
		if e.complexity.MasterPlanMilestone.UpdatedAt == nil {
			break
		}

		return e.complexity.MasterPlanMilestone.UpdatedAt(childComplexity), true

	case "Meeting.agenda":
		if e.complexity.Meeting.Agenda == nil {
			break
		}

		return e.complexity.Meeting.Agenda(childComplexity), true

	case "Meeting.agendaContentType":
		if e.complexity.Meeting.AgendaContentType == nil {
			break
		}

		return e.complexity.Meeting.AgendaContentType(childComplexity), true

	case "Meeting.appSource":
		if e.complexity.Meeting.AppSource == nil {
			break
		}

		return e.complexity.Meeting.AppSource(childComplexity), true

	case "Meeting.attendedBy":
		if e.complexity.Meeting.AttendedBy == nil {
			break
		}

		return e.complexity.Meeting.AttendedBy(childComplexity), true

	case "Meeting.conferenceUrl":
		if e.complexity.Meeting.ConferenceURL == nil {
			break
		}

		return e.complexity.Meeting.ConferenceURL(childComplexity), true

	case "Meeting.createdAt":
		if e.complexity.Meeting.CreatedAt == nil {
			break
		}

		return e.complexity.Meeting.CreatedAt(childComplexity), true

	case "Meeting.createdBy":
		if e.complexity.Meeting.CreatedBy == nil {
			break
		}

		return e.complexity.Meeting.CreatedBy(childComplexity), true

	case "Meeting.describedBy":
		if e.complexity.Meeting.DescribedBy == nil {
			break
		}

		return e.complexity.Meeting.DescribedBy(childComplexity), true

	case "Meeting.endedAt":
		if e.complexity.Meeting.EndedAt == nil {
			break
		}

		return e.complexity.Meeting.EndedAt(childComplexity), true

	case "Meeting.events":
		if e.complexity.Meeting.Events == nil {
			break
		}

		return e.complexity.Meeting.Events(childComplexity), true

	case "Meeting.externalSystem":
		if e.complexity.Meeting.ExternalSystem == nil {
			break
		}

		return e.complexity.Meeting.ExternalSystem(childComplexity), true

	case "Meeting.id":
		if e.complexity.Meeting.ID == nil {
			break
		}

		return e.complexity.Meeting.ID(childComplexity), true

	case "Meeting.includes":
		if e.complexity.Meeting.Includes == nil {
			break
		}

		return e.complexity.Meeting.Includes(childComplexity), true

	case "Meeting.meetingExternalUrl":
		if e.complexity.Meeting.MeetingExternalURL == nil {
			break
		}

		return e.complexity.Meeting.MeetingExternalURL(childComplexity), true

	case "Meeting.name":
		if e.complexity.Meeting.Name == nil {
			break
		}

		return e.complexity.Meeting.Name(childComplexity), true

	case "Meeting.note":
		if e.complexity.Meeting.Note == nil {
			break
		}

		return e.complexity.Meeting.Note(childComplexity), true

	case "Meeting.recording":
		if e.complexity.Meeting.Recording == nil {
			break
		}

		return e.complexity.Meeting.Recording(childComplexity), true

	case "Meeting.source":
		if e.complexity.Meeting.Source == nil {
			break
		}

		return e.complexity.Meeting.Source(childComplexity), true

	case "Meeting.sourceOfTruth":
		if e.complexity.Meeting.SourceOfTruth == nil {
			break
		}

		return e.complexity.Meeting.SourceOfTruth(childComplexity), true

	case "Meeting.startedAt":
		if e.complexity.Meeting.StartedAt == nil {
			break
		}

		return e.complexity.Meeting.StartedAt(childComplexity), true

	case "Meeting.status":
		if e.complexity.Meeting.Status == nil {
			break
		}

		return e.complexity.Meeting.Status(childComplexity), true

	case "Meeting.updatedAt":
		if e.complexity.Meeting.UpdatedAt == nil {
			break
		}

		return e.complexity.Meeting.UpdatedAt(childComplexity), true

	case "MeetingsPage.content":
		if e.complexity.MeetingsPage.Content == nil {
			break
		}

		return e.complexity.MeetingsPage.Content(childComplexity), true

	case "MeetingsPage.totalElements":
		if e.complexity.MeetingsPage.TotalElements == nil {
			break
		}

		return e.complexity.MeetingsPage.TotalElements(childComplexity), true

	case "MeetingsPage.totalPages":
		if e.complexity.MeetingsPage.TotalPages == nil {
			break
		}

		return e.complexity.MeetingsPage.TotalPages(childComplexity), true

	case "Metadata.appSource":
		if e.complexity.Metadata.AppSource == nil {
			break
		}

		return e.complexity.Metadata.AppSource(childComplexity), true

	case "Metadata.created":
		if e.complexity.Metadata.Created == nil {
			break
		}

		return e.complexity.Metadata.Created(childComplexity), true

	case "Metadata.id":
		if e.complexity.Metadata.ID == nil {
			break
		}

		return e.complexity.Metadata.ID(childComplexity), true

	case "Metadata.lastUpdated":
		if e.complexity.Metadata.LastUpdated == nil {
			break
		}

		return e.complexity.Metadata.LastUpdated(childComplexity), true

	case "Metadata.source":
		if e.complexity.Metadata.Source == nil {
			break
		}

		return e.complexity.Metadata.Source(childComplexity), true

	case "Metadata.sourceOfTruth":
		if e.complexity.Metadata.SourceOfTruth == nil {
			break
		}

		return e.complexity.Metadata.SourceOfTruth(childComplexity), true

	case "Mutation.analysis_Create":
		if e.complexity.Mutation.AnalysisCreate == nil {
			break
		}

		args, err := ec.field_Mutation_analysis_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AnalysisCreate(childComplexity, args["analysis"].(model.AnalysisInput)), true

	case "Mutation.attachment_Create":
		if e.complexity.Mutation.AttachmentCreate == nil {
			break
		}

		args, err := ec.field_Mutation_attachment_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AttachmentCreate(childComplexity, args["input"].(model.AttachmentInput)), true

	case "Mutation.bankAccount_Create":
		if e.complexity.Mutation.BankAccountCreate == nil {
			break
		}

		args, err := ec.field_Mutation_bankAccount_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BankAccountCreate(childComplexity, args["input"].(*model.BankAccountCreateInput)), true

	case "Mutation.bankAccount_Delete":
		if e.complexity.Mutation.BankAccountDelete == nil {
			break
		}

		args, err := ec.field_Mutation_bankAccount_Delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BankAccountDelete(childComplexity, args["id"].(string)), true

	case "Mutation.bankAccount_Update":
		if e.complexity.Mutation.BankAccountUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_bankAccount_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BankAccountUpdate(childComplexity, args["input"].(*model.BankAccountUpdateInput)), true

	case "Mutation.billingProfile_Create":
		if e.complexity.Mutation.BillingProfileCreate == nil {
			break
		}

		args, err := ec.field_Mutation_billingProfile_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BillingProfileCreate(childComplexity, args["input"].(model.BillingProfileInput)), true

	case "Mutation.billingProfile_LinkEmail":
		if e.complexity.Mutation.BillingProfileLinkEmail == nil {
			break
		}

		args, err := ec.field_Mutation_billingProfile_LinkEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BillingProfileLinkEmail(childComplexity, args["input"].(model.BillingProfileLinkEmailInput)), true

	case "Mutation.billingProfile_LinkLocation":
		if e.complexity.Mutation.BillingProfileLinkLocation == nil {
			break
		}

		args, err := ec.field_Mutation_billingProfile_LinkLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BillingProfileLinkLocation(childComplexity, args["input"].(model.BillingProfileLinkLocationInput)), true

	case "Mutation.billingProfile_UnlinkEmail":
		if e.complexity.Mutation.BillingProfileUnlinkEmail == nil {
			break
		}

		args, err := ec.field_Mutation_billingProfile_UnlinkEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BillingProfileUnlinkEmail(childComplexity, args["input"].(model.BillingProfileLinkEmailInput)), true

	case "Mutation.billingProfile_UnlinkLocation":
		if e.complexity.Mutation.BillingProfileUnlinkLocation == nil {
			break
		}

		args, err := ec.field_Mutation_billingProfile_UnlinkLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BillingProfileUnlinkLocation(childComplexity, args["input"].(model.BillingProfileLinkLocationInput)), true

	case "Mutation.billingProfile_Update":
		if e.complexity.Mutation.BillingProfileUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_billingProfile_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BillingProfileUpdate(childComplexity, args["input"].(model.BillingProfileUpdateInput)), true

	case "Mutation.contact_AddNewLocation":
		if e.complexity.Mutation.ContactAddNewLocation == nil {
			break
		}

		args, err := ec.field_Mutation_contact_AddNewLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactAddNewLocation(childComplexity, args["contactId"].(string)), true

	case "Mutation.contact_AddOrganizationById":
		if e.complexity.Mutation.ContactAddOrganizationByID == nil {
			break
		}

		args, err := ec.field_Mutation_contact_AddOrganizationById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactAddOrganizationByID(childComplexity, args["input"].(model.ContactOrganizationInput)), true

	case "Mutation.contact_AddSocial":
		if e.complexity.Mutation.ContactAddSocial == nil {
			break
		}

		args, err := ec.field_Mutation_contact_AddSocial_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactAddSocial(childComplexity, args["contactId"].(string), args["input"].(model.SocialInput)), true

	case "Mutation.contact_AddTagById":
		if e.complexity.Mutation.ContactAddTagByID == nil {
			break
		}

		args, err := ec.field_Mutation_contact_AddTagById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactAddTagByID(childComplexity, args["input"].(model.ContactTagInput)), true

	case "Mutation.contact_Archive":
		if e.complexity.Mutation.ContactArchive == nil {
			break
		}

		args, err := ec.field_Mutation_contact_Archive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactArchive(childComplexity, args["contactId"].(string)), true

	case "Mutation.contact_Create":
		if e.complexity.Mutation.ContactCreate == nil {
			break
		}

		args, err := ec.field_Mutation_contact_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactCreate(childComplexity, args["input"].(model.ContactInput)), true

	case "Mutation.contact_HardDelete":
		if e.complexity.Mutation.ContactHardDelete == nil {
			break
		}

		args, err := ec.field_Mutation_contact_HardDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactHardDelete(childComplexity, args["contactId"].(string)), true

	case "Mutation.contact_Merge":
		if e.complexity.Mutation.ContactMerge == nil {
			break
		}

		args, err := ec.field_Mutation_contact_Merge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactMerge(childComplexity, args["primaryContactId"].(string), args["mergedContactIds"].([]string)), true

	case "Mutation.contact_RemoveLocation":
		if e.complexity.Mutation.ContactRemoveLocation == nil {
			break
		}

		args, err := ec.field_Mutation_contact_RemoveLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRemoveLocation(childComplexity, args["contactId"].(string), args["locationId"].(string)), true

	case "Mutation.contact_RemoveOrganizationById":
		if e.complexity.Mutation.ContactRemoveOrganizationByID == nil {
			break
		}

		args, err := ec.field_Mutation_contact_RemoveOrganizationById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRemoveOrganizationByID(childComplexity, args["input"].(model.ContactOrganizationInput)), true

	case "Mutation.contact_RemoveTagById":
		if e.complexity.Mutation.ContactRemoveTagByID == nil {
			break
		}

		args, err := ec.field_Mutation_contact_RemoveTagById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRemoveTagByID(childComplexity, args["input"].(model.ContactTagInput)), true

	case "Mutation.contact_RestoreFromArchive":
		if e.complexity.Mutation.ContactRestoreFromArchive == nil {
			break
		}

		args, err := ec.field_Mutation_contact_RestoreFromArchive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactRestoreFromArchive(childComplexity, args["contactId"].(string)), true

	case "Mutation.contact_Update":
		if e.complexity.Mutation.ContactUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_contact_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContactUpdate(childComplexity, args["input"].(model.ContactUpdateInput)), true

	case "Mutation.contract_Create":
		if e.complexity.Mutation.ContractCreate == nil {
			break
		}

		args, err := ec.field_Mutation_contract_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContractCreate(childComplexity, args["input"].(model.ContractInput)), true

	case "Mutation.contract_Delete":
		if e.complexity.Mutation.ContractDelete == nil {
			break
		}

		args, err := ec.field_Mutation_contract_Delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContractDelete(childComplexity, args["id"].(string)), true

	case "Mutation.contractLineItem_Close":
		if e.complexity.Mutation.ContractLineItemClose == nil {
			break
		}

		args, err := ec.field_Mutation_contractLineItem_Close_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContractLineItemClose(childComplexity, args["input"].(model.ServiceLineItemCloseInput)), true

	case "Mutation.contractLineItem_Create":
		if e.complexity.Mutation.ContractLineItemCreate == nil {
			break
		}

		args, err := ec.field_Mutation_contractLineItem_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContractLineItemCreate(childComplexity, args["input"].(model.ServiceLineItemInput)), true

	case "Mutation.contractLineItem_Update":
		if e.complexity.Mutation.ContractLineItemUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_contractLineItem_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContractLineItemUpdate(childComplexity, args["input"].(model.ServiceLineItemUpdateInput)), true

	case "Mutation.contract_Update":
		if e.complexity.Mutation.ContractUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_contract_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ContractUpdate(childComplexity, args["input"].(model.ContractUpdateInput)), true

	case "Mutation.customFieldDeleteFromContactById":
		if e.complexity.Mutation.CustomFieldDeleteFromContactByID == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldDeleteFromContactById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldDeleteFromContactByID(childComplexity, args["contactId"].(string), args["id"].(string)), true

	case "Mutation.customFieldDeleteFromContactByName":
		if e.complexity.Mutation.CustomFieldDeleteFromContactByName == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldDeleteFromContactByName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldDeleteFromContactByName(childComplexity, args["contactId"].(string), args["fieldName"].(string)), true

	case "Mutation.customFieldDeleteFromFieldSetById":
		if e.complexity.Mutation.CustomFieldDeleteFromFieldSetByID == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldDeleteFromFieldSetById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldDeleteFromFieldSetByID(childComplexity, args["contactId"].(string), args["fieldSetId"].(string), args["id"].(string)), true

	case "Mutation.customFieldMergeToContact":
		if e.complexity.Mutation.CustomFieldMergeToContact == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldMergeToContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldMergeToContact(childComplexity, args["contactId"].(string), args["input"].(model.CustomFieldInput)), true

	case "Mutation.customFieldMergeToFieldSet":
		if e.complexity.Mutation.CustomFieldMergeToFieldSet == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldMergeToFieldSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldMergeToFieldSet(childComplexity, args["contactId"].(string), args["fieldSetId"].(string), args["input"].(model.CustomFieldInput)), true

	case "Mutation.customFieldTemplate_Create":
		if e.complexity.Mutation.CustomFieldTemplateCreate == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldTemplate_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldTemplateCreate(childComplexity, args["input"].(model.CustomFieldTemplateInput)), true

	case "Mutation.customFieldUpdateInContact":
		if e.complexity.Mutation.CustomFieldUpdateInContact == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldUpdateInContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldUpdateInContact(childComplexity, args["contactId"].(string), args["input"].(model.CustomFieldUpdateInput)), true

	case "Mutation.customFieldUpdateInFieldSet":
		if e.complexity.Mutation.CustomFieldUpdateInFieldSet == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldUpdateInFieldSet_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldUpdateInFieldSet(childComplexity, args["contactId"].(string), args["fieldSetId"].(string), args["input"].(model.CustomFieldUpdateInput)), true

	case "Mutation.customFieldsMergeAndUpdateInContact":
		if e.complexity.Mutation.CustomFieldsMergeAndUpdateInContact == nil {
			break
		}

		args, err := ec.field_Mutation_customFieldsMergeAndUpdateInContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomFieldsMergeAndUpdateInContact(childComplexity, args["contactId"].(string), args["customFields"].([]*model.CustomFieldInput), args["fieldSets"].([]*model.FieldSetInput)), true

	case "Mutation.customer_contact_Create":
		if e.complexity.Mutation.CustomerContactCreate == nil {
			break
		}

		args, err := ec.field_Mutation_customer_contact_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerContactCreate(childComplexity, args["input"].(model.CustomerContactInput)), true

	case "Mutation.customer_user_AddJobRole":
		if e.complexity.Mutation.CustomerUserAddJobRole == nil {
			break
		}

		args, err := ec.field_Mutation_customer_user_AddJobRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CustomerUserAddJobRole(childComplexity, args["id"].(string), args["jobRoleInput"].(model.JobRoleInput)), true

	case "Mutation.emailDelete":
		if e.complexity.Mutation.EmailDelete == nil {
			break
		}

		args, err := ec.field_Mutation_emailDelete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailDelete(childComplexity, args["id"].(string)), true

	case "Mutation.emailMergeToContact":
		if e.complexity.Mutation.EmailMergeToContact == nil {
			break
		}

		args, err := ec.field_Mutation_emailMergeToContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailMergeToContact(childComplexity, args["contactId"].(string), args["input"].(model.EmailInput)), true

	case "Mutation.emailMergeToOrganization":
		if e.complexity.Mutation.EmailMergeToOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_emailMergeToOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailMergeToOrganization(childComplexity, args["organizationId"].(string), args["input"].(model.EmailInput)), true

	case "Mutation.emailMergeToUser":
		if e.complexity.Mutation.EmailMergeToUser == nil {
			break
		}

		args, err := ec.field_Mutation_emailMergeToUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailMergeToUser(childComplexity, args["userId"].(string), args["input"].(model.EmailInput)), true

	case "Mutation.emailRemoveFromContact":
		if e.complexity.Mutation.EmailRemoveFromContact == nil {
			break
		}

		args, err := ec.field_Mutation_emailRemoveFromContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailRemoveFromContact(childComplexity, args["contactId"].(string), args["email"].(string)), true

	case "Mutation.emailRemoveFromContactById":
		if e.complexity.Mutation.EmailRemoveFromContactByID == nil {
			break
		}

		args, err := ec.field_Mutation_emailRemoveFromContactById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailRemoveFromContactByID(childComplexity, args["contactId"].(string), args["id"].(string)), true

	case "Mutation.emailRemoveFromOrganization":
		if e.complexity.Mutation.EmailRemoveFromOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_emailRemoveFromOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailRemoveFromOrganization(childComplexity, args["organizationId"].(string), args["email"].(string)), true

	case "Mutation.emailRemoveFromOrganizationById":
		if e.complexity.Mutation.EmailRemoveFromOrganizationByID == nil {
			break
		}

		args, err := ec.field_Mutation_emailRemoveFromOrganizationById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailRemoveFromOrganizationByID(childComplexity, args["organizationId"].(string), args["id"].(string)), true

	case "Mutation.emailRemoveFromUser":
		if e.complexity.Mutation.EmailRemoveFromUser == nil {
			break
		}

		args, err := ec.field_Mutation_emailRemoveFromUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailRemoveFromUser(childComplexity, args["userId"].(string), args["email"].(string)), true

	case "Mutation.emailRemoveFromUserById":
		if e.complexity.Mutation.EmailRemoveFromUserByID == nil {
			break
		}

		args, err := ec.field_Mutation_emailRemoveFromUserById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailRemoveFromUserByID(childComplexity, args["userId"].(string), args["id"].(string)), true

	case "Mutation.emailUpdateInContact":
		if e.complexity.Mutation.EmailUpdateInContact == nil {
			break
		}

		args, err := ec.field_Mutation_emailUpdateInContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailUpdateInContact(childComplexity, args["contactId"].(string), args["input"].(model.EmailUpdateInput)), true

	case "Mutation.emailUpdateInOrganization":
		if e.complexity.Mutation.EmailUpdateInOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_emailUpdateInOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailUpdateInOrganization(childComplexity, args["organizationId"].(string), args["input"].(model.EmailUpdateInput)), true

	case "Mutation.emailUpdateInUser":
		if e.complexity.Mutation.EmailUpdateInUser == nil {
			break
		}

		args, err := ec.field_Mutation_emailUpdateInUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EmailUpdateInUser(childComplexity, args["userId"].(string), args["input"].(model.EmailUpdateInput)), true

	case "Mutation.entityTemplateCreate":
		if e.complexity.Mutation.EntityTemplateCreate == nil {
			break
		}

		args, err := ec.field_Mutation_entityTemplateCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EntityTemplateCreate(childComplexity, args["input"].(model.EntityTemplateInput)), true

	case "Mutation.fieldSetDeleteFromContact":
		if e.complexity.Mutation.FieldSetDeleteFromContact == nil {
			break
		}

		args, err := ec.field_Mutation_fieldSetDeleteFromContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.FieldSetDeleteFromContact(childComplexity, args["contactId"].(string), args["id"].(string)), true

	case "Mutation.fieldSetMergeToContact":
		if e.complexity.Mutation.FieldSetMergeToContact == nil {
			break
		}

		args, err := ec.field_Mutation_fieldSetMergeToContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.FieldSetMergeToContact(childComplexity, args["contactId"].(string), args["input"].(model.FieldSetInput)), true

	case "Mutation.fieldSetUpdateInContact":
		if e.complexity.Mutation.FieldSetUpdateInContact == nil {
			break
		}

		args, err := ec.field_Mutation_fieldSetUpdateInContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.FieldSetUpdateInContact(childComplexity, args["contactId"].(string), args["input"].(model.FieldSetUpdateInput)), true

	case "Mutation.interactionEvent_Create":
		if e.complexity.Mutation.InteractionEventCreate == nil {
			break
		}

		args, err := ec.field_Mutation_interactionEvent_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InteractionEventCreate(childComplexity, args["event"].(model.InteractionEventInput)), true

	case "Mutation.interactionEvent_LinkAttachment":
		if e.complexity.Mutation.InteractionEventLinkAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_interactionEvent_LinkAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InteractionEventLinkAttachment(childComplexity, args["eventId"].(string), args["attachmentId"].(string)), true

	case "Mutation.interactionSession_Create":
		if e.complexity.Mutation.InteractionSessionCreate == nil {
			break
		}

		args, err := ec.field_Mutation_interactionSession_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InteractionSessionCreate(childComplexity, args["session"].(model.InteractionSessionInput)), true

	case "Mutation.interactionSession_LinkAttachment":
		if e.complexity.Mutation.InteractionSessionLinkAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_interactionSession_LinkAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InteractionSessionLinkAttachment(childComplexity, args["sessionId"].(string), args["attachmentId"].(string)), true

	case "Mutation.invoice_NextDryRunForContract":
		if e.complexity.Mutation.InvoiceNextDryRunForContract == nil {
			break
		}

		args, err := ec.field_Mutation_invoice_NextDryRunForContract_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoiceNextDryRunForContract(childComplexity, args["contractId"].(string)), true

	case "Mutation.invoice_Pay":
		if e.complexity.Mutation.InvoicePay == nil {
			break
		}

		args, err := ec.field_Mutation_invoice_Pay_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoicePay(childComplexity, args["id"].(string)), true

	case "Mutation.invoice_Simulate":
		if e.complexity.Mutation.InvoiceSimulate == nil {
			break
		}

		args, err := ec.field_Mutation_invoice_Simulate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoiceSimulate(childComplexity, args["input"].(model.InvoiceSimulateInput)), true

	case "Mutation.invoice_Update":
		if e.complexity.Mutation.InvoiceUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_invoice_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoiceUpdate(childComplexity, args["input"].(model.InvoiceUpdateInput)), true

	case "Mutation.invoice_Void":
		if e.complexity.Mutation.InvoiceVoid == nil {
			break
		}

		args, err := ec.field_Mutation_invoice_Void_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoiceVoid(childComplexity, args["id"].(string)), true

	case "Mutation.invoicingCycle_Create":
		if e.complexity.Mutation.InvoicingCycleCreate == nil {
			break
		}

		args, err := ec.field_Mutation_invoicingCycle_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoicingCycleCreate(childComplexity, args["input"].(model.InvoicingCycleInput)), true

	case "Mutation.invoicingCycle_Update":
		if e.complexity.Mutation.InvoicingCycleUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_invoicingCycle_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoicingCycleUpdate(childComplexity, args["input"].(model.InvoicingCycleUpdateInput)), true

	case "Mutation.jobRole_Create":
		if e.complexity.Mutation.JobRoleCreate == nil {
			break
		}

		args, err := ec.field_Mutation_jobRole_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobRoleCreate(childComplexity, args["contactId"].(string), args["input"].(model.JobRoleInput)), true

	case "Mutation.jobRole_Delete":
		if e.complexity.Mutation.JobRoleDelete == nil {
			break
		}

		args, err := ec.field_Mutation_jobRole_Delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobRoleDelete(childComplexity, args["contactId"].(string), args["roleId"].(string)), true

	case "Mutation.jobRole_Update":
		if e.complexity.Mutation.JobRoleUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_jobRole_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.JobRoleUpdate(childComplexity, args["contactId"].(string), args["input"].(model.JobRoleUpdateInput)), true

	case "Mutation.location_RemoveFromContact":
		if e.complexity.Mutation.LocationRemoveFromContact == nil {
			break
		}

		args, err := ec.field_Mutation_location_RemoveFromContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LocationRemoveFromContact(childComplexity, args["contactId"].(string), args["locationId"].(string)), true

	case "Mutation.location_RemoveFromOrganization":
		if e.complexity.Mutation.LocationRemoveFromOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_location_RemoveFromOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LocationRemoveFromOrganization(childComplexity, args["organizationId"].(string), args["locationId"].(string)), true

	case "Mutation.location_Update":
		if e.complexity.Mutation.LocationUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_location_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LocationUpdate(childComplexity, args["input"].(model.LocationUpdateInput)), true

	case "Mutation.logEntry_AddTag":
		if e.complexity.Mutation.LogEntryAddTag == nil {
			break
		}

		args, err := ec.field_Mutation_logEntry_AddTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LogEntryAddTag(childComplexity, args["id"].(string), args["input"].(model.TagIDOrNameInput)), true

	case "Mutation.logEntry_CreateForOrganization":
		if e.complexity.Mutation.LogEntryCreateForOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_logEntry_CreateForOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LogEntryCreateForOrganization(childComplexity, args["organizationId"].(string), args["input"].(model.LogEntryInput)), true

	case "Mutation.logEntry_RemoveTag":
		if e.complexity.Mutation.LogEntryRemoveTag == nil {
			break
		}

		args, err := ec.field_Mutation_logEntry_RemoveTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LogEntryRemoveTag(childComplexity, args["id"].(string), args["input"].(model.TagIDOrNameInput)), true

	case "Mutation.logEntry_ResetTags":
		if e.complexity.Mutation.LogEntryResetTags == nil {
			break
		}

		args, err := ec.field_Mutation_logEntry_ResetTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LogEntryResetTags(childComplexity, args["id"].(string), args["input"].([]*model.TagIDOrNameInput)), true

	case "Mutation.logEntry_Update":
		if e.complexity.Mutation.LogEntryUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_logEntry_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.LogEntryUpdate(childComplexity, args["id"].(string), args["input"].(model.LogEntryUpdateInput)), true

	case "Mutation.masterPlan_Create":
		if e.complexity.Mutation.MasterPlanCreate == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlan_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanCreate(childComplexity, args["input"].(model.MasterPlanInput)), true

	case "Mutation.masterPlan_CreateDefault":
		if e.complexity.Mutation.MasterPlanCreateDefault == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlan_CreateDefault_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanCreateDefault(childComplexity, args["input"].(model.MasterPlanInput)), true

	case "Mutation.masterPlan_Duplicate":
		if e.complexity.Mutation.MasterPlanDuplicate == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlan_Duplicate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanDuplicate(childComplexity, args["id"].(string)), true

	case "Mutation.masterPlanMilestone_BulkUpdate":
		if e.complexity.Mutation.MasterPlanMilestoneBulkUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlanMilestone_BulkUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanMilestoneBulkUpdate(childComplexity, args["input"].([]*model.MasterPlanMilestoneUpdateInput)), true

	case "Mutation.masterPlanMilestone_Create":
		if e.complexity.Mutation.MasterPlanMilestoneCreate == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlanMilestone_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanMilestoneCreate(childComplexity, args["input"].(model.MasterPlanMilestoneInput)), true

	case "Mutation.masterPlanMilestone_Duplicate":
		if e.complexity.Mutation.MasterPlanMilestoneDuplicate == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlanMilestone_Duplicate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanMilestoneDuplicate(childComplexity, args["masterPlanId"].(string), args["id"].(string)), true

	case "Mutation.masterPlanMilestone_Reorder":
		if e.complexity.Mutation.MasterPlanMilestoneReorder == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlanMilestone_Reorder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanMilestoneReorder(childComplexity, args["input"].(model.MasterPlanMilestoneReorderInput)), true

	case "Mutation.masterPlanMilestone_Update":
		if e.complexity.Mutation.MasterPlanMilestoneUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlanMilestone_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanMilestoneUpdate(childComplexity, args["input"].(model.MasterPlanMilestoneUpdateInput)), true

	case "Mutation.masterPlan_Update":
		if e.complexity.Mutation.MasterPlanUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_masterPlan_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MasterPlanUpdate(childComplexity, args["input"].(model.MasterPlanUpdateInput)), true

	case "Mutation.meeting_AddNewLocation":
		if e.complexity.Mutation.MeetingAddNewLocation == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_AddNewLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingAddNewLocation(childComplexity, args["meetingId"].(string)), true

	case "Mutation.meeting_AddNote":
		if e.complexity.Mutation.MeetingAddNote == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_AddNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingAddNote(childComplexity, args["meetingId"].(string), args["note"].(*model.NoteInput)), true

	case "Mutation.meeting_Create":
		if e.complexity.Mutation.MeetingCreate == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingCreate(childComplexity, args["meeting"].(model.MeetingInput)), true

	case "Mutation.meeting_LinkAttachment":
		if e.complexity.Mutation.MeetingLinkAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_LinkAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingLinkAttachment(childComplexity, args["meetingId"].(string), args["attachmentId"].(string)), true

	case "Mutation.meeting_LinkAttendedBy":
		if e.complexity.Mutation.MeetingLinkAttendedBy == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_LinkAttendedBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingLinkAttendedBy(childComplexity, args["meetingId"].(string), args["participant"].(model.MeetingParticipantInput)), true

	case "Mutation.meeting_LinkRecording":
		if e.complexity.Mutation.MeetingLinkRecording == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_LinkRecording_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingLinkRecording(childComplexity, args["meetingId"].(string), args["attachmentId"].(string)), true

	case "Mutation.meeting_UnlinkAttachment":
		if e.complexity.Mutation.MeetingUnlinkAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_UnlinkAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingUnlinkAttachment(childComplexity, args["meetingId"].(string), args["attachmentId"].(string)), true

	case "Mutation.meeting_UnlinkAttendedBy":
		if e.complexity.Mutation.MeetingUnlinkAttendedBy == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_UnlinkAttendedBy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingUnlinkAttendedBy(childComplexity, args["meetingId"].(string), args["participant"].(model.MeetingParticipantInput)), true

	case "Mutation.meeting_UnlinkRecording":
		if e.complexity.Mutation.MeetingUnlinkRecording == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_UnlinkRecording_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingUnlinkRecording(childComplexity, args["meetingId"].(string), args["attachmentId"].(string)), true

	case "Mutation.meeting_Update":
		if e.complexity.Mutation.MeetingUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_meeting_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MeetingUpdate(childComplexity, args["meetingId"].(string), args["meeting"].(model.MeetingUpdateInput)), true

	case "Mutation.note_CreateForContact":
		if e.complexity.Mutation.NoteCreateForContact == nil {
			break
		}

		args, err := ec.field_Mutation_note_CreateForContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NoteCreateForContact(childComplexity, args["contactId"].(string), args["input"].(model.NoteInput)), true

	case "Mutation.note_CreateForOrganization":
		if e.complexity.Mutation.NoteCreateForOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_note_CreateForOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NoteCreateForOrganization(childComplexity, args["organizationId"].(string), args["input"].(model.NoteInput)), true

	case "Mutation.note_Delete":
		if e.complexity.Mutation.NoteDelete == nil {
			break
		}

		args, err := ec.field_Mutation_note_Delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NoteDelete(childComplexity, args["id"].(string)), true

	case "Mutation.note_LinkAttachment":
		if e.complexity.Mutation.NoteLinkAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_note_LinkAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NoteLinkAttachment(childComplexity, args["noteId"].(string), args["attachmentId"].(string)), true

	case "Mutation.note_UnlinkAttachment":
		if e.complexity.Mutation.NoteUnlinkAttachment == nil {
			break
		}

		args, err := ec.field_Mutation_note_UnlinkAttachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NoteUnlinkAttachment(childComplexity, args["noteId"].(string), args["attachmentId"].(string)), true

	case "Mutation.note_Update":
		if e.complexity.Mutation.NoteUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_note_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NoteUpdate(childComplexity, args["input"].(model.NoteUpdateInput)), true

	case "Mutation.opportunityRenewalUpdate":
		if e.complexity.Mutation.OpportunityRenewalUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_opportunityRenewalUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OpportunityRenewalUpdate(childComplexity, args["input"].(model.OpportunityRenewalUpdateInput), args["ownerUserId"].(*string)), true

	case "Mutation.opportunityUpdate":
		if e.complexity.Mutation.OpportunityUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_opportunityUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OpportunityUpdate(childComplexity, args["input"].(model.OpportunityUpdateInput)), true

	case "Mutation.organization_AddNewLocation":
		if e.complexity.Mutation.OrganizationAddNewLocation == nil {
			break
		}

		args, err := ec.field_Mutation_organization_AddNewLocation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationAddNewLocation(childComplexity, args["organizationId"].(string)), true

	case "Mutation.organization_AddSocial":
		if e.complexity.Mutation.OrganizationAddSocial == nil {
			break
		}

		args, err := ec.field_Mutation_organization_AddSocial_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationAddSocial(childComplexity, args["organizationId"].(string), args["input"].(model.SocialInput)), true

	case "Mutation.organization_AddSubsidiary":
		if e.complexity.Mutation.OrganizationAddSubsidiary == nil {
			break
		}

		args, err := ec.field_Mutation_organization_AddSubsidiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationAddSubsidiary(childComplexity, args["input"].(model.LinkOrganizationsInput)), true

	case "Mutation.organization_Archive":
		if e.complexity.Mutation.OrganizationArchive == nil {
			break
		}

		args, err := ec.field_Mutation_organization_Archive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationArchive(childComplexity, args["id"].(string)), true

	case "Mutation.organization_ArchiveAll":
		if e.complexity.Mutation.OrganizationArchiveAll == nil {
			break
		}

		args, err := ec.field_Mutation_organization_ArchiveAll_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationArchiveAll(childComplexity, args["ids"].([]string)), true

	case "Mutation.organization_Create":
		if e.complexity.Mutation.OrganizationCreate == nil {
			break
		}

		args, err := ec.field_Mutation_organization_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationCreate(childComplexity, args["input"].(model.OrganizationInput)), true

	case "Mutation.organization_Hide":
		if e.complexity.Mutation.OrganizationHide == nil {
			break
		}

		args, err := ec.field_Mutation_organization_Hide_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationHide(childComplexity, args["id"].(string)), true

	case "Mutation.organization_HideAll":
		if e.complexity.Mutation.OrganizationHideAll == nil {
			break
		}

		args, err := ec.field_Mutation_organization_HideAll_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationHideAll(childComplexity, args["ids"].([]string)), true

	case "Mutation.organization_Merge":
		if e.complexity.Mutation.OrganizationMerge == nil {
			break
		}

		args, err := ec.field_Mutation_organization_Merge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationMerge(childComplexity, args["primaryOrganizationId"].(string), args["mergedOrganizationIds"].([]string)), true

	case "Mutation.organizationPlan_Create":
		if e.complexity.Mutation.OrganizationPlanCreate == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlan_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanCreate(childComplexity, args["input"].(model.OrganizationPlanInput)), true

	case "Mutation.organizationPlan_Duplicate":
		if e.complexity.Mutation.OrganizationPlanDuplicate == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlan_Duplicate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanDuplicate(childComplexity, args["id"].(string), args["organizationId"].(string)), true

	case "Mutation.organizationPlanMilestone_BulkUpdate":
		if e.complexity.Mutation.OrganizationPlanMilestoneBulkUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlanMilestone_BulkUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanMilestoneBulkUpdate(childComplexity, args["input"].([]*model.OrganizationPlanMilestoneUpdateInput)), true

	case "Mutation.organizationPlanMilestone_Create":
		if e.complexity.Mutation.OrganizationPlanMilestoneCreate == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlanMilestone_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanMilestoneCreate(childComplexity, args["input"].(model.OrganizationPlanMilestoneInput)), true

	case "Mutation.organizationPlanMilestone_Duplicate":
		if e.complexity.Mutation.OrganizationPlanMilestoneDuplicate == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlanMilestone_Duplicate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanMilestoneDuplicate(childComplexity, args["organizationId"].(string), args["organizationPlanId"].(string), args["id"].(string)), true

	case "Mutation.organizationPlanMilestone_Reorder":
		if e.complexity.Mutation.OrganizationPlanMilestoneReorder == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlanMilestone_Reorder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanMilestoneReorder(childComplexity, args["input"].(model.OrganizationPlanMilestoneReorderInput)), true

	case "Mutation.organizationPlanMilestone_Update":
		if e.complexity.Mutation.OrganizationPlanMilestoneUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlanMilestone_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanMilestoneUpdate(childComplexity, args["input"].(model.OrganizationPlanMilestoneUpdateInput)), true

	case "Mutation.organizationPlan_Update":
		if e.complexity.Mutation.OrganizationPlanUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_organizationPlan_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationPlanUpdate(childComplexity, args["input"].(model.OrganizationPlanUpdateInput)), true

	case "Mutation.organization_RemoveSubsidiary":
		if e.complexity.Mutation.OrganizationRemoveSubsidiary == nil {
			break
		}

		args, err := ec.field_Mutation_organization_RemoveSubsidiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationRemoveSubsidiary(childComplexity, args["organizationId"].(string), args["subsidiaryId"].(string)), true

	case "Mutation.organization_SetOwner":
		if e.complexity.Mutation.OrganizationSetOwner == nil {
			break
		}

		args, err := ec.field_Mutation_organization_SetOwner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationSetOwner(childComplexity, args["organizationId"].(string), args["userId"].(string)), true

	case "Mutation.organization_Show":
		if e.complexity.Mutation.OrganizationShow == nil {
			break
		}

		args, err := ec.field_Mutation_organization_Show_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationShow(childComplexity, args["id"].(string)), true

	case "Mutation.organization_ShowAll":
		if e.complexity.Mutation.OrganizationShowAll == nil {
			break
		}

		args, err := ec.field_Mutation_organization_ShowAll_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationShowAll(childComplexity, args["ids"].([]string)), true

	case "Mutation.organization_UnsetOwner":
		if e.complexity.Mutation.OrganizationUnsetOwner == nil {
			break
		}

		args, err := ec.field_Mutation_organization_UnsetOwner_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationUnsetOwner(childComplexity, args["organizationId"].(string)), true

	case "Mutation.organization_Update":
		if e.complexity.Mutation.OrganizationUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_organization_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationUpdate(childComplexity, args["input"].(model.OrganizationUpdateInput)), true

	case "Mutation.organization_UpdateOnboardingStatus":
		if e.complexity.Mutation.OrganizationUpdateOnboardingStatus == nil {
			break
		}

		args, err := ec.field_Mutation_organization_UpdateOnboardingStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OrganizationUpdateOnboardingStatus(childComplexity, args["input"].(model.OnboardingStatusInput)), true

	case "Mutation.phoneNumberMergeToContact":
		if e.complexity.Mutation.PhoneNumberMergeToContact == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberMergeToContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberMergeToContact(childComplexity, args["contactId"].(string), args["input"].(model.PhoneNumberInput)), true

	case "Mutation.phoneNumberMergeToOrganization":
		if e.complexity.Mutation.PhoneNumberMergeToOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberMergeToOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberMergeToOrganization(childComplexity, args["organizationId"].(string), args["input"].(model.PhoneNumberInput)), true

	case "Mutation.phoneNumberMergeToUser":
		if e.complexity.Mutation.PhoneNumberMergeToUser == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberMergeToUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberMergeToUser(childComplexity, args["userId"].(string), args["input"].(model.PhoneNumberInput)), true

	case "Mutation.phoneNumberRemoveFromContactByE164":
		if e.complexity.Mutation.PhoneNumberRemoveFromContactByE164 == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberRemoveFromContactByE164_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberRemoveFromContactByE164(childComplexity, args["contactId"].(string), args["e164"].(string)), true

	case "Mutation.phoneNumberRemoveFromContactById":
		if e.complexity.Mutation.PhoneNumberRemoveFromContactByID == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberRemoveFromContactById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberRemoveFromContactByID(childComplexity, args["contactId"].(string), args["id"].(string)), true

	case "Mutation.phoneNumberRemoveFromOrganizationByE164":
		if e.complexity.Mutation.PhoneNumberRemoveFromOrganizationByE164 == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberRemoveFromOrganizationByE164_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberRemoveFromOrganizationByE164(childComplexity, args["organizationId"].(string), args["e164"].(string)), true

	case "Mutation.phoneNumberRemoveFromOrganizationById":
		if e.complexity.Mutation.PhoneNumberRemoveFromOrganizationByID == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberRemoveFromOrganizationById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberRemoveFromOrganizationByID(childComplexity, args["organizationId"].(string), args["id"].(string)), true

	case "Mutation.phoneNumberRemoveFromUserByE164":
		if e.complexity.Mutation.PhoneNumberRemoveFromUserByE164 == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberRemoveFromUserByE164_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberRemoveFromUserByE164(childComplexity, args["userId"].(string), args["e164"].(string)), true

	case "Mutation.phoneNumberRemoveFromUserById":
		if e.complexity.Mutation.PhoneNumberRemoveFromUserByID == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberRemoveFromUserById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberRemoveFromUserByID(childComplexity, args["userId"].(string), args["id"].(string)), true

	case "Mutation.phoneNumberUpdateInContact":
		if e.complexity.Mutation.PhoneNumberUpdateInContact == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberUpdateInContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberUpdateInContact(childComplexity, args["contactId"].(string), args["input"].(model.PhoneNumberUpdateInput)), true

	case "Mutation.phoneNumberUpdateInOrganization":
		if e.complexity.Mutation.PhoneNumberUpdateInOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberUpdateInOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberUpdateInOrganization(childComplexity, args["organizationId"].(string), args["input"].(model.PhoneNumberUpdateInput)), true

	case "Mutation.phoneNumberUpdateInUser":
		if e.complexity.Mutation.PhoneNumberUpdateInUser == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberUpdateInUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberUpdateInUser(childComplexity, args["userId"].(string), args["input"].(model.PhoneNumberUpdateInput)), true

	case "Mutation.player_Merge":
		if e.complexity.Mutation.PlayerMerge == nil {
			break
		}

		args, err := ec.field_Mutation_player_Merge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PlayerMerge(childComplexity, args["userId"].(string), args["input"].(model.PlayerInput)), true

	case "Mutation.reminder_Create":
		if e.complexity.Mutation.ReminderCreate == nil {
			break
		}

		args, err := ec.field_Mutation_reminder_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReminderCreate(childComplexity, args["input"].(model.ReminderInput)), true

	case "Mutation.reminder_Update":
		if e.complexity.Mutation.ReminderUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_reminder_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReminderUpdate(childComplexity, args["input"].(model.ReminderUpdateInput)), true

	case "Mutation.serviceLineItem_BulkUpdate":
		if e.complexity.Mutation.ServiceLineItemBulkUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_serviceLineItem_BulkUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ServiceLineItemBulkUpdate(childComplexity, args["input"].(model.ServiceLineItemBulkUpdateInput)), true

	case "Mutation.serviceLineItem_Delete":
		if e.complexity.Mutation.ServiceLineItemDelete == nil {
			break
		}

		args, err := ec.field_Mutation_serviceLineItem_Delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ServiceLineItemDelete(childComplexity, args["id"].(string)), true

	case "Mutation.social_Remove":
		if e.complexity.Mutation.SocialRemove == nil {
			break
		}

		args, err := ec.field_Mutation_social_Remove_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SocialRemove(childComplexity, args["socialId"].(string)), true

	case "Mutation.social_Update":
		if e.complexity.Mutation.SocialUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_social_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SocialUpdate(childComplexity, args["input"].(model.SocialUpdateInput)), true

	case "Mutation.tag_Create":
		if e.complexity.Mutation.TagCreate == nil {
			break
		}

		args, err := ec.field_Mutation_tag_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagCreate(childComplexity, args["input"].(model.TagInput)), true

	case "Mutation.tag_Delete":
		if e.complexity.Mutation.TagDelete == nil {
			break
		}

		args, err := ec.field_Mutation_tag_Delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagDelete(childComplexity, args["id"].(string)), true

	case "Mutation.tag_Update":
		if e.complexity.Mutation.TagUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_tag_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TagUpdate(childComplexity, args["input"].(model.TagUpdateInput)), true

	case "Mutation.tenant_AddBillingProfile":
		if e.complexity.Mutation.TenantAddBillingProfile == nil {
			break
		}

		args, err := ec.field_Mutation_tenant_AddBillingProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TenantAddBillingProfile(childComplexity, args["input"].(model.TenantBillingProfileInput)), true

	case "Mutation.tenant_Merge":
		if e.complexity.Mutation.TenantMerge == nil {
			break
		}

		args, err := ec.field_Mutation_tenant_Merge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TenantMerge(childComplexity, args["tenant"].(model.TenantInput)), true

	case "Mutation.tenant_UpdateBillingProfile":
		if e.complexity.Mutation.TenantUpdateBillingProfile == nil {
			break
		}

		args, err := ec.field_Mutation_tenant_UpdateBillingProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TenantUpdateBillingProfile(childComplexity, args["input"].(model.TenantBillingProfileUpdateInput)), true

	case "Mutation.tenant_UpdateSettings":
		if e.complexity.Mutation.TenantUpdateSettings == nil {
			break
		}

		args, err := ec.field_Mutation_tenant_UpdateSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TenantUpdateSettings(childComplexity, args["input"].(*model.TenantSettingsInput)), true

	case "Mutation.user_AddRole":
		if e.complexity.Mutation.UserAddRole == nil {
			break
		}

		args, err := ec.field_Mutation_user_AddRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserAddRole(childComplexity, args["id"].(string), args["role"].(model.Role)), true

	case "Mutation.user_AddRoleInTenant":
		if e.complexity.Mutation.UserAddRoleInTenant == nil {
			break
		}

		args, err := ec.field_Mutation_user_AddRoleInTenant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserAddRoleInTenant(childComplexity, args["id"].(string), args["tenant"].(string), args["role"].(model.Role)), true

	case "Mutation.user_Create":
		if e.complexity.Mutation.UserCreate == nil {
			break
		}

		args, err := ec.field_Mutation_user_Create_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserCreate(childComplexity, args["input"].(model.UserInput)), true

	case "Mutation.user_Delete":
		if e.complexity.Mutation.UserDelete == nil {
			break
		}

		args, err := ec.field_Mutation_user_Delete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserDelete(childComplexity, args["id"].(string)), true

	case "Mutation.user_DeleteInTenant":
		if e.complexity.Mutation.UserDeleteInTenant == nil {
			break
		}

		args, err := ec.field_Mutation_user_DeleteInTenant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserDeleteInTenant(childComplexity, args["id"].(string), args["tenant"].(string)), true

	case "Mutation.user_RemoveRole":
		if e.complexity.Mutation.UserRemoveRole == nil {
			break
		}

		args, err := ec.field_Mutation_user_RemoveRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserRemoveRole(childComplexity, args["id"].(string), args["role"].(model.Role)), true

	case "Mutation.user_RemoveRoleInTenant":
		if e.complexity.Mutation.UserRemoveRoleInTenant == nil {
			break
		}

		args, err := ec.field_Mutation_user_RemoveRoleInTenant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserRemoveRoleInTenant(childComplexity, args["id"].(string), args["tenant"].(string), args["role"].(model.Role)), true

	case "Mutation.user_Update":
		if e.complexity.Mutation.UserUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_user_Update_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserUpdate(childComplexity, args["input"].(model.UserUpdateInput)), true

	case "Mutation.workspace_Merge":
		if e.complexity.Mutation.WorkspaceMerge == nil {
			break
		}

		args, err := ec.field_Mutation_workspace_Merge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.WorkspaceMerge(childComplexity, args["workspace"].(model.WorkspaceInput)), true

	case "Mutation.workspace_MergeToTenant":
		if e.complexity.Mutation.WorkspaceMergeToTenant == nil {
			break
		}

		args, err := ec.field_Mutation_workspace_MergeToTenant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.WorkspaceMergeToTenant(childComplexity, args["workspace"].(model.WorkspaceInput), args["tenant"].(string)), true

	case "Note.appSource":
		if e.complexity.Note.AppSource == nil {
			break
		}

		return e.complexity.Note.AppSource(childComplexity), true

	case "Note.content":
		if e.complexity.Note.Content == nil {
			break
		}

		return e.complexity.Note.Content(childComplexity), true

	case "Note.contentType":
		if e.complexity.Note.ContentType == nil {
			break
		}

		return e.complexity.Note.ContentType(childComplexity), true

	case "Note.createdAt":
		if e.complexity.Note.CreatedAt == nil {
			break
		}

		return e.complexity.Note.CreatedAt(childComplexity), true

	case "Note.createdBy":
		if e.complexity.Note.CreatedBy == nil {
			break
		}

		return e.complexity.Note.CreatedBy(childComplexity), true

	case "Note.id":
		if e.complexity.Note.ID == nil {
			break
		}

		return e.complexity.Note.ID(childComplexity), true

	case "Note.includes":
		if e.complexity.Note.Includes == nil {
			break
		}

		return e.complexity.Note.Includes(childComplexity), true

	case "Note.noted":
		if e.complexity.Note.Noted == nil {
			break
		}

		return e.complexity.Note.Noted(childComplexity), true

	case "Note.source":
		if e.complexity.Note.Source == nil {
			break
		}

		return e.complexity.Note.Source(childComplexity), true

	case "Note.sourceOfTruth":
		if e.complexity.Note.SourceOfTruth == nil {
			break
		}

		return e.complexity.Note.SourceOfTruth(childComplexity), true

	case "Note.updatedAt":
		if e.complexity.Note.UpdatedAt == nil {
			break
		}

		return e.complexity.Note.UpdatedAt(childComplexity), true

	case "NotePage.content":
		if e.complexity.NotePage.Content == nil {
			break
		}

		return e.complexity.NotePage.Content(childComplexity), true

	case "NotePage.totalElements":
		if e.complexity.NotePage.TotalElements == nil {
			break
		}

		return e.complexity.NotePage.TotalElements(childComplexity), true

	case "NotePage.totalPages":
		if e.complexity.NotePage.TotalPages == nil {
			break
		}

		return e.complexity.NotePage.TotalPages(childComplexity), true

	case "OnboardingDetails.comments":
		if e.complexity.OnboardingDetails.Comments == nil {
			break
		}

		return e.complexity.OnboardingDetails.Comments(childComplexity), true

	case "OnboardingDetails.status":
		if e.complexity.OnboardingDetails.Status == nil {
			break
		}

		return e.complexity.OnboardingDetails.Status(childComplexity), true

	case "OnboardingDetails.updatedAt":
		if e.complexity.OnboardingDetails.UpdatedAt == nil {
			break
		}

		return e.complexity.OnboardingDetails.UpdatedAt(childComplexity), true

	case "Opportunity.amount":
		if e.complexity.Opportunity.Amount == nil {
			break
		}

		return e.complexity.Opportunity.Amount(childComplexity), true

	case "Opportunity.appSource":
		if e.complexity.Opportunity.AppSource == nil {
			break
		}

		return e.complexity.Opportunity.AppSource(childComplexity), true

	case "Opportunity.comments":
		if e.complexity.Opportunity.Comments == nil {
			break
		}

		return e.complexity.Opportunity.Comments(childComplexity), true

	case "Opportunity.createdAt":
		if e.complexity.Opportunity.CreatedAt == nil {
			break
		}

		return e.complexity.Opportunity.CreatedAt(childComplexity), true

	case "Opportunity.createdBy":
		if e.complexity.Opportunity.CreatedBy == nil {
			break
		}

		return e.complexity.Opportunity.CreatedBy(childComplexity), true

	case "Opportunity.estimatedClosedAt":
		if e.complexity.Opportunity.EstimatedClosedAt == nil {
			break
		}

		return e.complexity.Opportunity.EstimatedClosedAt(childComplexity), true

	case "Opportunity.externalLinks":
		if e.complexity.Opportunity.ExternalLinks == nil {
			break
		}

		return e.complexity.Opportunity.ExternalLinks(childComplexity), true

	case "Opportunity.externalStage":
		if e.complexity.Opportunity.ExternalStage == nil {
			break
		}

		return e.complexity.Opportunity.ExternalStage(childComplexity), true

	case "Opportunity.externalType":
		if e.complexity.Opportunity.ExternalType == nil {
			break
		}

		return e.complexity.Opportunity.ExternalType(childComplexity), true

	case "Opportunity.generalNotes":
		if e.complexity.Opportunity.GeneralNotes == nil {
			break
		}

		return e.complexity.Opportunity.GeneralNotes(childComplexity), true

	case "Opportunity.id":
		if e.complexity.Opportunity.ID == nil {
			break
		}

		return e.complexity.Opportunity.ID(childComplexity), true

	case "Opportunity.internalStage":
		if e.complexity.Opportunity.InternalStage == nil {
			break
		}

		return e.complexity.Opportunity.InternalStage(childComplexity), true

	case "Opportunity.internalType":
		if e.complexity.Opportunity.InternalType == nil {
			break
		}

		return e.complexity.Opportunity.InternalType(childComplexity), true

	case "Opportunity.maxAmount":
		if e.complexity.Opportunity.MaxAmount == nil {
			break
		}

		return e.complexity.Opportunity.MaxAmount(childComplexity), true

	case "Opportunity.name":
		if e.complexity.Opportunity.Name == nil {
			break
		}

		return e.complexity.Opportunity.Name(childComplexity), true

	case "Opportunity.nextSteps":
		if e.complexity.Opportunity.NextSteps == nil {
			break
		}

		return e.complexity.Opportunity.NextSteps(childComplexity), true

	case "Opportunity.owner":
		if e.complexity.Opportunity.Owner == nil {
			break
		}

		return e.complexity.Opportunity.Owner(childComplexity), true

	case "Opportunity.renewalLikelihood":
		if e.complexity.Opportunity.RenewalLikelihood == nil {
			break
		}

		return e.complexity.Opportunity.RenewalLikelihood(childComplexity), true

	case "Opportunity.renewalUpdatedByUserAt":
		if e.complexity.Opportunity.RenewalUpdatedByUserAt == nil {
			break
		}

		return e.complexity.Opportunity.RenewalUpdatedByUserAt(childComplexity), true

	case "Opportunity.renewalUpdatedByUserId":
		if e.complexity.Opportunity.RenewalUpdatedByUserID == nil {
			break
		}

		return e.complexity.Opportunity.RenewalUpdatedByUserID(childComplexity), true

	case "Opportunity.renewedAt":
		if e.complexity.Opportunity.RenewedAt == nil {
			break
		}

		return e.complexity.Opportunity.RenewedAt(childComplexity), true

	case "Opportunity.source":
		if e.complexity.Opportunity.Source == nil {
			break
		}

		return e.complexity.Opportunity.Source(childComplexity), true

	case "Opportunity.sourceOfTruth":
		if e.complexity.Opportunity.SourceOfTruth == nil {
			break
		}

		return e.complexity.Opportunity.SourceOfTruth(childComplexity), true

	case "Opportunity.updatedAt":
		if e.complexity.Opportunity.UpdatedAt == nil {
			break
		}

		return e.complexity.Opportunity.UpdatedAt(childComplexity), true

	case "OrgAccountDetails.onboarding":
		if e.complexity.OrgAccountDetails.Onboarding == nil {
			break
		}

		return e.complexity.OrgAccountDetails.Onboarding(childComplexity), true

	case "OrgAccountDetails.renewalSummary":
		if e.complexity.OrgAccountDetails.RenewalSummary == nil {
			break
		}

		return e.complexity.OrgAccountDetails.RenewalSummary(childComplexity), true

	case "Organization.accountDetails":
		if e.complexity.Organization.AccountDetails == nil {
			break
		}

		return e.complexity.Organization.AccountDetails(childComplexity), true

	case "Organization.appSource":
		if e.complexity.Organization.AppSource == nil {
			break
		}

		return e.complexity.Organization.AppSource(childComplexity), true

	case "Organization.contacts":
		if e.complexity.Organization.Contacts == nil {
			break
		}

		args, err := ec.field_Organization_contacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.Contacts(childComplexity, args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].([]*model.SortBy)), true

	case "Organization.contracts":
		if e.complexity.Organization.Contracts == nil {
			break
		}

		return e.complexity.Organization.Contracts(childComplexity), true

	case "Organization.createdAt":
		if e.complexity.Organization.CreatedAt == nil {
			break
		}

		return e.complexity.Organization.CreatedAt(childComplexity), true

	case "Organization.customFields":
		if e.complexity.Organization.CustomFields == nil {
			break
		}

		return e.complexity.Organization.CustomFields(childComplexity), true

	case "Organization.customId":
		if e.complexity.Organization.CustomID == nil {
			break
		}

		return e.complexity.Organization.CustomID(childComplexity), true

	case "Organization.customerOsId":
		if e.complexity.Organization.CustomerOsID == nil {
			break
		}

		return e.complexity.Organization.CustomerOsID(childComplexity), true

	case "Organization.description":
		if e.complexity.Organization.Description == nil {
			break
		}

		return e.complexity.Organization.Description(childComplexity), true

	case "Organization.domains":
		if e.complexity.Organization.Domains == nil {
			break
		}

		return e.complexity.Organization.Domains(childComplexity), true

	case "Organization.emails":
		if e.complexity.Organization.Emails == nil {
			break
		}

		return e.complexity.Organization.Emails(childComplexity), true

	case "Organization.employeeGrowthRate":
		if e.complexity.Organization.EmployeeGrowthRate == nil {
			break
		}

		return e.complexity.Organization.EmployeeGrowthRate(childComplexity), true

	case "Organization.employees":
		if e.complexity.Organization.Employees == nil {
			break
		}

		return e.complexity.Organization.Employees(childComplexity), true

	case "Organization.entityTemplate":
		if e.complexity.Organization.EntityTemplate == nil {
			break
		}

		return e.complexity.Organization.EntityTemplate(childComplexity), true

	case "Organization.externalLinks":
		if e.complexity.Organization.ExternalLinks == nil {
			break
		}

		return e.complexity.Organization.ExternalLinks(childComplexity), true

	case "Organization.fieldSets":
		if e.complexity.Organization.FieldSets == nil {
			break
		}

		return e.complexity.Organization.FieldSets(childComplexity), true

	case "Organization.headquarters":
		if e.complexity.Organization.Headquarters == nil {
			break
		}

		return e.complexity.Organization.Headquarters(childComplexity), true

	case "Organization.hide":
		if e.complexity.Organization.Hide == nil {
			break
		}

		return e.complexity.Organization.Hide(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.industry":
		if e.complexity.Organization.Industry == nil {
			break
		}

		return e.complexity.Organization.Industry(childComplexity), true

	case "Organization.industryGroup":
		if e.complexity.Organization.IndustryGroup == nil {
			break
		}

		return e.complexity.Organization.IndustryGroup(childComplexity), true

	case "Organization.isCustomer":
		if e.complexity.Organization.IsCustomer == nil {
			break
		}

		return e.complexity.Organization.IsCustomer(childComplexity), true

	case "Organization.isPublic":
		if e.complexity.Organization.IsPublic == nil {
			break
		}

		return e.complexity.Organization.IsPublic(childComplexity), true

	case "Organization.issueSummaryByStatus":
		if e.complexity.Organization.IssueSummaryByStatus == nil {
			break
		}

		return e.complexity.Organization.IssueSummaryByStatus(childComplexity), true

	case "Organization.jobRoles":
		if e.complexity.Organization.JobRoles == nil {
			break
		}

		return e.complexity.Organization.JobRoles(childComplexity), true

	case "Organization.lastFundingAmount":
		if e.complexity.Organization.LastFundingAmount == nil {
			break
		}

		return e.complexity.Organization.LastFundingAmount(childComplexity), true

	case "Organization.lastFundingRound":
		if e.complexity.Organization.LastFundingRound == nil {
			break
		}

		return e.complexity.Organization.LastFundingRound(childComplexity), true

	case "Organization.lastTouchPointAt":
		if e.complexity.Organization.LastTouchPointAt == nil {
			break
		}

		return e.complexity.Organization.LastTouchPointAt(childComplexity), true

	case "Organization.lastTouchPointTimelineEvent":
		if e.complexity.Organization.LastTouchPointTimelineEvent == nil {
			break
		}

		return e.complexity.Organization.LastTouchPointTimelineEvent(childComplexity), true

	case "Organization.lastTouchPointTimelineEventId":
		if e.complexity.Organization.LastTouchPointTimelineEventID == nil {
			break
		}

		return e.complexity.Organization.LastTouchPointTimelineEventID(childComplexity), true

	case "Organization.lastTouchPointType":
		if e.complexity.Organization.LastTouchPointType == nil {
			break
		}

		return e.complexity.Organization.LastTouchPointType(childComplexity), true

	case "Organization.lastTouchpoint":
		if e.complexity.Organization.LastTouchpoint == nil {
			break
		}

		return e.complexity.Organization.LastTouchpoint(childComplexity), true

	case "Organization.locations":
		if e.complexity.Organization.Locations == nil {
			break
		}

		return e.complexity.Organization.Locations(childComplexity), true

	case "Organization.logo":
		if e.complexity.Organization.Logo == nil {
			break
		}

		return e.complexity.Organization.Logo(childComplexity), true

	case "Organization.logoUrl":
		if e.complexity.Organization.LogoURL == nil {
			break
		}

		return e.complexity.Organization.LogoURL(childComplexity), true

	case "Organization.market":
		if e.complexity.Organization.Market == nil {
			break
		}

		return e.complexity.Organization.Market(childComplexity), true

	case "Organization.metadata":
		if e.complexity.Organization.Metadata == nil {
			break
		}

		return e.complexity.Organization.Metadata(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.note":
		if e.complexity.Organization.Note == nil {
			break
		}

		return e.complexity.Organization.Note(childComplexity), true

	case "Organization.notes":
		if e.complexity.Organization.Notes == nil {
			break
		}

		return e.complexity.Organization.Notes(childComplexity), true

	case "Organization.owner":
		if e.complexity.Organization.Owner == nil {
			break
		}

		return e.complexity.Organization.Owner(childComplexity), true

	case "Organization.parentCompanies":
		if e.complexity.Organization.ParentCompanies == nil {
			break
		}

		return e.complexity.Organization.ParentCompanies(childComplexity), true

	case "Organization.phoneNumbers":
		if e.complexity.Organization.PhoneNumbers == nil {
			break
		}

		return e.complexity.Organization.PhoneNumbers(childComplexity), true

	case "Organization.public":
		if e.complexity.Organization.Public == nil {
			break
		}

		return e.complexity.Organization.Public(childComplexity), true

	case "Organization.referenceId":
		if e.complexity.Organization.ReferenceID == nil {
			break
		}

		return e.complexity.Organization.ReferenceID(childComplexity), true

	case "Organization.slackChannelId":
		if e.complexity.Organization.SlackChannelID == nil {
			break
		}

		return e.complexity.Organization.SlackChannelID(childComplexity), true

	case "Organization.socialMedia":
		if e.complexity.Organization.SocialMedia == nil {
			break
		}

		return e.complexity.Organization.SocialMedia(childComplexity), true

	case "Organization.socials":
		if e.complexity.Organization.Socials == nil {
			break
		}

		return e.complexity.Organization.Socials(childComplexity), true

	case "Organization.source":
		if e.complexity.Organization.Source == nil {
			break
		}

		return e.complexity.Organization.Source(childComplexity), true

	case "Organization.sourceOfTruth":
		if e.complexity.Organization.SourceOfTruth == nil {
			break
		}

		return e.complexity.Organization.SourceOfTruth(childComplexity), true

	case "Organization.subIndustry":
		if e.complexity.Organization.SubIndustry == nil {
			break
		}

		return e.complexity.Organization.SubIndustry(childComplexity), true

	case "Organization.subsidiaries":
		if e.complexity.Organization.Subsidiaries == nil {
			break
		}

		return e.complexity.Organization.Subsidiaries(childComplexity), true

	case "Organization.subsidiaryOf":
		if e.complexity.Organization.SubsidiaryOf == nil {
			break
		}

		return e.complexity.Organization.SubsidiaryOf(childComplexity), true

	case "Organization.suggestedMergeTo":
		if e.complexity.Organization.SuggestedMergeTo == nil {
			break
		}

		return e.complexity.Organization.SuggestedMergeTo(childComplexity), true

	case "Organization.tags":
		if e.complexity.Organization.Tags == nil {
			break
		}

		return e.complexity.Organization.Tags(childComplexity), true

	case "Organization.targetAudience":
		if e.complexity.Organization.TargetAudience == nil {
			break
		}

		return e.complexity.Organization.TargetAudience(childComplexity), true

	case "Organization.timelineEvents":
		if e.complexity.Organization.TimelineEvents == nil {
			break
		}

		args, err := ec.field_Organization_timelineEvents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.TimelineEvents(childComplexity, args["from"].(*time.Time), args["size"].(int), args["timelineEventTypes"].([]model.TimelineEventType)), true

	case "Organization.timelineEventsTotalCount":
		if e.complexity.Organization.TimelineEventsTotalCount == nil {
			break
		}

		args, err := ec.field_Organization_timelineEventsTotalCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Organization.TimelineEventsTotalCount(childComplexity, args["timelineEventTypes"].([]model.TimelineEventType)), true

	case "Organization.updatedAt":
		if e.complexity.Organization.UpdatedAt == nil {
			break
		}

		return e.complexity.Organization.UpdatedAt(childComplexity), true

	case "Organization.valueProposition":
		if e.complexity.Organization.ValueProposition == nil {
			break
		}

		return e.complexity.Organization.ValueProposition(childComplexity), true

	case "Organization.website":
		if e.complexity.Organization.Website == nil {
			break
		}

		return e.complexity.Organization.Website(childComplexity), true

	case "Organization.yearFounded":
		if e.complexity.Organization.YearFounded == nil {
			break
		}

		return e.complexity.Organization.YearFounded(childComplexity), true

	case "OrganizationPage.content":
		if e.complexity.OrganizationPage.Content == nil {
			break
		}

		return e.complexity.OrganizationPage.Content(childComplexity), true

	case "OrganizationPage.totalAvailable":
		if e.complexity.OrganizationPage.TotalAvailable == nil {
			break
		}

		return e.complexity.OrganizationPage.TotalAvailable(childComplexity), true

	case "OrganizationPage.totalElements":
		if e.complexity.OrganizationPage.TotalElements == nil {
			break
		}

		return e.complexity.OrganizationPage.TotalElements(childComplexity), true

	case "OrganizationPage.totalPages":
		if e.complexity.OrganizationPage.TotalPages == nil {
			break
		}

		return e.complexity.OrganizationPage.TotalPages(childComplexity), true

	case "OrganizationParticipant.organizationParticipant":
		if e.complexity.OrganizationParticipant.OrganizationParticipant == nil {
			break
		}

		return e.complexity.OrganizationParticipant.OrganizationParticipant(childComplexity), true

	case "OrganizationParticipant.type":
		if e.complexity.OrganizationParticipant.Type == nil {
			break
		}

		return e.complexity.OrganizationParticipant.Type(childComplexity), true

	case "OrganizationPlan.appSource":
		if e.complexity.OrganizationPlan.AppSource == nil {
			break
		}

		return e.complexity.OrganizationPlan.AppSource(childComplexity), true

	case "OrganizationPlan.createdAt":
		if e.complexity.OrganizationPlan.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationPlan.CreatedAt(childComplexity), true

	case "OrganizationPlan.id":
		if e.complexity.OrganizationPlan.ID == nil {
			break
		}

		return e.complexity.OrganizationPlan.ID(childComplexity), true

	case "OrganizationPlan.masterPlanId":
		if e.complexity.OrganizationPlan.MasterPlanID == nil {
			break
		}

		return e.complexity.OrganizationPlan.MasterPlanID(childComplexity), true

	case "OrganizationPlan.milestones":
		if e.complexity.OrganizationPlan.Milestones == nil {
			break
		}

		return e.complexity.OrganizationPlan.Milestones(childComplexity), true

	case "OrganizationPlan.name":
		if e.complexity.OrganizationPlan.Name == nil {
			break
		}

		return e.complexity.OrganizationPlan.Name(childComplexity), true

	case "OrganizationPlan.retired":
		if e.complexity.OrganizationPlan.Retired == nil {
			break
		}

		return e.complexity.OrganizationPlan.Retired(childComplexity), true

	case "OrganizationPlan.retiredMilestones":
		if e.complexity.OrganizationPlan.RetiredMilestones == nil {
			break
		}

		return e.complexity.OrganizationPlan.RetiredMilestones(childComplexity), true

	case "OrganizationPlan.source":
		if e.complexity.OrganizationPlan.Source == nil {
			break
		}

		return e.complexity.OrganizationPlan.Source(childComplexity), true

	case "OrganizationPlan.sourceOfTruth":
		if e.complexity.OrganizationPlan.SourceOfTruth == nil {
			break
		}

		return e.complexity.OrganizationPlan.SourceOfTruth(childComplexity), true

	case "OrganizationPlan.statusDetails":
		if e.complexity.OrganizationPlan.StatusDetails == nil {
			break
		}

		return e.complexity.OrganizationPlan.StatusDetails(childComplexity), true

	case "OrganizationPlan.updatedAt":
		if e.complexity.OrganizationPlan.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationPlan.UpdatedAt(childComplexity), true

	case "OrganizationPlanMilestone.adhoc":
		if e.complexity.OrganizationPlanMilestone.Adhoc == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.Adhoc(childComplexity), true

	case "OrganizationPlanMilestone.appSource":
		if e.complexity.OrganizationPlanMilestone.AppSource == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.AppSource(childComplexity), true

	case "OrganizationPlanMilestone.createdAt":
		if e.complexity.OrganizationPlanMilestone.CreatedAt == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.CreatedAt(childComplexity), true

	case "OrganizationPlanMilestone.dueDate":
		if e.complexity.OrganizationPlanMilestone.DueDate == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.DueDate(childComplexity), true

	case "OrganizationPlanMilestone.id":
		if e.complexity.OrganizationPlanMilestone.ID == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.ID(childComplexity), true

	case "OrganizationPlanMilestone.items":
		if e.complexity.OrganizationPlanMilestone.Items == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.Items(childComplexity), true

	case "OrganizationPlanMilestone.name":
		if e.complexity.OrganizationPlanMilestone.Name == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.Name(childComplexity), true

	case "OrganizationPlanMilestone.optional":
		if e.complexity.OrganizationPlanMilestone.Optional == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.Optional(childComplexity), true

	case "OrganizationPlanMilestone.order":
		if e.complexity.OrganizationPlanMilestone.Order == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.Order(childComplexity), true

	case "OrganizationPlanMilestone.retired":
		if e.complexity.OrganizationPlanMilestone.Retired == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.Retired(childComplexity), true

	case "OrganizationPlanMilestone.source":
		if e.complexity.OrganizationPlanMilestone.Source == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.Source(childComplexity), true

	case "OrganizationPlanMilestone.sourceOfTruth":
		if e.complexity.OrganizationPlanMilestone.SourceOfTruth == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.SourceOfTruth(childComplexity), true

	case "OrganizationPlanMilestone.statusDetails":
		if e.complexity.OrganizationPlanMilestone.StatusDetails == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.StatusDetails(childComplexity), true

	case "OrganizationPlanMilestone.updatedAt":
		if e.complexity.OrganizationPlanMilestone.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestone.UpdatedAt(childComplexity), true

	case "OrganizationPlanMilestoneItem.status":
		if e.complexity.OrganizationPlanMilestoneItem.Status == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestoneItem.Status(childComplexity), true

	case "OrganizationPlanMilestoneItem.text":
		if e.complexity.OrganizationPlanMilestoneItem.Text == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestoneItem.Text(childComplexity), true

	case "OrganizationPlanMilestoneItem.uuid":
		if e.complexity.OrganizationPlanMilestoneItem.UUID == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestoneItem.UUID(childComplexity), true

	case "OrganizationPlanMilestoneItem.updatedAt":
		if e.complexity.OrganizationPlanMilestoneItem.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestoneItem.UpdatedAt(childComplexity), true

	case "OrganizationPlanMilestoneStatusDetails.status":
		if e.complexity.OrganizationPlanMilestoneStatusDetails.Status == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestoneStatusDetails.Status(childComplexity), true

	case "OrganizationPlanMilestoneStatusDetails.text":
		if e.complexity.OrganizationPlanMilestoneStatusDetails.Text == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestoneStatusDetails.Text(childComplexity), true

	case "OrganizationPlanMilestoneStatusDetails.updatedAt":
		if e.complexity.OrganizationPlanMilestoneStatusDetails.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationPlanMilestoneStatusDetails.UpdatedAt(childComplexity), true

	case "OrganizationPlanStatusDetails.status":
		if e.complexity.OrganizationPlanStatusDetails.Status == nil {
			break
		}

		return e.complexity.OrganizationPlanStatusDetails.Status(childComplexity), true

	case "OrganizationPlanStatusDetails.text":
		if e.complexity.OrganizationPlanStatusDetails.Text == nil {
			break
		}

		return e.complexity.OrganizationPlanStatusDetails.Text(childComplexity), true

	case "OrganizationPlanStatusDetails.updatedAt":
		if e.complexity.OrganizationPlanStatusDetails.UpdatedAt == nil {
			break
		}

		return e.complexity.OrganizationPlanStatusDetails.UpdatedAt(childComplexity), true

	case "PageView.appSource":
		if e.complexity.PageView.AppSource == nil {
			break
		}

		return e.complexity.PageView.AppSource(childComplexity), true

	case "PageView.application":
		if e.complexity.PageView.Application == nil {
			break
		}

		return e.complexity.PageView.Application(childComplexity), true

	case "PageView.endedAt":
		if e.complexity.PageView.EndedAt == nil {
			break
		}

		return e.complexity.PageView.EndedAt(childComplexity), true

	case "PageView.engagedTime":
		if e.complexity.PageView.EngagedTime == nil {
			break
		}

		return e.complexity.PageView.EngagedTime(childComplexity), true

	case "PageView.id":
		if e.complexity.PageView.ID == nil {
			break
		}

		return e.complexity.PageView.ID(childComplexity), true

	case "PageView.orderInSession":
		if e.complexity.PageView.OrderInSession == nil {
			break
		}

		return e.complexity.PageView.OrderInSession(childComplexity), true

	case "PageView.pageTitle":
		if e.complexity.PageView.PageTitle == nil {
			break
		}

		return e.complexity.PageView.PageTitle(childComplexity), true

	case "PageView.pageUrl":
		if e.complexity.PageView.PageURL == nil {
			break
		}

		return e.complexity.PageView.PageURL(childComplexity), true

	case "PageView.sessionId":
		if e.complexity.PageView.SessionID == nil {
			break
		}

		return e.complexity.PageView.SessionID(childComplexity), true

	case "PageView.source":
		if e.complexity.PageView.Source == nil {
			break
		}

		return e.complexity.PageView.Source(childComplexity), true

	case "PageView.sourceOfTruth":
		if e.complexity.PageView.SourceOfTruth == nil {
			break
		}

		return e.complexity.PageView.SourceOfTruth(childComplexity), true

	case "PageView.startedAt":
		if e.complexity.PageView.StartedAt == nil {
			break
		}

		return e.complexity.PageView.StartedAt(childComplexity), true

	case "PhoneNumber.appSource":
		if e.complexity.PhoneNumber.AppSource == nil {
			break
		}

		return e.complexity.PhoneNumber.AppSource(childComplexity), true

	case "PhoneNumber.contacts":
		if e.complexity.PhoneNumber.Contacts == nil {
			break
		}

		return e.complexity.PhoneNumber.Contacts(childComplexity), true

	case "PhoneNumber.country":
		if e.complexity.PhoneNumber.Country == nil {
			break
		}

		return e.complexity.PhoneNumber.Country(childComplexity), true

	case "PhoneNumber.createdAt":
		if e.complexity.PhoneNumber.CreatedAt == nil {
			break
		}

		return e.complexity.PhoneNumber.CreatedAt(childComplexity), true

	case "PhoneNumber.e164":
		if e.complexity.PhoneNumber.E164 == nil {
			break
		}

		return e.complexity.PhoneNumber.E164(childComplexity), true

	case "PhoneNumber.id":
		if e.complexity.PhoneNumber.ID == nil {
			break
		}

		return e.complexity.PhoneNumber.ID(childComplexity), true

	case "PhoneNumber.label":
		if e.complexity.PhoneNumber.Label == nil {
			break
		}

		return e.complexity.PhoneNumber.Label(childComplexity), true

	case "PhoneNumber.organizations":
		if e.complexity.PhoneNumber.Organizations == nil {
			break
		}

		return e.complexity.PhoneNumber.Organizations(childComplexity), true

	case "PhoneNumber.primary":
		if e.complexity.PhoneNumber.Primary == nil {
			break
		}

		return e.complexity.PhoneNumber.Primary(childComplexity), true

	case "PhoneNumber.rawPhoneNumber":
		if e.complexity.PhoneNumber.RawPhoneNumber == nil {
			break
		}

		return e.complexity.PhoneNumber.RawPhoneNumber(childComplexity), true

	case "PhoneNumber.source":
		if e.complexity.PhoneNumber.Source == nil {
			break
		}

		return e.complexity.PhoneNumber.Source(childComplexity), true

	case "PhoneNumber.updatedAt":
		if e.complexity.PhoneNumber.UpdatedAt == nil {
			break
		}

		return e.complexity.PhoneNumber.UpdatedAt(childComplexity), true

	case "PhoneNumber.users":
		if e.complexity.PhoneNumber.Users == nil {
			break
		}

		return e.complexity.PhoneNumber.Users(childComplexity), true

	case "PhoneNumber.validated":
		if e.complexity.PhoneNumber.Validated == nil {
			break
		}

		return e.complexity.PhoneNumber.Validated(childComplexity), true

	case "PhoneNumberParticipant.phoneNumberParticipant":
		if e.complexity.PhoneNumberParticipant.PhoneNumberParticipant == nil {
			break
		}

		return e.complexity.PhoneNumberParticipant.PhoneNumberParticipant(childComplexity), true

	case "PhoneNumberParticipant.type":
		if e.complexity.PhoneNumberParticipant.Type == nil {
			break
		}

		return e.complexity.PhoneNumberParticipant.Type(childComplexity), true

	case "Player.appSource":
		if e.complexity.Player.AppSource == nil {
			break
		}

		return e.complexity.Player.AppSource(childComplexity), true

	case "Player.authId":
		if e.complexity.Player.AuthID == nil {
			break
		}

		return e.complexity.Player.AuthID(childComplexity), true

	case "Player.createdAt":
		if e.complexity.Player.CreatedAt == nil {
			break
		}

		return e.complexity.Player.CreatedAt(childComplexity), true

	case "Player.id":
		if e.complexity.Player.ID == nil {
			break
		}

		return e.complexity.Player.ID(childComplexity), true

	case "Player.identityId":
		if e.complexity.Player.IdentityID == nil {
			break
		}

		return e.complexity.Player.IdentityID(childComplexity), true

	case "Player.provider":
		if e.complexity.Player.Provider == nil {
			break
		}

		return e.complexity.Player.Provider(childComplexity), true

	case "Player.source":
		if e.complexity.Player.Source == nil {
			break
		}

		return e.complexity.Player.Source(childComplexity), true

	case "Player.sourceOfTruth":
		if e.complexity.Player.SourceOfTruth == nil {
			break
		}

		return e.complexity.Player.SourceOfTruth(childComplexity), true

	case "Player.updatedAt":
		if e.complexity.Player.UpdatedAt == nil {
			break
		}

		return e.complexity.Player.UpdatedAt(childComplexity), true

	case "Player.users":
		if e.complexity.Player.Users == nil {
			break
		}

		return e.complexity.Player.Users(childComplexity), true

	case "PlayerUser.default":
		if e.complexity.PlayerUser.Default == nil {
			break
		}

		return e.complexity.PlayerUser.Default(childComplexity), true

	case "PlayerUser.tenant":
		if e.complexity.PlayerUser.Tenant == nil {
			break
		}

		return e.complexity.PlayerUser.Tenant(childComplexity), true

	case "PlayerUser.user":
		if e.complexity.PlayerUser.User == nil {
			break
		}

		return e.complexity.PlayerUser.User(childComplexity), true

	case "Query.analysis":
		if e.complexity.Query.Analysis == nil {
			break
		}

		args, err := ec.field_Query_analysis_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Analysis(childComplexity, args["id"].(string)), true

	case "Query.attachment":
		if e.complexity.Query.Attachment == nil {
			break
		}

		args, err := ec.field_Query_attachment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Attachment(childComplexity, args["id"].(string)), true

	case "Query.bankAccounts":
		if e.complexity.Query.BankAccounts == nil {
			break
		}

		return e.complexity.Query.BankAccounts(childComplexity), true

	case "Query.billableInfo":
		if e.complexity.Query.BillableInfo == nil {
			break
		}

		return e.complexity.Query.BillableInfo(childComplexity), true

	case "Query.contact":
		if e.complexity.Query.Contact == nil {
			break
		}

		args, err := ec.field_Query_contact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contact(childComplexity, args["id"].(string)), true

	case "Query.contact_ByEmail":
		if e.complexity.Query.ContactByEmail == nil {
			break
		}

		args, err := ec.field_Query_contact_ByEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactByEmail(childComplexity, args["email"].(string)), true

	case "Query.contact_ByPhone":
		if e.complexity.Query.ContactByPhone == nil {
			break
		}

		args, err := ec.field_Query_contact_ByPhone_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContactByPhone(childComplexity, args["e164"].(string)), true

	case "Query.contacts":
		if e.complexity.Query.Contacts == nil {
			break
		}

		args, err := ec.field_Query_contacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contacts(childComplexity, args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].([]*model.SortBy)), true

	case "Query.contract":
		if e.complexity.Query.Contract == nil {
			break
		}

		args, err := ec.field_Query_contract_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Contract(childComplexity, args["id"].(string)), true

	case "Query.dashboard_ARRBreakdown":
		if e.complexity.Query.DashboardARRBreakdown == nil {
			break
		}

		args, err := ec.field_Query_dashboard_ARRBreakdown_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardARRBreakdown(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboard_CustomerMap":
		if e.complexity.Query.DashboardCustomerMap == nil {
			break
		}

		return e.complexity.Query.DashboardCustomerMap(childComplexity), true

	case "Query.dashboard_GrossRevenueRetention":
		if e.complexity.Query.DashboardGrossRevenueRetention == nil {
			break
		}

		args, err := ec.field_Query_dashboard_GrossRevenueRetention_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardGrossRevenueRetention(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboard_MRRPerCustomer":
		if e.complexity.Query.DashboardMRRPerCustomer == nil {
			break
		}

		args, err := ec.field_Query_dashboard_MRRPerCustomer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardMRRPerCustomer(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboard_NewCustomers":
		if e.complexity.Query.DashboardNewCustomers == nil {
			break
		}

		args, err := ec.field_Query_dashboard_NewCustomers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardNewCustomers(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboard_OnboardingCompletion":
		if e.complexity.Query.DashboardOnboardingCompletion == nil {
			break
		}

		args, err := ec.field_Query_dashboard_OnboardingCompletion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardOnboardingCompletion(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboard_RetentionRate":
		if e.complexity.Query.DashboardRetentionRate == nil {
			break
		}

		args, err := ec.field_Query_dashboard_RetentionRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardRetentionRate(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboard_RevenueAtRisk":
		if e.complexity.Query.DashboardRevenueAtRisk == nil {
			break
		}

		args, err := ec.field_Query_dashboard_RevenueAtRisk_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardRevenueAtRisk(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboard_TimeToOnboard":
		if e.complexity.Query.DashboardTimeToOnboard == nil {
			break
		}

		args, err := ec.field_Query_dashboard_TimeToOnboard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardTimeToOnboard(childComplexity, args["period"].(*model.DashboardPeriodInput)), true

	case "Query.dashboardView_Organizations":
		if e.complexity.Query.DashboardViewOrganizations == nil {
			break
		}

		args, err := ec.field_Query_dashboardView_Organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardViewOrganizations(childComplexity, args["pagination"].(model.Pagination), args["where"].(*model.Filter), args["sort"].(*model.SortBy)), true

	case "Query.dashboardView_Renewals":
		if e.complexity.Query.DashboardViewRenewals == nil {
			break
		}

		args, err := ec.field_Query_dashboardView_Renewals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DashboardViewRenewals(childComplexity, args["pagination"].(model.Pagination), args["where"].(*model.Filter), args["sort"].(*model.SortBy)), true

	case "Query.email":
		if e.complexity.Query.Email == nil {
			break
		}

		args, err := ec.field_Query_email_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Email(childComplexity, args["id"].(string)), true

	case "Query.entityTemplates":
		if e.complexity.Query.EntityTemplates == nil {
			break
		}

		args, err := ec.field_Query_entityTemplates_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EntityTemplates(childComplexity, args["extends"].(*model.EntityTemplateExtension)), true

	case "Query.externalMeetings":
		if e.complexity.Query.ExternalMeetings == nil {
			break
		}

		args, err := ec.field_Query_externalMeetings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ExternalMeetings(childComplexity, args["externalSystemId"].(string), args["externalId"].(*string), args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].([]*model.SortBy)), true

	case "Query.externalSystemInstances":
		if e.complexity.Query.ExternalSystemInstances == nil {
			break
		}

		return e.complexity.Query.ExternalSystemInstances(childComplexity), true

	case "Query.gcli_Search":
		if e.complexity.Query.GcliSearch == nil {
			break
		}

		args, err := ec.field_Query_gcli_Search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GcliSearch(childComplexity, args["keyword"].(string), args["limit"].(*int)), true

	case "Query.global_Cache":
		if e.complexity.Query.GlobalCache == nil {
			break
		}

		return e.complexity.Query.GlobalCache(childComplexity), true

	case "Query.interactionEvent":
		if e.complexity.Query.InteractionEvent == nil {
			break
		}

		args, err := ec.field_Query_interactionEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InteractionEvent(childComplexity, args["id"].(string)), true

	case "Query.interactionEvent_ByEventIdentifier":
		if e.complexity.Query.InteractionEventByEventIdentifier == nil {
			break
		}

		args, err := ec.field_Query_interactionEvent_ByEventIdentifier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InteractionEventByEventIdentifier(childComplexity, args["eventIdentifier"].(string)), true

	case "Query.interactionSession":
		if e.complexity.Query.InteractionSession == nil {
			break
		}

		args, err := ec.field_Query_interactionSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InteractionSession(childComplexity, args["id"].(string)), true

	case "Query.interactionSession_BySessionIdentifier":
		if e.complexity.Query.InteractionSessionBySessionIdentifier == nil {
			break
		}

		args, err := ec.field_Query_interactionSession_BySessionIdentifier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InteractionSessionBySessionIdentifier(childComplexity, args["sessionIdentifier"].(string)), true

	case "Query.invoice":
		if e.complexity.Query.Invoice == nil {
			break
		}

		args, err := ec.field_Query_invoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invoice(childComplexity, args["id"].(string)), true

	case "Query.invoices":
		if e.complexity.Query.Invoices == nil {
			break
		}

		args, err := ec.field_Query_invoices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invoices(childComplexity, args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].([]*model.SortBy), args["organizationId"].(*string)), true

	case "Query.invoicingCycle":
		if e.complexity.Query.InvoicingCycle == nil {
			break
		}

		return e.complexity.Query.InvoicingCycle(childComplexity), true

	case "Query.issue":
		if e.complexity.Query.Issue == nil {
			break
		}

		args, err := ec.field_Query_issue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Issue(childComplexity, args["id"].(string)), true

	case "Query.logEntry":
		if e.complexity.Query.LogEntry == nil {
			break
		}

		args, err := ec.field_Query_logEntry_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LogEntry(childComplexity, args["id"].(string)), true

	case "Query.masterPlan":
		if e.complexity.Query.MasterPlan == nil {
			break
		}

		args, err := ec.field_Query_masterPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MasterPlan(childComplexity, args["id"].(string)), true

	case "Query.masterPlans":
		if e.complexity.Query.MasterPlans == nil {
			break
		}

		args, err := ec.field_Query_masterPlans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MasterPlans(childComplexity, args["retired"].(*bool)), true

	case "Query.meeting":
		if e.complexity.Query.Meeting == nil {
			break
		}

		args, err := ec.field_Query_meeting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Meeting(childComplexity, args["id"].(string)), true

	case "Query.opportunity":
		if e.complexity.Query.Opportunity == nil {
			break
		}

		args, err := ec.field_Query_opportunity_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Opportunity(childComplexity, args["id"].(string)), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["id"].(string)), true

	case "Query.organization_ByCustomerOsId":
		if e.complexity.Query.OrganizationByCustomerOsID == nil {
			break
		}

		args, err := ec.field_Query_organization_ByCustomerOsId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationByCustomerOsID(childComplexity, args["customerOsId"].(string)), true

	case "Query.organization_DistinctOwners":
		if e.complexity.Query.OrganizationDistinctOwners == nil {
			break
		}

		return e.complexity.Query.OrganizationDistinctOwners(childComplexity), true

	case "Query.organizationPlan":
		if e.complexity.Query.OrganizationPlan == nil {
			break
		}

		args, err := ec.field_Query_organizationPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationPlan(childComplexity, args["id"].(string)), true

	case "Query.organizationPlans":
		if e.complexity.Query.OrganizationPlans == nil {
			break
		}

		args, err := ec.field_Query_organizationPlans_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationPlans(childComplexity, args["retired"].(*bool)), true

	case "Query.organizationPlansForOrganization":
		if e.complexity.Query.OrganizationPlansForOrganization == nil {
			break
		}

		args, err := ec.field_Query_organizationPlansForOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OrganizationPlansForOrganization(childComplexity, args["organizationId"].(string)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		args, err := ec.field_Query_organizations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organizations(childComplexity, args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].([]*model.SortBy)), true

	case "Query.phoneNumber":
		if e.complexity.Query.PhoneNumber == nil {
			break
		}

		args, err := ec.field_Query_phoneNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PhoneNumber(childComplexity, args["id"].(string)), true

	case "Query.player_ByAuthIdProvider":
		if e.complexity.Query.PlayerByAuthIDProvider == nil {
			break
		}

		args, err := ec.field_Query_player_ByAuthIdProvider_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PlayerByAuthIDProvider(childComplexity, args["authId"].(string), args["provider"].(string)), true

	case "Query.reminder":
		if e.complexity.Query.Reminder == nil {
			break
		}

		args, err := ec.field_Query_reminder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Reminder(childComplexity, args["id"].(string)), true

	case "Query.remindersForOrganization":
		if e.complexity.Query.RemindersForOrganization == nil {
			break
		}

		args, err := ec.field_Query_remindersForOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RemindersForOrganization(childComplexity, args["organizationId"].(string), args["dismissed"].(*bool)), true

	case "Query.serviceLineItem":
		if e.complexity.Query.ServiceLineItem == nil {
			break
		}

		args, err := ec.field_Query_serviceLineItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceLineItem(childComplexity, args["id"].(string)), true

	case "Query.slack_Channels":
		if e.complexity.Query.SlackChannels == nil {
			break
		}

		args, err := ec.field_Query_slack_Channels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SlackChannels(childComplexity, args["pagination"].(*model.Pagination)), true

	case "Query.tableViewDefs":
		if e.complexity.Query.TableViewDefs == nil {
			break
		}

		args, err := ec.field_Query_tableViewDefs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TableViewDefs(childComplexity, args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].(*model.SortBy)), true

	case "Query.tags":
		if e.complexity.Query.Tags == nil {
			break
		}

		return e.complexity.Query.Tags(childComplexity), true

	case "Query.tenant":
		if e.complexity.Query.Tenant == nil {
			break
		}

		return e.complexity.Query.Tenant(childComplexity), true

	case "Query.tenantBillingProfile":
		if e.complexity.Query.TenantBillingProfile == nil {
			break
		}

		args, err := ec.field_Query_tenantBillingProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TenantBillingProfile(childComplexity, args["id"].(string)), true

	case "Query.tenantBillingProfiles":
		if e.complexity.Query.TenantBillingProfiles == nil {
			break
		}

		return e.complexity.Query.TenantBillingProfiles(childComplexity), true

	case "Query.tenant_ByEmail":
		if e.complexity.Query.TenantByEmail == nil {
			break
		}

		args, err := ec.field_Query_tenant_ByEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TenantByEmail(childComplexity, args["email"].(string)), true

	case "Query.tenant_ByWorkspace":
		if e.complexity.Query.TenantByWorkspace == nil {
			break
		}

		args, err := ec.field_Query_tenant_ByWorkspace_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TenantByWorkspace(childComplexity, args["workspace"].(model.WorkspaceInput)), true

	case "Query.tenantSettings":
		if e.complexity.Query.TenantSettings == nil {
			break
		}

		return e.complexity.Query.TenantSettings(childComplexity), true

	case "Query.timelineEvents":
		if e.complexity.Query.TimelineEvents == nil {
			break
		}

		args, err := ec.field_Query_timelineEvents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TimelineEvents(childComplexity, args["ids"].([]string)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true

	case "Query.user_ByEmail":
		if e.complexity.Query.UserByEmail == nil {
			break
		}

		args, err := ec.field_Query_user_ByEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserByEmail(childComplexity, args["email"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["pagination"].(*model.Pagination), args["where"].(*model.Filter), args["sort"].([]*model.SortBy)), true

	case "Reminder.content":
		if e.complexity.Reminder.Content == nil {
			break
		}

		return e.complexity.Reminder.Content(childComplexity), true

	case "Reminder.dismissed":
		if e.complexity.Reminder.Dismissed == nil {
			break
		}

		return e.complexity.Reminder.Dismissed(childComplexity), true

	case "Reminder.dueDate":
		if e.complexity.Reminder.DueDate == nil {
			break
		}

		return e.complexity.Reminder.DueDate(childComplexity), true

	case "Reminder.metadata":
		if e.complexity.Reminder.Metadata == nil {
			break
		}

		return e.complexity.Reminder.Metadata(childComplexity), true

	case "Reminder.owner":
		if e.complexity.Reminder.Owner == nil {
			break
		}

		return e.complexity.Reminder.Owner(childComplexity), true

	case "RenewalRecord.contract":
		if e.complexity.RenewalRecord.Contract == nil {
			break
		}

		return e.complexity.RenewalRecord.Contract(childComplexity), true

	case "RenewalRecord.opportunity":
		if e.complexity.RenewalRecord.Opportunity == nil {
			break
		}

		return e.complexity.RenewalRecord.Opportunity(childComplexity), true

	case "RenewalRecord.organization":
		if e.complexity.RenewalRecord.Organization == nil {
			break
		}

		return e.complexity.RenewalRecord.Organization(childComplexity), true

	case "RenewalSummary.arrForecast":
		if e.complexity.RenewalSummary.ArrForecast == nil {
			break
		}

		return e.complexity.RenewalSummary.ArrForecast(childComplexity), true

	case "RenewalSummary.maxArrForecast":
		if e.complexity.RenewalSummary.MaxArrForecast == nil {
			break
		}

		return e.complexity.RenewalSummary.MaxArrForecast(childComplexity), true

	case "RenewalSummary.nextRenewalDate":
		if e.complexity.RenewalSummary.NextRenewalDate == nil {
			break
		}

		return e.complexity.RenewalSummary.NextRenewalDate(childComplexity), true

	case "RenewalSummary.renewalLikelihood":
		if e.complexity.RenewalSummary.RenewalLikelihood == nil {
			break
		}

		return e.complexity.RenewalSummary.RenewalLikelihood(childComplexity), true

	case "RenewalsPage.content":
		if e.complexity.RenewalsPage.Content == nil {
			break
		}

		return e.complexity.RenewalsPage.Content(childComplexity), true

	case "RenewalsPage.totalAvailable":
		if e.complexity.RenewalsPage.TotalAvailable == nil {
			break
		}

		return e.complexity.RenewalsPage.TotalAvailable(childComplexity), true

	case "RenewalsPage.totalElements":
		if e.complexity.RenewalsPage.TotalElements == nil {
			break
		}

		return e.complexity.RenewalsPage.TotalElements(childComplexity), true

	case "RenewalsPage.totalPages":
		if e.complexity.RenewalsPage.TotalPages == nil {
			break
		}

		return e.complexity.RenewalsPage.TotalPages(childComplexity), true

	case "Result.result":
		if e.complexity.Result.Result == nil {
			break
		}

		return e.complexity.Result.Result(childComplexity), true

	case "ServiceLineItem.billingCycle":
		if e.complexity.ServiceLineItem.BillingCycle == nil {
			break
		}

		return e.complexity.ServiceLineItem.BillingCycle(childComplexity), true

	case "ServiceLineItem.comments":
		if e.complexity.ServiceLineItem.Comments == nil {
			break
		}

		return e.complexity.ServiceLineItem.Comments(childComplexity), true

	case "ServiceLineItem.createdBy":
		if e.complexity.ServiceLineItem.CreatedBy == nil {
			break
		}

		return e.complexity.ServiceLineItem.CreatedBy(childComplexity), true

	case "ServiceLineItem.description":
		if e.complexity.ServiceLineItem.Description == nil {
			break
		}

		return e.complexity.ServiceLineItem.Description(childComplexity), true

	case "ServiceLineItem.externalLinks":
		if e.complexity.ServiceLineItem.ExternalLinks == nil {
			break
		}

		return e.complexity.ServiceLineItem.ExternalLinks(childComplexity), true

	case "ServiceLineItem.metadata":
		if e.complexity.ServiceLineItem.Metadata == nil {
			break
		}

		return e.complexity.ServiceLineItem.Metadata(childComplexity), true

	case "ServiceLineItem.parentId":
		if e.complexity.ServiceLineItem.ParentID == nil {
			break
		}

		return e.complexity.ServiceLineItem.ParentID(childComplexity), true

	case "ServiceLineItem.price":
		if e.complexity.ServiceLineItem.Price == nil {
			break
		}

		return e.complexity.ServiceLineItem.Price(childComplexity), true

	case "ServiceLineItem.quantity":
		if e.complexity.ServiceLineItem.Quantity == nil {
			break
		}

		return e.complexity.ServiceLineItem.Quantity(childComplexity), true

	case "ServiceLineItem.serviceEnded":
		if e.complexity.ServiceLineItem.ServiceEnded == nil {
			break
		}

		return e.complexity.ServiceLineItem.ServiceEnded(childComplexity), true

	case "ServiceLineItem.serviceStarted":
		if e.complexity.ServiceLineItem.ServiceStarted == nil {
			break
		}

		return e.complexity.ServiceLineItem.ServiceStarted(childComplexity), true

	case "ServiceLineItem.tax":
		if e.complexity.ServiceLineItem.Tax == nil {
			break
		}

		return e.complexity.ServiceLineItem.Tax(childComplexity), true

	case "SlackChannel.channelId":
		if e.complexity.SlackChannel.ChannelID == nil {
			break
		}

		return e.complexity.SlackChannel.ChannelID(childComplexity), true

	case "SlackChannel.channelName":
		if e.complexity.SlackChannel.ChannelName == nil {
			break
		}

		return e.complexity.SlackChannel.ChannelName(childComplexity), true

	case "SlackChannel.metadata":
		if e.complexity.SlackChannel.Metadata == nil {
			break
		}

		return e.complexity.SlackChannel.Metadata(childComplexity), true

	case "SlackChannel.organization":
		if e.complexity.SlackChannel.Organization == nil {
			break
		}

		return e.complexity.SlackChannel.Organization(childComplexity), true

	case "SlackChannelPage.content":
		if e.complexity.SlackChannelPage.Content == nil {
			break
		}

		return e.complexity.SlackChannelPage.Content(childComplexity), true

	case "SlackChannelPage.totalAvailable":
		if e.complexity.SlackChannelPage.TotalAvailable == nil {
			break
		}

		return e.complexity.SlackChannelPage.TotalAvailable(childComplexity), true

	case "SlackChannelPage.totalElements":
		if e.complexity.SlackChannelPage.TotalElements == nil {
			break
		}

		return e.complexity.SlackChannelPage.TotalElements(childComplexity), true

	case "SlackChannelPage.totalPages":
		if e.complexity.SlackChannelPage.TotalPages == nil {
			break
		}

		return e.complexity.SlackChannelPage.TotalPages(childComplexity), true

	case "Social.appSource":
		if e.complexity.Social.AppSource == nil {
			break
		}

		return e.complexity.Social.AppSource(childComplexity), true

	case "Social.createdAt":
		if e.complexity.Social.CreatedAt == nil {
			break
		}

		return e.complexity.Social.CreatedAt(childComplexity), true

	case "Social.id":
		if e.complexity.Social.ID == nil {
			break
		}

		return e.complexity.Social.ID(childComplexity), true

	case "Social.platformName":
		if e.complexity.Social.PlatformName == nil {
			break
		}

		return e.complexity.Social.PlatformName(childComplexity), true

	case "Social.source":
		if e.complexity.Social.Source == nil {
			break
		}

		return e.complexity.Social.Source(childComplexity), true

	case "Social.sourceOfTruth":
		if e.complexity.Social.SourceOfTruth == nil {
			break
		}

		return e.complexity.Social.SourceOfTruth(childComplexity), true

	case "Social.url":
		if e.complexity.Social.URL == nil {
			break
		}

		return e.complexity.Social.URL(childComplexity), true

	case "Social.updatedAt":
		if e.complexity.Social.UpdatedAt == nil {
			break
		}

		return e.complexity.Social.UpdatedAt(childComplexity), true

	case "State.code":
		if e.complexity.State.Code == nil {
			break
		}

		return e.complexity.State.Code(childComplexity), true

	case "State.country":
		if e.complexity.State.Country == nil {
			break
		}

		return e.complexity.State.Country(childComplexity), true

	case "State.id":
		if e.complexity.State.ID == nil {
			break
		}

		return e.complexity.State.ID(childComplexity), true

	case "State.name":
		if e.complexity.State.Name == nil {
			break
		}

		return e.complexity.State.Name(childComplexity), true

	case "SuggestedMergeOrganization.confidence":
		if e.complexity.SuggestedMergeOrganization.Confidence == nil {
			break
		}

		return e.complexity.SuggestedMergeOrganization.Confidence(childComplexity), true

	case "SuggestedMergeOrganization.organization":
		if e.complexity.SuggestedMergeOrganization.Organization == nil {
			break
		}

		return e.complexity.SuggestedMergeOrganization.Organization(childComplexity), true

	case "SuggestedMergeOrganization.suggestedAt":
		if e.complexity.SuggestedMergeOrganization.SuggestedAt == nil {
			break
		}

		return e.complexity.SuggestedMergeOrganization.SuggestedAt(childComplexity), true

	case "SuggestedMergeOrganization.suggestedBy":
		if e.complexity.SuggestedMergeOrganization.SuggestedBy == nil {
			break
		}

		return e.complexity.SuggestedMergeOrganization.SuggestedBy(childComplexity), true

	case "TableViewDef.columns":
		if e.complexity.TableViewDef.Columns == nil {
			break
		}

		return e.complexity.TableViewDef.Columns(childComplexity), true

	case "TableViewDef.createdAt":
		if e.complexity.TableViewDef.CreatedAt == nil {
			break
		}

		return e.complexity.TableViewDef.CreatedAt(childComplexity), true

	case "TableViewDef.createdBy":
		if e.complexity.TableViewDef.CreatedBy == nil {
			break
		}

		return e.complexity.TableViewDef.CreatedBy(childComplexity), true

	case "TableViewDef.filters":
		if e.complexity.TableViewDef.Filters == nil {
			break
		}

		return e.complexity.TableViewDef.Filters(childComplexity), true

	case "TableViewDef.id":
		if e.complexity.TableViewDef.ID == nil {
			break
		}

		return e.complexity.TableViewDef.ID(childComplexity), true

	case "TableViewDef.icon":
		if e.complexity.TableViewDef.Icon == nil {
			break
		}

		return e.complexity.TableViewDef.Icon(childComplexity), true

	case "TableViewDef.name":
		if e.complexity.TableViewDef.Name == nil {
			break
		}

		return e.complexity.TableViewDef.Name(childComplexity), true

	case "TableViewDef.order":
		if e.complexity.TableViewDef.Order == nil {
			break
		}

		return e.complexity.TableViewDef.Order(childComplexity), true

	case "TableViewDef.sorting":
		if e.complexity.TableViewDef.Sorting == nil {
			break
		}

		return e.complexity.TableViewDef.Sorting(childComplexity), true

	case "TableViewDef.type":
		if e.complexity.TableViewDef.Type == nil {
			break
		}

		return e.complexity.TableViewDef.Type(childComplexity), true

	case "TableViewDef.updatedAt":
		if e.complexity.TableViewDef.UpdatedAt == nil {
			break
		}

		return e.complexity.TableViewDef.UpdatedAt(childComplexity), true

	case "TableViewDefPage.content":
		if e.complexity.TableViewDefPage.Content == nil {
			break
		}

		return e.complexity.TableViewDefPage.Content(childComplexity), true

	case "TableViewDefPage.totalAvailable":
		if e.complexity.TableViewDefPage.TotalAvailable == nil {
			break
		}

		return e.complexity.TableViewDefPage.TotalAvailable(childComplexity), true

	case "TableViewDefPage.totalElements":
		if e.complexity.TableViewDefPage.TotalElements == nil {
			break
		}

		return e.complexity.TableViewDefPage.TotalElements(childComplexity), true

	case "TableViewDefPage.totalPages":
		if e.complexity.TableViewDefPage.TotalPages == nil {
			break
		}

		return e.complexity.TableViewDefPage.TotalPages(childComplexity), true

	case "Tag.appSource":
		if e.complexity.Tag.AppSource == nil {
			break
		}

		return e.complexity.Tag.AppSource(childComplexity), true

	case "Tag.createdAt":
		if e.complexity.Tag.CreatedAt == nil {
			break
		}

		return e.complexity.Tag.CreatedAt(childComplexity), true

	case "Tag.id":
		if e.complexity.Tag.ID == nil {
			break
		}

		return e.complexity.Tag.ID(childComplexity), true

	case "Tag.name":
		if e.complexity.Tag.Name == nil {
			break
		}

		return e.complexity.Tag.Name(childComplexity), true

	case "Tag.source":
		if e.complexity.Tag.Source == nil {
			break
		}

		return e.complexity.Tag.Source(childComplexity), true

	case "Tag.updatedAt":
		if e.complexity.Tag.UpdatedAt == nil {
			break
		}

		return e.complexity.Tag.UpdatedAt(childComplexity), true

	case "Tax.salesTax":
		if e.complexity.Tax.SalesTax == nil {
			break
		}

		return e.complexity.Tax.SalesTax(childComplexity), true

	case "Tax.taxRate":
		if e.complexity.Tax.TaxRate == nil {
			break
		}

		return e.complexity.Tax.TaxRate(childComplexity), true

	case "Tax.vat":
		if e.complexity.Tax.Vat == nil {
			break
		}

		return e.complexity.Tax.Vat(childComplexity), true

	case "TenantBillableInfo.greylistedContacts":
		if e.complexity.TenantBillableInfo.GreylistedContacts == nil {
			break
		}

		return e.complexity.TenantBillableInfo.GreylistedContacts(childComplexity), true

	case "TenantBillableInfo.greylistedOrganizations":
		if e.complexity.TenantBillableInfo.GreylistedOrganizations == nil {
			break
		}

		return e.complexity.TenantBillableInfo.GreylistedOrganizations(childComplexity), true

	case "TenantBillableInfo.whitelistedContacts":
		if e.complexity.TenantBillableInfo.WhitelistedContacts == nil {
			break
		}

		return e.complexity.TenantBillableInfo.WhitelistedContacts(childComplexity), true

	case "TenantBillableInfo.whitelistedOrganizations":
		if e.complexity.TenantBillableInfo.WhitelistedOrganizations == nil {
			break
		}

		return e.complexity.TenantBillableInfo.WhitelistedOrganizations(childComplexity), true

	case "TenantBillingProfile.addressLine1":
		if e.complexity.TenantBillingProfile.AddressLine1 == nil {
			break
		}

		return e.complexity.TenantBillingProfile.AddressLine1(childComplexity), true

	case "TenantBillingProfile.addressLine2":
		if e.complexity.TenantBillingProfile.AddressLine2 == nil {
			break
		}

		return e.complexity.TenantBillingProfile.AddressLine2(childComplexity), true

	case "TenantBillingProfile.addressLine3":
		if e.complexity.TenantBillingProfile.AddressLine3 == nil {
			break
		}

		return e.complexity.TenantBillingProfile.AddressLine3(childComplexity), true

	case "TenantBillingProfile.appSource":
		if e.complexity.TenantBillingProfile.AppSource == nil {
			break
		}

		return e.complexity.TenantBillingProfile.AppSource(childComplexity), true

	case "TenantBillingProfile.canPayWithBankTransfer":
		if e.complexity.TenantBillingProfile.CanPayWithBankTransfer == nil {
			break
		}

		return e.complexity.TenantBillingProfile.CanPayWithBankTransfer(childComplexity), true

	case "TenantBillingProfile.canPayWithCard":
		if e.complexity.TenantBillingProfile.CanPayWithCard == nil {
			break
		}

		return e.complexity.TenantBillingProfile.CanPayWithCard(childComplexity), true

	case "TenantBillingProfile.canPayWithDirectDebitACH":
		if e.complexity.TenantBillingProfile.CanPayWithDirectDebitAch == nil {
			break
		}

		return e.complexity.TenantBillingProfile.CanPayWithDirectDebitAch(childComplexity), true

	case "TenantBillingProfile.canPayWithDirectDebitBacs":
		if e.complexity.TenantBillingProfile.CanPayWithDirectDebitBacs == nil {
			break
		}

		return e.complexity.TenantBillingProfile.CanPayWithDirectDebitBacs(childComplexity), true

	case "TenantBillingProfile.canPayWithDirectDebitSEPA":
		if e.complexity.TenantBillingProfile.CanPayWithDirectDebitSepa == nil {
			break
		}

		return e.complexity.TenantBillingProfile.CanPayWithDirectDebitSepa(childComplexity), true

	case "TenantBillingProfile.canPayWithPigeon":
		if e.complexity.TenantBillingProfile.CanPayWithPigeon == nil {
			break
		}

		return e.complexity.TenantBillingProfile.CanPayWithPigeon(childComplexity), true

	case "TenantBillingProfile.country":
		if e.complexity.TenantBillingProfile.Country == nil {
			break
		}

		return e.complexity.TenantBillingProfile.Country(childComplexity), true

	case "TenantBillingProfile.createdAt":
		if e.complexity.TenantBillingProfile.CreatedAt == nil {
			break
		}

		return e.complexity.TenantBillingProfile.CreatedAt(childComplexity), true

	case "TenantBillingProfile.domesticPaymentsBankInfo":
		if e.complexity.TenantBillingProfile.DomesticPaymentsBankInfo == nil {
			break
		}

		return e.complexity.TenantBillingProfile.DomesticPaymentsBankInfo(childComplexity), true

	case "TenantBillingProfile.email":
		if e.complexity.TenantBillingProfile.Email == nil {
			break
		}

		return e.complexity.TenantBillingProfile.Email(childComplexity), true

	case "TenantBillingProfile.id":
		if e.complexity.TenantBillingProfile.ID == nil {
			break
		}

		return e.complexity.TenantBillingProfile.ID(childComplexity), true

	case "TenantBillingProfile.internationalPaymentsBankInfo":
		if e.complexity.TenantBillingProfile.InternationalPaymentsBankInfo == nil {
			break
		}

		return e.complexity.TenantBillingProfile.InternationalPaymentsBankInfo(childComplexity), true

	case "TenantBillingProfile.legalName":
		if e.complexity.TenantBillingProfile.LegalName == nil {
			break
		}

		return e.complexity.TenantBillingProfile.LegalName(childComplexity), true

	case "TenantBillingProfile.locality":
		if e.complexity.TenantBillingProfile.Locality == nil {
			break
		}

		return e.complexity.TenantBillingProfile.Locality(childComplexity), true

	case "TenantBillingProfile.phone":
		if e.complexity.TenantBillingProfile.Phone == nil {
			break
		}

		return e.complexity.TenantBillingProfile.Phone(childComplexity), true

	case "TenantBillingProfile.sendInvoicesBcc":
		if e.complexity.TenantBillingProfile.SendInvoicesBcc == nil {
			break
		}

		return e.complexity.TenantBillingProfile.SendInvoicesBcc(childComplexity), true

	case "TenantBillingProfile.sendInvoicesFrom":
		if e.complexity.TenantBillingProfile.SendInvoicesFrom == nil {
			break
		}

		return e.complexity.TenantBillingProfile.SendInvoicesFrom(childComplexity), true

	case "TenantBillingProfile.source":
		if e.complexity.TenantBillingProfile.Source == nil {
			break
		}

		return e.complexity.TenantBillingProfile.Source(childComplexity), true

	case "TenantBillingProfile.sourceOfTruth":
		if e.complexity.TenantBillingProfile.SourceOfTruth == nil {
			break
		}

		return e.complexity.TenantBillingProfile.SourceOfTruth(childComplexity), true

	case "TenantBillingProfile.updatedAt":
		if e.complexity.TenantBillingProfile.UpdatedAt == nil {
			break
		}

		return e.complexity.TenantBillingProfile.UpdatedAt(childComplexity), true

	case "TenantBillingProfile.vatNumber":
		if e.complexity.TenantBillingProfile.VatNumber == nil {
			break
		}

		return e.complexity.TenantBillingProfile.VatNumber(childComplexity), true

	case "TenantBillingProfile.zip":
		if e.complexity.TenantBillingProfile.Zip == nil {
			break
		}

		return e.complexity.TenantBillingProfile.Zip(childComplexity), true

	case "TenantSettings.baseCurrency":
		if e.complexity.TenantSettings.BaseCurrency == nil {
			break
		}

		return e.complexity.TenantSettings.BaseCurrency(childComplexity), true

	case "TenantSettings.billingEnabled":
		if e.complexity.TenantSettings.BillingEnabled == nil {
			break
		}

		return e.complexity.TenantSettings.BillingEnabled(childComplexity), true

	case "TenantSettings.logoRepositoryFileId":
		if e.complexity.TenantSettings.LogoRepositoryFileID == nil {
			break
		}

		return e.complexity.TenantSettings.LogoRepositoryFileID(childComplexity), true

	case "TenantSettings.logoUrl":
		if e.complexity.TenantSettings.LogoURL == nil {
			break
		}

		return e.complexity.TenantSettings.LogoURL(childComplexity), true

	case "User.appSource":
		if e.complexity.User.AppSource == nil {
			break
		}

		return e.complexity.User.AppSource(childComplexity), true

	case "User.bot":
		if e.complexity.User.Bot == nil {
			break
		}

		return e.complexity.User.Bot(childComplexity), true

	case "User.calendars":
		if e.complexity.User.Calendars == nil {
			break
		}

		return e.complexity.User.Calendars(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.emails":
		if e.complexity.User.Emails == nil {
			break
		}

		return e.complexity.User.Emails(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.internal":
		if e.complexity.User.Internal == nil {
			break
		}

		return e.complexity.User.Internal(childComplexity), true

	case "User.jobRoles":
		if e.complexity.User.JobRoles == nil {
			break
		}

		return e.complexity.User.JobRoles(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.phoneNumbers":
		if e.complexity.User.PhoneNumbers == nil {
			break
		}

		return e.complexity.User.PhoneNumbers(childComplexity), true

	case "User.player":
		if e.complexity.User.Player == nil {
			break
		}

		return e.complexity.User.Player(childComplexity), true

	case "User.profilePhotoUrl":
		if e.complexity.User.ProfilePhotoURL == nil {
			break
		}

		return e.complexity.User.ProfilePhotoURL(childComplexity), true

	case "User.roles":
		if e.complexity.User.Roles == nil {
			break
		}

		return e.complexity.User.Roles(childComplexity), true

	case "User.source":
		if e.complexity.User.Source == nil {
			break
		}

		return e.complexity.User.Source(childComplexity), true

	case "User.sourceOfTruth":
		if e.complexity.User.SourceOfTruth == nil {
			break
		}

		return e.complexity.User.SourceOfTruth(childComplexity), true

	case "User.timezone":
		if e.complexity.User.Timezone == nil {
			break
		}

		return e.complexity.User.Timezone(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "UserPage.content":
		if e.complexity.UserPage.Content == nil {
			break
		}

		return e.complexity.UserPage.Content(childComplexity), true

	case "UserPage.totalElements":
		if e.complexity.UserPage.TotalElements == nil {
			break
		}

		return e.complexity.UserPage.TotalElements(childComplexity), true

	case "UserPage.totalPages":
		if e.complexity.UserPage.TotalPages == nil {
			break
		}

		return e.complexity.UserPage.TotalPages(childComplexity), true

	case "UserParticipant.type":
		if e.complexity.UserParticipant.Type == nil {
			break
		}

		return e.complexity.UserParticipant.Type(childComplexity), true

	case "UserParticipant.userParticipant":
		if e.complexity.UserParticipant.UserParticipant == nil {
			break
		}

		return e.complexity.UserParticipant.UserParticipant(childComplexity), true

	case "ViewType.createdAt":
		if e.complexity.ViewType.CreatedAt == nil {
			break
		}

		return e.complexity.ViewType.CreatedAt(childComplexity), true

	case "ViewType.createdBy":
		if e.complexity.ViewType.CreatedBy == nil {
			break
		}

		return e.complexity.ViewType.CreatedBy(childComplexity), true

	case "ViewType.id":
		if e.complexity.ViewType.ID == nil {
			break
		}

		return e.complexity.ViewType.ID(childComplexity), true

	case "ViewType.name":
		if e.complexity.ViewType.Name == nil {
			break
		}

		return e.complexity.ViewType.Name(childComplexity), true

	case "ViewType.updatedAt":
		if e.complexity.ViewType.UpdatedAt == nil {
			break
		}

		return e.complexity.ViewType.UpdatedAt(childComplexity), true

	case "Workspace.appSource":
		if e.complexity.Workspace.AppSource == nil {
			break
		}

		return e.complexity.Workspace.AppSource(childComplexity), true

	case "Workspace.createdAt":
		if e.complexity.Workspace.CreatedAt == nil {
			break
		}

		return e.complexity.Workspace.CreatedAt(childComplexity), true

	case "Workspace.id":
		if e.complexity.Workspace.ID == nil {
			break
		}

		return e.complexity.Workspace.ID(childComplexity), true

	case "Workspace.name":
		if e.complexity.Workspace.Name == nil {
			break
		}

		return e.complexity.Workspace.Name(childComplexity), true

	case "Workspace.provider":
		if e.complexity.Workspace.Provider == nil {
			break
		}

		return e.complexity.Workspace.Provider(childComplexity), true

	case "Workspace.source":
		if e.complexity.Workspace.Source == nil {
			break
		}

		return e.complexity.Workspace.Source(childComplexity), true

	case "Workspace.sourceOfTruth":
		if e.complexity.Workspace.SourceOfTruth == nil {
			break
		}

		return e.complexity.Workspace.SourceOfTruth(childComplexity), true

	case "Workspace.updatedAt":
		if e.complexity.Workspace.UpdatedAt == nil {
			break
		}

		return e.complexity.Workspace.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAnalysisDescriptionInput,
		ec.unmarshalInputAnalysisInput,
		ec.unmarshalInputAttachmentInput,
		ec.unmarshalInputBankAccountCreateInput,
		ec.unmarshalInputBankAccountUpdateInput,
		ec.unmarshalInputBillingDetailsInput,
		ec.unmarshalInputBillingProfileInput,
		ec.unmarshalInputBillingProfileLinkEmailInput,
		ec.unmarshalInputBillingProfileLinkLocationInput,
		ec.unmarshalInputBillingProfileUpdateInput,
		ec.unmarshalInputContactInput,
		ec.unmarshalInputContactOrganizationInput,
		ec.unmarshalInputContactTagInput,
		ec.unmarshalInputContactUpdateInput,
		ec.unmarshalInputContractInput,
		ec.unmarshalInputContractUpdateInput,
		ec.unmarshalInputCustomFieldEntityType,
		ec.unmarshalInputCustomFieldInput,
		ec.unmarshalInputCustomFieldTemplateInput,
		ec.unmarshalInputCustomFieldUpdateInput,
		ec.unmarshalInputCustomerContactInput,
		ec.unmarshalInputDashboardPeriodInput,
		ec.unmarshalInputEmailInput,
		ec.unmarshalInputEmailUpdateInput,
		ec.unmarshalInputEntityTemplateInput,
		ec.unmarshalInputExternalSystemReferenceInput,
		ec.unmarshalInputFieldSetInput,
		ec.unmarshalInputFieldSetTemplateInput,
		ec.unmarshalInputFieldSetUpdateInput,
		ec.unmarshalInputFilter,
		ec.unmarshalInputFilterItem,
		ec.unmarshalInputInteractionEventInput,
		ec.unmarshalInputInteractionEventParticipantInput,
		ec.unmarshalInputInteractionSessionInput,
		ec.unmarshalInputInteractionSessionParticipantInput,
		ec.unmarshalInputInvoiceLineInput,
		ec.unmarshalInputInvoiceSimulateInput,
		ec.unmarshalInputInvoiceUpdateInput,
		ec.unmarshalInputInvoicingCycleInput,
		ec.unmarshalInputInvoicingCycleUpdateInput,
		ec.unmarshalInputJobRoleInput,
		ec.unmarshalInputJobRoleUpdateInput,
		ec.unmarshalInputLinkOrganizationsInput,
		ec.unmarshalInputLocationUpdateInput,
		ec.unmarshalInputLogEntryInput,
		ec.unmarshalInputLogEntryUpdateInput,
		ec.unmarshalInputMasterPlanInput,
		ec.unmarshalInputMasterPlanMilestoneInput,
		ec.unmarshalInputMasterPlanMilestoneReorderInput,
		ec.unmarshalInputMasterPlanMilestoneUpdateInput,
		ec.unmarshalInputMasterPlanUpdateInput,
		ec.unmarshalInputMeetingInput,
		ec.unmarshalInputMeetingParticipantInput,
		ec.unmarshalInputMeetingUpdateInput,
		ec.unmarshalInputNoteInput,
		ec.unmarshalInputNoteUpdateInput,
		ec.unmarshalInputOnboardingStatusInput,
		ec.unmarshalInputOpportunityRenewalUpdateInput,
		ec.unmarshalInputOpportunityUpdateInput,
		ec.unmarshalInputOrganizationInput,
		ec.unmarshalInputOrganizationPlanInput,
		ec.unmarshalInputOrganizationPlanMilestoneInput,
		ec.unmarshalInputOrganizationPlanMilestoneItemInput,
		ec.unmarshalInputOrganizationPlanMilestoneReorderInput,
		ec.unmarshalInputOrganizationPlanMilestoneStatusDetailsInput,
		ec.unmarshalInputOrganizationPlanMilestoneUpdateInput,
		ec.unmarshalInputOrganizationPlanStatusDetailsInput,
		ec.unmarshalInputOrganizationPlanUpdateInput,
		ec.unmarshalInputOrganizationUpdateInput,
		ec.unmarshalInputPagination,
		ec.unmarshalInputPhoneNumberInput,
		ec.unmarshalInputPhoneNumberUpdateInput,
		ec.unmarshalInputPlayerInput,
		ec.unmarshalInputPlayerUpdate,
		ec.unmarshalInputReminderInput,
		ec.unmarshalInputReminderUpdateInput,
		ec.unmarshalInputServiceLineItemBulkUpdateInput,
		ec.unmarshalInputServiceLineItemBulkUpdateItem,
		ec.unmarshalInputServiceLineItemCloseInput,
		ec.unmarshalInputServiceLineItemInput,
		ec.unmarshalInputServiceLineItemUpdateInput,
		ec.unmarshalInputSocialInput,
		ec.unmarshalInputSocialUpdateInput,
		ec.unmarshalInputSortBy,
		ec.unmarshalInputTagIdOrNameInput,
		ec.unmarshalInputTagInput,
		ec.unmarshalInputTagUpdateInput,
		ec.unmarshalInputTaxInput,
		ec.unmarshalInputTenantBillingProfileInput,
		ec.unmarshalInputTenantBillingProfileUpdateInput,
		ec.unmarshalInputTenantInput,
		ec.unmarshalInputTenantSettingsInput,
		ec.unmarshalInputTimeRange,
		ec.unmarshalInputUserInput,
		ec.unmarshalInputUserUpdateInput,
		ec.unmarshalInputWorkspaceInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../customer-os-api/graph/schemas/action.graphqls", Input: `type Action {
    id: ID!
    createdAt: Time!
    content: String
    source: DataSource!
    appSource: String!
    createdBy: User
    actionType: ActionType!
    metadata: String
}

enum ActionType {
    CREATED
    RENEWAL_LIKELIHOOD_UPDATED
    RENEWAL_FORECAST_UPDATED
    CONTRACT_STATUS_UPDATED
    SERVICE_LINE_ITEM_PRICE_UPDATED
    SERVICE_LINE_ITEM_QUANTITY_UPDATED
    SERVICE_LINE_ITEM_BILLED_TYPE_UPDATED
    SERVICE_LINE_ITEM_BILLED_TYPE_RECURRING_CREATED
    SERVICE_LINE_ITEM_BILLED_TYPE_ONCE_CREATED
    SERVICE_LINE_ITEM_BILLED_TYPE_USAGE_CREATED
    CONTRACT_RENEWED
    SERVICE_LINE_ITEM_REMOVED
    ONBOARDING_STATUS_CHANGED
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/action_item.graphqls", Input: `type ActionItem {
    id: ID!
    createdAt: Time!

    content: String!

    source: DataSource!
    appSource: String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/analysis.graphqls", Input: `extend type Query {
    analysis(id: ID!): Analysis!
}

extend type Mutation {
    analysis_Create(analysis: AnalysisInput!): Analysis!
}

input AnalysisDescriptionInput {
    interactionEventId: ID
    interactionSessionId: ID
    meetingId: ID
}


input AnalysisInput {
    content: String
    contentType: String
    analysisType: String
    describes: [AnalysisDescriptionInput!]!
    appSource: String!
}

union DescriptionNode = InteractionSession | InteractionEvent | Meeting


type Analysis implements Node {
    id: ID!
    createdAt: Time!

    content: String
    contentType: String
    analysisType: String
    describes: [DescriptionNode!]! @goField(forceResolver: true)
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/attachment.graphqls", Input: `extend type Query {
    attachment(id: ID!): Attachment!
}

extend type Mutation {
    attachment_Create(input: AttachmentInput!): Attachment!
}

type Attachment implements Node {
    id: ID!
    createdAt: Time!
    basePath: String!
    cdnUrl:   String!
    fileName: String!
    mimeType: String!
    size: Int64!

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

input AttachmentInput {
    id: ID
    createdAt: Time
    cdnUrl: String!
    basePath: String!
    fileName: String!
    mimeType: String!
    size: Int64!
    appSource: String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/bank_account.graphqls", Input: `extend type Query {
    bankAccounts: [BankAccount!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    bankAccount_Create(input: BankAccountCreateInput): BankAccount! @hasRole(roles: [ADMIN, USER]) @hasTenant
    bankAccount_Update(input: BankAccountUpdateInput): BankAccount! @hasRole(roles: [ADMIN, USER]) @hasTenant
    bankAccount_Delete(id: ID!): DeleteResponse! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type BankAccount implements MetadataInterface {
    metadata:               Metadata!
    bankName:               String
    currency:               Currency
    bankTransferEnabled:    Boolean!
    allowInternational:     Boolean!
    iban:                   String
    bic:                    String
    sortCode:               String
    accountNumber:          String
    routingNumber:          String
    otherDetails:           String
}

input BankAccountCreateInput {
    currency:               Currency
    bankName:               String
    bankTransferEnabled:    Boolean
    allowInternational:     Boolean
    iban:                   String
    bic:                    String
    sortCode:               String
    accountNumber:          String
    routingNumber:          String
    otherDetails:           String
}

input BankAccountUpdateInput {
    id:                     ID!
    currency:               Currency
    bankName:               String
    bankTransferEnabled:    Boolean
    allowInternational:     Boolean
    iban:                   String
    bic:                    String
    sortCode:               String
    accountNumber:          String
    routingNumber:          String
    otherDetails:           String
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/billing_profile.graphqls", Input: `extend type Mutation {
    billingProfile_Create(input: BillingProfileInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    billingProfile_Update(input: BillingProfileUpdateInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    billingProfile_LinkEmail(input: BillingProfileLinkEmailInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    billingProfile_UnlinkEmail(input: BillingProfileLinkEmailInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    billingProfile_LinkLocation(input: BillingProfileLinkLocationInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    billingProfile_UnlinkLocation(input: BillingProfileLinkLocationInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type BillingProfile implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    legalName:          String!
    taxId:              String!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
}

input BillingProfileInput {
    organizationId: ID!
    legalName: String
    taxId: String
    createdAt: Time
}

input BillingProfileUpdateInput {
    organizationId: ID!
    billingProfileId: ID!
    legalName: String
    taxId: String
    updatedAt: Time
}

input BillingProfileLinkLocationInput {
    organizationId: ID!
    billingProfileId: ID!
    locationId: ID!
}

input BillingProfileLinkEmailInput {
    organizationId: ID!
    billingProfileId: ID!
    emailId: ID!
    primary: Boolean
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/cache.graphqls", Input: `extend type Query {
    global_Cache : GlobalCache!
}

type GlobalCache {
    user: User!
    isOwner: Boolean!
    isGoogleActive: Boolean!
    isGoogleTokenExpired: Boolean!
    gCliCache: [GCliItem!]!
    minARRForecastValue: Float!
    maxARRForecastValue: Float!
    contractsExist: Boolean!

    cdnLogoUrl: String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/calendar.graphqls", Input: `"""
Describes the relationship a Contact has with a Organization.
**A ` + "`" + `return` + "`" + ` object**
"""
type Calendar {
    id: ID!
    calType: CalendarType!
    createdAt: Time!
    updatedAt: Time!

    link: String
    primary: Boolean!

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

enum CalendarType {
    CALCOM,
    GOOGLE,
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/comment.graphqls", Input: `type Comment {
    id: ID!
    content: String
    contentType: String
    createdAt: Time!
    updatedAt: Time!
    createdBy: User @goField(forceResolver: true)
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/contact.graphqls", Input: `extend type Query {
    """
    Fetch a single contact from customerOS by contact ID.
    """
    contact(

        """
        The unique ID associated with the contact in customerOS.
        **Required.**
        """
        id: ID!) :Contact


    """
    Fetch paginated list of contacts
    Possible values for sort:
    - PREFIX
    - FIRST_NAME
    - LAST_NAME
    - NAME
    - DESCRIPTION
    - CREATED_AT
    """
    contacts(pagination: Pagination, where: Filter, sort: [SortBy!]): ContactsPage!
    contact_ByEmail(email: String!) :Contact!
    contact_ByPhone(e164: String!) :Contact!
}

extend type Mutation {
    contact_Create(input: ContactInput!): Contact!
    customer_contact_Create(input: CustomerContactInput!): CustomerContact!

    contact_Update(input: ContactUpdateInput!): Contact!
    contact_HardDelete(contactId: ID!): Result!
    contact_Archive(contactId: ID!): Result!
    contact_RestoreFromArchive(contactId: ID!): Result!
    contact_Merge(primaryContactId: ID!, mergedContactIds: [ID!]!): Contact!

    contact_AddTagById(input: ContactTagInput!): Contact!
    contact_RemoveTagById(input: ContactTagInput!): Contact!

    contact_AddOrganizationById(input: ContactOrganizationInput!): Contact!
    contact_RemoveOrganizationById(input: ContactOrganizationInput!): Contact!

    contact_AddNewLocation(contactId: ID!): Location!
    contact_RemoveLocation(contactId: ID!, locationId: ID!): Contact!

    contact_AddSocial(contactId: ID!, input: SocialInput!): Social!
}

type CustomerContact {
    id: ID!
    email: CustomerEmail!
}

"""
A contact represents an individual in customerOS.
**A ` + "`" + `response` + "`" + ` object.**
"""
type Contact implements ExtensibleEntity & Node {
    """
    The unique ID associated with the contact in customerOS.
    **Required**
    """
    id: ID!

    "The title associate with the contact in customerOS."
    title: String @deprecated(reason: "Use ` + "`" + `prefix` + "`" + ` instead")

    prefix: String

    """
    The name of the contact in customerOS, alternative for firstName + lastName.
    """
    name: String

    """
    The first name of the contact in customerOS.
    """
    firstName: String

    """
    The last name of the contact in customerOS.
    """
    lastName: String
    description: String
    timezone: String
    profilePhotoUrl: String

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    **Required**
    """
    createdAt: Time!
    updatedAt: Time!

    label: String @deprecated(reason: "Use ` + "`" + `tags` + "`" + ` instead")

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String

    tags: [Tag!] @goField(forceResolver: true)

    """
    ` + "`" + `organizationName` + "`" + ` and ` + "`" + `jobTitle` + "`" + ` of the contact if it has been associated with an organization.
    **Required.  If no values it returns an empty array.**
    """
    jobRoles: [JobRole!]! @goField(forceResolver: true)

    organizations(pagination: Pagination, where: Filter, sort: [SortBy!]): OrganizationPage! @goField(forceResolver: true)

    """
    All phone numbers associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)

    """
    All email addresses associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    emails: [Email!]! @goField(forceResolver: true)

    """
    All locations associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    locations: [Location!]! @goField(forceResolver: true)
    socials: [Social!]! @goField(forceResolver: true)

    """
    User defined metadata appended to the contact record in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    customFields: [CustomField!]! @goField(forceResolver: true)

    fieldSets: [FieldSet!]! @goField(forceResolver: true)

    """
    Template of the contact in customerOS.
    """
    template: EntityTemplate @goField(forceResolver: true)

    "Contact owner (user)"
    owner: User @goField(forceResolver: true)

    "Contact notes"
    notes(pagination: Pagination): NotePage! @goField(forceResolver: true)
    notesByTime(pagination: TimeRange): [Note!]! @goField(forceResolver: true)

    timelineEvents(from: Time, size: Int!, timelineEventTypes: [TimelineEventType!]): [TimelineEvent!]! @goField(forceResolver: true)
    timelineEventsTotalCount(timelineEventTypes: [TimelineEventType!]): Int64! @goField(forceResolver: true)
}

"""
Specifies how many pages of contact information has been returned in the query response.
**A ` + "`" + `response` + "`" + ` object.**
"""
type ContactsPage implements Pages {

    """
    A contact entity in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    content: [Contact!]!

    """
    Total number of pages in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    Total number of elements in the query response.
    **Required.**
    """
    totalElements: Int64!
}

"""
Create an individual in customerOS.
**A ` + "`" + `create` + "`" + ` object.**
"""
input ContactInput {

    "The unique ID associated with the template of the contact in customerOS."
    templateId: ID  @deprecated(reason: "Not supported")

    "The prefix of the contact."
    prefix: String

    """
    The first name of the contact.
    """
    firstName: String

    """
    The last name of the contact.
    """
    lastName: String
    name: String
    description: String
    timezone: String
    profilePhotoUrl: String

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    """
    createdAt: Time

    """
    User defined metadata appended to contact.
    **Required.**
    """
    customFields: [CustomFieldInput!] @deprecated(reason: "Not supported in create flow yet")

    fieldSets: [FieldSetInput!] @deprecated(reason: "Not supported in create flow yet")

    "An email addresses associated with the contact."
    email: EmailInput

    "A phone number associated with the contact."
    phoneNumber: PhoneNumberInput

    "Id of the contact owner (user)"
    ownerId: ID @deprecated(reason: "Not supported in create flow yet")

    externalReference: ExternalSystemReferenceInput

    appSource: String
}

input CustomerContactInput {

    "The prefix of the contact."
    prefix: String

    """
    The first name of the contact.
    """
    firstName: String

    """
    The last name of the contact.
    """
    lastName: String
    name: String
    description: String
    timezone: String

    "An email addresses associted with the contact."
    email: EmailInput

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    """
    createdAt: Time

    appSource: String
}

"""
Updates data fields associated with an existing customer record in customerOS.
**An ` + "`" + `update` + "`" + ` object.**
"""
input ContactUpdateInput {
    id:                 ID!
    patch:              Boolean
    firstName:          String
    lastName:           String
    name:               String
    prefix:             String
    description:        String
    timezone:           String
    profilePhotoUrl:    String
}

input ContactTagInput {
    contactId: ID!
    tagId: ID!
}

input ContactOrganizationInput {
    contactId: ID!
    organizationId: ID!
}

"""
The honorific title of an individual.
**A ` + "`" + `response` + "`" + ` object.**
"""
# Deprecated, This is a list of titles that are not enforced by the system. Client can use any title they want.
enum PersonTitle {

    "For men, regardless of marital status."
    MR

    "For married women."
    MRS

    "For girls, unmarried women, and married women who continue to use their maiden name."
    MISS

    "For women, regardless of marital status, or when marital status is unknown."
    MS

    "For the holder of a doctoral degree."
    DR
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/contract.graphqls", Input: `extend type Query {
    contract(id: ID!): Contract! @hasRole(roles: [ADMIN, USER]) @hasTenant
}
extend type Mutation {
    contract_Create(input: ContractInput!): Contract!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    contract_Update(input: ContractUpdateInput!): Contract!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    contract_Delete(id: ID!): DeleteResponse!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type Contract implements MetadataInterface {
    metadata:           Metadata!
    billingDetails:     BillingDetails
    committedPeriods:   Int64
    contractEnded:      Time
    contractLineItems:  [ServiceLineItem!] @goField(forceResolver: true)
    contractName:       String!
    contractRenewalCycle: ContractRenewalCycle!
    contractSigned:     Time
    contractUrl:        String
    currency:           Currency
    createdBy:          User @goField(forceResolver: true)
    externalLinks:      [ExternalSystem!]! @goField(forceResolver: true)
    billingEnabled:     Boolean!
    opportunities:      [Opportunity!] @goField(forceResolver: true)
    owner:              User @goField(forceResolver: true)
    serviceStarted:     Time
    contractStatus:     ContractStatus!

    status:             ContractStatus! @deprecated(reason: "Use contractStatus instead.")
    serviceStartedAt:   Time @deprecated(reason: "Use serviceStarted instead.")
    name:               String! @deprecated(reason: "Use contractName instead.")
    signedAt:           Time @deprecated(reason: "Use contractSigned instead.")
    renewalCycle:       ContractRenewalCycle! @deprecated(reason: "Use contractRenewalCycle instead.")
    organizationLegalName: String @deprecated(reason: "Use billingDetails instead.")
    invoiceEmail:       String @deprecated(reason: "Use billingDetails instead.")
    id:                 ID! @deprecated(reason: "Use metadata instead.")
    createdAt:          Time! @deprecated(reason: "Use metadata instead.")
    updatedAt:          Time! @deprecated(reason: "Use metadata instead.")
    source:             DataSource! @deprecated(reason: "Use metadata instead.")
    sourceOfTruth:      DataSource! @deprecated(reason: "Use metadata instead.")
    appSource:          String! @deprecated(reason: "Use metadata instead.")
    renewalPeriods:     Int64 @deprecated(reason: "Use committedPeriods instead.")
    endedAt:            Time @deprecated(reason: "Use contractEnded instead.")
    serviceLineItems:   [ServiceLineItem!] @goField(forceResolver: true) @deprecated(reason: "Use contractLineItems instead.")
    invoiceNote:        String @deprecated(reason: "Use billingDetails instead.")
    billingCycle:       ContractBillingCycle @deprecated(reason: "Use billingDetails instead.")
    invoicingStartDate: Time @deprecated(reason: "Use billingDetails instead.")
    addressLine1:       String @deprecated(reason: "Use billingDetails instead.")
    addressLine2:       String @deprecated(reason: "Use billingDetails instead.")
    zip:                String @deprecated(reason: "Use billingDetails instead.")
    locality:           String @deprecated(reason: "Use billingDetails instead.")
    country:            String @deprecated(reason: "Use billingDetails instead.")
}

type BillingDetails {
    billingCycle:           ContractBillingCycle
    invoicingStarted:       Time
    nextInvoicing:          Time
    addressLine1:           String
    addressLine2:           String
    locality:               String
    region:                 String
    country:                String
    postalCode:             String
    organizationLegalName:  String
    billingEmail:           String
    invoiceNote:            String
    canPayWithCard:         Boolean
    canPayWithDirectDebit:  Boolean
    canPayWithBankTransfer: Boolean
    payOnline :             Boolean
    payAutomatically:       Boolean
}

input ContractInput {
    organizationId:         ID!
    contractName:           String
    contractRenewalCycle:   ContractRenewalCycle
    committedPeriods:       Int64
    appSource:              String
    contractUrl:            String
    serviceStarted:         Time
    contractSigned:         Time
    currency:               Currency
    billingEnabled:         Boolean

    invoicingStartDate:     Time @deprecated(reason: "Removed from create input.")
    externalReference:      ExternalSystemReferenceInput @deprecated(reason: "Not used yet")
    billingCycle:           ContractBillingCycle @deprecated(reason: "Removed from create input.")
    renewalPeriods:         Int64 @deprecated(reason: "Use committedPeriods instead.")
    renewalCycle:       ContractRenewalCycle @deprecated(reason: "Use contractRenewalCycle instead.")
    signedAt:           Time @deprecated(reason: "Use contractSigned instead.")
    serviceStartedAt:   Time @deprecated(reason: "Use serviceStarted instead.")
    name:               String @deprecated(reason: "Use contractName instead.")
}

input ContractUpdateInput {
    contractId:             ID!
    patch:                  Boolean
    contractName:           String
    contractUrl:            String
    contractRenewalCycle:   ContractRenewalCycle
    committedPeriods:       Int64
    serviceStarted:         Time
    contractSigned:         Time
    contractEnded:          Time
    currency:               Currency
    billingDetails:         BillingDetailsInput
    appSource:              String
    billingEnabled:         Boolean

    canPayWithCard:         Boolean @deprecated(reason: "Use billingDetails instead.")
    canPayWithDirectDebit:  Boolean @deprecated(reason: "Use billingDetails instead.")
    canPayWithBankTransfer: Boolean @deprecated(reason: "Use billingDetails instead.")
    invoicingStartDate:     Time @deprecated(reason: "Use billingDetails instead.")
    addressLine1:           String @deprecated(reason: "Use billingDetails instead.")
    addressLine2:           String @deprecated(reason: "Use billingDetails instead.")
    locality:               String @deprecated(reason: "Use billingDetails instead.")
    country:                String @deprecated(reason: "Use billingDetails instead.")
    zip:                    String @deprecated(reason: "Use billingDetails instead.")
    billingCycle:           ContractBillingCycle @deprecated(reason: "Use billingDetails instead.")
    invoiceNote:            String @deprecated(reason: "Use billingDetails instead.")
    endedAt:                Time @deprecated(reason: "Use contractEnded instead.")
    renewalPeriods:         Int64 @deprecated(reason: "Use committedPeriods instead.")
    invoiceEmail:           String @deprecated(reason: "Use billingDetails instead.")
    organizationLegalName:  String @deprecated(reason: "Use billingDetails instead.")
    renewalCycle:       ContractRenewalCycle @deprecated(reason: "Use contractRenewalCycle instead.")
    signedAt:           Time @deprecated(reason: "Use contractSigned instead.")
    serviceStartedAt:   Time @deprecated(reason: "Use serviceStarted instead.")
    name:               String @deprecated(reason: "Use contractName instead.")
}

input BillingDetailsInput {
    billingCycle:           ContractBillingCycle
    invoicingStarted:       Time
    addressLine1:           String
    addressLine2:           String
    locality:               String
    region:                 String
    country:                String
    postalCode:             String
    organizationLegalName:  String
    billingEmail:           String
    invoiceNote:            String
    canPayWithCard:         Boolean
    canPayWithDirectDebit:  Boolean
    canPayWithBankTransfer: Boolean
    payOnline :             Boolean
    payAutomatically:       Boolean
}

enum ContractRenewalCycle {
    NONE
    MONTHLY_RENEWAL
    QUARTERLY_RENEWAL
    ANNUAL_RENEWAL
}

enum ContractBillingCycle {
    NONE
    MONTHLY_BILLING
    QUARTERLY_BILLING
    ANNUAL_BILLING
}

enum ContractStatus {
    UNDEFINED
    DRAFT
    LIVE
    ENDED
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/country.graphqls", Input: `type Country {
    id: ID!
    name: String!
    codeA2: String!
    codeA3: String!
    phoneCode: String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/currency.graphqls", Input: `enum Currency {
    AUD,
    BRL,
    CAD,
    CHF,
    CNY,
    EUR,
    GBP,
    HKD,
    INR,
    JPY,
    KRW,
    MXN,
    NOK,
    NZD,
    RON,
    SEK,
    SGD,
    TRY,
    USD,
    ZAR
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/custom_field.graphqls", Input: `extend type Mutation {
    customFieldsMergeAndUpdateInContact(contactId : ID!, customFields: [CustomFieldInput!], fieldSets: [FieldSetInput!]): Contact!

    customFieldMergeToContact(contactId : ID!, input: CustomFieldInput!): CustomField!
    customFieldUpdateInContact(contactId : ID!, input: CustomFieldUpdateInput!): CustomField!
    customFieldDeleteFromContactByName(contactId : ID!, fieldName: String!): Result!
    customFieldDeleteFromContactById(contactId : ID!, id: ID!): Result!

    customFieldMergeToFieldSet(contactId : ID!, fieldSetId : ID!, input: CustomFieldInput!): CustomField!
    customFieldUpdateInFieldSet(contactId : ID!, fieldSetId : ID!, input: CustomFieldUpdateInput!): CustomField!
    customFieldDeleteFromFieldSetById(contactId : ID!, fieldSetId : ID!, id: ID!): Result!

    fieldSetMergeToContact(contactId : ID!, input: FieldSetInput!): FieldSet
    fieldSetUpdateInContact(contactId : ID!, input: FieldSetUpdateInput!): FieldSet
    fieldSetDeleteFromContact(contactId : ID!, id: ID!):Result!
}

"""
Describes a custom, user-defined field associated with a ` + "`" + `Contact` + "`" + `.
**A ` + "`" + `return` + "`" + ` object.**
"""
type CustomField implements Node {
    """
    The unique ID associated with the custom field.
    **Required**
    """
    id: ID!

    """
    The name of the custom field.
    **Required**
    """
    name: String!

    """
    Datatype of the custom field.
    **Required**
    """
    datatype: CustomFieldDataType!

    """
    The value of the custom field.
    **Required**
    """
    value: Any!

    "The source of the custom field value"
    source: DataSource!

    createdAt: Time!
    updatedAt: Time!

    template: CustomFieldTemplate @goField(forceResolver: true)
}

"""
Describes a custom, user-defined field associated with a ` + "`" + `Contact` + "`" + ` of type String.
**A ` + "`" + `create` + "`" + ` object.**
"""
input CustomFieldInput {
    id: ID @deprecated
    """
    The name of the custom field.
    """
    name: String

    """
    Datatype of the custom field.
    """
    datatype: CustomFieldDataType

    """
    The value of the custom field.
    **Required**
    """
    value: Any!

    templateId: ID
}

"""
Describes a custom, user-defined field associated with a ` + "`" + `Contact` + "`" + `.
**An ` + "`" + `update` + "`" + ` object.**
"""
input CustomFieldUpdateInput {

    """
    The unique ID associated with the custom field.
    **Required**
    """
    id: ID!

    """
    The name of the custom field.
    **Required**
    """
    name: String!

    """
    Datatype of the custom field.
    **Required**
    """
    datatype: CustomFieldDataType!

    """
    The value of the custom field.
    **Required**
    """
    value: Any!
}

enum CustomFieldDataType {
    TEXT
    BOOL
    DATETIME
    INTEGER
    DECIMAL
}

type FieldSet {
    id: ID!
    name: String!
    createdAt: Time!
    updatedAt: Time!
    customFields: [CustomField!]! @goField(forceResolver: true)
    template: FieldSetTemplate @goField(forceResolver: true)
    source: DataSource!
}

input FieldSetInput {
    id: ID
    name: String!
    customFields: [CustomFieldInput!]
    templateId: ID
}

input FieldSetUpdateInput {
    id: ID!
    name: String!
}

enum EntityType {
    Contact
    Organization
}

input CustomFieldEntityType {
    id:        ID!
    entityType: EntityType!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/custom_field_template.graphqls", Input: `extend type Mutation {
    customFieldTemplate_Create(input: CustomFieldTemplateInput!): CustomFieldTemplate! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type CustomFieldTemplate  implements Node {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    name: String!
    type: CustomFieldTemplateType!
    order: Int!
    mandatory: Boolean!
    length: Int
    min: Int
    max: Int
}

input CustomFieldTemplateInput {
    name:      String!
    type:      CustomFieldTemplateType!
    order:     Int!
    mandatory: Boolean
    length:    Int
    min:       Int
    max:       Int
}

enum CustomFieldTemplateType {
    TEXT
    LINK
    #    INTEGER
    #    DECIMAL
    #    DATE
    #    DATETIME
    #    TIME
    #    BOOL
    #    ENUM
    #    ENTITY
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/dashboard.graphqls", Input: `extend type Query {
    """
    sort.By available options: ORGANIZATION, IS_CUSTOMER, DOMAIN, LOCATION, OWNER, LAST_TOUCHPOINT, RENEWAL_LIKELIHOOD, FORECAST_ARR, RENEWAL_DATE, ONBOARDING_STATUS
    """
    dashboardView_Organizations(pagination: Pagination!, where: Filter, sort: SortBy): OrganizationPage
    dashboardView_Renewals(pagination: Pagination!, where: Filter, sort: SortBy): RenewalsPage

    dashboard_CustomerMap: [DashboardCustomerMap!]
    dashboard_MRRPerCustomer(period: DashboardPeriodInput): DashboardMRRPerCustomer
    dashboard_GrossRevenueRetention(period: DashboardPeriodInput): DashboardGrossRevenueRetention
    dashboard_ARRBreakdown(period: DashboardPeriodInput): DashboardARRBreakdown
    dashboard_RevenueAtRisk(period: DashboardPeriodInput): DashboardRevenueAtRisk
    dashboard_RetentionRate(period: DashboardPeriodInput): DashboardRetentionRate
    dashboard_NewCustomers(period: DashboardPeriodInput): DashboardNewCustomers
    dashboard_TimeToOnboard(period: DashboardPeriodInput): DashboardTimeToOnboard
    dashboard_OnboardingCompletion(period: DashboardPeriodInput): DashboardOnboardingCompletion
}

input DashboardPeriodInput {
    start: Time!
    end: Time!
}

type DashboardCustomerMap {
    organizationId: ID!
    organization: Organization! @goField(forceResolver: true)
    state: DashboardCustomerMapState!
    arr: Float!
    contractSignedDate: Time!
}

type DashboardMRRPerCustomer {
    mrrPerCustomer: Float!
    increasePercentage: String!
    perMonth: [DashboardMRRPerCustomerPerMonth]!
}

type DashboardMRRPerCustomerPerMonth {
    year: Int!
    month: Int!
    value: Float!
}

type DashboardGrossRevenueRetention {
    grossRevenueRetention: Float!
    increasePercentage: String! @deprecated(reason: "Use increasePercentageValue instead")
    increasePercentageValue: Float!
    perMonth: [DashboardGrossRevenueRetentionPerMonth]!
}
type DashboardGrossRevenueRetentionPerMonth {
    year: Int!
    month: Int!
    percentage: Float!
}

type DashboardARRBreakdown {
    arrBreakdown: Float!
    increasePercentage: String!
    perMonth: [DashboardARRBreakdownPerMonth]!
}
type DashboardARRBreakdownPerMonth {
    year: Int!
    month: Int!
    newlyContracted: Float!
    renewals: Float!
    upsells: Float!
    downgrades: Float!
    cancellations: Float!
    churned: Float!
}

type DashboardRevenueAtRisk {
    highConfidence: Float!
    atRisk: Float!
}

type DashboardRetentionRate {
    retentionRate: Float!
    increasePercentage: String! @deprecated(reason: "Use increasePercentageValue instead")
    increasePercentageValue: Float!
    perMonth: [DashboardRetentionRatePerMonth]!
}
type DashboardRetentionRatePerMonth {
    year: Int!
    month: Int!
    renewCount: Int!
    churnCount: Int!
}

type DashboardNewCustomers {
    thisMonthCount: Int!
    thisMonthIncreasePercentage: String!
    perMonth: [DashboardNewCustomersPerMonth]!
}
type DashboardNewCustomersPerMonth {
    year: Int!
    month: Int!
    count: Int!
}

enum DashboardCustomerMapState {
    OK
    AT_RISK
    CHURNED
}

type DashboardTimeToOnboard {
    timeToOnboard: Float
    increasePercentage: Float
    perMonth: [DashboardTimeToOnboardPerMonth!]!
}

type DashboardTimeToOnboardPerMonth {
    year: Int!
    month: Int!
    value: Float!
}

type DashboardOnboardingCompletion {
    completionPercentage: Float!
    increasePercentage: Float!
    perMonth: [DashboardOnboardingCompletionPerMonth!]!
}

type DashboardOnboardingCompletionPerMonth {
    year: Int!
    month: Int!
    value: Float!
}

type RenewalsPage implements Pages {
    content: [RenewalRecord!]!
    totalPages: Int!
    totalElements: Int64!
    totalAvailable: Int64!
}

type RenewalRecord {
    organization: Organization!
    contract: Contract!
    opportunity: Opportunity
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/directive.graphqls", Input: `directive @goField(
    forceResolver: Boolean
    name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(
    model: String
    models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @hasRole(roles: [Role!]!) on FIELD_DEFINITION

enum Role {
    ADMIN
    CUSTOMER_OS_PLATFORM_OWNER
    OWNER
    USER
}

directive @hasTenant on FIELD_DEFINITION
directive @hasIdentityId on FIELD_DEFINITION`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/email.graphqls", Input: `extend type Query {
    email(id: ID!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    emailMergeToContact(contactId : ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailUpdateInContact(contactId : ID!, input: EmailUpdateInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromContact(contactId : ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromContactById(contactId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailMergeToUser(userId : ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailUpdateInUser(userId : ID!, input: EmailUpdateInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromUser(userId : ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromUserById(userId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailMergeToOrganization(organizationId : ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailUpdateInOrganization(organizationId : ID!, input: EmailUpdateInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromOrganization(organizationId : ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromOrganizationById(organizationId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailDelete(id: ID!): Result!
}

type CustomerEmail {
    id: ID!
}

"""
Describes an email address associated with a ` + "`" + `Contact` + "`" + ` in customerOS.
**A ` + "`" + `return` + "`" + ` object.**
"""
type Email {

    """
    The unique ID associated with the contact in customerOS.
    **Required**
    """
    id: ID!

    """
    An email address assocaited with the contact in customerOS.
    """
    email: String
    rawEmail: String
    emailValidationDetails: EmailValidationDetails!

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean!

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!

    createdAt: Time!
    updatedAt: Time!

    users: [User!]! @goField(forceResolver: true)
    contacts: [Contact!]! @goField(forceResolver: true)
    organizations: [Organization!]! @goField(forceResolver: true)
}

type EmailValidationDetails {
    validated: Boolean
    isReachable: String
    isValidSyntax: Boolean
    canConnectSmtp: Boolean
    acceptsMail: Boolean
    hasFullInbox: Boolean
    isCatchAll: Boolean
    isDeliverable: Boolean
    isDisabled: Boolean
    error: String
}

"""
Describes an email address associated with a ` + "`" + `Contact` + "`" + ` in customerOS.
**A ` + "`" + `create` + "`" + ` object.**
"""
input EmailInput {

    """
    An email address associated with the contact in customerOS.
    **Required.**
    """
    email: String!

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean

    appSource: String
}

"""
Describes an email address associated with a ` + "`" + `Contact` + "`" + ` in customerOS.
**An ` + "`" + `update` + "`" + ` object.**
"""
input EmailUpdateInput {

    """
    An email address assocaited with the contact in customerOS.
    **Required.**
    """
    id: ID!

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean

    email: String
}


"""
Describes the type of email address (WORK, PERSONAL, etc).
**A ` + "`" + `return` + "`" + ` object.
"""
enum EmailLabel {
    MAIN
    WORK
    PERSONAL
    OTHER
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/entity_template.graphqls", Input: `extend type Mutation {
    entityTemplateCreate(input: EntityTemplateInput!): EntityTemplate! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

enum EntityTemplateExtension {
    CONTACT
    ORGANIZATION
}

type EntityTemplate implements Node {
    id: ID!
    version: Int!
    name: String!
    extends: EntityTemplateExtension
    fieldSetTemplates: [FieldSetTemplate!]! @goField(forceResolver: true)
    customFieldTemplates: [CustomFieldTemplate!]! @goField(forceResolver: true)
    createdAt: Time!
    updatedAt: Time!
}

type FieldSetTemplate  implements Node {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    name: String!
    order: Int!
    customFieldTemplates: [CustomFieldTemplate!]! @goField(forceResolver: true)
}

input EntityTemplateInput {
    name: String!
    extends: EntityTemplateExtension
    fieldSetTemplateInputs: [FieldSetTemplateInput!]
    customFieldTemplateInputs: [CustomFieldTemplateInput!]
}

input FieldSetTemplateInput {
    name: String!
    order: Int!
    customFieldTemplateInputs: [CustomFieldTemplateInput!]
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/external_system.graphqls", Input: `extend type Query {
    externalSystemInstances: [ExternalSystemInstance!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

input ExternalSystemReferenceInput {
    externalId: ID!
    syncDate: Time
    type: ExternalSystemType!
    externalUrl: String
    externalSource: String
}

enum ExternalSystemType {
    HUBSPOT
    ZENDESK_SUPPORT
    CALCOM
    PIPEDRIVE
    SLACK
    INTERCOM
    SALESFORCE
    STRIPE
    MIXPANEL
    CLOSE
    OUTLOOK
    UNTHREAD
}

type ExternalSystem {
    type: ExternalSystemType!
    syncDate: Time
    externalId: String
    externalUrl: String
    externalSource: String
}

type ExternalSystemInstance {
    type: ExternalSystemType!
    stripeDetails: ExternalSystemStripeDetails
}

type ExternalSystemStripeDetails {
    paymentMethodTypes: [String!]!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/filter.graphqls", Input: `"""
If provided as part of the request, results will be filtered down to the ` + "`" + `page` + "`" + ` and ` + "`" + `limit` + "`" + ` specified.
"""
input Pagination {

    """
    The results page to return in the response.
    **Required.**
    """
    page: Int!

    """
    The maximum number of results in the response.
    **Required.**
    """
    limit: Int!
}

input TimeRange {

    """
    The start time of the time range.
    **Required.**
    """
    from: Time!

    """
    The end time of the time range.
    **Required.**
    """
    to: Time!
}

input SortBy {
    by: String!
    direction: SortingDirection! = ASC
    caseSensitive: Boolean = false
}

enum SortingDirection {
    ASC
    DESC
}

input Filter {
    NOT: Filter
    AND: [Filter!]
    OR: [Filter!]
    filter: FilterItem
}

input FilterItem {
    property: String!
    operation: ComparisonOperator! = EQ
    value: Any!
    caseSensitive: Boolean = false
    includeEmpty: Boolean = true
}

enum ComparisonOperator {
    EQ
    CONTAINS
    STARTS_WITH
    LTE
    GTE
    IN
    BETWEEN
    IS_NULL
    IS_EMPTY
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/interaction_event.graphqls", Input: `union InteractionEventParticipant = EmailParticipant | PhoneNumberParticipant | ContactParticipant | UserParticipant | OrganizationParticipant | JobRoleParticipant
union InteractionSessionParticipant = EmailParticipant | PhoneNumberParticipant | ContactParticipant | UserParticipant

extend type Query {
    interactionSession(id: ID!): InteractionSession!
    interactionSession_BySessionIdentifier(sessionIdentifier: String!): InteractionSession!

    interactionEvent(id: ID!): InteractionEvent!
    interactionEvent_ByEventIdentifier(eventIdentifier: String!): InteractionEvent!
}

extend type Mutation {
    interactionSession_Create(
        session: InteractionSessionInput!
    ): InteractionSession!
    interactionSession_LinkAttachment(sessionId: ID!, attachmentId: ID!): InteractionSession!

    interactionEvent_Create(
        event: InteractionEventInput!
    ): InteractionEvent!
    interactionEvent_LinkAttachment(eventId: ID!, attachmentId: ID!): InteractionEvent!

}

input InteractionEventParticipantInput  {
    email: String
    phoneNumber: String
    contactID: ID
    userID: ID
    type: String
}

input InteractionSessionParticipantInput  {
    email: String
    phoneNumber: String
    contactID: ID
    userID: ID
    type: String
}

input InteractionSessionInput {
    sessionIdentifier: String
    name: String!
    status: String!
    type: String
    channel: String
    channelData: String
    attendedBy: [InteractionSessionParticipantInput!]
    appSource: String!
}

input InteractionEventInput {
    eventIdentifier: String
    externalId: String
    externalSystemId: String
    content: String
    contentType: String
    channel: String
    channelData: String
    interactionSession: ID
    meetingId: ID
    sentBy: [InteractionEventParticipantInput!]!
    sentTo: [InteractionEventParticipantInput!]!
    repliesTo: ID
    eventType: String
    appSource: String!
    createdAt: Time

}

type InteractionSession implements Node {
    id: ID!
    startedAt: Time! @deprecated(reason: "Use createdAt instead")
    endedAt: Time @deprecated(reason: "Use updatedAt instead")
    createdAt: Time!
    updatedAt: Time!

    sessionIdentifier: String
    name: String!
    status: String!
    type: String
    channel: String
    channelData: String
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
    events: [InteractionEvent!]! @goField(forceResolver: true)
    attendedBy: [InteractionSessionParticipant!]! @goField(forceResolver: true)
    includes: [Attachment!]! @goField(forceResolver: true)
    describedBy: [Analysis!]! @goField(forceResolver: true)
}

type InteractionEvent implements Node {
    id: ID!
    createdAt: Time!

    eventIdentifier: String
    content: String
    contentType: String
    channel: String
    channelData: String
    interactionSession: InteractionSession @goField(forceResolver: true)
    issue: Issue @goField(forceResolver: true)
    meeting: Meeting @goField(forceResolver: true)
    sentBy: [InteractionEventParticipant!]! @goField(forceResolver: true)
    sentTo: [InteractionEventParticipant!]! @goField(forceResolver: true)
    repliesTo: InteractionEvent @goField(forceResolver: true)
    includes: [Attachment!]! @goField(forceResolver: true)
    summary: Analysis @goField(forceResolver: true)
    actionItems: [ActionItem!] @goField(forceResolver: true)
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
    eventType: String
    externalLinks:  [ExternalSystem!]! @goField(forceResolver: true)
}

type EmailParticipant {
    emailParticipant: Email!
    type: String
}

type PhoneNumberParticipant {
    phoneNumberParticipant: PhoneNumber!
    type: String
}

type ContactParticipant {
    contactParticipant: Contact!
    type: String
}

type JobRoleParticipant {
    jobRoleParticipant: JobRole!
    type: String
}

type UserParticipant {
    userParticipant: User!
    type: String
}

type OrganizationParticipant {
    organizationParticipant: Organization!
    type: String
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/interfaces.graphqls", Input: `"""
Describes the number of pages and total elements included in a query response.
**A ` + "`" + `response` + "`" + ` object.**
"""
interface Pages {

    """
    The total number of pages included in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    The total number of elements included in the query response.
    **Required.**
    """
    totalElements: Int64!
}

interface MetadataInterface {
    metadata: Metadata!
}

interface Node {
    id: ID!
}

interface SourceFields implements Node {
    id: ID!
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

interface SourceFieldsInterface {
    source:         DataSource!
    sourceOfTruth:  DataSource!
    appSource:      String!
}

interface ExtensibleEntity implements Node {
    id: ID!
    template: EntityTemplate
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/invoice.graphqls", Input: `extend type Query {
    invoice(id: ID!): Invoice!
    invoices(pagination: Pagination, where: Filter, sort: [SortBy!], organizationId: ID): InvoicesPage!
}

extend type Mutation {
    invoice_NextDryRunForContract(contractId: ID!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    invoice_Simulate(input: InvoiceSimulateInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    invoice_Update(input: InvoiceUpdateInput!): Invoice!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    invoice_Pay(id: ID!): Invoice!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    invoice_Void(id: ID!): Invoice!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type InvoicesPage implements Pages {
    content: [Invoice!]!
    totalPages: Int!
    totalElements: Int64!
}

type Invoice implements MetadataInterface {
    metadata:           Metadata!
    organization:       Organization! @goField(forceResolver: true)
    contract:           Contract! @goField(forceResolver: true)
    dryRun:             Boolean!
    postpaid:           Boolean!
    offCycle:           Boolean!
    amountDue:          Float!
    amountPaid:         Float!
    amountRemaining:    Float!
    invoiceNumber:      String!
    invoicePeriodStart: Time!
    invoicePeriodEnd:   Time!
    invoiceUrl:         String!
    due:                Time!
    currency:           String!
    repositoryFileId:   String!
    invoiceLineItems:   [InvoiceLine!]! @goField(forceResolver: true)
    status:             InvoiceStatus
    note:               String
    domesticPaymentsBankInfo:       String
    internationalPaymentsBankInfo:  String
    customer:                   InvoiceCustomer!
    provider:                   InvoiceProvider!
    paid:                       Boolean!
    subtotal:                   Float!
    taxDue:                     Float!
}

type InvoiceCustomer {
    name:               String
    email:              String
    addressLine1:       String
    addressLine2:       String
    addressZip:         String
    addressLocality:    String
    addressCountry:     String
}

type InvoiceProvider {
    logoUrl:                String
    logoRepositoryFileId:   String
    name:                   String
    addressLine1:           String
    addressLine2:           String
    addressZip:             String
    addressLocality:        String
    addressCountry:         String
}

type InvoiceLine implements MetadataInterface {
    metadata:           Metadata!
    description:        String!
    price:              Float!
    quantity:           Int!
    subtotal:           Float!
    taxDue:             Float!
    total:              Float!
}

type Tax {
    salesTax:   Boolean!
    vat:        Boolean!
    taxRate:    Float!
}

input InvoiceSimulateInput {
    contractId:         ID!
    periodStartDate:    Time
    periodEndDate:      Time
    invoiceLines:       [InvoiceLineInput!]!
}

input InvoiceLineInput {
    serviceLineItemId:  ID
    name:               String!
    billed:             BilledType!
    price:              Float!
    quantity:           Int!
}

input InvoiceUpdateInput {
    id:       ID!
    status:   InvoiceStatus
    patch:    Boolean!
}

enum InvoiceStatus {
    DRAFT
    DUE
    PAID
    VOID
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/invoicing_cycle.graphqls", Input: `extend type Mutation {
    invoicingCycle_Create(input: InvoicingCycleInput!): InvoicingCycle!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    invoicingCycle_Update(input: InvoicingCycleUpdateInput!): InvoicingCycle!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Query {
    invoicingCycle: InvoicingCycle! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

enum InvoicingCycleType {
    DATE
    ANNIVERSARY
}

type InvoicingCycle implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    type:               InvoicingCycleType!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
}

input InvoicingCycleInput {
    type: InvoicingCycleType!
}

input InvoicingCycleUpdateInput {
    id: ID!
    type: InvoicingCycleType!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/issue.graphqls", Input: `extend type Query {
    issue(id: ID!): Issue! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

union IssueParticipant = ContactParticipant | UserParticipant | OrganizationParticipant

type Issue implements SourceFields & Node {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    subject: String
    status: String!
    priority: String
    description: String
    tags: [Tag] @goField(forceResolver: true)
    interactionEvents: [InteractionEvent!]! @goField(forceResolver: true)
    comments: [Comment!]! @goField(forceResolver: true)
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)
    submittedBy: IssueParticipant @goField(forceResolver: true)
    reportedBy: IssueParticipant @goField(forceResolver: true)
    assignedTo: [IssueParticipant!]! @goField(forceResolver: true)
    followedBy: [IssueParticipant!]! @goField(forceResolver: true)

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

type IssueSummaryByStatus {
    status: String!
    count: Int64!
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/job_role.graphqls", Input: `extend type Mutation {
    jobRole_Delete(contactId : ID!, roleId: ID!): Result!
    jobRole_Create(contactId : ID!, input: JobRoleInput!): JobRole!
    jobRole_Update(contactId : ID!, input: JobRoleUpdateInput!): JobRole!
}

"""
Describes the relationship a Contact has with a Organization.
**A ` + "`" + `return` + "`" + ` object**
"""
type JobRole {
    id: ID!
    createdAt: Time!
    updatedAt: Time!

    """
    Organization associated with a Contact.
    **Required.**
    """
    organization: Organization @goField(forceResolver: true)

    contact: Contact @goField(forceResolver: true)

    "The Contact's job title."
    jobTitle: String

    primary: Boolean!

    description: String
    company: String

    startedAt: Time
    endedAt: Time

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

"""
Describes the relationship a Contact has with an Organization.
**A ` + "`" + `create` + "`" + ` object**
"""
input JobRoleInput {
    organizationId: ID
    jobTitle: String
    primary: Boolean
    startedAt: Time
    endedAt: Time
    appSource: String
    description: String
    company: String
}

"""
Describes the relationship a Contact has with an Organization.
**A ` + "`" + `create` + "`" + ` object**
"""
input JobRoleUpdateInput {
    id: ID!
    startedAt: Time
    endedAt: Time
    organizationId: ID
    jobTitle: String
    primary: Boolean
    description: String
    company: String
}

type CustomerJobRole {
    id: ID!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/location.graphqls", Input: `extend type Mutation {
    location_RemoveFromContact(contactId : ID!, locationId: ID!): Contact! @hasRole(roles: [ADMIN, USER]) @hasTenant
    location_RemoveFromOrganization(organizationId : ID!, locationId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    location_Update(input: LocationUpdateInput!): Location!
}

type Location implements SourceFields & Node {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!

    name: String
    rawAddress: String

    country: String
    region: String
    district: String
    locality: String
    street: String
    address: String
    address2: String
    zip: String
    addressType: String
    houseNumber: String
    postalCode: String
    plusFour: String
    commercial: Boolean
    predirection: String
    latitude: Float
    longitude: Float
    timeZone: String
    utcOffset: Int64
}

input LocationUpdateInput {
    id: ID!
    name: String
    rawAddress: String
    country: String
    region: String
    district: String
    locality: String
    street: String
    address: String
    address2: String
    zip: String
    addressType: String
    houseNumber: String
    postalCode: String
    plusFour: String
    commercial: Boolean
    predirection: String
    latitude: Float
    longitude: Float
    timeZone: String
    utcOffset: Int64
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/log_entry.graphqls", Input: `extend type Query {
    logEntry(id : ID!): LogEntry! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    logEntry_CreateForOrganization(organizationId : ID!, input: LogEntryInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_Update(id: ID!, input: LogEntryUpdateInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_AddTag(id: ID!, input: TagIdOrNameInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_RemoveTag(id: ID!, input: TagIdOrNameInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_ResetTags(id: ID!, input: [TagIdOrNameInput!]): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type LogEntry {
    id: ID!
    content: String
    contentType: String
    createdAt: Time!
    updatedAt: Time!
    startedAt: Time!
    createdBy: User @goField(forceResolver: true)
    tags: [Tag!]! @goField(forceResolver: true)
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)
}

input LogEntryInput {
    content: String
    contentType: String
    tags: [TagIdOrNameInput!]
    startedAt: Time
    appSource: String
}

input LogEntryUpdateInput {
    content: String
    contentType: String
    startedAt: Time
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/master_plan.graphqls", Input: `extend type Mutation {
    masterPlan_Create(input: MasterPlanInput!): MasterPlan!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlan_CreateDefault(input: MasterPlanInput!): MasterPlan!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlan_Update(input: MasterPlanUpdateInput!): MasterPlan!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlan_Duplicate(id: ID!): MasterPlan!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlanMilestone_Create(input: MasterPlanMilestoneInput!): MasterPlanMilestone!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlanMilestone_Update(input: MasterPlanMilestoneUpdateInput!): MasterPlanMilestone!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlanMilestone_BulkUpdate(input: [MasterPlanMilestoneUpdateInput!]!): [MasterPlanMilestone!]!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlanMilestone_Reorder(input: MasterPlanMilestoneReorderInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlanMilestone_Duplicate(masterPlanId: ID!, id: ID!): MasterPlanMilestone!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Query {
    masterPlan(id: ID!): MasterPlan! @hasRole(roles: [ADMIN, USER]) @hasTenant
    masterPlans(retired: Boolean): [MasterPlan!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type MasterPlan implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    name:               String!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
    retired:            Boolean!
    milestones:         [MasterPlanMilestone!]! @goField(forceResolver: true)
    retiredMilestones:  [MasterPlanMilestone!]! @goField(forceResolver: true)
}

type MasterPlanMilestone implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    name:               String!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
    order:              Int64!
    durationHours:      Int64!
    optional:           Boolean!
    items:              [String!]!
    retired:            Boolean!
}

input MasterPlanInput {
    name: String
}

input MasterPlanUpdateInput {
    id: ID!
    name: String
    retired: Boolean
}

input MasterPlanMilestoneInput {
    masterPlanId: ID!
    name: String
    order: Int64!
    durationHours: Int64!
    optional: Boolean!
    items: [String!]!
}

input MasterPlanMilestoneUpdateInput {
    masterPlanId: ID!
    id: ID!
    name: String
    order: Int64
    durationHours: Int64
    optional: Boolean
    retired: Boolean
    items: [String!]
}

input MasterPlanMilestoneReorderInput {
    masterPlanId: ID!
    orderedIds: [ID!]!
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/meeting.graphqls", Input: `"""
Specifies how many pages of meeting information has been returned in the query response.
**A ` + "`" + `response` + "`" + ` object.**
"""
type MeetingsPage implements Pages {

    """
    A contact entity in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    content: [Meeting!]!

    """
    Total number of pages in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    Total number of elements in the query response.
    **Required.**
    """
    totalElements: Int64!
}

extend type Query {
    meeting(id: ID!): Meeting!
    externalMeetings(externalSystemId: String!, externalId: ID, pagination: Pagination, where: Filter, sort: [SortBy!]): MeetingsPage!
}

extend type Mutation {
    meeting_Create(meeting: MeetingInput!): Meeting!
    meeting_Update(meetingId: ID!, meeting: MeetingUpdateInput!): Meeting!
    meeting_LinkAttendedBy(meetingId: ID!, participant: MeetingParticipantInput!): Meeting!
    meeting_UnlinkAttendedBy(meetingId: ID!, participant: MeetingParticipantInput!): Meeting!
    meeting_LinkAttachment(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_UnlinkAttachment(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_LinkRecording(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_UnlinkRecording(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_AddNewLocation(meetingId: ID!): Location!
    meeting_AddNote(meetingId: ID!, note: NoteInput): Meeting!
}

input MeetingParticipantInput  {
    contactId: ID
    userId: ID
    organizationId: ID
}

enum MeetingStatus {
    UNDEFINED
    ACCEPTED
    CANCELED
}

input MeetingInput {
    name: String
    attendedBy: [MeetingParticipantInput!]
    createdBy: [MeetingParticipantInput!]
    createdAt: Time
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    agenda: String
    agendaContentType: String
    note: NoteInput
    appSource: String
    externalSystem: ExternalSystemReferenceInput
    status: MeetingStatus
}

input MeetingUpdateInput {
    name: String
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    agenda: String
    agendaContentType: String
    note: NoteUpdateInput
    appSource: String
    status: MeetingStatus
    externalSystem: ExternalSystemReferenceInput
}

union MeetingParticipant = ContactParticipant | UserParticipant | OrganizationParticipant | EmailParticipant

type Meeting implements Node {
    id: ID!
    name: String
    createdAt: Time!
    updatedAt: Time!
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    attendedBy: [MeetingParticipant!]! @goField(forceResolver: true)
    createdBy: [MeetingParticipant!]! @goField(forceResolver: true)
    includes: [Attachment!]! @goField(forceResolver: true)
    describedBy: [Analysis!]! @goField(forceResolver: true)
    note: [Note!]! @goField(forceResolver: true)
    events: [InteractionEvent!]! @goField(forceResolver: true)
    recording: Attachment @goField(forceResolver: true)
    appSource: String!
    source: DataSource!
    sourceOfTruth: DataSource!
    agenda: String
    agendaContentType: String
    externalSystem:  [ExternalSystem!]! @goField(forceResolver: true)
    status: MeetingStatus!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/metadata.graphqls", Input: `type Metadata implements SourceFieldsInterface & Node {
    id:             ID!
    created:        Time!
    lastUpdated:    Time!
    source:         DataSource!
    sourceOfTruth:  DataSource!
    appSource:      String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/mutation.graphqls", Input: `type Mutation

`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/note.graphqls", Input: `extend type Mutation {
    note_CreateForContact(contactId : ID!, input: NoteInput!): Note!
    note_CreateForOrganization(organizationId : ID!, input: NoteInput!): Note!
    note_Update(input: NoteUpdateInput!): Note!
    note_Delete(id: ID!): Result!
    note_LinkAttachment(noteId: ID!, attachmentId: ID!): Note!
    note_UnlinkAttachment(noteId: ID!, attachmentId: ID!): Note!
}

union NotedEntity = Contact | Organization

type Note {
    id: ID!
    content: String
    contentType: String
    createdAt: Time!
    updatedAt: Time!
    createdBy: User @goField(forceResolver: true)
    noted: [NotedEntity!]! @goField(forceResolver: true)
    includes: [Attachment!]! @goField(forceResolver: true)
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

type NotePage implements Pages {
    content: [Note!]!
    totalPages: Int!
    totalElements: Int64!
}

input NoteInput {
    content: String
    contentType: String
    appSource: String
}

input NoteUpdateInput {
    id: ID!
    content: String
    contentType: String
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/opportunity.graphqls", Input: `extend type Query {
    opportunity(id: ID!): Opportunity @hasRole(roles: [ADMIN, USER]) @hasTenant
}
extend type Mutation {
    opportunityUpdate(input: OpportunityUpdateInput!): Opportunity!
    opportunityRenewalUpdate(input: OpportunityRenewalUpdateInput!, ownerUserId: ID): Opportunity!
}

type Opportunity implements Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    name:               String!
    amount:             Float!
    maxAmount:          Float!
    internalType:       InternalType!
    externalType:       String!
    internalStage:      InternalStage!
    externalStage:      String!
    estimatedClosedAt:  Time
    generalNotes:       String!
    nextSteps:          String!
    renewedAt:          Time!
    renewalLikelihood:  OpportunityRenewalLikelihood!
    renewalUpdatedByUserId: String!
    renewalUpdatedByUserAt: Time!
    comments:           String!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
    owner:              User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
    externalLinks:      [ExternalSystem!]! @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}

enum InternalType {
    NBO
    UPSELL
    CROSS_SELL
    RENEWAL
}

enum InternalStage {
    OPEN
    EVALUATING
    CLOSED_WON
    CLOSED_LOST
}

enum OpportunityRenewalLikelihood {
    HIGH_RENEWAL
    MEDIUM_RENEWAL
    LOW_RENEWAL
    ZERO_RENEWAL
}

input OpportunityRenewalUpdateInput {
    opportunityId:      ID!
    name:               String @deprecated(reason: "Not used")
    amount:             Float
    renewalLikelihood:  OpportunityRenewalLikelihood
    comments:           String
    appSource:          String
    ownerUserId:        ID
}

input OpportunityUpdateInput {
    opportunityId:       ID!
    name:                String
    amount:              Float
    externalType:        String
    externalStage:       String
    estimatedClosedDate: Time
    generalNotes:        String
    nextSteps:           String
    appSource:           String
    externalReference:   ExternalSystemReferenceInput
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/organization.graphqls", Input: `extend type Query {
    organizations(pagination: Pagination, where: Filter, sort: [SortBy!]): OrganizationPage! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization(id: ID!): Organization @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_ByCustomerOsId(customerOsId: String!): Organization @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_DistinctOwners: [User!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    organization_Create(input: OrganizationInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Update(input: OrganizationUpdateInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Archive(id: ID!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_ArchiveAll(ids: [ID!]!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Hide(id: ID!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_HideAll(ids: [ID!]!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Show(id: ID!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_ShowAll(ids: [ID!]!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Merge(primaryOrganizationId: ID!, mergedOrganizationIds: [ID!]!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddSubsidiary(input: LinkOrganizationsInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_RemoveSubsidiary(organizationId: ID!, subsidiaryId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddNewLocation(organizationId: ID!): Location! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddSocial(organizationId: ID!, input: SocialInput!): Social! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_SetOwner(organizationId: ID!, userId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_UnsetOwner(organizationId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_UpdateOnboardingStatus(input: OnboardingStatusInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type LinkedOrganization {
    organization: Organization!
    type: String
}

type Organization implements MetadataInterface {
    metadata:               Metadata!
    accountDetails:         OrgAccountDetails
    contracts:              [Contract!] @goField(forceResolver: true)
    customerOsId:           String!
    customFields:           [CustomField!]! @goField(forceResolver: true)
    customId:               String
    description:            String
    domains:                [String!]! @goField(forceResolver: true)
    slackChannelId:         String
    employeeGrowthRate:     String
    employees:              Int64
    headquarters:           String
    industry:               String
    industryGroup:          String
    isCustomer:             Boolean
    lastFundingAmount:      String
    lastFundingRound:       FundingRound
    lastTouchpoint:         LastTouchpoint
    locations:              [Location!]! @goField(forceResolver: true)
    logo:                   String
    market:                 Market
    name:                   String!
    notes:                  String
    owner:                  User @goField(forceResolver: true)
    parentCompanies:        [LinkedOrganization!]! @goField(forceResolver: true)
    public:                 Boolean
    socialMedia:            [Social!]! @goField(forceResolver: true)
    subIndustry:            String
    subsidiaries:           [LinkedOrganization!]! @goField(forceResolver: true)
    tags:                   [Tag!] @goField(forceResolver: true)
    targetAudience:         String
    timelineEvents(from: Time, size: Int!, timelineEventTypes: [TimelineEventType!]): [TimelineEvent!]! @goField(forceResolver: true)
    valueProposition:       String
    website:                String
    yearFounded:            Int64

    hide:                   Boolean!
    contacts(pagination: Pagination, where: Filter, sort: [SortBy!]): ContactsPage! @goField(forceResolver: true)
    jobRoles: [JobRole!]! @goField(forceResolver: true)
    emails: [Email!]! @goField(forceResolver: true)
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)
    suggestedMergeTo: [SuggestedMergeOrganization!]! @goField(forceResolver: true)
    fieldSets: [FieldSet!]! @goField(forceResolver: true)
    entityTemplate: EntityTemplate @goField(forceResolver: true)
    timelineEventsTotalCount(timelineEventTypes: [TimelineEventType!]): Int64! @goField(forceResolver: true)
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)
    issueSummaryByStatus: [IssueSummaryByStatus!]! @goField(forceResolver: true)

    socials: [Social!]! @goField(forceResolver: true) @deprecated(reason: "Use socialMedia")
    isPublic:    Boolean @deprecated(reason: "Use public")
    note:        String @deprecated(reason: "Use notes")
    logoUrl:                String @deprecated(reason: "Use logo")
    id: ID! @deprecated(reason: "Use metadata.id")
    createdAt:   Time! @deprecated(reason: "Use metadata.created")
    updatedAt:   Time! @deprecated(reason: "Use metadata.lastUpdated")
    source: DataSource! @deprecated(reason: "Use metadata.source")
    sourceOfTruth: DataSource! @deprecated(reason: "Use metadata.sourceOfTruth")
    appSource: String! @deprecated(reason: "Use metadata.appSource")
    referenceId: String @deprecated(reason: "Use customId")
    lastTouchPointAt: Time @deprecated(reason: "Use lastTouchpoint")
    lastTouchPointType: LastTouchpointType @deprecated(reason: "Use lastTouchpoint")
    lastTouchPointTimelineEventId: ID #we need this in order to use the dataloader for the lastTouchPointTimelineEvent if asked @deprecated(reason: "Use lastTouchpoint")
    lastTouchPointTimelineEvent: TimelineEvent @goField(forceResolver: true) @deprecated(reason: "Use lastTouchpoint")
    subsidiaryOf: [LinkedOrganization!]! @goField(forceResolver: true) @deprecated(reason: "Use parentCompany")
}

type LastTouchpoint {
    lastTouchPointAt: Time
    lastTouchPointType: LastTouchpointType
    lastTouchPointTimelineEventId: ID #we need this in order to use the dataloader for the lastTouchPointTimelineEvent if asked
    lastTouchPointTimelineEvent: TimelineEvent @goField(forceResolver: true)
}

type OrgAccountDetails {
    renewalSummary: RenewalSummary
    onboarding: OnboardingDetails
}

type RenewalSummary {
    arrForecast:       Float
    maxArrForecast:    Float
    renewalLikelihood: OpportunityRenewalLikelihood
    nextRenewalDate:   Time
}

type OnboardingDetails {
    status: OnboardingStatus!
    comments: String
    updatedAt: Time
}

type OrganizationPage implements Pages {
    content: [Organization!]!
    totalPages: Int!
    totalElements: Int64!
    totalAvailable: Int64!
}

input OrganizationInput {
    """
    The name of the organization.
    **Required.**
    """
    customId:      String
    name:          String
    description:   String
    notes:         String
    domains:       [String!]
    website:       String
    industry:      String
    subIndustry:   String
    industryGroup: String
    public:        Boolean
    isCustomer:    Boolean
    customFields:  [CustomFieldInput!]
    market:        Market
    logo:               String
    employeeGrowthRate: String
    headquarters:       String
    yearFounded:        Int64
    employees:     Int64
    slackChannelId:     String
    appSource:     String

    fieldSets:     [FieldSetInput!] @deprecated
    templateId:    ID @deprecated
    isPublic:      Boolean @deprecated(reason: "Use public")
    referenceId:   String @deprecated(reason: "Use customId")
    note:          String @deprecated(reason: "Use notes")
    logoUrl:       String @deprecated(reason: "Use logo")
}

input OrganizationUpdateInput {
    id:                 ID!
    customId:           String
    """
    Set to true when partial update is needed. Empty or missing fields will not be ignored.
    """
    patch:              Boolean @deprecated(reason: "all updates are patched now")
    name:               String
    description:        String
    notes:              String
    website:            String
    industry:           String
    subIndustry:        String
    industryGroup:      String
    public:             Boolean
    isCustomer:         Boolean
    market:             Market
    employees:          Int64
    targetAudience:     String
    valueProposition:   String
    lastFundingRound:   FundingRound
    lastFundingAmount:  String
    logo:               String
    employeeGrowthRate: String
    headquarters:       String
    yearFounded:        Int64
    slackChannelId:     String

    isPublic:           Boolean @deprecated(reason: "Use public")
    logoUrl:            String @deprecated(reason: "Use logo")
    domains:            [String!] @deprecated(reason: "to be implemented in separate mutation, add and remove by domain")
    note:               String @deprecated(reason: "Use notes")
    referenceId: String @deprecated(reason: "Use customId")
}

input LinkOrganizationsInput {
    organizationId: ID!
    subOrganizationId: ID!
    type: String
}

input OnboardingStatusInput {
    organizationId: ID!
    status: OnboardingStatus!
    comments: String
}

type SuggestedMergeOrganization {
    organization: Organization!
    confidence: Float
    suggestedAt: Time
    suggestedBy: String
}

enum Market {
    B2B
    B2C
    MARKETPLACE
}

enum FundingRound {
    PRE_SEED
    SEED
    SERIES_A
    SERIES_B
    SERIES_C
    SERIES_D
    SERIES_E
    SERIES_F
    IPO
    FRIENDS_AND_FAMILY
    ANGEL
    BRIDGE
}

enum OnboardingStatus {
    NOT_APPLICABLE
    NOT_STARTED
    ON_TRACK
    LATE
    STUCK
    DONE
    SUCCESSFUL
}

enum LastTouchpointType {
    PAGE_VIEW
    INTERACTION_SESSION
    NOTE
    INTERACTION_EVENT_EMAIL_SENT
    INTERACTION_EVENT_PHONE_CALL
    INTERACTION_EVENT_CHAT
    MEETING
    ANALYSIS
    ACTION_CREATED
    ACTION
    LOG_ENTRY
    ISSUE_CREATED
    ISSUE_UPDATED
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/organization_plan.graphqls", Input: `extend type Mutation {
    organizationPlan_Create(input: OrganizationPlanInput!): OrganizationPlan!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlan_Update(input: OrganizationPlanUpdateInput!): OrganizationPlan!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlan_Duplicate(id: ID!, organizationId: ID!): OrganizationPlan!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlanMilestone_Create(input: OrganizationPlanMilestoneInput!): OrganizationPlanMilestone!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlanMilestone_Update(input: OrganizationPlanMilestoneUpdateInput!): OrganizationPlanMilestone!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlanMilestone_BulkUpdate(input: [OrganizationPlanMilestoneUpdateInput!]!): [OrganizationPlanMilestone!]!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlanMilestone_Reorder(input: OrganizationPlanMilestoneReorderInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlanMilestone_Duplicate(organizationId: ID!, organizationPlanId: ID!, id: ID!): OrganizationPlanMilestone!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Query {
    organizationPlan(id: ID!): OrganizationPlan! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlansForOrganization(organizationId: ID!): [OrganizationPlan!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organizationPlans(retired: Boolean): [OrganizationPlan!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type OrganizationPlan implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    name:               String!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
    retired:            Boolean!
    milestones:         [OrganizationPlanMilestone!]! @goField(forceResolver: true)
    retiredMilestones:  [OrganizationPlanMilestone!]! @goField(forceResolver: true)
    statusDetails:      OrganizationPlanStatusDetails!
    masterPlanId:       ID!
}

type OrganizationPlanMilestone implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    name:               String!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
    order:              Int64!
    dueDate:            Time!
    optional:           Boolean!
    items:              [OrganizationPlanMilestoneItem!]!
    retired:            Boolean!
    statusDetails:      OrganizationPlanMilestoneStatusDetails!
    adhoc:              Boolean!
}

enum OnboardingPlanStatus {
    NOT_STARTED
    ON_TRACK
    LATE
    DONE
    NOT_STARTED_LATE
    DONE_LATE
}

enum OnboardingPlanMilestoneStatus {
    NOT_STARTED
    STARTED
    DONE
    NOT_STARTED_LATE
    STARTED_LATE
    DONE_LATE
}

enum OnboardingPlanMilestoneItemStatus {
    NOT_DONE
    SKIPPED
    DONE
    NOT_DONE_LATE
    SKIPPED_LATE
    DONE_LATE
}

type OrganizationPlanStatusDetails {
    status: OnboardingPlanStatus!
    updatedAt: Time!
    text: String!
}

type OrganizationPlanMilestoneStatusDetails {
    status: OnboardingPlanMilestoneStatus!
    updatedAt: Time!
    text: String!
}

input OrganizationPlanStatusDetailsInput {
    status: OnboardingPlanStatus!
    updatedAt: Time!
    text: String!
}

input OrganizationPlanMilestoneStatusDetailsInput {
    status: OnboardingPlanMilestoneStatus!
    updatedAt: Time!
    text: String!
}

type OrganizationPlanMilestoneItem {
    status: OnboardingPlanMilestoneItemStatus!
    updatedAt: Time!
    text: String!
    uuid: ID!
}

input OrganizationPlanInput {
    name: String
    masterPlanId: String
    organizationId: ID!
}

input OrganizationPlanUpdateInput {
    id: ID!
    name: String
    retired: Boolean
    statusDetails: OrganizationPlanStatusDetailsInput
    organizationId: ID!
}

input OrganizationPlanMilestoneInput {
    organizationPlanId: ID!
    name: String
    order: Int64!
    dueDate: Time!
    createdAt: Time!
    optional: Boolean!
    items: [String!]!
    organizationId: ID!
    adhoc: Boolean!
}

input OrganizationPlanMilestoneItemInput {
    status: OnboardingPlanMilestoneItemStatus!
    updatedAt: Time!
    text: String!
    uuid: ID
}

input OrganizationPlanMilestoneUpdateInput {
    organizationPlanId: ID!
    id: ID!
    name: String
    order: Int64
    dueDate: Time
    updatedAt: Time!
    optional: Boolean
    retired: Boolean
    items: [OrganizationPlanMilestoneItemInput]
    statusDetails: OrganizationPlanMilestoneStatusDetailsInput
    organizationId: ID!
    adhoc: Boolean
}

input OrganizationPlanMilestoneReorderInput {
    organizationPlanId: ID!
    organizationId: ID!
    orderedIds: [ID!]!
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/page_view.graphqls", Input: `type PageView implements Node & SourceFields {
    id: ID!
    startedAt: Time!
    endedAt: Time!
    pageTitle: String!
    pageUrl: String!
    application: String!
    sessionId: ID!
    orderInSession: Int64!
    engagedTime: Int64!
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/phone.graphqls", Input: `extend type Query {
    phoneNumber(id: ID!): PhoneNumber! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    phoneNumberMergeToContact(contactId : ID!, input: PhoneNumberInput!): PhoneNumber! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberUpdateInContact(contactId : ID!, input: PhoneNumberUpdateInput!): PhoneNumber! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberRemoveFromContactByE164(contactId : ID!, e164: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberRemoveFromContactById(contactId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    phoneNumberMergeToOrganization(organizationId : ID!, input: PhoneNumberInput!): PhoneNumber! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberUpdateInOrganization(organizationId : ID!, input: PhoneNumberUpdateInput!): PhoneNumber! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberRemoveFromOrganizationByE164(organizationId : ID!, e164: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberRemoveFromOrganizationById(organizationId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    phoneNumberMergeToUser(userId : ID!, input: PhoneNumberInput!): PhoneNumber! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberUpdateInUser(userId : ID!, input: PhoneNumberUpdateInput!): PhoneNumber! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberRemoveFromUserByE164(userId : ID!, e164: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    phoneNumberRemoveFromUserById(userId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

"""
Describes a phone number associated with a ` + "`" + `Contact` + "`" + ` in customerOS.
**A ` + "`" + `return` + "`" + ` object.**
"""
type PhoneNumber {
    """
    The unique ID associated with the phone number. 
    **Required**
    """
    id: ID!
    
    """
    The phone number in e164 format. 
    """
    e164: String
    rawPhoneNumber: String
    validated: Boolean
    country: Country @goField(forceResolver: true)

    """
    Defines the type of phone number.
    """
    label: PhoneNumberLabel

    """
    Determines if the phone number is primary or not.
    **Required**
    """
    primary: Boolean!

    createdAt: Time!
    updatedAt: Time!

    source: DataSource!
    appSource: String

    users: [User!]! @goField(forceResolver: true)
    contacts: [Contact!]! @goField(forceResolver: true)
    organizations: [Organization!]! @goField(forceResolver: true)
}

"""
Describes a phone number associated with a ` + "`" + `Contact` + "`" + ` in customerOS.
**A ` + "`" + `create` + "`" + ` object.**
"""
input PhoneNumberInput {
    
    """
    The phone number in e164 format. 
    **Required**
    """
    phoneNumber: String!

    countryCodeA2: String

    """
    Defines the type of phone number.
    """
    label: PhoneNumberLabel

    """
    Determines if the phone number is primary or not.
    **Required**
    """
    primary: Boolean
}

"""
Describes a phone number associated with a ` + "`" + `Contact` + "`" + ` in customerOS.
**An ` + "`" + `update` + "`" + ` object.**
"""
input PhoneNumberUpdateInput {
    
    """
    The unique ID associated with the phone number. 
    **Required**
    """
    id: ID!

    """
    Defines the type of phone number.
    """
    label: PhoneNumberLabel

    """
    Determines if the phone number is primary or not.
    **Required**
    """
    primary: Boolean

    phoneNumber: String
    countryCodeA2: String
}

"""
Defines the type of phone number.
**A ` + "`" + `response` + "`" + ` object. **
"""
enum PhoneNumberLabel {
    MAIN
    WORK
    HOME
    MOBILE
    OTHER
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/player.graphqls", Input: `input PlayerInput {
    identityId: String
    authId: String!
    provider: String!
    appSource: String
}

input PlayerUpdate {
    identityId: String
    appSource: String
}

type PlayerUser {
    user: User!
    default: Boolean!
    tenant: String!
}

type Player {
    id: ID!
    identityId: String
    authId: String!
    users: [PlayerUser!]! @goField(forceResolver: true)
    provider: String!
    createdAt: Time!
    updatedAt: Time!
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

extend type Query {
    player_ByAuthIdProvider(authId: String!, provider: String!) :Player! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER, OWNER, USER])
}

extend type Mutation {
    player_Merge(userId: ID!, input: PlayerInput!): Result! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER, OWNER])
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/query.graphqls", Input: `type Query {
    entityTemplates(extends: EntityTemplateExtension) :[EntityTemplate!]!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/reminders.graphqls", Input: `extend type Mutation {
    reminder_Create(input: ReminderInput!): Reminder!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    reminder_Update(input: ReminderUpdateInput!): Reminder!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Query {
    reminder(id: ID!): Reminder! @hasRole(roles: [ADMIN, USER]) @hasTenant
    remindersForOrganization(organizationId: ID!, dismissed: Boolean): [Reminder!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type Reminder implements MetadataInterface {
    metadata:           Metadata!
    content:            String!
    owner:              User! @goField(forceResolver: true)
    dueDate:            Time!
    dismissed:          Boolean!
}

input ReminderInput {
    content:            String!
    dueDate:            Time!
    organizationId:     ID!
    userId:             ID!
}

input ReminderUpdateInput {
    id:                 ID!
    content:            String
    dueDate:            Time
    dismissed:          Boolean
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/result.graphqls", Input: `"""
Describes the success or failure of the GraphQL call.
**A ` + "`" + `return` + "`" + ` object**
"""
type Result {
    
    """
    The result of the GraphQL call.
    **Required.**
    """
    result: Boolean!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/scalar.graphqls", Input: `scalar Time

scalar Int64

scalar Any @goModel(model:"model.AnyTypeValue")`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/search.graphqls", Input: `extend type Query {
    gcli_Search(keyword: String!, limit: Int): [GCliItem!]!
}

type GCliItem {
    id: ID!
    type: GCliSearchResultType!
    display: String!
    data: [GCliAttributeKeyValuePair!]
}

type GCliAttributeKeyValuePair {
    key:String!
    value:String!
    display:String
}

enum GCliCacheItemType {
    STATE
    CONTACT
    ORGANIZATION
}

enum GCliSearchResultType {
    EMAIL
    CONTACT
    ORGANIZATION
    ORGANIZATION_RELATIONSHIP
    STATE
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/service_line_item.graphqls", Input: `extend type Query {
    serviceLineItem(id: ID!): ServiceLineItem!
}
extend type Mutation {
    contractLineItem_Create(input: ServiceLineItemInput!): ServiceLineItem! @hasRole(roles: [ADMIN, USER]) @hasTenant
    contractLineItem_Update(input: ServiceLineItemUpdateInput!): ServiceLineItem! @hasRole(roles: [ADMIN, USER]) @hasTenant
    contractLineItem_Close(input: ServiceLineItemCloseInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant

    serviceLineItem_Delete(id: ID!): DeleteResponse! @hasRole(roles: [ADMIN, USER]) @hasTenant
    serviceLineItem_BulkUpdate(input: ServiceLineItemBulkUpdateInput!): [ID!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type ServiceLineItem implements MetadataInterface {
    metadata:           Metadata!
    billingCycle:       BilledType!
    comments:           String!
    description:        String!
    parentId:           ID!
    price:              Float!
    quantity:           Int64!
    serviceEnded:       Time
    serviceStarted:     Time!
    tax:                Tax!
    createdBy:          User @goField(forceResolver: true)
    externalLinks:      [ExternalSystem!]! @goField(forceResolver: true)
}

input ServiceLineItemInput {
    contractId:         ID!
    description:        String
    billingCycle:       BilledType
    price:              Float
    quantity:           Int64
    tax:                TaxInput
    appSource:          String
    serviceStarted:     Time
    serviceEnded:       Time
}

input ServiceLineItemUpdateInput {
    id:                         ID
    description:                String
    billingCycle:               BilledType
    price:                      Float
    quantity:                   Int64
    tax:                        TaxInput
    comments:                   String
    appSource:                  String
    isRetroactiveCorrection:    Boolean
    serviceStarted:             Time
    serviceEnded:               Time
}

input ServiceLineItemBulkUpdateInput {
    serviceLineItems:   [ServiceLineItemBulkUpdateItem]!
    contractId:         ID!
    invoiceNote:        String
}

input ServiceLineItemBulkUpdateItem {
    serviceLineItemId:       ID
    name:                    String
    billed:                  BilledType
    price:                   Float
    quantity:                Int64
    vatRate:                 Float
    comments:                String
    isRetroactiveCorrection: Boolean
    serviceStarted:          Time
}

input ServiceLineItemCloseInput {
    id:             ID!
    endedAt:        Time
    serviceEnded:   Time
}


enum BilledType {
    NONE
    MONTHLY
    QUARTERLY
    ANNUALLY
    ONCE
    USAGE
}

input TaxInput {
    taxRate:    Float!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/slack.graphqls", Input: `extend type Query {
    slack_Channels(pagination: Pagination): SlackChannelPage! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type SlackChannelPage implements Pages {
    content: [SlackChannel!]!
    totalPages: Int!
    totalElements: Int64!
    totalAvailable: Int64!
}

type SlackChannel {
    metadata:              Metadata!
    organization:          Organization @goField(forceResolver: true)
    channelId:             String!
    channelName:           String!
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/social.graphqls", Input: `extend type Mutation {
    social_Update(input: SocialUpdateInput!): Social! @hasRole(roles: [ADMIN, USER]) @hasTenant
    social_Remove(socialId: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type Social implements SourceFields & Node {
    id: ID!
    platformName: String
    url: String!
    createdAt: Time!
    updatedAt: Time!
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

input SocialInput {
    platformName: String
    url: String!
    appSource: String
}

input SocialUpdateInput {
    id: ID!
    platformName: String
    url: String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/source.graphqls", Input: `enum DataSource {
    NA,
    OPENLINE
    WEBSCRAPE
    HUBSPOT
    ZENDESK_SUPPORT
    PIPEDRIVE
    SLACK
    INTERCOM
    SALESFORCE
    STRIPE
    MIXPANEL
    CLOSE
    OUTLOOK
    UNTHREAD
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/state.graphqls", Input: `type State {
    id: ID!
    country: Country!
    name: String!
    code: String!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/tag.graphqls", Input: `extend type Query {
    tags: [Tag!]!
}

extend type Mutation {
    tag_Create(input: TagInput!): Tag!
    tag_Update(input: TagUpdateInput!): Tag
    tag_Delete(id: ID!): Result
}

type Tag {
    id: ID!
    name: String!
    createdAt: Time!
    updatedAt: Time!
    source: DataSource!
    appSource: String!
}

input TagInput {
    name: String!
    appSource: String
}

input TagUpdateInput {
    id: ID!
    name: String!
}

input TagIdOrNameInput {
    id: ID
    name: String
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/tenant.graphqls", Input: `extend type Query {
    tenant: String!
    tenant_ByWorkspace(workspace: WorkspaceInput!): String @hasRole(roles: [USER, ADMIN])
    tenant_ByEmail(email: String!): String @hasRole(roles: [ADMIN])

    tenantBillingProfiles: [TenantBillingProfile!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
    tenantBillingProfile(id: ID!): TenantBillingProfile! @hasRole(roles: [ADMIN, USER]) @hasTenant
    tenantSettings: TenantSettings! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    tenant_Merge(tenant: TenantInput!): String! @hasRole(roles: [ADMIN])
    tenant_AddBillingProfile(input: TenantBillingProfileInput!): TenantBillingProfile! @hasRole(roles: [ADMIN, USER]) @hasTenant
    tenant_UpdateBillingProfile(input: TenantBillingProfileUpdateInput!): TenantBillingProfile! @hasRole(roles: [ADMIN, USER]) @hasTenant
    tenant_UpdateSettings(input: TenantSettingsInput): TenantSettings! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type TenantSettings {
    logoRepositoryFileId:   String
    baseCurrency:           Currency
    billingEnabled:         Boolean!

    logoUrl:                String! @deprecated(reason: "Use logoRepositoryFileId")
}

type TenantBillingProfile implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
    email:              String! @deprecated(reason: "Use sendInvoicesFrom")
    phone:              String!
    addressLine1:       String!
    addressLine2:       String!
    addressLine3:       String!
    locality:           String!
    country:            String!
    zip:                String!
    legalName:          String!
    domesticPaymentsBankInfo:       String!
    internationalPaymentsBankInfo:  String!
    vatNumber:                      String!
    sendInvoicesFrom:               String!
    sendInvoicesBcc:                String!
    canPayWithCard:                 Boolean! @deprecated(reason: "Not used")
    canPayWithDirectDebitSEPA:      Boolean! @deprecated(reason: "Not used")
    canPayWithDirectDebitACH:       Boolean! @deprecated(reason: "Not used")
    canPayWithDirectDebitBacs:      Boolean! @deprecated(reason: "Not used")
    canPayWithBankTransfer:         Boolean!
    canPayWithPigeon:               Boolean!
}

input TenantInput {
    name: String!
    appSource: String
}

input TenantBillingProfileInput {
    email:              String @deprecated(reason: "Use sendInvoicesFrom")
    phone:              String
    addressLine1:       String
    addressLine2:       String
    addressLine3:       String
    locality:           String
    country:            String
    zip:                String
    legalName:          String
    domesticPaymentsBankInfo:      String
    internationalPaymentsBankInfo: String
    vatNumber: String!
    sendInvoicesFrom: String!
    sendInvoicesBcc: String
    canPayWithCard: Boolean! @deprecated(reason: "Not used")
    canPayWithDirectDebitSEPA: Boolean! @deprecated(reason: "Not used")
    canPayWithDirectDebitACH: Boolean! @deprecated(reason: "Not used")
    canPayWithDirectDebitBacs: Boolean! @deprecated(reason: "Not used")
    canPayWithBankTransfer: Boolean!
    canPayWithPigeon: Boolean!
}

input TenantBillingProfileUpdateInput {
    id:                 ID!
    patch:              Boolean
    email:              String @deprecated(reason: "Use sendInvoicesFrom")
    phone:              String
    addressLine1:       String
    addressLine2:       String
    addressLine3:       String
    locality:           String
    country:            String
    zip:                String
    legalName:          String
    domesticPaymentsBankInfo:      String
    internationalPaymentsBankInfo: String
    vatNumber:                  String
    sendInvoicesFrom:           String
    sendInvoicesBcc:            String
    canPayWithCard:             Boolean @deprecated(reason: "Not used")
    canPayWithDirectDebitSEPA:  Boolean @deprecated(reason: "Not used")
    canPayWithDirectDebitACH:   Boolean @deprecated(reason: "Not used")
    canPayWithDirectDebitBacs:  Boolean @deprecated(reason: "Not used")
    canPayWithBankTransfer:     Boolean
    canPayWithPigeon:           Boolean
}

input TenantSettingsInput {
    patch:                  Boolean
    logoUrl:                String
    logoRepositoryFileId:   String
    baseCurrency:           Currency
    billingEnabled:         Boolean
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/tenant_billable.graphqls", Input: `extend type Query {
    billableInfo: TenantBillableInfo! @hasRole(roles: [USER, ADMIN])
}

type TenantBillableInfo {
    whitelistedOrganizations: Int64!
    whitelistedContacts: Int64!
    greylistedOrganizations: Int64!
    greylistedContacts: Int64!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/timeline_event.graphqls", Input: `union TimelineEvent = PageView | InteractionSession | Note | InteractionEvent | Analysis | Issue | Meeting | Action | LogEntry

extend type Query {
    timelineEvents(ids: [ID!]!): [TimelineEvent!]!
}

enum TimelineEventType {
    PAGE_VIEW
    INTERACTION_SESSION
    NOTE
    INTERACTION_EVENT
    ANALYSIS
    ISSUE
    MEETING
    ACTION
    LOG_ENTRY
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/types.graphqls", Input: `type DeleteResponse {
    accepted: Boolean!
    completed: Boolean!
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/user.graphqls", Input: `extend type Query {
    users(pagination: Pagination, where: Filter, sort: [SortBy!]): UserPage!
    user(id: ID!): User!

    user_ByEmail(email: String!) :User! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER, OWNER, USER]) @hasTenant
}

extend type Mutation {
    user_Create(input: UserInput!): User! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_Update(input: UserUpdateInput!): User! @hasTenant
    user_AddRole(id: ID!, role: Role!): User! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_RemoveRole(id: ID!, role: Role!): User! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_AddRoleInTenant(id: ID!, tenant: String!, role: Role!): User! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER])
    user_RemoveRoleInTenant(id: ID!, tenant: String!, role: Role!): User! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER])
    user_Delete(id: ID!): Result! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_DeleteInTenant(id: ID!, tenant: String!): Result! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER])

    customer_user_AddJobRole(id: ID!, jobRoleInput: JobRoleInput!) : CustomerUser! @hasRole(roles: [ADMIN, OWNER, CUSTOMER_OS_PLATFORM_OWNER]) @hasTenant
}

"""
Describes the User of customerOS.  A user is the person who logs into the Openline platform.
**A ` + "`" + `return` + "`" + ` object**
"""
type User {

    """
    The unique ID associated with the customerOS user.
    **Required**
    """
    id: ID!

    """
    The first name of the customerOS user.
    **Required**
    """
    firstName: String!

    """
    The last name of the customerOS user.
    **Required**
    """
    lastName: String!
    name: String
    internal: Boolean!
    bot: Boolean!
    timezone: String
    profilePhotoUrl: String

    player: Player! @goField(forceResolver: true)


    roles: [Role!]! @goField(forceResolver: true)

    """
    All email addresses associated with a user in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    emails: [Email!] @goField(forceResolver: true)
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)

    """
    Timestamp of user creation.
    **Required**
    """
    createdAt: Time!
    updatedAt: Time!

    jobRoles: [JobRole!]! @goField(forceResolver: true)
    calendars: [Calendar!]! @goField(forceResolver: true)

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

"""
Specifies how many pages of ` + "`" + `User` + "`" + ` information has been returned in the query response.
**A ` + "`" + `return` + "`" + ` object.**
"""
type UserPage implements Pages {

    """
    A ` + "`" + `User` + "`" + ` entity in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    content: [User!]!

    """
    Total number of pages in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    Total number of elements in the query response.
    **Required.**
    """
    totalElements: Int64!
}

"""
Describes the User of customerOS.  A user is the person who logs into the Openline platform.
**A ` + "`" + `create` + "`" + ` object.**
"""
input UserInput {

    """
    The first name of the customerOS user.
    **Required**
    """
    firstName: String!

    """
    The last name of the customerOS user.
    **Required**
    """
    lastName: String!
    name: String
    timezone: String
    profilePhotoUrl: String

    """
    The email address of the customerOS user.
    **Required**
    """
    email: EmailInput!

    """
    Player to associate with the user with. If the person does not exist, it will be created.
    **Required**
    """
    player: PlayerInput!

    """
    The name of the app performing the create.
    **Optional**
    """
    appSource: String

    """
    The Job Roles of the user.
    **Optional**
    """
    jobRoles: [JobRoleInput!]

}

input UserUpdateInput {

    id: ID!
    """
    The first name of the customerOS user.
    **Required**
    """
    firstName: String!

    """
    The last name of the customerOS user.
    **Required**
    """
    lastName: String!
    name: String
    timezone: String
    profilePhotoUrl: String
}

type CustomerUser {
    id: ID!
    jobRole: CustomerJobRole!
}
`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/view.graphqls", Input: `extend type Query {
    tableViewDefs(pagination: Pagination, where: Filter, sort: SortBy): TableViewDefPage! @hasTenant
}

type TableViewDef implements Node {
    id:                 ID!
    name:               String!
    order:              Int
    type:               ViewType
    icon:               String
    columns:            [ColumnDef]
    filters:            String
    sorting:            String
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type TableViewDefPage implements Pages {
    content: [TableViewDef!]!
    totalPages: Int!
    totalElements: Int64!
    totalAvailable: Int64!
}

type ViewType implements Node {
    id:                 ID!
    name:               String
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type ColumnDef implements Node {
    id:                 ID!
    type:               ViewType
    columnType:         ColumnType
    isFilterable:       Boolean
    isSortable:         Boolean
    isDefaultSort:      Boolean
    isVisible:          Boolean
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type ColumnType implements Node {
    id:                 ID!
    name:               String
    viewTypeId:         String
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}`, BuiltIn: false},
	{Name: "../../../customer-os-api/graph/schemas/workspace.graphqls", Input: `input WorkspaceInput {
    name: String!
    provider: String!
    appSource: String
}

type Workspace {
    id: ID!
    name: String!
    provider: String!
    createdAt: Time!
    updatedAt: Time!
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}


extend type Mutation {
    workspace_MergeToTenant(workspace: WorkspaceInput!, tenant: String!): Result! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER])
    workspace_Merge(workspace: WorkspaceInput!): Result! @hasRole(roles: [OWNER]) @hasTenant
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.Role
	if tmp, ok := rawArgs["roles"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roles"))
		arg0, err = ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roles"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contact_notesByTime_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TimeRange
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOTimeRange2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimeRange(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contact_notes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contact_organizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 []*model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Contact_timelineEventsTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.TimelineEventType
	if tmp, ok := rawArgs["timelineEventTypes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timelineEventTypes"))
		arg0, err = ec.unmarshalOTimelineEventType2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timelineEventTypes"] = arg0
	return args, nil
}

func (ec *executionContext) field_Contact_timelineEvents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg0, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 []model.TimelineEventType
	if tmp, ok := rawArgs["timelineEventTypes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timelineEventTypes"))
		arg2, err = ec.unmarshalOTimelineEventType2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timelineEventTypes"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_analysis_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AnalysisInput
	if tmp, ok := rawArgs["analysis"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysis"))
		arg0, err = ec.unmarshalNAnalysisInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["analysis"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_attachment_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.AttachmentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAttachmentInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachmentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bankAccount_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BankAccountCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOBankAccountCreateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccountCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bankAccount_Delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_bankAccount_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.BankAccountUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOBankAccountUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccountUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_billingProfile_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BillingProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBillingProfileInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_billingProfile_LinkEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BillingProfileLinkEmailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBillingProfileLinkEmailInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileLinkEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_billingProfile_LinkLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BillingProfileLinkLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBillingProfileLinkLocationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileLinkLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_billingProfile_UnlinkEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BillingProfileLinkEmailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBillingProfileLinkEmailInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileLinkEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_billingProfile_UnlinkLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BillingProfileLinkLocationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBillingProfileLinkLocationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileLinkLocationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_billingProfile_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BillingProfileUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBillingProfileUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_AddNewLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_AddOrganizationById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContactOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContactOrganizationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_AddSocial_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.SocialInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNSocialInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_AddTagById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContactTagInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContactTagInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactTagInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_Archive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContactInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContactInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_HardDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_Merge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["primaryContactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryContactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["primaryContactId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["mergedContactIds"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mergedContactIds"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mergedContactIds"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_RemoveLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["locationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_RemoveOrganizationById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContactOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContactOrganizationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_RemoveTagById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContactTagInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContactTagInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactTagInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_RestoreFromArchive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contact_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContactUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContactUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contractLineItem_Close_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ServiceLineItemCloseInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNServiceLineItemCloseInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemCloseInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contractLineItem_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ServiceLineItemInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNServiceLineItemInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contractLineItem_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ServiceLineItemUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNServiceLineItemUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contract_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContractInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContractInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contract_Delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_contract_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ContractUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNContractUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldDeleteFromContactById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldDeleteFromContactByName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["fieldName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fieldName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldDeleteFromFieldSetById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["fieldSetId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldSetId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fieldSetId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldMergeToContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.CustomFieldInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCustomFieldInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldMergeToFieldSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["fieldSetId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldSetId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fieldSetId"] = arg1
	var arg2 model.CustomFieldInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNCustomFieldInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldTemplate_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CustomFieldTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCustomFieldTemplateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldUpdateInContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.CustomFieldUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCustomFieldUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldUpdateInFieldSet_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["fieldSetId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldSetId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fieldSetId"] = arg1
	var arg2 model.CustomFieldUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNCustomFieldUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_customFieldsMergeAndUpdateInContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 []*model.CustomFieldInput
	if tmp, ok := rawArgs["customFields"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customFields"))
		arg1, err = ec.unmarshalOCustomFieldInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["customFields"] = arg1
	var arg2 []*model.FieldSetInput
	if tmp, ok := rawArgs["fieldSets"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldSets"))
		arg2, err = ec.unmarshalOFieldSetInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["fieldSets"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_customer_contact_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CustomerContactInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCustomerContactInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerContactInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_customer_user_AddJobRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.JobRoleInput
	if tmp, ok := rawArgs["jobRoleInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobRoleInput"))
		arg1, err = ec.unmarshalNJobRoleInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jobRoleInput"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailDelete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_emailMergeToContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.EmailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNEmailInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailMergeToOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 model.EmailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNEmailInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailMergeToUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.EmailInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNEmailInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailRemoveFromContactById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailRemoveFromContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailRemoveFromOrganizationById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailRemoveFromOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailRemoveFromUserById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailRemoveFromUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailUpdateInContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.EmailUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNEmailUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailUpdateInOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 model.EmailUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNEmailUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_emailUpdateInUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.EmailUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNEmailUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_entityTemplateCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EntityTemplateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEntityTemplateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_fieldSetDeleteFromContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_fieldSetMergeToContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.FieldSetInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNFieldSetInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_fieldSetUpdateInContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.FieldSetUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNFieldSetUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_interactionEvent_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InteractionEventInput
	if tmp, ok := rawArgs["event"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
		arg0, err = ec.unmarshalNInteractionEventInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["event"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_interactionEvent_LinkAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["eventId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_interactionSession_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InteractionSessionInput
	if tmp, ok := rawArgs["session"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("session"))
		arg0, err = ec.unmarshalNInteractionSessionInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["session"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_interactionSession_LinkAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["sessionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sessionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_invoice_NextDryRunForContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contractId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contractId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invoice_Pay_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invoice_Simulate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InvoiceSimulateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInvoiceSimulateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceSimulateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invoice_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InvoiceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInvoiceUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invoice_Void_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invoicingCycle_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InvoicingCycleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInvoicingCycleInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_invoicingCycle_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InvoicingCycleUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNInvoicingCycleUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_jobRole_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.JobRoleInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNJobRoleInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_jobRole_Delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_jobRole_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.JobRoleUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNJobRoleUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_location_RemoveFromContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["locationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_location_RemoveFromOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["locationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_location_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LocationUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLocationUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocationUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_logEntry_AddTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.TagIDOrNameInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNTagIdOrNameInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_logEntry_CreateForOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 model.LogEntryInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNLogEntryInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLogEntryInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_logEntry_RemoveTag_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.TagIDOrNameInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNTagIdOrNameInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_logEntry_ResetTags_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*model.TagIDOrNameInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOTagIdOrNameInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_logEntry_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.LogEntryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNLogEntryUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLogEntryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlanMilestone_BulkUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.MasterPlanMilestoneUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMasterPlanMilestoneUpdateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneUpdateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlanMilestone_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MasterPlanMilestoneInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMasterPlanMilestoneInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlanMilestone_Duplicate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["masterPlanId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("masterPlanId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["masterPlanId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlanMilestone_Reorder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MasterPlanMilestoneReorderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMasterPlanMilestoneReorderInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneReorderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlanMilestone_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MasterPlanMilestoneUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMasterPlanMilestoneUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlan_CreateDefault_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MasterPlanInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMasterPlanInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlan_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MasterPlanInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMasterPlanInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlan_Duplicate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_masterPlan_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MasterPlanUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMasterPlanUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_AddNewLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_AddNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 *model.NoteInput
	if tmp, ok := rawArgs["note"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
		arg1, err = ec.unmarshalONoteInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["note"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MeetingInput
	if tmp, ok := rawArgs["meeting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meeting"))
		arg0, err = ec.unmarshalNMeetingInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meeting"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_LinkAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_LinkAttendedBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 model.MeetingParticipantInput
	if tmp, ok := rawArgs["participant"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participant"))
		arg1, err = ec.unmarshalNMeetingParticipantInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["participant"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_LinkRecording_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_UnlinkAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_UnlinkAttendedBy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 model.MeetingParticipantInput
	if tmp, ok := rawArgs["participant"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participant"))
		arg1, err = ec.unmarshalNMeetingParticipantInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["participant"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_UnlinkRecording_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_meeting_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["meetingId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meetingId"] = arg0
	var arg1 model.MeetingUpdateInput
	if tmp, ok := rawArgs["meeting"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meeting"))
		arg1, err = ec.unmarshalNMeetingUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["meeting"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_note_CreateForContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.NoteInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNoteInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_note_CreateForOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 model.NoteInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNNoteInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_note_Delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_note_LinkAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["noteId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noteId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_note_UnlinkAttachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["noteId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("noteId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["noteId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["attachmentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attachmentId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attachmentId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_note_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NoteUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNoteUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_opportunityRenewalUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OpportunityRenewalUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOpportunityRenewalUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["ownerUserId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerUserId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ownerUserId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_opportunityUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OpportunityUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOpportunityUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlanMilestone_BulkUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.OrganizationPlanMilestoneUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPlanMilestoneUpdateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneUpdateInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlanMilestone_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationPlanMilestoneInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPlanMilestoneInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlanMilestone_Duplicate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["organizationPlanId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPlanId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationPlanId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlanMilestone_Reorder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationPlanMilestoneReorderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPlanMilestoneReorderInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneReorderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlanMilestone_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationPlanMilestoneUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPlanMilestoneUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlan_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationPlanInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPlanInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlan_Duplicate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_organizationPlan_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationPlanUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationPlanUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_AddNewLocation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_AddSocial_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 model.SocialInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNSocialInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_AddSubsidiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LinkOrganizationsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLinkOrganizationsInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkOrganizationsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_ArchiveAll_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_Archive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_HideAll_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_Hide_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_Merge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["primaryOrganizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primaryOrganizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["primaryOrganizationId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["mergedOrganizationIds"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mergedOrganizationIds"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mergedOrganizationIds"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_RemoveSubsidiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["subsidiaryId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subsidiaryId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subsidiaryId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_SetOwner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_ShowAll_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_Show_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_UnsetOwner_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_UpdateOnboardingStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OnboardingStatusInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOnboardingStatusInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingStatusInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_organization_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OrganizationUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberMergeToContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.PhoneNumberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPhoneNumberInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberMergeToOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 model.PhoneNumberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPhoneNumberInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberMergeToUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.PhoneNumberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPhoneNumberInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberRemoveFromContactByE164_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["e164"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e164"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e164"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberRemoveFromContactById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberRemoveFromOrganizationByE164_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["e164"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e164"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e164"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberRemoveFromOrganizationById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberRemoveFromUserByE164_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["e164"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e164"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e164"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberRemoveFromUserById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberUpdateInContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["contactId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contactId"] = arg0
	var arg1 model.PhoneNumberUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPhoneNumberUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberUpdateInOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 model.PhoneNumberUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPhoneNumberUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberUpdateInUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.PhoneNumberUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPhoneNumberUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_player_Merge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 model.PlayerInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPlayerInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_reminder_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ReminderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReminderInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_reminder_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ReminderUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNReminderUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminderUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_serviceLineItem_BulkUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ServiceLineItemBulkUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNServiceLineItemBulkUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemBulkUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_serviceLineItem_Delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_social_Remove_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["socialId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socialId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["socialId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_social_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SocialUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSocialUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tag_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TagInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTagInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tag_Delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tag_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TagUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTagUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tenant_AddBillingProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TenantBillingProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTenantBillingProfileInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tenant_Merge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TenantInput
	if tmp, ok := rawArgs["tenant"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
		arg0, err = ec.unmarshalNTenantInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenant"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tenant_UpdateBillingProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.TenantBillingProfileUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNTenantBillingProfileUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfileUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tenant_UpdateSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.TenantSettingsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOTenantSettingsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_user_AddRoleInTenant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["tenant"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenant"] = arg1
	var arg2 model.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg2, err = ec.unmarshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_user_AddRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg1, err = ec.unmarshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_user_Create_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_user_DeleteInTenant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["tenant"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenant"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_user_Delete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_user_RemoveRoleInTenant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["tenant"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenant"] = arg1
	var arg2 model.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg2, err = ec.unmarshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_user_RemoveRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.Role
	if tmp, ok := rawArgs["role"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
		arg1, err = ec.unmarshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["role"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_user_Update_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UserUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUserUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_workspace_MergeToTenant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.WorkspaceInput
	if tmp, ok := rawArgs["workspace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspace"))
		arg0, err = ec.unmarshalNWorkspaceInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐWorkspaceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workspace"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["tenant"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenant"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tenant"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_workspace_Merge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.WorkspaceInput
	if tmp, ok := rawArgs["workspace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspace"))
		arg0, err = ec.unmarshalNWorkspaceInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐWorkspaceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workspace"] = arg0
	return args, nil
}

func (ec *executionContext) field_Organization_contacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 []*model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Organization_timelineEventsTotalCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []model.TimelineEventType
	if tmp, ok := rawArgs["timelineEventTypes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timelineEventTypes"))
		arg0, err = ec.unmarshalOTimelineEventType2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timelineEventTypes"] = arg0
	return args, nil
}

func (ec *executionContext) field_Organization_timelineEvents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *time.Time
	if tmp, ok := rawArgs["from"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
		arg0, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["from"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["size"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["size"] = arg1
	var arg2 []model.TimelineEventType
	if tmp, ok := rawArgs["timelineEventTypes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timelineEventTypes"))
		arg2, err = ec.unmarshalOTimelineEventType2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventTypeᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["timelineEventTypes"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_analysis_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_attachment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contact_ByEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contact_ByPhone_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["e164"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("e164"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["e164"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_contacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 []*model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_contract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboardView_Organizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalNPagination2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 *model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_dashboardView_Renewals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalNPagination2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 *model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_ARRBreakdown_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_GrossRevenueRetention_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_MRRPerCustomer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_NewCustomers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_OnboardingCompletion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_RetentionRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_RevenueAtRisk_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dashboard_TimeToOnboard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DashboardPeriodInput
	if tmp, ok := rawArgs["period"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("period"))
		arg0, err = ec.unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["period"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_email_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_entityTemplates_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EntityTemplateExtension
	if tmp, ok := rawArgs["extends"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extends"))
		arg0, err = ec.unmarshalOEntityTemplateExtension2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateExtension(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["extends"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_externalMeetings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["externalSystemId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalSystemId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["externalSystemId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["externalId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["externalId"] = arg1
	var arg2 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg2, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg2
	var arg3 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg3, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg3
	var arg4 []*model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg4, err = ec.unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_gcli_Search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["keyword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyword"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keyword"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_interactionEvent_ByEventIdentifier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["eventIdentifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventIdentifier"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["eventIdentifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_interactionEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_interactionSession_BySessionIdentifier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["sessionIdentifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionIdentifier"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sessionIdentifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_interactionSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_invoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_invoices_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 []*model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg3, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_issue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_logEntry_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_masterPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_masterPlans_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["retired"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retired"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["retired"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_meeting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_opportunity_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationPlansForOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizationPlans_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["retired"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retired"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["retired"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organization_ByCustomerOsId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["customerOsId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerOsId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["customerOsId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_organizations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 []*model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_phoneNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_player_ByAuthIdProvider_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["authId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["authId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_reminder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_remindersForOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["dismissed"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dismissed"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dismissed"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_serviceLineItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_slack_Channels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tableViewDefs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 *model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortBy(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_tenantBillingProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tenant_ByEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tenant_ByWorkspace_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.WorkspaceInput
	if tmp, ok := rawArgs["workspace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workspace"))
		arg0, err = ec.unmarshalNWorkspaceInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐWorkspaceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workspace"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_timelineEvents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["ids"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_user_ByEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg0, err = ec.unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg0
	var arg1 *model.Filter
	if tmp, ok := rawArgs["where"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
		arg1, err = ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["where"] = arg1
	var arg2 []*model.SortBy
	if tmp, ok := rawArgs["sort"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sort"))
		arg2, err = ec.unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sort"] = arg2
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Action_id(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_content(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_source(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_actionType(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_actionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ActionType)
	fc.Result = res
	return ec.marshalNActionType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐActionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_actionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionItem_id(ctx context.Context, field graphql.CollectedField, obj *model.ActionItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionItem_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ActionItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionItem_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionItem_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionItem_content(ctx context.Context, field graphql.CollectedField, obj *model.ActionItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionItem_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionItem_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionItem_source(ctx context.Context, field graphql.CollectedField, obj *model.ActionItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionItem_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionItem_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionItem_appSource(ctx context.Context, field graphql.CollectedField, obj *model.ActionItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionItem_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionItem_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_id(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_content(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_contentType(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_analysisType(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_analysisType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnalysisType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_analysisType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_describes(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_describes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Analysis().Describes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.DescriptionNode)
	fc.Result = res
	return ec.marshalNDescriptionNode2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDescriptionNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_describes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DescriptionNode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_source(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Analysis_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Analysis) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Analysis_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Analysis_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Analysis",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_id(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_basePath(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_basePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_basePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_cdnUrl(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_cdnUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CdnURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_cdnUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_fileName(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_fileName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_fileName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_mimeType(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_mimeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_size(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_source(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_metadata(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_bankName(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_bankName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_bankName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_currency(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Currency)
	fc.Result = res
	return ec.marshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_bankTransferEnabled(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_bankTransferEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankTransferEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_bankTransferEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_allowInternational(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_allowInternational(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowInternational, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_allowInternational(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_iban(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_iban(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iban, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_iban(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_bic(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_bic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_bic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_sortCode(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_sortCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_sortCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_accountNumber(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_accountNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_accountNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_routingNumber(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_routingNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutingNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_routingNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BankAccount_otherDetails(ctx context.Context, field graphql.CollectedField, obj *model.BankAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BankAccount_otherDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BankAccount_otherDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BankAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_billingCycle(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_billingCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractBillingCycle)
	fc.Result = res
	return ec.marshalOContractBillingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractBillingCycle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_billingCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractBillingCycle does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_invoicingStarted(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_invoicingStarted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoicingStarted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_invoicingStarted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_nextInvoicing(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_nextInvoicing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextInvoicing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_nextInvoicing(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_addressLine1(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_addressLine1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_addressLine1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_addressLine2(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_addressLine2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_addressLine2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_locality(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_locality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_locality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_region(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_region(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_country(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_postalCode(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_postalCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_postalCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_organizationLegalName(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_organizationLegalName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationLegalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_organizationLegalName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_billingEmail(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_billingEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_billingEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_invoiceNote(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_invoiceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_invoiceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_canPayWithCard(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_canPayWithCard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_canPayWithCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_canPayWithDirectDebit(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_canPayWithDirectDebit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithDirectDebit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_canPayWithDirectDebit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_canPayWithBankTransfer(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_canPayWithBankTransfer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithBankTransfer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_canPayWithBankTransfer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_payOnline(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_payOnline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayOnline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_payOnline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingDetails_payAutomatically(ctx context.Context, field graphql.CollectedField, obj *model.BillingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingDetails_payAutomatically(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PayAutomatically, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingDetails_payAutomatically(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_id(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_legalName(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_legalName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_legalName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_taxId(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_taxId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_taxId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_source(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BillingProfile_appSource(ctx context.Context, field graphql.CollectedField, obj *model.BillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BillingProfile_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BillingProfile_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_id(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_calType(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_calType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CalendarType)
	fc.Result = res
	return ec.marshalNCalendarType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCalendarType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_calType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CalendarType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_link(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_link(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_link(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_primary(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_primary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_primary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_source(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Calendar_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Calendar) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Calendar_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Calendar_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Calendar",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_id(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_type(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViewType)
	fc.Result = res
	return ec.marshalOViewType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐViewType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ViewType_id(ctx, field)
			case "name":
				return ec.fieldContext_ViewType_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_ViewType_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ViewType_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ViewType_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_columnType(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_columnType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColumnType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ColumnType)
	fc.Result = res
	return ec.marshalOColumnType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐColumnType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_columnType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ColumnType_id(ctx, field)
			case "name":
				return ec.fieldContext_ColumnType_name(ctx, field)
			case "viewTypeId":
				return ec.fieldContext_ColumnType_viewTypeId(ctx, field)
			case "createdAt":
				return ec.fieldContext_ColumnType_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ColumnType_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ColumnType_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ColumnType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_isFilterable(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_isFilterable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFilterable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_isFilterable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_isSortable(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_isSortable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSortable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_isSortable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_isDefaultSort(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_isDefaultSort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefaultSort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_isDefaultSort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_isVisible(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_isVisible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsVisible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_isVisible(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnDef_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.ColumnDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnDef_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.ColumnDef().CreatedBy(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnDef_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnDef",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnType_id(ctx context.Context, field graphql.CollectedField, obj *model.ColumnType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnType_name(ctx context.Context, field graphql.CollectedField, obj *model.ColumnType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnType_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnType_viewTypeId(ctx context.Context, field graphql.CollectedField, obj *model.ColumnType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnType_viewTypeId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnType_viewTypeId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnType_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ColumnType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnType_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnType_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ColumnType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnType_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnType_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ColumnType_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.ColumnType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ColumnType_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.ColumnType().CreatedBy(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ColumnType_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ColumnType",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_id(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_content(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_contentType(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Comment().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_source(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Comment_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Comment_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Comment().ExternalLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Comment_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Comment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_id(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_title(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_prefix(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_prefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_prefix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_name(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_firstName(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_lastName(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_description(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_timezone(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_timezone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_profilePhotoUrl(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePhotoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_profilePhotoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_label(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_source(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_tags(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Tag_source(ctx, field)
			case "appSource":
				return ec.fieldContext_Tag_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_jobRoles(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_jobRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().JobRoles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JobRole)
	fc.Result = res
	return ec.marshalNJobRole2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_jobRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobRole_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobRole_updatedAt(ctx, field)
			case "organization":
				return ec.fieldContext_JobRole_organization(ctx, field)
			case "contact":
				return ec.fieldContext_JobRole_contact(ctx, field)
			case "jobTitle":
				return ec.fieldContext_JobRole_jobTitle(ctx, field)
			case "primary":
				return ec.fieldContext_JobRole_primary(ctx, field)
			case "description":
				return ec.fieldContext_JobRole_description(ctx, field)
			case "company":
				return ec.fieldContext_JobRole_company(ctx, field)
			case "startedAt":
				return ec.fieldContext_JobRole_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_JobRole_endedAt(ctx, field)
			case "source":
				return ec.fieldContext_JobRole_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_JobRole_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_JobRole_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_organizations(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Organizations(rctx, obj, fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].([]*model.SortBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPage)
	fc.Result = res
	return ec.marshalNOrganizationPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_organizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_OrganizationPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_OrganizationPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_OrganizationPage_totalElements(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_OrganizationPage_totalAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contact_organizations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Contact_phoneNumbers(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_phoneNumbers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().PhoneNumbers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_phoneNumbers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_emails(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_emails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Emails(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_emails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_locations(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Locations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Location_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Location_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Location_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Location_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Location_appSource(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "rawAddress":
				return ec.fieldContext_Location_rawAddress(ctx, field)
			case "country":
				return ec.fieldContext_Location_country(ctx, field)
			case "region":
				return ec.fieldContext_Location_region(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "locality":
				return ec.fieldContext_Location_locality(ctx, field)
			case "street":
				return ec.fieldContext_Location_street(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "address2":
				return ec.fieldContext_Location_address2(ctx, field)
			case "zip":
				return ec.fieldContext_Location_zip(ctx, field)
			case "addressType":
				return ec.fieldContext_Location_addressType(ctx, field)
			case "houseNumber":
				return ec.fieldContext_Location_houseNumber(ctx, field)
			case "postalCode":
				return ec.fieldContext_Location_postalCode(ctx, field)
			case "plusFour":
				return ec.fieldContext_Location_plusFour(ctx, field)
			case "commercial":
				return ec.fieldContext_Location_commercial(ctx, field)
			case "predirection":
				return ec.fieldContext_Location_predirection(ctx, field)
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "timeZone":
				return ec.fieldContext_Location_timeZone(ctx, field)
			case "utcOffset":
				return ec.fieldContext_Location_utcOffset(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_socials(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_socials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Socials(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Social)
	fc.Result = res
	return ec.marshalNSocial2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_socials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Social_id(ctx, field)
			case "platformName":
				return ec.fieldContext_Social_platformName(ctx, field)
			case "url":
				return ec.fieldContext_Social_url(ctx, field)
			case "createdAt":
				return ec.fieldContext_Social_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Social_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Social_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Social_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Social_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Social", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_customFields(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_customFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().CustomFields(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomField)
	fc.Result = res
	return ec.marshalNCustomField2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_customFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomField_id(ctx, field)
			case "name":
				return ec.fieldContext_CustomField_name(ctx, field)
			case "datatype":
				return ec.fieldContext_CustomField_datatype(ctx, field)
			case "value":
				return ec.fieldContext_CustomField_value(ctx, field)
			case "source":
				return ec.fieldContext_CustomField_source(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomField_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomField_updatedAt(ctx, field)
			case "template":
				return ec.fieldContext_CustomField_template(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomField", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_fieldSets(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_fieldSets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().FieldSets(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FieldSet)
	fc.Result = res
	return ec.marshalNFieldSet2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_fieldSets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FieldSet_id(ctx, field)
			case "name":
				return ec.fieldContext_FieldSet_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_FieldSet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FieldSet_updatedAt(ctx, field)
			case "customFields":
				return ec.fieldContext_FieldSet_customFields(ctx, field)
			case "template":
				return ec.fieldContext_FieldSet_template(ctx, field)
			case "source":
				return ec.fieldContext_FieldSet_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldSet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_template(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_template(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Template(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EntityTemplate)
	fc.Result = res
	return ec.marshalOEntityTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_template(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntityTemplate_id(ctx, field)
			case "version":
				return ec.fieldContext_EntityTemplate_version(ctx, field)
			case "name":
				return ec.fieldContext_EntityTemplate_name(ctx, field)
			case "extends":
				return ec.fieldContext_EntityTemplate_extends(ctx, field)
			case "fieldSetTemplates":
				return ec.fieldContext_EntityTemplate_fieldSetTemplates(ctx, field)
			case "customFieldTemplates":
				return ec.fieldContext_EntityTemplate_customFieldTemplates(ctx, field)
			case "createdAt":
				return ec.fieldContext_EntityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EntityTemplate_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_owner(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contact_notes(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().Notes(rctx, obj, fc.Args["pagination"].(*model.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NotePage)
	fc.Result = res
	return ec.marshalNNotePage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNotePage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_notes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_NotePage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_NotePage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_NotePage_totalElements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NotePage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contact_notes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Contact_notesByTime(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_notesByTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().NotesByTime(rctx, obj, fc.Args["pagination"].(*model.TimeRange))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_notesByTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contact_notesByTime_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Contact_timelineEvents(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_timelineEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().TimelineEvents(rctx, obj, fc.Args["from"].(*time.Time), fc.Args["size"].(int), fc.Args["timelineEventTypes"].([]model.TimelineEventType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.TimelineEvent)
	fc.Result = res
	return ec.marshalNTimelineEvent2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_timelineEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimelineEvent does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contact_timelineEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Contact_timelineEventsTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Contact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contact().TimelineEventsTotalCount(rctx, obj, fc.Args["timelineEventTypes"].([]model.TimelineEventType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contact_timelineEventsTotalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Contact_timelineEventsTotalCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _ContactParticipant_contactParticipant(ctx context.Context, field graphql.CollectedField, obj *model.ContactParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactParticipant_contactParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContactParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactParticipant_contactParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactParticipant_type(ctx context.Context, field graphql.CollectedField, obj *model.ContactParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactParticipant_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactParticipant_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactsPage_content(ctx context.Context, field graphql.CollectedField, obj *model.ContactsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactsPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactsPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactsPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.ContactsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactsPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactsPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ContactsPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.ContactsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ContactsPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ContactsPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ContactsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_billingDetails(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_billingDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BillingDetails)
	fc.Result = res
	return ec.marshalOBillingDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_billingDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "billingCycle":
				return ec.fieldContext_BillingDetails_billingCycle(ctx, field)
			case "invoicingStarted":
				return ec.fieldContext_BillingDetails_invoicingStarted(ctx, field)
			case "nextInvoicing":
				return ec.fieldContext_BillingDetails_nextInvoicing(ctx, field)
			case "addressLine1":
				return ec.fieldContext_BillingDetails_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_BillingDetails_addressLine2(ctx, field)
			case "locality":
				return ec.fieldContext_BillingDetails_locality(ctx, field)
			case "region":
				return ec.fieldContext_BillingDetails_region(ctx, field)
			case "country":
				return ec.fieldContext_BillingDetails_country(ctx, field)
			case "postalCode":
				return ec.fieldContext_BillingDetails_postalCode(ctx, field)
			case "organizationLegalName":
				return ec.fieldContext_BillingDetails_organizationLegalName(ctx, field)
			case "billingEmail":
				return ec.fieldContext_BillingDetails_billingEmail(ctx, field)
			case "invoiceNote":
				return ec.fieldContext_BillingDetails_invoiceNote(ctx, field)
			case "canPayWithCard":
				return ec.fieldContext_BillingDetails_canPayWithCard(ctx, field)
			case "canPayWithDirectDebit":
				return ec.fieldContext_BillingDetails_canPayWithDirectDebit(ctx, field)
			case "canPayWithBankTransfer":
				return ec.fieldContext_BillingDetails_canPayWithBankTransfer(ctx, field)
			case "payOnline":
				return ec.fieldContext_BillingDetails_payOnline(ctx, field)
			case "payAutomatically":
				return ec.fieldContext_BillingDetails_payAutomatically(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BillingDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_committedPeriods(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_committedPeriods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommittedPeriods, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_committedPeriods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractEnded(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractEnded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractEnded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractEnded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractLineItems(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractLineItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().ContractLineItems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ServiceLineItem)
	fc.Result = res
	return ec.marshalOServiceLineItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractLineItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_ServiceLineItem_metadata(ctx, field)
			case "billingCycle":
				return ec.fieldContext_ServiceLineItem_billingCycle(ctx, field)
			case "comments":
				return ec.fieldContext_ServiceLineItem_comments(ctx, field)
			case "description":
				return ec.fieldContext_ServiceLineItem_description(ctx, field)
			case "parentId":
				return ec.fieldContext_ServiceLineItem_parentId(ctx, field)
			case "price":
				return ec.fieldContext_ServiceLineItem_price(ctx, field)
			case "quantity":
				return ec.fieldContext_ServiceLineItem_quantity(ctx, field)
			case "serviceEnded":
				return ec.fieldContext_ServiceLineItem_serviceEnded(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_ServiceLineItem_serviceStarted(ctx, field)
			case "tax":
				return ec.fieldContext_ServiceLineItem_tax(ctx, field)
			case "createdBy":
				return ec.fieldContext_ServiceLineItem_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_ServiceLineItem_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractName(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractRenewalCycle(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractRenewalCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractRenewalCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractRenewalCycle)
	fc.Result = res
	return ec.marshalNContractRenewalCycle2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractRenewalCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractRenewalCycle does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractSigned(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractSigned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractSigned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractSigned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractUrl(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_currency(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Currency)
	fc.Result = res
	return ec.marshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().ExternalLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_billingEnabled(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_billingEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_billingEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_opportunities(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_opportunities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().Opportunities(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Opportunity)
	fc.Result = res
	return ec.marshalOOpportunity2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_opportunities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Opportunity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Opportunity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Opportunity_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Opportunity_name(ctx, field)
			case "amount":
				return ec.fieldContext_Opportunity_amount(ctx, field)
			case "maxAmount":
				return ec.fieldContext_Opportunity_maxAmount(ctx, field)
			case "internalType":
				return ec.fieldContext_Opportunity_internalType(ctx, field)
			case "externalType":
				return ec.fieldContext_Opportunity_externalType(ctx, field)
			case "internalStage":
				return ec.fieldContext_Opportunity_internalStage(ctx, field)
			case "externalStage":
				return ec.fieldContext_Opportunity_externalStage(ctx, field)
			case "estimatedClosedAt":
				return ec.fieldContext_Opportunity_estimatedClosedAt(ctx, field)
			case "generalNotes":
				return ec.fieldContext_Opportunity_generalNotes(ctx, field)
			case "nextSteps":
				return ec.fieldContext_Opportunity_nextSteps(ctx, field)
			case "renewedAt":
				return ec.fieldContext_Opportunity_renewedAt(ctx, field)
			case "renewalLikelihood":
				return ec.fieldContext_Opportunity_renewalLikelihood(ctx, field)
			case "renewalUpdatedByUserId":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserId(ctx, field)
			case "renewalUpdatedByUserAt":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserAt(ctx, field)
			case "comments":
				return ec.fieldContext_Opportunity_comments(ctx, field)
			case "createdBy":
				return ec.fieldContext_Opportunity_createdBy(ctx, field)
			case "owner":
				return ec.fieldContext_Opportunity_owner(ctx, field)
			case "source":
				return ec.fieldContext_Opportunity_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Opportunity_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Opportunity_appSource(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Opportunity_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Opportunity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_owner(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_serviceStarted(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_serviceStarted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStarted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_serviceStarted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_contractStatus(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_contractStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractStatus)
	fc.Result = res
	return ec.marshalNContractStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_contractStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_status(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractStatus)
	fc.Result = res
	return ec.marshalNContractStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_serviceStartedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_serviceStartedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_serviceStartedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_name(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_signedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_signedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_signedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_renewalCycle(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_renewalCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ContractRenewalCycle)
	fc.Result = res
	return ec.marshalNContractRenewalCycle2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_renewalCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractRenewalCycle does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_organizationLegalName(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_organizationLegalName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationLegalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_organizationLegalName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_invoiceEmail(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_invoiceEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_invoiceEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_id(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_source(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_renewalPeriods(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_renewalPeriods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalPeriods, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_renewalPeriods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_endedAt(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_endedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_endedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_serviceLineItems(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_serviceLineItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Contract().ServiceLineItems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ServiceLineItem)
	fc.Result = res
	return ec.marshalOServiceLineItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_serviceLineItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_ServiceLineItem_metadata(ctx, field)
			case "billingCycle":
				return ec.fieldContext_ServiceLineItem_billingCycle(ctx, field)
			case "comments":
				return ec.fieldContext_ServiceLineItem_comments(ctx, field)
			case "description":
				return ec.fieldContext_ServiceLineItem_description(ctx, field)
			case "parentId":
				return ec.fieldContext_ServiceLineItem_parentId(ctx, field)
			case "price":
				return ec.fieldContext_ServiceLineItem_price(ctx, field)
			case "quantity":
				return ec.fieldContext_ServiceLineItem_quantity(ctx, field)
			case "serviceEnded":
				return ec.fieldContext_ServiceLineItem_serviceEnded(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_ServiceLineItem_serviceStarted(ctx, field)
			case "tax":
				return ec.fieldContext_ServiceLineItem_tax(ctx, field)
			case "createdBy":
				return ec.fieldContext_ServiceLineItem_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_ServiceLineItem_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceLineItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_invoiceNote(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_invoiceNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_invoiceNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_billingCycle(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_billingCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ContractBillingCycle)
	fc.Result = res
	return ec.marshalOContractBillingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractBillingCycle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_billingCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContractBillingCycle does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_invoicingStartDate(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_invoicingStartDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoicingStartDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_invoicingStartDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_addressLine1(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_addressLine1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_addressLine1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_addressLine2(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_addressLine2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_addressLine2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_zip(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_zip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_locality(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_locality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_locality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Contract_country(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Contract_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Contract_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Contract",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_id(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_name(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_codeA2(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_codeA2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeA2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_codeA2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_codeA3(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_codeA3(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeA3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_codeA3(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Country_phoneCode(ctx context.Context, field graphql.CollectedField, obj *model.Country) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Country_phoneCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Country_phoneCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Country",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_name(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_datatype(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_datatype(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Datatype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CustomFieldDataType)
	fc.Result = res
	return ec.marshalNCustomFieldDataType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_datatype(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CustomFieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_value(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graph.AnyTypeValue)
	fc.Result = res
	return ec.marshalNAny2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚐAnyTypeValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_source(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomField_template(ctx context.Context, field graphql.CollectedField, obj *model.CustomField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomField_template(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CustomField().Template(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CustomFieldTemplate)
	fc.Result = res
	return ec.marshalOCustomFieldTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomField_template(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomField",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomFieldTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomFieldTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomFieldTemplate_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CustomFieldTemplate_name(ctx, field)
			case "type":
				return ec.fieldContext_CustomFieldTemplate_type(ctx, field)
			case "order":
				return ec.fieldContext_CustomFieldTemplate_order(ctx, field)
			case "mandatory":
				return ec.fieldContext_CustomFieldTemplate_mandatory(ctx, field)
			case "length":
				return ec.fieldContext_CustomFieldTemplate_length(ctx, field)
			case "min":
				return ec.fieldContext_CustomFieldTemplate_min(ctx, field)
			case "max":
				return ec.fieldContext_CustomFieldTemplate_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomFieldTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_name(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_type(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.CustomFieldTemplateType)
	fc.Result = res
	return ec.marshalNCustomFieldTemplateType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CustomFieldTemplateType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_order(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_mandatory(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_mandatory(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mandatory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_mandatory(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_length(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_length(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_length(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_min(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_min(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_min(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomFieldTemplate_max(ctx context.Context, field graphql.CollectedField, obj *model.CustomFieldTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomFieldTemplate_max(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomFieldTemplate_max(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomFieldTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerContact_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerContact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerContact_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerContact_email(ctx context.Context, field graphql.CollectedField, obj *model.CustomerContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerContact_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomerEmail)
	fc.Result = res
	return ec.marshalNCustomerEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerContact_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomerEmail_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerEmail", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerEmail_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomerEmail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerEmail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerEmail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerEmail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerJobRole_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomerJobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerJobRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerJobRole_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerJobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUser_id(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUser_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUser_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CustomerUser_jobRole(ctx context.Context, field graphql.CollectedField, obj *model.CustomerUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CustomerUser_jobRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomerJobRole)
	fc.Result = res
	return ec.marshalNCustomerJobRole2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerJobRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CustomerUser_jobRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CustomerUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomerJobRole_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerJobRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdown_arrBreakdown(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdown_arrBreakdown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArrBreakdown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdown_arrBreakdown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdown",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdown_increasePercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdown_increasePercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdown_increasePercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdown",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdown_perMonth(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdown) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdown_perMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardARRBreakdownPerMonth)
	fc.Result = res
	return ec.marshalNDashboardARRBreakdownPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardARRBreakdownPerMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdown_perMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdown",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_year(ctx, field)
			case "month":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_month(ctx, field)
			case "newlyContracted":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_newlyContracted(ctx, field)
			case "renewals":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_renewals(ctx, field)
			case "upsells":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_upsells(ctx, field)
			case "downgrades":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_downgrades(ctx, field)
			case "cancellations":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_cancellations(ctx, field)
			case "churned":
				return ec.fieldContext_DashboardARRBreakdownPerMonth_churned(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardARRBreakdownPerMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_year(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_month(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_newlyContracted(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_newlyContracted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewlyContracted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_newlyContracted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_renewals(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_renewals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Renewals, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_renewals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_upsells(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_upsells(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Upsells, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_upsells(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_downgrades(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_downgrades(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Downgrades, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_downgrades(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_cancellations(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_cancellations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cancellations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_cancellations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardARRBreakdownPerMonth_churned(ctx context.Context, field graphql.CollectedField, obj *model.DashboardARRBreakdownPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardARRBreakdownPerMonth_churned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Churned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardARRBreakdownPerMonth_churned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardARRBreakdownPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardCustomerMap_organizationId(ctx context.Context, field graphql.CollectedField, obj *model.DashboardCustomerMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardCustomerMap_organizationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardCustomerMap_organizationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardCustomerMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardCustomerMap_organization(ctx context.Context, field graphql.CollectedField, obj *model.DashboardCustomerMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardCustomerMap_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DashboardCustomerMap().Organization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardCustomerMap_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardCustomerMap",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardCustomerMap_state(ctx context.Context, field graphql.CollectedField, obj *model.DashboardCustomerMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardCustomerMap_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DashboardCustomerMapState)
	fc.Result = res
	return ec.marshalNDashboardCustomerMapState2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardCustomerMapState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardCustomerMap_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardCustomerMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DashboardCustomerMapState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardCustomerMap_arr(ctx context.Context, field graphql.CollectedField, obj *model.DashboardCustomerMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardCustomerMap_arr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Arr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardCustomerMap_arr(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardCustomerMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardCustomerMap_contractSignedDate(ctx context.Context, field graphql.CollectedField, obj *model.DashboardCustomerMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardCustomerMap_contractSignedDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractSignedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardCustomerMap_contractSignedDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardCustomerMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardGrossRevenueRetention_grossRevenueRetention(ctx context.Context, field graphql.CollectedField, obj *model.DashboardGrossRevenueRetention) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardGrossRevenueRetention_grossRevenueRetention(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrossRevenueRetention, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardGrossRevenueRetention_grossRevenueRetention(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardGrossRevenueRetention",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardGrossRevenueRetention_increasePercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardGrossRevenueRetention) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardGrossRevenueRetention_increasePercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardGrossRevenueRetention_increasePercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardGrossRevenueRetention",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardGrossRevenueRetention_increasePercentageValue(ctx context.Context, field graphql.CollectedField, obj *model.DashboardGrossRevenueRetention) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardGrossRevenueRetention_increasePercentageValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentageValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardGrossRevenueRetention_increasePercentageValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardGrossRevenueRetention",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardGrossRevenueRetention_perMonth(ctx context.Context, field graphql.CollectedField, obj *model.DashboardGrossRevenueRetention) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardGrossRevenueRetention_perMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardGrossRevenueRetentionPerMonth)
	fc.Result = res
	return ec.marshalNDashboardGrossRevenueRetentionPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardGrossRevenueRetentionPerMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardGrossRevenueRetention_perMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardGrossRevenueRetention",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_DashboardGrossRevenueRetentionPerMonth_year(ctx, field)
			case "month":
				return ec.fieldContext_DashboardGrossRevenueRetentionPerMonth_month(ctx, field)
			case "percentage":
				return ec.fieldContext_DashboardGrossRevenueRetentionPerMonth_percentage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardGrossRevenueRetentionPerMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardGrossRevenueRetentionPerMonth_year(ctx context.Context, field graphql.CollectedField, obj *model.DashboardGrossRevenueRetentionPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardGrossRevenueRetentionPerMonth_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardGrossRevenueRetentionPerMonth_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardGrossRevenueRetentionPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardGrossRevenueRetentionPerMonth_month(ctx context.Context, field graphql.CollectedField, obj *model.DashboardGrossRevenueRetentionPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardGrossRevenueRetentionPerMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardGrossRevenueRetentionPerMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardGrossRevenueRetentionPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardGrossRevenueRetentionPerMonth_percentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardGrossRevenueRetentionPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardGrossRevenueRetentionPerMonth_percentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardGrossRevenueRetentionPerMonth_percentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardGrossRevenueRetentionPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardMRRPerCustomer_mrrPerCustomer(ctx context.Context, field graphql.CollectedField, obj *model.DashboardMRRPerCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardMRRPerCustomer_mrrPerCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MrrPerCustomer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardMRRPerCustomer_mrrPerCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardMRRPerCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardMRRPerCustomer_increasePercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardMRRPerCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardMRRPerCustomer_increasePercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardMRRPerCustomer_increasePercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardMRRPerCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardMRRPerCustomer_perMonth(ctx context.Context, field graphql.CollectedField, obj *model.DashboardMRRPerCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardMRRPerCustomer_perMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardMRRPerCustomerPerMonth)
	fc.Result = res
	return ec.marshalNDashboardMRRPerCustomerPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardMRRPerCustomerPerMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardMRRPerCustomer_perMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardMRRPerCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_DashboardMRRPerCustomerPerMonth_year(ctx, field)
			case "month":
				return ec.fieldContext_DashboardMRRPerCustomerPerMonth_month(ctx, field)
			case "value":
				return ec.fieldContext_DashboardMRRPerCustomerPerMonth_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardMRRPerCustomerPerMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardMRRPerCustomerPerMonth_year(ctx context.Context, field graphql.CollectedField, obj *model.DashboardMRRPerCustomerPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardMRRPerCustomerPerMonth_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardMRRPerCustomerPerMonth_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardMRRPerCustomerPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardMRRPerCustomerPerMonth_month(ctx context.Context, field graphql.CollectedField, obj *model.DashboardMRRPerCustomerPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardMRRPerCustomerPerMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardMRRPerCustomerPerMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardMRRPerCustomerPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardMRRPerCustomerPerMonth_value(ctx context.Context, field graphql.CollectedField, obj *model.DashboardMRRPerCustomerPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardMRRPerCustomerPerMonth_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardMRRPerCustomerPerMonth_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardMRRPerCustomerPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardNewCustomers_thisMonthCount(ctx context.Context, field graphql.CollectedField, obj *model.DashboardNewCustomers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardNewCustomers_thisMonthCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThisMonthCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardNewCustomers_thisMonthCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardNewCustomers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardNewCustomers_thisMonthIncreasePercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardNewCustomers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardNewCustomers_thisMonthIncreasePercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ThisMonthIncreasePercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardNewCustomers_thisMonthIncreasePercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardNewCustomers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardNewCustomers_perMonth(ctx context.Context, field graphql.CollectedField, obj *model.DashboardNewCustomers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardNewCustomers_perMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardNewCustomersPerMonth)
	fc.Result = res
	return ec.marshalNDashboardNewCustomersPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardNewCustomersPerMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardNewCustomers_perMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardNewCustomers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_DashboardNewCustomersPerMonth_year(ctx, field)
			case "month":
				return ec.fieldContext_DashboardNewCustomersPerMonth_month(ctx, field)
			case "count":
				return ec.fieldContext_DashboardNewCustomersPerMonth_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardNewCustomersPerMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardNewCustomersPerMonth_year(ctx context.Context, field graphql.CollectedField, obj *model.DashboardNewCustomersPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardNewCustomersPerMonth_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardNewCustomersPerMonth_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardNewCustomersPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardNewCustomersPerMonth_month(ctx context.Context, field graphql.CollectedField, obj *model.DashboardNewCustomersPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardNewCustomersPerMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardNewCustomersPerMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardNewCustomersPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardNewCustomersPerMonth_count(ctx context.Context, field graphql.CollectedField, obj *model.DashboardNewCustomersPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardNewCustomersPerMonth_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardNewCustomersPerMonth_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardNewCustomersPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardOnboardingCompletion_completionPercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardOnboardingCompletion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardOnboardingCompletion_completionPercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompletionPercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardOnboardingCompletion_completionPercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardOnboardingCompletion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardOnboardingCompletion_increasePercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardOnboardingCompletion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardOnboardingCompletion_increasePercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardOnboardingCompletion_increasePercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardOnboardingCompletion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardOnboardingCompletion_perMonth(ctx context.Context, field graphql.CollectedField, obj *model.DashboardOnboardingCompletion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardOnboardingCompletion_perMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardOnboardingCompletionPerMonth)
	fc.Result = res
	return ec.marshalNDashboardOnboardingCompletionPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardOnboardingCompletionPerMonthᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardOnboardingCompletion_perMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardOnboardingCompletion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_DashboardOnboardingCompletionPerMonth_year(ctx, field)
			case "month":
				return ec.fieldContext_DashboardOnboardingCompletionPerMonth_month(ctx, field)
			case "value":
				return ec.fieldContext_DashboardOnboardingCompletionPerMonth_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardOnboardingCompletionPerMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardOnboardingCompletionPerMonth_year(ctx context.Context, field graphql.CollectedField, obj *model.DashboardOnboardingCompletionPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardOnboardingCompletionPerMonth_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardOnboardingCompletionPerMonth_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardOnboardingCompletionPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardOnboardingCompletionPerMonth_month(ctx context.Context, field graphql.CollectedField, obj *model.DashboardOnboardingCompletionPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardOnboardingCompletionPerMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardOnboardingCompletionPerMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardOnboardingCompletionPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardOnboardingCompletionPerMonth_value(ctx context.Context, field graphql.CollectedField, obj *model.DashboardOnboardingCompletionPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardOnboardingCompletionPerMonth_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardOnboardingCompletionPerMonth_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardOnboardingCompletionPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRate_retentionRate(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRate_retentionRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetentionRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRate_retentionRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRate_increasePercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRate_increasePercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRate_increasePercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRate_increasePercentageValue(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRate_increasePercentageValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentageValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRate_increasePercentageValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRate_perMonth(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRate_perMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardRetentionRatePerMonth)
	fc.Result = res
	return ec.marshalNDashboardRetentionRatePerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRetentionRatePerMonth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRate_perMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_DashboardRetentionRatePerMonth_year(ctx, field)
			case "month":
				return ec.fieldContext_DashboardRetentionRatePerMonth_month(ctx, field)
			case "renewCount":
				return ec.fieldContext_DashboardRetentionRatePerMonth_renewCount(ctx, field)
			case "churnCount":
				return ec.fieldContext_DashboardRetentionRatePerMonth_churnCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardRetentionRatePerMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRatePerMonth_year(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRatePerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRatePerMonth_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRatePerMonth_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRatePerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRatePerMonth_month(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRatePerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRatePerMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRatePerMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRatePerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRatePerMonth_renewCount(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRatePerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRatePerMonth_renewCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRatePerMonth_renewCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRatePerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRetentionRatePerMonth_churnCount(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRetentionRatePerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRetentionRatePerMonth_churnCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurnCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRetentionRatePerMonth_churnCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRetentionRatePerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRevenueAtRisk_highConfidence(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRevenueAtRisk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRevenueAtRisk_highConfidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HighConfidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRevenueAtRisk_highConfidence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRevenueAtRisk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardRevenueAtRisk_atRisk(ctx context.Context, field graphql.CollectedField, obj *model.DashboardRevenueAtRisk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardRevenueAtRisk_atRisk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtRisk, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardRevenueAtRisk_atRisk(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardRevenueAtRisk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardTimeToOnboard_timeToOnboard(ctx context.Context, field graphql.CollectedField, obj *model.DashboardTimeToOnboard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardTimeToOnboard_timeToOnboard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeToOnboard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardTimeToOnboard_timeToOnboard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardTimeToOnboard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardTimeToOnboard_increasePercentage(ctx context.Context, field graphql.CollectedField, obj *model.DashboardTimeToOnboard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardTimeToOnboard_increasePercentage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IncreasePercentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardTimeToOnboard_increasePercentage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardTimeToOnboard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardTimeToOnboard_perMonth(ctx context.Context, field graphql.CollectedField, obj *model.DashboardTimeToOnboard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardTimeToOnboard_perMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardTimeToOnboardPerMonth)
	fc.Result = res
	return ec.marshalNDashboardTimeToOnboardPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardTimeToOnboardPerMonthᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardTimeToOnboard_perMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardTimeToOnboard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_DashboardTimeToOnboardPerMonth_year(ctx, field)
			case "month":
				return ec.fieldContext_DashboardTimeToOnboardPerMonth_month(ctx, field)
			case "value":
				return ec.fieldContext_DashboardTimeToOnboardPerMonth_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardTimeToOnboardPerMonth", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardTimeToOnboardPerMonth_year(ctx context.Context, field graphql.CollectedField, obj *model.DashboardTimeToOnboardPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardTimeToOnboardPerMonth_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardTimeToOnboardPerMonth_year(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardTimeToOnboardPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardTimeToOnboardPerMonth_month(ctx context.Context, field graphql.CollectedField, obj *model.DashboardTimeToOnboardPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardTimeToOnboardPerMonth_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardTimeToOnboardPerMonth_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardTimeToOnboardPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DashboardTimeToOnboardPerMonth_value(ctx context.Context, field graphql.CollectedField, obj *model.DashboardTimeToOnboardPerMonth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DashboardTimeToOnboardPerMonth_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DashboardTimeToOnboardPerMonth_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DashboardTimeToOnboardPerMonth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteResponse_accepted(ctx context.Context, field graphql.CollectedField, obj *model.DeleteResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteResponse_accepted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Accepted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteResponse_accepted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteResponse_completed(ctx context.Context, field graphql.CollectedField, obj *model.DeleteResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteResponse_completed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Completed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteResponse_completed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_id(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_email(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_rawEmail(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_rawEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_rawEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_emailValidationDetails(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_emailValidationDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailValidationDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EmailValidationDetails)
	fc.Result = res
	return ec.marshalNEmailValidationDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailValidationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_emailValidationDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "validated":
				return ec.fieldContext_EmailValidationDetails_validated(ctx, field)
			case "isReachable":
				return ec.fieldContext_EmailValidationDetails_isReachable(ctx, field)
			case "isValidSyntax":
				return ec.fieldContext_EmailValidationDetails_isValidSyntax(ctx, field)
			case "canConnectSmtp":
				return ec.fieldContext_EmailValidationDetails_canConnectSmtp(ctx, field)
			case "acceptsMail":
				return ec.fieldContext_EmailValidationDetails_acceptsMail(ctx, field)
			case "hasFullInbox":
				return ec.fieldContext_EmailValidationDetails_hasFullInbox(ctx, field)
			case "isCatchAll":
				return ec.fieldContext_EmailValidationDetails_isCatchAll(ctx, field)
			case "isDeliverable":
				return ec.fieldContext_EmailValidationDetails_isDeliverable(ctx, field)
			case "isDisabled":
				return ec.fieldContext_EmailValidationDetails_isDisabled(ctx, field)
			case "error":
				return ec.fieldContext_EmailValidationDetails_error(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmailValidationDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_label(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EmailLabel)
	fc.Result = res
	return ec.marshalOEmailLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailLabel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EmailLabel does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_primary(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_primary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_primary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_source(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_users(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Email().Users(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_contacts(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Email().Contacts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_contacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Email_organizations(ctx context.Context, field graphql.CollectedField, obj *model.Email) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Email_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Email().Organizations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Email_organizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Email",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailParticipant_emailParticipant(ctx context.Context, field graphql.CollectedField, obj *model.EmailParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailParticipant_emailParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailParticipant_emailParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailParticipant_type(ctx context.Context, field graphql.CollectedField, obj *model.EmailParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailParticipant_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailParticipant_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_validated(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_validated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_validated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_isReachable(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_isReachable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsReachable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_isReachable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_isValidSyntax(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_isValidSyntax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsValidSyntax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_isValidSyntax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_canConnectSmtp(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_canConnectSmtp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanConnectSMTP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_canConnectSmtp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_acceptsMail(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_acceptsMail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcceptsMail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_acceptsMail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_hasFullInbox(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_hasFullInbox(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasFullInbox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_hasFullInbox(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_isCatchAll(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_isCatchAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCatchAll, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_isCatchAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_isDeliverable(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_isDeliverable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeliverable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_isDeliverable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_isDisabled(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_isDisabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_isDisabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmailValidationDetails_error(ctx context.Context, field graphql.CollectedField, obj *model.EmailValidationDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmailValidationDetails_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmailValidationDetails_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmailValidationDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_version(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_name(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_extends(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_extends(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extends, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EntityTemplateExtension)
	fc.Result = res
	return ec.marshalOEntityTemplateExtension2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_extends(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EntityTemplateExtension does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_fieldSetTemplates(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_fieldSetTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EntityTemplate().FieldSetTemplates(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FieldSetTemplate)
	fc.Result = res
	return ec.marshalNFieldSetTemplate2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_fieldSetTemplates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FieldSetTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_FieldSetTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FieldSetTemplate_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_FieldSetTemplate_name(ctx, field)
			case "order":
				return ec.fieldContext_FieldSetTemplate_order(ctx, field)
			case "customFieldTemplates":
				return ec.fieldContext_FieldSetTemplate_customFieldTemplates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldSetTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_customFieldTemplates(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_customFieldTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EntityTemplate().CustomFieldTemplates(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomFieldTemplate)
	fc.Result = res
	return ec.marshalNCustomFieldTemplate2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_customFieldTemplates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomFieldTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomFieldTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomFieldTemplate_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CustomFieldTemplate_name(ctx, field)
			case "type":
				return ec.fieldContext_CustomFieldTemplate_type(ctx, field)
			case "order":
				return ec.fieldContext_CustomFieldTemplate_order(ctx, field)
			case "mandatory":
				return ec.fieldContext_CustomFieldTemplate_mandatory(ctx, field)
			case "length":
				return ec.fieldContext_CustomFieldTemplate_length(ctx, field)
			case "min":
				return ec.fieldContext_CustomFieldTemplate_min(ctx, field)
			case "max":
				return ec.fieldContext_CustomFieldTemplate_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomFieldTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EntityTemplate_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.EntityTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EntityTemplate_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EntityTemplate_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EntityTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystem_type(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ExternalSystemType)
	fc.Result = res
	return ec.marshalNExternalSystemType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystem_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExternalSystemType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystem_syncDate(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystem_syncDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystem_syncDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystem_externalId(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystem_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystem_externalId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystem_externalUrl(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystem_externalUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystem_externalSource(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystem_externalSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystem_externalSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystemInstance_type(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystemInstance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystemInstance_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ExternalSystemType)
	fc.Result = res
	return ec.marshalNExternalSystemType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystemInstance_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystemInstance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ExternalSystemType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystemInstance_stripeDetails(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystemInstance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystemInstance_stripeDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StripeDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ExternalSystemStripeDetails)
	fc.Result = res
	return ec.marshalOExternalSystemStripeDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemStripeDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystemInstance_stripeDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystemInstance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentMethodTypes":
				return ec.fieldContext_ExternalSystemStripeDetails_paymentMethodTypes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystemStripeDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ExternalSystemStripeDetails_paymentMethodTypes(ctx context.Context, field graphql.CollectedField, obj *model.ExternalSystemStripeDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ExternalSystemStripeDetails_paymentMethodTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethodTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ExternalSystemStripeDetails_paymentMethodTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ExternalSystemStripeDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSet_id(ctx context.Context, field graphql.CollectedField, obj *model.FieldSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSet_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSet_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSet_name(ctx context.Context, field graphql.CollectedField, obj *model.FieldSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSet_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSet_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSet_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.FieldSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSet_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSet_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSet_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.FieldSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSet_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSet_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSet_customFields(ctx context.Context, field graphql.CollectedField, obj *model.FieldSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSet_customFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FieldSet().CustomFields(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomField)
	fc.Result = res
	return ec.marshalNCustomField2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSet_customFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomField_id(ctx, field)
			case "name":
				return ec.fieldContext_CustomField_name(ctx, field)
			case "datatype":
				return ec.fieldContext_CustomField_datatype(ctx, field)
			case "value":
				return ec.fieldContext_CustomField_value(ctx, field)
			case "source":
				return ec.fieldContext_CustomField_source(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomField_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomField_updatedAt(ctx, field)
			case "template":
				return ec.fieldContext_CustomField_template(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomField", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSet_template(ctx context.Context, field graphql.CollectedField, obj *model.FieldSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSet_template(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FieldSet().Template(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldSetTemplate)
	fc.Result = res
	return ec.marshalOFieldSetTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSet_template(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSet",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FieldSetTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_FieldSetTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FieldSetTemplate_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_FieldSetTemplate_name(ctx, field)
			case "order":
				return ec.fieldContext_FieldSetTemplate_order(ctx, field)
			case "customFieldTemplates":
				return ec.fieldContext_FieldSetTemplate_customFieldTemplates(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldSetTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSet_source(ctx context.Context, field graphql.CollectedField, obj *model.FieldSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSet_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSet_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSetTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.FieldSetTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSetTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSetTemplate_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSetTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSetTemplate_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.FieldSetTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSetTemplate_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSetTemplate_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSetTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSetTemplate_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.FieldSetTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSetTemplate_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSetTemplate_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSetTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSetTemplate_name(ctx context.Context, field graphql.CollectedField, obj *model.FieldSetTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSetTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSetTemplate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSetTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSetTemplate_order(ctx context.Context, field graphql.CollectedField, obj *model.FieldSetTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSetTemplate_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSetTemplate_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSetTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldSetTemplate_customFieldTemplates(ctx context.Context, field graphql.CollectedField, obj *model.FieldSetTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldSetTemplate_customFieldTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FieldSetTemplate().CustomFieldTemplates(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomFieldTemplate)
	fc.Result = res
	return ec.marshalNCustomFieldTemplate2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldSetTemplate_customFieldTemplates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldSetTemplate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomFieldTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomFieldTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomFieldTemplate_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CustomFieldTemplate_name(ctx, field)
			case "type":
				return ec.fieldContext_CustomFieldTemplate_type(ctx, field)
			case "order":
				return ec.fieldContext_CustomFieldTemplate_order(ctx, field)
			case "mandatory":
				return ec.fieldContext_CustomFieldTemplate_mandatory(ctx, field)
			case "length":
				return ec.fieldContext_CustomFieldTemplate_length(ctx, field)
			case "min":
				return ec.fieldContext_CustomFieldTemplate_min(ctx, field)
			case "max":
				return ec.fieldContext_CustomFieldTemplate_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomFieldTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GCliAttributeKeyValuePair_key(ctx context.Context, field graphql.CollectedField, obj *model.GCliAttributeKeyValuePair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GCliAttributeKeyValuePair_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GCliAttributeKeyValuePair_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GCliAttributeKeyValuePair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GCliAttributeKeyValuePair_value(ctx context.Context, field graphql.CollectedField, obj *model.GCliAttributeKeyValuePair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GCliAttributeKeyValuePair_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GCliAttributeKeyValuePair_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GCliAttributeKeyValuePair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GCliAttributeKeyValuePair_display(ctx context.Context, field graphql.CollectedField, obj *model.GCliAttributeKeyValuePair) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GCliAttributeKeyValuePair_display(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GCliAttributeKeyValuePair_display(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GCliAttributeKeyValuePair",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GCliItem_id(ctx context.Context, field graphql.CollectedField, obj *model.GCliItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GCliItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GCliItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GCliItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GCliItem_type(ctx context.Context, field graphql.CollectedField, obj *model.GCliItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GCliItem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.GCliSearchResultType)
	fc.Result = res
	return ec.marshalNGCliSearchResultType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliSearchResultType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GCliItem_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GCliItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GCliSearchResultType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GCliItem_display(ctx context.Context, field graphql.CollectedField, obj *model.GCliItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GCliItem_display(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GCliItem_display(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GCliItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GCliItem_data(ctx context.Context, field graphql.CollectedField, obj *model.GCliItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GCliItem_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GCliAttributeKeyValuePair)
	fc.Result = res
	return ec.marshalOGCliAttributeKeyValuePair2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliAttributeKeyValuePairᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GCliItem_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GCliItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_GCliAttributeKeyValuePair_key(ctx, field)
			case "value":
				return ec.fieldContext_GCliAttributeKeyValuePair_value(ctx, field)
			case "display":
				return ec.fieldContext_GCliAttributeKeyValuePair_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GCliAttributeKeyValuePair", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_user(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_isOwner(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_isOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOwner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_isOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_isGoogleActive(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_isGoogleActive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGoogleActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_isGoogleActive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_isGoogleTokenExpired(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_isGoogleTokenExpired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGoogleTokenExpired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_isGoogleTokenExpired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_gCliCache(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_gCliCache(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GCliCache, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GCliItem)
	fc.Result = res
	return ec.marshalNGCliItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_gCliCache(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GCliItem_id(ctx, field)
			case "type":
				return ec.fieldContext_GCliItem_type(ctx, field)
			case "display":
				return ec.fieldContext_GCliItem_display(ctx, field)
			case "data":
				return ec.fieldContext_GCliItem_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GCliItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_minARRForecastValue(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_minARRForecastValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinARRForecastValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_minARRForecastValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_maxARRForecastValue(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_maxARRForecastValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxARRForecastValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_maxARRForecastValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_contractsExist(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_contractsExist(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractsExist, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_contractsExist(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GlobalCache_cdnLogoUrl(ctx context.Context, field graphql.CollectedField, obj *model.GlobalCache) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GlobalCache_cdnLogoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CdnLogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GlobalCache_cdnLogoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GlobalCache",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_id(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_eventIdentifier(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_eventIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_content(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_contentType(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_channel(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_channelData(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_channelData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_channelData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_interactionSession(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().InteractionSession(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InteractionSession)
	fc.Result = res
	return ec.marshalOInteractionSession2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_interactionSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionSession_id(ctx, field)
			case "startedAt":
				return ec.fieldContext_InteractionSession_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_InteractionSession_endedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionSession_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InteractionSession_updatedAt(ctx, field)
			case "sessionIdentifier":
				return ec.fieldContext_InteractionSession_sessionIdentifier(ctx, field)
			case "name":
				return ec.fieldContext_InteractionSession_name(ctx, field)
			case "status":
				return ec.fieldContext_InteractionSession_status(ctx, field)
			case "type":
				return ec.fieldContext_InteractionSession_type(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionSession_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionSession_channelData(ctx, field)
			case "source":
				return ec.fieldContext_InteractionSession_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionSession_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionSession_appSource(ctx, field)
			case "events":
				return ec.fieldContext_InteractionSession_events(ctx, field)
			case "attendedBy":
				return ec.fieldContext_InteractionSession_attendedBy(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionSession_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_InteractionSession_describedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_issue(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_issue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().Issue(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Issue)
	fc.Result = res
	return ec.marshalOIssue2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_issue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Issue_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Issue_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Issue_updatedAt(ctx, field)
			case "subject":
				return ec.fieldContext_Issue_subject(ctx, field)
			case "status":
				return ec.fieldContext_Issue_status(ctx, field)
			case "priority":
				return ec.fieldContext_Issue_priority(ctx, field)
			case "description":
				return ec.fieldContext_Issue_description(ctx, field)
			case "tags":
				return ec.fieldContext_Issue_tags(ctx, field)
			case "interactionEvents":
				return ec.fieldContext_Issue_interactionEvents(ctx, field)
			case "comments":
				return ec.fieldContext_Issue_comments(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Issue_externalLinks(ctx, field)
			case "submittedBy":
				return ec.fieldContext_Issue_submittedBy(ctx, field)
			case "reportedBy":
				return ec.fieldContext_Issue_reportedBy(ctx, field)
			case "assignedTo":
				return ec.fieldContext_Issue_assignedTo(ctx, field)
			case "followedBy":
				return ec.fieldContext_Issue_followedBy(ctx, field)
			case "source":
				return ec.fieldContext_Issue_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Issue_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Issue_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Issue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_meeting(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_meeting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().Meeting(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalOMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_meeting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_sentBy(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_sentBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().SentBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.InteractionEventParticipant)
	fc.Result = res
	return ec.marshalNInteractionEventParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_sentBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type InteractionEventParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_sentTo(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_sentTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().SentTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.InteractionEventParticipant)
	fc.Result = res
	return ec.marshalNInteractionEventParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_sentTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type InteractionEventParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_repliesTo(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().RepliesTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InteractionEvent)
	fc.Result = res
	return ec.marshalOInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_repliesTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_includes(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_includes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().Includes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_includes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Attachment_createdAt(ctx, field)
			case "basePath":
				return ec.fieldContext_Attachment_basePath(ctx, field)
			case "cdnUrl":
				return ec.fieldContext_Attachment_cdnUrl(ctx, field)
			case "fileName":
				return ec.fieldContext_Attachment_fileName(ctx, field)
			case "mimeType":
				return ec.fieldContext_Attachment_mimeType(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "source":
				return ec.fieldContext_Attachment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Attachment_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_summary(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_summary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().Summary(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Analysis)
	fc.Result = res
	return ec.marshalOAnalysis2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysis(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_summary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Analysis_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Analysis_createdAt(ctx, field)
			case "content":
				return ec.fieldContext_Analysis_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Analysis_contentType(ctx, field)
			case "analysisType":
				return ec.fieldContext_Analysis_analysisType(ctx, field)
			case "describes":
				return ec.fieldContext_Analysis_describes(ctx, field)
			case "source":
				return ec.fieldContext_Analysis_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Analysis_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Analysis_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Analysis", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_actionItems(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_actionItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().ActionItems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ActionItem)
	fc.Result = res
	return ec.marshalOActionItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐActionItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_actionItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ActionItem_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_ActionItem_createdAt(ctx, field)
			case "content":
				return ec.fieldContext_ActionItem_content(ctx, field)
			case "source":
				return ec.fieldContext_ActionItem_source(ctx, field)
			case "appSource":
				return ec.fieldContext_ActionItem_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_source(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_appSource(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_eventType(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_eventType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_eventType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionEvent_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.InteractionEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionEvent().ExternalLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionEvent_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_id(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_endedAt(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_endedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_endedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_sessionIdentifier(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_sessionIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SessionIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_sessionIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_name(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_status(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_type(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_channel(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_channelData(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_channelData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_channelData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_source(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_appSource(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_events(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionSession().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.InteractionEvent)
	fc.Result = res
	return ec.marshalNInteractionEvent2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_attendedBy(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_attendedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionSession().AttendedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.InteractionSessionParticipant)
	fc.Result = res
	return ec.marshalNInteractionSessionParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_attendedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type InteractionSessionParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_includes(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_includes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionSession().Includes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_includes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Attachment_createdAt(ctx, field)
			case "basePath":
				return ec.fieldContext_Attachment_basePath(ctx, field)
			case "cdnUrl":
				return ec.fieldContext_Attachment_cdnUrl(ctx, field)
			case "fileName":
				return ec.fieldContext_Attachment_fileName(ctx, field)
			case "mimeType":
				return ec.fieldContext_Attachment_mimeType(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "source":
				return ec.fieldContext_Attachment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Attachment_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InteractionSession_describedBy(ctx context.Context, field graphql.CollectedField, obj *model.InteractionSession) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InteractionSession_describedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.InteractionSession().DescribedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Analysis)
	fc.Result = res
	return ec.marshalNAnalysis2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InteractionSession_describedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InteractionSession",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Analysis_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Analysis_createdAt(ctx, field)
			case "content":
				return ec.fieldContext_Analysis_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Analysis_contentType(ctx, field)
			case "analysisType":
				return ec.fieldContext_Analysis_analysisType(ctx, field)
			case "describes":
				return ec.fieldContext_Analysis_describes(ctx, field)
			case "source":
				return ec.fieldContext_Analysis_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Analysis_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Analysis_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Analysis", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_organization(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Invoice().Organization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_contract(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Invoice().Contract(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Contract_metadata(ctx, field)
			case "billingDetails":
				return ec.fieldContext_Contract_billingDetails(ctx, field)
			case "committedPeriods":
				return ec.fieldContext_Contract_committedPeriods(ctx, field)
			case "contractEnded":
				return ec.fieldContext_Contract_contractEnded(ctx, field)
			case "contractLineItems":
				return ec.fieldContext_Contract_contractLineItems(ctx, field)
			case "contractName":
				return ec.fieldContext_Contract_contractName(ctx, field)
			case "contractRenewalCycle":
				return ec.fieldContext_Contract_contractRenewalCycle(ctx, field)
			case "contractSigned":
				return ec.fieldContext_Contract_contractSigned(ctx, field)
			case "contractUrl":
				return ec.fieldContext_Contract_contractUrl(ctx, field)
			case "currency":
				return ec.fieldContext_Contract_currency(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Contract_externalLinks(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_Contract_billingEnabled(ctx, field)
			case "opportunities":
				return ec.fieldContext_Contract_opportunities(ctx, field)
			case "owner":
				return ec.fieldContext_Contract_owner(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_Contract_serviceStarted(ctx, field)
			case "contractStatus":
				return ec.fieldContext_Contract_contractStatus(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "serviceStartedAt":
				return ec.fieldContext_Contract_serviceStartedAt(ctx, field)
			case "name":
				return ec.fieldContext_Contract_name(ctx, field)
			case "signedAt":
				return ec.fieldContext_Contract_signedAt(ctx, field)
			case "renewalCycle":
				return ec.fieldContext_Contract_renewalCycle(ctx, field)
			case "organizationLegalName":
				return ec.fieldContext_Contract_organizationLegalName(ctx, field)
			case "invoiceEmail":
				return ec.fieldContext_Contract_invoiceEmail(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Contract_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contract_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contract_appSource(ctx, field)
			case "renewalPeriods":
				return ec.fieldContext_Contract_renewalPeriods(ctx, field)
			case "endedAt":
				return ec.fieldContext_Contract_endedAt(ctx, field)
			case "serviceLineItems":
				return ec.fieldContext_Contract_serviceLineItems(ctx, field)
			case "invoiceNote":
				return ec.fieldContext_Contract_invoiceNote(ctx, field)
			case "billingCycle":
				return ec.fieldContext_Contract_billingCycle(ctx, field)
			case "invoicingStartDate":
				return ec.fieldContext_Contract_invoicingStartDate(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Contract_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Contract_addressLine2(ctx, field)
			case "zip":
				return ec.fieldContext_Contract_zip(ctx, field)
			case "locality":
				return ec.fieldContext_Contract_locality(ctx, field)
			case "country":
				return ec.fieldContext_Contract_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_dryRun(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_dryRun(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DryRun, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_dryRun(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_postpaid(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_postpaid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Postpaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_postpaid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_offCycle(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_offCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OffCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_offCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_amountDue(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_amountDue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_amountDue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_amountPaid(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_amountPaid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountPaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_amountPaid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_amountRemaining(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_amountRemaining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountRemaining, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_amountRemaining(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_invoiceNumber(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_invoiceNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_invoiceNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_invoicePeriodStart(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_invoicePeriodStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoicePeriodStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_invoicePeriodStart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_invoicePeriodEnd(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_invoicePeriodEnd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoicePeriodEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_invoicePeriodEnd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_invoiceUrl(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_invoiceUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_invoiceUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_due(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_due(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Due, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_due(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_currency(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_repositoryFileId(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_repositoryFileId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepositoryFileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_repositoryFileId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_invoiceLineItems(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_invoiceLineItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Invoice().InvoiceLineItems(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.InvoiceLine)
	fc.Result = res
	return ec.marshalNInvoiceLine2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLineᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_invoiceLineItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_InvoiceLine_metadata(ctx, field)
			case "description":
				return ec.fieldContext_InvoiceLine_description(ctx, field)
			case "price":
				return ec.fieldContext_InvoiceLine_price(ctx, field)
			case "quantity":
				return ec.fieldContext_InvoiceLine_quantity(ctx, field)
			case "subtotal":
				return ec.fieldContext_InvoiceLine_subtotal(ctx, field)
			case "taxDue":
				return ec.fieldContext_InvoiceLine_taxDue(ctx, field)
			case "total":
				return ec.fieldContext_InvoiceLine_total(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoiceLine", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_status(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InvoiceStatus)
	fc.Result = res
	return ec.marshalOInvoiceStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type InvoiceStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_note(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_domesticPaymentsBankInfo(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_domesticPaymentsBankInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DomesticPaymentsBankInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_domesticPaymentsBankInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_internationalPaymentsBankInfo(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_internationalPaymentsBankInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternationalPaymentsBankInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_internationalPaymentsBankInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_customer(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Customer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoiceCustomer)
	fc.Result = res
	return ec.marshalNInvoiceCustomer2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_customer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_InvoiceCustomer_name(ctx, field)
			case "email":
				return ec.fieldContext_InvoiceCustomer_email(ctx, field)
			case "addressLine1":
				return ec.fieldContext_InvoiceCustomer_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_InvoiceCustomer_addressLine2(ctx, field)
			case "addressZip":
				return ec.fieldContext_InvoiceCustomer_addressZip(ctx, field)
			case "addressLocality":
				return ec.fieldContext_InvoiceCustomer_addressLocality(ctx, field)
			case "addressCountry":
				return ec.fieldContext_InvoiceCustomer_addressCountry(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoiceCustomer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_provider(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoiceProvider)
	fc.Result = res
	return ec.marshalNInvoiceProvider2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceProvider(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_provider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "logoUrl":
				return ec.fieldContext_InvoiceProvider_logoUrl(ctx, field)
			case "logoRepositoryFileId":
				return ec.fieldContext_InvoiceProvider_logoRepositoryFileId(ctx, field)
			case "name":
				return ec.fieldContext_InvoiceProvider_name(ctx, field)
			case "addressLine1":
				return ec.fieldContext_InvoiceProvider_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_InvoiceProvider_addressLine2(ctx, field)
			case "addressZip":
				return ec.fieldContext_InvoiceProvider_addressZip(ctx, field)
			case "addressLocality":
				return ec.fieldContext_InvoiceProvider_addressLocality(ctx, field)
			case "addressCountry":
				return ec.fieldContext_InvoiceProvider_addressCountry(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoiceProvider", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_paid(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_paid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Paid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_paid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_subtotal(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_subtotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_subtotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_taxDue(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_taxDue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_taxDue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceCustomer_name(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceCustomer_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceCustomer_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceCustomer_email(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceCustomer_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceCustomer_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceCustomer_addressLine1(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceCustomer_addressLine1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceCustomer_addressLine1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceCustomer_addressLine2(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceCustomer_addressLine2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceCustomer_addressLine2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceCustomer_addressZip(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceCustomer_addressZip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceCustomer_addressZip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceCustomer_addressLocality(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceCustomer_addressLocality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLocality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceCustomer_addressLocality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceCustomer_addressCountry(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceCustomer_addressCountry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceCustomer_addressCountry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceLine_metadata(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceLine_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceLine_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceLine_description(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceLine_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceLine_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceLine_price(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceLine_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceLine_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceLine_quantity(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceLine_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceLine_quantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceLine_subtotal(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceLine_subtotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceLine_subtotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceLine_taxDue(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceLine_taxDue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceLine_taxDue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceLine_total(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceLine) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceLine_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceLine_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceLine",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_logoUrl(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_logoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_logoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_logoRepositoryFileId(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_logoRepositoryFileId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoRepositoryFileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_logoRepositoryFileId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_name(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_addressLine1(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_addressLine1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_addressLine1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_addressLine2(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_addressLine2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_addressLine2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_addressZip(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_addressZip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_addressZip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_addressLocality(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_addressLocality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLocality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_addressLocality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceProvider_addressCountry(ctx context.Context, field graphql.CollectedField, obj *model.InvoiceProvider) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceProvider_addressCountry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceProvider_addressCountry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceProvider",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicesPage_content(ctx context.Context, field graphql.CollectedField, obj *model.InvoicesPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicesPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicesPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicesPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Invoice_metadata(ctx, field)
			case "organization":
				return ec.fieldContext_Invoice_organization(ctx, field)
			case "contract":
				return ec.fieldContext_Invoice_contract(ctx, field)
			case "dryRun":
				return ec.fieldContext_Invoice_dryRun(ctx, field)
			case "postpaid":
				return ec.fieldContext_Invoice_postpaid(ctx, field)
			case "offCycle":
				return ec.fieldContext_Invoice_offCycle(ctx, field)
			case "amountDue":
				return ec.fieldContext_Invoice_amountDue(ctx, field)
			case "amountPaid":
				return ec.fieldContext_Invoice_amountPaid(ctx, field)
			case "amountRemaining":
				return ec.fieldContext_Invoice_amountRemaining(ctx, field)
			case "invoiceNumber":
				return ec.fieldContext_Invoice_invoiceNumber(ctx, field)
			case "invoicePeriodStart":
				return ec.fieldContext_Invoice_invoicePeriodStart(ctx, field)
			case "invoicePeriodEnd":
				return ec.fieldContext_Invoice_invoicePeriodEnd(ctx, field)
			case "invoiceUrl":
				return ec.fieldContext_Invoice_invoiceUrl(ctx, field)
			case "due":
				return ec.fieldContext_Invoice_due(ctx, field)
			case "currency":
				return ec.fieldContext_Invoice_currency(ctx, field)
			case "repositoryFileId":
				return ec.fieldContext_Invoice_repositoryFileId(ctx, field)
			case "invoiceLineItems":
				return ec.fieldContext_Invoice_invoiceLineItems(ctx, field)
			case "status":
				return ec.fieldContext_Invoice_status(ctx, field)
			case "note":
				return ec.fieldContext_Invoice_note(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_Invoice_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_Invoice_internationalPaymentsBankInfo(ctx, field)
			case "customer":
				return ec.fieldContext_Invoice_customer(ctx, field)
			case "provider":
				return ec.fieldContext_Invoice_provider(ctx, field)
			case "paid":
				return ec.fieldContext_Invoice_paid(ctx, field)
			case "subtotal":
				return ec.fieldContext_Invoice_subtotal(ctx, field)
			case "taxDue":
				return ec.fieldContext_Invoice_taxDue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invoice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicesPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.InvoicesPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicesPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicesPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicesPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicesPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.InvoicesPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicesPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicesPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicesPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicingCycle_id(ctx context.Context, field graphql.CollectedField, obj *model.InvoicingCycle) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicingCycle_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicingCycle_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicingCycle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicingCycle_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.InvoicingCycle) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicingCycle_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicingCycle_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicingCycle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicingCycle_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.InvoicingCycle) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicingCycle_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicingCycle_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicingCycle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicingCycle_type(ctx context.Context, field graphql.CollectedField, obj *model.InvoicingCycle) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicingCycle_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.InvoicingCycleType)
	fc.Result = res
	return ec.marshalNInvoicingCycleType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicingCycle_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicingCycle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type InvoicingCycleType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicingCycle_source(ctx context.Context, field graphql.CollectedField, obj *model.InvoicingCycle) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicingCycle_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicingCycle_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicingCycle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicingCycle_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.InvoicingCycle) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicingCycle_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicingCycle_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicingCycle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoicingCycle_appSource(ctx context.Context, field graphql.CollectedField, obj *model.InvoicingCycle) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoicingCycle_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoicingCycle_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoicingCycle",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_id(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_subject(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_subject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_status(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_priority(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_priority(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_description(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_tags(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Tag_source(ctx, field)
			case "appSource":
				return ec.fieldContext_Tag_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_interactionEvents(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_interactionEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().InteractionEvents(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.InteractionEvent)
	fc.Result = res
	return ec.marshalNInteractionEvent2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_interactionEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_comments(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().Comments(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Comment_id(ctx, field)
			case "content":
				return ec.fieldContext_Comment_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Comment_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Comment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Comment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Comment_createdBy(ctx, field)
			case "source":
				return ec.fieldContext_Comment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Comment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Comment_appSource(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Comment_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Comment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().ExternalLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_submittedBy(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_submittedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().SubmittedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.IssueParticipant)
	fc.Result = res
	return ec.marshalOIssueParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_submittedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type IssueParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_reportedBy(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_reportedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().ReportedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.IssueParticipant)
	fc.Result = res
	return ec.marshalOIssueParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_reportedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type IssueParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_assignedTo(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_assignedTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().AssignedTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.IssueParticipant)
	fc.Result = res
	return ec.marshalNIssueParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_assignedTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type IssueParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_followedBy(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_followedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Issue().FollowedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.IssueParticipant)
	fc.Result = res
	return ec.marshalNIssueParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_followedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type IssueParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_source(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Issue_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Issue_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Issue_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IssueSummaryByStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.IssueSummaryByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IssueSummaryByStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IssueSummaryByStatus_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IssueSummaryByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IssueSummaryByStatus_count(ctx context.Context, field graphql.CollectedField, obj *model.IssueSummaryByStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IssueSummaryByStatus_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IssueSummaryByStatus_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IssueSummaryByStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_id(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_organization(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.JobRole().Organization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_contact(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_contact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.JobRole().Contact(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_contact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_jobTitle(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_jobTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_jobTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_primary(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_primary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_primary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_description(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_company(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_endedAt(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_endedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_endedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_source(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRole_appSource(ctx context.Context, field graphql.CollectedField, obj *model.JobRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRole_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRole_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRoleParticipant_jobRoleParticipant(ctx context.Context, field graphql.CollectedField, obj *model.JobRoleParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRoleParticipant_jobRoleParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobRoleParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JobRole)
	fc.Result = res
	return ec.marshalNJobRole2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRoleParticipant_jobRoleParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRoleParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobRole_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobRole_updatedAt(ctx, field)
			case "organization":
				return ec.fieldContext_JobRole_organization(ctx, field)
			case "contact":
				return ec.fieldContext_JobRole_contact(ctx, field)
			case "jobTitle":
				return ec.fieldContext_JobRole_jobTitle(ctx, field)
			case "primary":
				return ec.fieldContext_JobRole_primary(ctx, field)
			case "description":
				return ec.fieldContext_JobRole_description(ctx, field)
			case "company":
				return ec.fieldContext_JobRole_company(ctx, field)
			case "startedAt":
				return ec.fieldContext_JobRole_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_JobRole_endedAt(ctx, field)
			case "source":
				return ec.fieldContext_JobRole_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_JobRole_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_JobRole_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobRoleParticipant_type(ctx context.Context, field graphql.CollectedField, obj *model.JobRoleParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobRoleParticipant_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobRoleParticipant_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobRoleParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LastTouchpoint_lastTouchPointAt(ctx context.Context, field graphql.CollectedField, obj *model.LastTouchpoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LastTouchpoint_lastTouchPointAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTouchPointAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LastTouchpoint_lastTouchPointAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LastTouchpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LastTouchpoint_lastTouchPointType(ctx context.Context, field graphql.CollectedField, obj *model.LastTouchpoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LastTouchpoint_lastTouchPointType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTouchPointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LastTouchpointType)
	fc.Result = res
	return ec.marshalOLastTouchpointType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLastTouchpointType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LastTouchpoint_lastTouchPointType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LastTouchpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LastTouchpointType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LastTouchpoint_lastTouchPointTimelineEventId(ctx context.Context, field graphql.CollectedField, obj *model.LastTouchpoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LastTouchpoint_lastTouchPointTimelineEventId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTouchPointTimelineEventID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LastTouchpoint_lastTouchPointTimelineEventId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LastTouchpoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LastTouchpoint_lastTouchPointTimelineEvent(ctx context.Context, field graphql.CollectedField, obj *model.LastTouchpoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LastTouchpoint_lastTouchPointTimelineEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.LastTouchpoint().LastTouchPointTimelineEvent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.TimelineEvent)
	fc.Result = res
	return ec.marshalOTimelineEvent2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LastTouchpoint_lastTouchPointTimelineEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LastTouchpoint",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimelineEvent does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkedOrganization_organization(ctx context.Context, field graphql.CollectedField, obj *model.LinkedOrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkedOrganization_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkedOrganization_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkedOrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LinkedOrganization_type(ctx context.Context, field graphql.CollectedField, obj *model.LinkedOrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LinkedOrganization_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LinkedOrganization_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LinkedOrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_id(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_source(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_name(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_rawAddress(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_rawAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_rawAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_country(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_region(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_region(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_region(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_district(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_district(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_district(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_locality(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_locality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_locality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_street(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_street(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_street(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_address(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_address2(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_address2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_address2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_zip(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_zip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_addressType(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_addressType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_addressType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_houseNumber(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_houseNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HouseNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_houseNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_postalCode(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_postalCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_postalCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_plusFour(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_plusFour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlusFour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_plusFour(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_commercial(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_commercial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Commercial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_commercial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_predirection(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_predirection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Predirection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_predirection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_latitude(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_latitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_latitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_longitude(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_longitude(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_longitude(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_timeZone(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_timeZone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeZone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_timeZone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Location_utcOffset(ctx context.Context, field graphql.CollectedField, obj *model.Location) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Location_utcOffset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UtcOffset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Location_utcOffset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Location",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_id(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_content(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_contentType(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.LogEntry().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_tags(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.LogEntry().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Tag_source(ctx, field)
			case "appSource":
				return ec.fieldContext_Tag_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_source(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_appSource(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.LogEntry().ExternalLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_id(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_name(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_source(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_appSource(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_retired(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_retired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Retired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_retired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_milestones(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_milestones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MasterPlan().Milestones(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MasterPlanMilestone)
	fc.Result = res
	return ec.marshalNMasterPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_milestones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_MasterPlanMilestone_order(ctx, field)
			case "durationHours":
				return ec.fieldContext_MasterPlanMilestone_durationHours(ctx, field)
			case "optional":
				return ec.fieldContext_MasterPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_MasterPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlanMilestone_retired(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlanMilestone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlan_retiredMilestones(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlan_retiredMilestones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MasterPlan().RetiredMilestones(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MasterPlanMilestone)
	fc.Result = res
	return ec.marshalNMasterPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlan_retiredMilestones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_MasterPlanMilestone_order(ctx, field)
			case "durationHours":
				return ec.fieldContext_MasterPlanMilestone_durationHours(ctx, field)
			case "optional":
				return ec.fieldContext_MasterPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_MasterPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlanMilestone_retired(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlanMilestone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_id(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_name(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_source(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_appSource(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_order(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_durationHours(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_durationHours(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationHours, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_durationHours(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_optional(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_optional(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Optional, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_optional(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_items(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MasterPlanMilestone_retired(ctx context.Context, field graphql.CollectedField, obj *model.MasterPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MasterPlanMilestone_retired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Retired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MasterPlanMilestone_retired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MasterPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_id(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_name(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_endedAt(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_endedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_endedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_conferenceUrl(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_conferenceUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConferenceURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_conferenceUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_meetingExternalUrl(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MeetingExternalURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_meetingExternalUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_attendedBy(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_attendedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().AttendedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.MeetingParticipant)
	fc.Result = res
	return ec.marshalNMeetingParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_attendedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MeetingParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.MeetingParticipant)
	fc.Result = res
	return ec.marshalNMeetingParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MeetingParticipant does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_includes(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_includes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().Includes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_includes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Attachment_createdAt(ctx, field)
			case "basePath":
				return ec.fieldContext_Attachment_basePath(ctx, field)
			case "cdnUrl":
				return ec.fieldContext_Attachment_cdnUrl(ctx, field)
			case "fileName":
				return ec.fieldContext_Attachment_fileName(ctx, field)
			case "mimeType":
				return ec.fieldContext_Attachment_mimeType(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "source":
				return ec.fieldContext_Attachment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Attachment_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_describedBy(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_describedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().DescribedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Analysis)
	fc.Result = res
	return ec.marshalNAnalysis2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_describedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Analysis_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Analysis_createdAt(ctx, field)
			case "content":
				return ec.fieldContext_Analysis_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Analysis_contentType(ctx, field)
			case "analysisType":
				return ec.fieldContext_Analysis_analysisType(ctx, field)
			case "describes":
				return ec.fieldContext_Analysis_describes(ctx, field)
			case "source":
				return ec.fieldContext_Analysis_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Analysis_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Analysis_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Analysis", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_note(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().Note(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_events(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().Events(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.InteractionEvent)
	fc.Result = res
	return ec.marshalNInteractionEvent2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_events(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_recording(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_recording(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().Recording(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_recording(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Attachment_createdAt(ctx, field)
			case "basePath":
				return ec.fieldContext_Attachment_basePath(ctx, field)
			case "cdnUrl":
				return ec.fieldContext_Attachment_cdnUrl(ctx, field)
			case "fileName":
				return ec.fieldContext_Attachment_fileName(ctx, field)
			case "mimeType":
				return ec.fieldContext_Attachment_mimeType(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "source":
				return ec.fieldContext_Attachment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Attachment_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_source(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_agenda(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_agenda(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agenda, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_agenda(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_agendaContentType(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_agendaContentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AgendaContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_agendaContentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_externalSystem(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_externalSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Meeting().ExternalSystem(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_externalSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meeting_status(ctx context.Context, field graphql.CollectedField, obj *model.Meeting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meeting_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.MeetingStatus)
	fc.Result = res
	return ec.marshalNMeetingStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meeting_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meeting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MeetingStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetingsPage_content(ctx context.Context, field graphql.CollectedField, obj *model.MeetingsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetingsPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetingsPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetingsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetingsPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.MeetingsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetingsPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetingsPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetingsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeetingsPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.MeetingsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeetingsPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeetingsPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeetingsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_id(ctx context.Context, field graphql.CollectedField, obj *model.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_created(ctx context.Context, field graphql.CollectedField, obj *model.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_created(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_created(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_lastUpdated(ctx context.Context, field graphql.CollectedField, obj *model.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_lastUpdated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_lastUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_source(ctx context.Context, field graphql.CollectedField, obj *model.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metadata_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Metadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metadata_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metadata_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_analysis_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_analysis_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AnalysisCreate(rctx, fc.Args["analysis"].(model.AnalysisInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Analysis)
	fc.Result = res
	return ec.marshalNAnalysis2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysis(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_analysis_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Analysis_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Analysis_createdAt(ctx, field)
			case "content":
				return ec.fieldContext_Analysis_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Analysis_contentType(ctx, field)
			case "analysisType":
				return ec.fieldContext_Analysis_analysisType(ctx, field)
			case "describes":
				return ec.fieldContext_Analysis_describes(ctx, field)
			case "source":
				return ec.fieldContext_Analysis_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Analysis_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Analysis_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Analysis", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_analysis_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_attachment_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_attachment_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AttachmentCreate(rctx, fc.Args["input"].(model.AttachmentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_attachment_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Attachment_createdAt(ctx, field)
			case "basePath":
				return ec.fieldContext_Attachment_basePath(ctx, field)
			case "cdnUrl":
				return ec.fieldContext_Attachment_cdnUrl(ctx, field)
			case "fileName":
				return ec.fieldContext_Attachment_fileName(ctx, field)
			case "mimeType":
				return ec.fieldContext_Attachment_mimeType(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "source":
				return ec.fieldContext_Attachment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Attachment_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_attachment_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bankAccount_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bankAccount_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BankAccountCreate(rctx, fc.Args["input"].(*model.BankAccountCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.BankAccount); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.BankAccount`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BankAccount)
	fc.Result = res
	return ec.marshalNBankAccount2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bankAccount_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_BankAccount_metadata(ctx, field)
			case "bankName":
				return ec.fieldContext_BankAccount_bankName(ctx, field)
			case "currency":
				return ec.fieldContext_BankAccount_currency(ctx, field)
			case "bankTransferEnabled":
				return ec.fieldContext_BankAccount_bankTransferEnabled(ctx, field)
			case "allowInternational":
				return ec.fieldContext_BankAccount_allowInternational(ctx, field)
			case "iban":
				return ec.fieldContext_BankAccount_iban(ctx, field)
			case "bic":
				return ec.fieldContext_BankAccount_bic(ctx, field)
			case "sortCode":
				return ec.fieldContext_BankAccount_sortCode(ctx, field)
			case "accountNumber":
				return ec.fieldContext_BankAccount_accountNumber(ctx, field)
			case "routingNumber":
				return ec.fieldContext_BankAccount_routingNumber(ctx, field)
			case "otherDetails":
				return ec.fieldContext_BankAccount_otherDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BankAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bankAccount_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bankAccount_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bankAccount_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BankAccountUpdate(rctx, fc.Args["input"].(*model.BankAccountUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.BankAccount); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.BankAccount`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BankAccount)
	fc.Result = res
	return ec.marshalNBankAccount2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bankAccount_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_BankAccount_metadata(ctx, field)
			case "bankName":
				return ec.fieldContext_BankAccount_bankName(ctx, field)
			case "currency":
				return ec.fieldContext_BankAccount_currency(ctx, field)
			case "bankTransferEnabled":
				return ec.fieldContext_BankAccount_bankTransferEnabled(ctx, field)
			case "allowInternational":
				return ec.fieldContext_BankAccount_allowInternational(ctx, field)
			case "iban":
				return ec.fieldContext_BankAccount_iban(ctx, field)
			case "bic":
				return ec.fieldContext_BankAccount_bic(ctx, field)
			case "sortCode":
				return ec.fieldContext_BankAccount_sortCode(ctx, field)
			case "accountNumber":
				return ec.fieldContext_BankAccount_accountNumber(ctx, field)
			case "routingNumber":
				return ec.fieldContext_BankAccount_routingNumber(ctx, field)
			case "otherDetails":
				return ec.fieldContext_BankAccount_otherDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BankAccount", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bankAccount_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_bankAccount_Delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_bankAccount_Delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BankAccountDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.DeleteResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteResponse)
	fc.Result = res
	return ec.marshalNDeleteResponse2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDeleteResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_bankAccount_Delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accepted":
				return ec.fieldContext_DeleteResponse_accepted(ctx, field)
			case "completed":
				return ec.fieldContext_DeleteResponse_completed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_bankAccount_Delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_billingProfile_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_billingProfile_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BillingProfileCreate(rctx, fc.Args["input"].(model.BillingProfileInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_billingProfile_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_billingProfile_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_billingProfile_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_billingProfile_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BillingProfileUpdate(rctx, fc.Args["input"].(model.BillingProfileUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_billingProfile_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_billingProfile_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_billingProfile_LinkEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_billingProfile_LinkEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BillingProfileLinkEmail(rctx, fc.Args["input"].(model.BillingProfileLinkEmailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_billingProfile_LinkEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_billingProfile_LinkEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_billingProfile_UnlinkEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_billingProfile_UnlinkEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BillingProfileUnlinkEmail(rctx, fc.Args["input"].(model.BillingProfileLinkEmailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_billingProfile_UnlinkEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_billingProfile_UnlinkEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_billingProfile_LinkLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_billingProfile_LinkLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BillingProfileLinkLocation(rctx, fc.Args["input"].(model.BillingProfileLinkLocationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_billingProfile_LinkLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_billingProfile_LinkLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_billingProfile_UnlinkLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_billingProfile_UnlinkLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().BillingProfileUnlinkLocation(rctx, fc.Args["input"].(model.BillingProfileLinkLocationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_billingProfile_UnlinkLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_billingProfile_UnlinkLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactCreate(rctx, fc.Args["input"].(model.ContactInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customer_contact_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customer_contact_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomerContactCreate(rctx, fc.Args["input"].(model.CustomerContactInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomerContact)
	fc.Result = res
	return ec.marshalNCustomerContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customer_contact_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomerContact_id(ctx, field)
			case "email":
				return ec.fieldContext_CustomerContact_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerContact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customer_contact_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactUpdate(rctx, fc.Args["input"].(model.ContactUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_HardDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_HardDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactHardDelete(rctx, fc.Args["contactId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_HardDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_HardDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_Archive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_Archive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactArchive(rctx, fc.Args["contactId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_Archive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_Archive_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_RestoreFromArchive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_RestoreFromArchive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRestoreFromArchive(rctx, fc.Args["contactId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_RestoreFromArchive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_RestoreFromArchive_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_Merge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_Merge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactMerge(rctx, fc.Args["primaryContactId"].(string), fc.Args["mergedContactIds"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_Merge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_Merge_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_AddTagById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_AddTagById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactAddTagByID(rctx, fc.Args["input"].(model.ContactTagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_AddTagById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_AddTagById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_RemoveTagById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_RemoveTagById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRemoveTagByID(rctx, fc.Args["input"].(model.ContactTagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_RemoveTagById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_RemoveTagById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_AddOrganizationById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_AddOrganizationById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactAddOrganizationByID(rctx, fc.Args["input"].(model.ContactOrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_AddOrganizationById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_AddOrganizationById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_RemoveOrganizationById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_RemoveOrganizationById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRemoveOrganizationByID(rctx, fc.Args["input"].(model.ContactOrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_RemoveOrganizationById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_RemoveOrganizationById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_AddNewLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_AddNewLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactAddNewLocation(rctx, fc.Args["contactId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_AddNewLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Location_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Location_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Location_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Location_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Location_appSource(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "rawAddress":
				return ec.fieldContext_Location_rawAddress(ctx, field)
			case "country":
				return ec.fieldContext_Location_country(ctx, field)
			case "region":
				return ec.fieldContext_Location_region(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "locality":
				return ec.fieldContext_Location_locality(ctx, field)
			case "street":
				return ec.fieldContext_Location_street(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "address2":
				return ec.fieldContext_Location_address2(ctx, field)
			case "zip":
				return ec.fieldContext_Location_zip(ctx, field)
			case "addressType":
				return ec.fieldContext_Location_addressType(ctx, field)
			case "houseNumber":
				return ec.fieldContext_Location_houseNumber(ctx, field)
			case "postalCode":
				return ec.fieldContext_Location_postalCode(ctx, field)
			case "plusFour":
				return ec.fieldContext_Location_plusFour(ctx, field)
			case "commercial":
				return ec.fieldContext_Location_commercial(ctx, field)
			case "predirection":
				return ec.fieldContext_Location_predirection(ctx, field)
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "timeZone":
				return ec.fieldContext_Location_timeZone(ctx, field)
			case "utcOffset":
				return ec.fieldContext_Location_utcOffset(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_AddNewLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_RemoveLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_RemoveLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactRemoveLocation(rctx, fc.Args["contactId"].(string), fc.Args["locationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_RemoveLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_RemoveLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contact_AddSocial(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contact_AddSocial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ContactAddSocial(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.SocialInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Social)
	fc.Result = res
	return ec.marshalNSocial2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contact_AddSocial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Social_id(ctx, field)
			case "platformName":
				return ec.fieldContext_Social_platformName(ctx, field)
			case "url":
				return ec.fieldContext_Social_url(ctx, field)
			case "createdAt":
				return ec.fieldContext_Social_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Social_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Social_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Social_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Social_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Social", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contact_AddSocial_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contract_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contract_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContractCreate(rctx, fc.Args["input"].(model.ContractInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Contract); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Contract`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contract_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Contract_metadata(ctx, field)
			case "billingDetails":
				return ec.fieldContext_Contract_billingDetails(ctx, field)
			case "committedPeriods":
				return ec.fieldContext_Contract_committedPeriods(ctx, field)
			case "contractEnded":
				return ec.fieldContext_Contract_contractEnded(ctx, field)
			case "contractLineItems":
				return ec.fieldContext_Contract_contractLineItems(ctx, field)
			case "contractName":
				return ec.fieldContext_Contract_contractName(ctx, field)
			case "contractRenewalCycle":
				return ec.fieldContext_Contract_contractRenewalCycle(ctx, field)
			case "contractSigned":
				return ec.fieldContext_Contract_contractSigned(ctx, field)
			case "contractUrl":
				return ec.fieldContext_Contract_contractUrl(ctx, field)
			case "currency":
				return ec.fieldContext_Contract_currency(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Contract_externalLinks(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_Contract_billingEnabled(ctx, field)
			case "opportunities":
				return ec.fieldContext_Contract_opportunities(ctx, field)
			case "owner":
				return ec.fieldContext_Contract_owner(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_Contract_serviceStarted(ctx, field)
			case "contractStatus":
				return ec.fieldContext_Contract_contractStatus(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "serviceStartedAt":
				return ec.fieldContext_Contract_serviceStartedAt(ctx, field)
			case "name":
				return ec.fieldContext_Contract_name(ctx, field)
			case "signedAt":
				return ec.fieldContext_Contract_signedAt(ctx, field)
			case "renewalCycle":
				return ec.fieldContext_Contract_renewalCycle(ctx, field)
			case "organizationLegalName":
				return ec.fieldContext_Contract_organizationLegalName(ctx, field)
			case "invoiceEmail":
				return ec.fieldContext_Contract_invoiceEmail(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Contract_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contract_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contract_appSource(ctx, field)
			case "renewalPeriods":
				return ec.fieldContext_Contract_renewalPeriods(ctx, field)
			case "endedAt":
				return ec.fieldContext_Contract_endedAt(ctx, field)
			case "serviceLineItems":
				return ec.fieldContext_Contract_serviceLineItems(ctx, field)
			case "invoiceNote":
				return ec.fieldContext_Contract_invoiceNote(ctx, field)
			case "billingCycle":
				return ec.fieldContext_Contract_billingCycle(ctx, field)
			case "invoicingStartDate":
				return ec.fieldContext_Contract_invoicingStartDate(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Contract_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Contract_addressLine2(ctx, field)
			case "zip":
				return ec.fieldContext_Contract_zip(ctx, field)
			case "locality":
				return ec.fieldContext_Contract_locality(ctx, field)
			case "country":
				return ec.fieldContext_Contract_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contract_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contract_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contract_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContractUpdate(rctx, fc.Args["input"].(model.ContractUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Contract); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Contract`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contract_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Contract_metadata(ctx, field)
			case "billingDetails":
				return ec.fieldContext_Contract_billingDetails(ctx, field)
			case "committedPeriods":
				return ec.fieldContext_Contract_committedPeriods(ctx, field)
			case "contractEnded":
				return ec.fieldContext_Contract_contractEnded(ctx, field)
			case "contractLineItems":
				return ec.fieldContext_Contract_contractLineItems(ctx, field)
			case "contractName":
				return ec.fieldContext_Contract_contractName(ctx, field)
			case "contractRenewalCycle":
				return ec.fieldContext_Contract_contractRenewalCycle(ctx, field)
			case "contractSigned":
				return ec.fieldContext_Contract_contractSigned(ctx, field)
			case "contractUrl":
				return ec.fieldContext_Contract_contractUrl(ctx, field)
			case "currency":
				return ec.fieldContext_Contract_currency(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Contract_externalLinks(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_Contract_billingEnabled(ctx, field)
			case "opportunities":
				return ec.fieldContext_Contract_opportunities(ctx, field)
			case "owner":
				return ec.fieldContext_Contract_owner(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_Contract_serviceStarted(ctx, field)
			case "contractStatus":
				return ec.fieldContext_Contract_contractStatus(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "serviceStartedAt":
				return ec.fieldContext_Contract_serviceStartedAt(ctx, field)
			case "name":
				return ec.fieldContext_Contract_name(ctx, field)
			case "signedAt":
				return ec.fieldContext_Contract_signedAt(ctx, field)
			case "renewalCycle":
				return ec.fieldContext_Contract_renewalCycle(ctx, field)
			case "organizationLegalName":
				return ec.fieldContext_Contract_organizationLegalName(ctx, field)
			case "invoiceEmail":
				return ec.fieldContext_Contract_invoiceEmail(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Contract_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contract_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contract_appSource(ctx, field)
			case "renewalPeriods":
				return ec.fieldContext_Contract_renewalPeriods(ctx, field)
			case "endedAt":
				return ec.fieldContext_Contract_endedAt(ctx, field)
			case "serviceLineItems":
				return ec.fieldContext_Contract_serviceLineItems(ctx, field)
			case "invoiceNote":
				return ec.fieldContext_Contract_invoiceNote(ctx, field)
			case "billingCycle":
				return ec.fieldContext_Contract_billingCycle(ctx, field)
			case "invoicingStartDate":
				return ec.fieldContext_Contract_invoicingStartDate(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Contract_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Contract_addressLine2(ctx, field)
			case "zip":
				return ec.fieldContext_Contract_zip(ctx, field)
			case "locality":
				return ec.fieldContext_Contract_locality(ctx, field)
			case "country":
				return ec.fieldContext_Contract_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contract_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contract_Delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contract_Delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContractDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.DeleteResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteResponse)
	fc.Result = res
	return ec.marshalNDeleteResponse2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDeleteResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contract_Delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accepted":
				return ec.fieldContext_DeleteResponse_accepted(ctx, field)
			case "completed":
				return ec.fieldContext_DeleteResponse_completed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contract_Delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldsMergeAndUpdateInContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldsMergeAndUpdateInContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldsMergeAndUpdateInContact(rctx, fc.Args["contactId"].(string), fc.Args["customFields"].([]*model.CustomFieldInput), fc.Args["fieldSets"].([]*model.FieldSetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldsMergeAndUpdateInContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldsMergeAndUpdateInContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldMergeToContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldMergeToContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldMergeToContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.CustomFieldInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomField)
	fc.Result = res
	return ec.marshalNCustomField2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldMergeToContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomField_id(ctx, field)
			case "name":
				return ec.fieldContext_CustomField_name(ctx, field)
			case "datatype":
				return ec.fieldContext_CustomField_datatype(ctx, field)
			case "value":
				return ec.fieldContext_CustomField_value(ctx, field)
			case "source":
				return ec.fieldContext_CustomField_source(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomField_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomField_updatedAt(ctx, field)
			case "template":
				return ec.fieldContext_CustomField_template(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomField", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldMergeToContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldUpdateInContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldUpdateInContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldUpdateInContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.CustomFieldUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomField)
	fc.Result = res
	return ec.marshalNCustomField2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldUpdateInContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomField_id(ctx, field)
			case "name":
				return ec.fieldContext_CustomField_name(ctx, field)
			case "datatype":
				return ec.fieldContext_CustomField_datatype(ctx, field)
			case "value":
				return ec.fieldContext_CustomField_value(ctx, field)
			case "source":
				return ec.fieldContext_CustomField_source(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomField_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomField_updatedAt(ctx, field)
			case "template":
				return ec.fieldContext_CustomField_template(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomField", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldUpdateInContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldDeleteFromContactByName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldDeleteFromContactByName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldDeleteFromContactByName(rctx, fc.Args["contactId"].(string), fc.Args["fieldName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldDeleteFromContactByName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldDeleteFromContactByName_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldDeleteFromContactById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldDeleteFromContactById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldDeleteFromContactByID(rctx, fc.Args["contactId"].(string), fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldDeleteFromContactById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldDeleteFromContactById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldMergeToFieldSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldMergeToFieldSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldMergeToFieldSet(rctx, fc.Args["contactId"].(string), fc.Args["fieldSetId"].(string), fc.Args["input"].(model.CustomFieldInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomField)
	fc.Result = res
	return ec.marshalNCustomField2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldMergeToFieldSet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomField_id(ctx, field)
			case "name":
				return ec.fieldContext_CustomField_name(ctx, field)
			case "datatype":
				return ec.fieldContext_CustomField_datatype(ctx, field)
			case "value":
				return ec.fieldContext_CustomField_value(ctx, field)
			case "source":
				return ec.fieldContext_CustomField_source(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomField_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomField_updatedAt(ctx, field)
			case "template":
				return ec.fieldContext_CustomField_template(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomField", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldMergeToFieldSet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldUpdateInFieldSet(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldUpdateInFieldSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldUpdateInFieldSet(rctx, fc.Args["contactId"].(string), fc.Args["fieldSetId"].(string), fc.Args["input"].(model.CustomFieldUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomField)
	fc.Result = res
	return ec.marshalNCustomField2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomField(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldUpdateInFieldSet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomField_id(ctx, field)
			case "name":
				return ec.fieldContext_CustomField_name(ctx, field)
			case "datatype":
				return ec.fieldContext_CustomField_datatype(ctx, field)
			case "value":
				return ec.fieldContext_CustomField_value(ctx, field)
			case "source":
				return ec.fieldContext_CustomField_source(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomField_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomField_updatedAt(ctx, field)
			case "template":
				return ec.fieldContext_CustomField_template(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomField", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldUpdateInFieldSet_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldDeleteFromFieldSetById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldDeleteFromFieldSetById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CustomFieldDeleteFromFieldSetByID(rctx, fc.Args["contactId"].(string), fc.Args["fieldSetId"].(string), fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldDeleteFromFieldSetById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldDeleteFromFieldSetById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_fieldSetMergeToContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_fieldSetMergeToContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().FieldSetMergeToContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.FieldSetInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldSet)
	fc.Result = res
	return ec.marshalOFieldSet2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_fieldSetMergeToContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FieldSet_id(ctx, field)
			case "name":
				return ec.fieldContext_FieldSet_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_FieldSet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FieldSet_updatedAt(ctx, field)
			case "customFields":
				return ec.fieldContext_FieldSet_customFields(ctx, field)
			case "template":
				return ec.fieldContext_FieldSet_template(ctx, field)
			case "source":
				return ec.fieldContext_FieldSet_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldSet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_fieldSetMergeToContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_fieldSetUpdateInContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_fieldSetUpdateInContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().FieldSetUpdateInContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.FieldSetUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldSet)
	fc.Result = res
	return ec.marshalOFieldSet2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_fieldSetUpdateInContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FieldSet_id(ctx, field)
			case "name":
				return ec.fieldContext_FieldSet_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_FieldSet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FieldSet_updatedAt(ctx, field)
			case "customFields":
				return ec.fieldContext_FieldSet_customFields(ctx, field)
			case "template":
				return ec.fieldContext_FieldSet_template(ctx, field)
			case "source":
				return ec.fieldContext_FieldSet_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldSet", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_fieldSetUpdateInContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_fieldSetDeleteFromContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_fieldSetDeleteFromContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().FieldSetDeleteFromContact(rctx, fc.Args["contactId"].(string), fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_fieldSetDeleteFromContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_fieldSetDeleteFromContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customFieldTemplate_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customFieldTemplate_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CustomFieldTemplateCreate(rctx, fc.Args["input"].(model.CustomFieldTemplateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.CustomFieldTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.CustomFieldTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomFieldTemplate)
	fc.Result = res
	return ec.marshalNCustomFieldTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customFieldTemplate_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomFieldTemplate_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomFieldTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomFieldTemplate_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_CustomFieldTemplate_name(ctx, field)
			case "type":
				return ec.fieldContext_CustomFieldTemplate_type(ctx, field)
			case "order":
				return ec.fieldContext_CustomFieldTemplate_order(ctx, field)
			case "mandatory":
				return ec.fieldContext_CustomFieldTemplate_mandatory(ctx, field)
			case "length":
				return ec.fieldContext_CustomFieldTemplate_length(ctx, field)
			case "min":
				return ec.fieldContext_CustomFieldTemplate_min(ctx, field)
			case "max":
				return ec.fieldContext_CustomFieldTemplate_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomFieldTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customFieldTemplate_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailMergeToContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailMergeToContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailMergeToContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.EmailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Email); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Email`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailMergeToContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailMergeToContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailUpdateInContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailUpdateInContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailUpdateInContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.EmailUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Email); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Email`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailUpdateInContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailUpdateInContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailRemoveFromContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailRemoveFromContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailRemoveFromContact(rctx, fc.Args["contactId"].(string), fc.Args["email"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailRemoveFromContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailRemoveFromContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailRemoveFromContactById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailRemoveFromContactById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailRemoveFromContactByID(rctx, fc.Args["contactId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailRemoveFromContactById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailRemoveFromContactById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailMergeToUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailMergeToUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailMergeToUser(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.EmailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Email); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Email`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailMergeToUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailMergeToUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailUpdateInUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailUpdateInUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailUpdateInUser(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.EmailUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Email); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Email`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailUpdateInUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailUpdateInUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailRemoveFromUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailRemoveFromUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailRemoveFromUser(rctx, fc.Args["userId"].(string), fc.Args["email"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailRemoveFromUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailRemoveFromUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailRemoveFromUserById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailRemoveFromUserById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailRemoveFromUserByID(rctx, fc.Args["userId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailRemoveFromUserById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailRemoveFromUserById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailMergeToOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailMergeToOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailMergeToOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["input"].(model.EmailInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Email); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Email`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailMergeToOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailMergeToOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailUpdateInOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailUpdateInOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailUpdateInOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["input"].(model.EmailUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Email); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Email`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailUpdateInOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailUpdateInOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailRemoveFromOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailRemoveFromOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailRemoveFromOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["email"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailRemoveFromOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailRemoveFromOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailRemoveFromOrganizationById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailRemoveFromOrganizationById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EmailRemoveFromOrganizationByID(rctx, fc.Args["organizationId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailRemoveFromOrganizationById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailRemoveFromOrganizationById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_emailDelete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_emailDelete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EmailDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_emailDelete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_emailDelete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_entityTemplateCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_entityTemplateCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().EntityTemplateCreate(rctx, fc.Args["input"].(model.EntityTemplateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.EntityTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.EntityTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.EntityTemplate)
	fc.Result = res
	return ec.marshalNEntityTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_entityTemplateCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntityTemplate_id(ctx, field)
			case "version":
				return ec.fieldContext_EntityTemplate_version(ctx, field)
			case "name":
				return ec.fieldContext_EntityTemplate_name(ctx, field)
			case "extends":
				return ec.fieldContext_EntityTemplate_extends(ctx, field)
			case "fieldSetTemplates":
				return ec.fieldContext_EntityTemplate_fieldSetTemplates(ctx, field)
			case "customFieldTemplates":
				return ec.fieldContext_EntityTemplate_customFieldTemplates(ctx, field)
			case "createdAt":
				return ec.fieldContext_EntityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EntityTemplate_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_entityTemplateCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_interactionSession_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_interactionSession_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InteractionSessionCreate(rctx, fc.Args["session"].(model.InteractionSessionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionSession)
	fc.Result = res
	return ec.marshalNInteractionSession2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_interactionSession_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionSession_id(ctx, field)
			case "startedAt":
				return ec.fieldContext_InteractionSession_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_InteractionSession_endedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionSession_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InteractionSession_updatedAt(ctx, field)
			case "sessionIdentifier":
				return ec.fieldContext_InteractionSession_sessionIdentifier(ctx, field)
			case "name":
				return ec.fieldContext_InteractionSession_name(ctx, field)
			case "status":
				return ec.fieldContext_InteractionSession_status(ctx, field)
			case "type":
				return ec.fieldContext_InteractionSession_type(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionSession_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionSession_channelData(ctx, field)
			case "source":
				return ec.fieldContext_InteractionSession_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionSession_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionSession_appSource(ctx, field)
			case "events":
				return ec.fieldContext_InteractionSession_events(ctx, field)
			case "attendedBy":
				return ec.fieldContext_InteractionSession_attendedBy(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionSession_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_InteractionSession_describedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_interactionSession_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_interactionSession_LinkAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_interactionSession_LinkAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InteractionSessionLinkAttachment(rctx, fc.Args["sessionId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionSession)
	fc.Result = res
	return ec.marshalNInteractionSession2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_interactionSession_LinkAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionSession_id(ctx, field)
			case "startedAt":
				return ec.fieldContext_InteractionSession_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_InteractionSession_endedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionSession_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InteractionSession_updatedAt(ctx, field)
			case "sessionIdentifier":
				return ec.fieldContext_InteractionSession_sessionIdentifier(ctx, field)
			case "name":
				return ec.fieldContext_InteractionSession_name(ctx, field)
			case "status":
				return ec.fieldContext_InteractionSession_status(ctx, field)
			case "type":
				return ec.fieldContext_InteractionSession_type(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionSession_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionSession_channelData(ctx, field)
			case "source":
				return ec.fieldContext_InteractionSession_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionSession_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionSession_appSource(ctx, field)
			case "events":
				return ec.fieldContext_InteractionSession_events(ctx, field)
			case "attendedBy":
				return ec.fieldContext_InteractionSession_attendedBy(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionSession_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_InteractionSession_describedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_interactionSession_LinkAttachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_interactionEvent_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_interactionEvent_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InteractionEventCreate(rctx, fc.Args["event"].(model.InteractionEventInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionEvent)
	fc.Result = res
	return ec.marshalNInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_interactionEvent_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_interactionEvent_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_interactionEvent_LinkAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_interactionEvent_LinkAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InteractionEventLinkAttachment(rctx, fc.Args["eventId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionEvent)
	fc.Result = res
	return ec.marshalNInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_interactionEvent_LinkAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_interactionEvent_LinkAttachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invoice_NextDryRunForContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invoice_NextDryRunForContract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InvoiceNextDryRunForContract(rctx, fc.Args["contractId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invoice_NextDryRunForContract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invoice_NextDryRunForContract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invoice_Simulate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invoice_Simulate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InvoiceSimulate(rctx, fc.Args["input"].(model.InvoiceSimulateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invoice_Simulate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invoice_Simulate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invoice_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invoice_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InvoiceUpdate(rctx, fc.Args["input"].(model.InvoiceUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Invoice); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Invoice`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invoice_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Invoice_metadata(ctx, field)
			case "organization":
				return ec.fieldContext_Invoice_organization(ctx, field)
			case "contract":
				return ec.fieldContext_Invoice_contract(ctx, field)
			case "dryRun":
				return ec.fieldContext_Invoice_dryRun(ctx, field)
			case "postpaid":
				return ec.fieldContext_Invoice_postpaid(ctx, field)
			case "offCycle":
				return ec.fieldContext_Invoice_offCycle(ctx, field)
			case "amountDue":
				return ec.fieldContext_Invoice_amountDue(ctx, field)
			case "amountPaid":
				return ec.fieldContext_Invoice_amountPaid(ctx, field)
			case "amountRemaining":
				return ec.fieldContext_Invoice_amountRemaining(ctx, field)
			case "invoiceNumber":
				return ec.fieldContext_Invoice_invoiceNumber(ctx, field)
			case "invoicePeriodStart":
				return ec.fieldContext_Invoice_invoicePeriodStart(ctx, field)
			case "invoicePeriodEnd":
				return ec.fieldContext_Invoice_invoicePeriodEnd(ctx, field)
			case "invoiceUrl":
				return ec.fieldContext_Invoice_invoiceUrl(ctx, field)
			case "due":
				return ec.fieldContext_Invoice_due(ctx, field)
			case "currency":
				return ec.fieldContext_Invoice_currency(ctx, field)
			case "repositoryFileId":
				return ec.fieldContext_Invoice_repositoryFileId(ctx, field)
			case "invoiceLineItems":
				return ec.fieldContext_Invoice_invoiceLineItems(ctx, field)
			case "status":
				return ec.fieldContext_Invoice_status(ctx, field)
			case "note":
				return ec.fieldContext_Invoice_note(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_Invoice_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_Invoice_internationalPaymentsBankInfo(ctx, field)
			case "customer":
				return ec.fieldContext_Invoice_customer(ctx, field)
			case "provider":
				return ec.fieldContext_Invoice_provider(ctx, field)
			case "paid":
				return ec.fieldContext_Invoice_paid(ctx, field)
			case "subtotal":
				return ec.fieldContext_Invoice_subtotal(ctx, field)
			case "taxDue":
				return ec.fieldContext_Invoice_taxDue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invoice", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invoice_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invoice_Pay(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invoice_Pay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InvoicePay(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Invoice); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Invoice`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invoice_Pay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Invoice_metadata(ctx, field)
			case "organization":
				return ec.fieldContext_Invoice_organization(ctx, field)
			case "contract":
				return ec.fieldContext_Invoice_contract(ctx, field)
			case "dryRun":
				return ec.fieldContext_Invoice_dryRun(ctx, field)
			case "postpaid":
				return ec.fieldContext_Invoice_postpaid(ctx, field)
			case "offCycle":
				return ec.fieldContext_Invoice_offCycle(ctx, field)
			case "amountDue":
				return ec.fieldContext_Invoice_amountDue(ctx, field)
			case "amountPaid":
				return ec.fieldContext_Invoice_amountPaid(ctx, field)
			case "amountRemaining":
				return ec.fieldContext_Invoice_amountRemaining(ctx, field)
			case "invoiceNumber":
				return ec.fieldContext_Invoice_invoiceNumber(ctx, field)
			case "invoicePeriodStart":
				return ec.fieldContext_Invoice_invoicePeriodStart(ctx, field)
			case "invoicePeriodEnd":
				return ec.fieldContext_Invoice_invoicePeriodEnd(ctx, field)
			case "invoiceUrl":
				return ec.fieldContext_Invoice_invoiceUrl(ctx, field)
			case "due":
				return ec.fieldContext_Invoice_due(ctx, field)
			case "currency":
				return ec.fieldContext_Invoice_currency(ctx, field)
			case "repositoryFileId":
				return ec.fieldContext_Invoice_repositoryFileId(ctx, field)
			case "invoiceLineItems":
				return ec.fieldContext_Invoice_invoiceLineItems(ctx, field)
			case "status":
				return ec.fieldContext_Invoice_status(ctx, field)
			case "note":
				return ec.fieldContext_Invoice_note(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_Invoice_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_Invoice_internationalPaymentsBankInfo(ctx, field)
			case "customer":
				return ec.fieldContext_Invoice_customer(ctx, field)
			case "provider":
				return ec.fieldContext_Invoice_provider(ctx, field)
			case "paid":
				return ec.fieldContext_Invoice_paid(ctx, field)
			case "subtotal":
				return ec.fieldContext_Invoice_subtotal(ctx, field)
			case "taxDue":
				return ec.fieldContext_Invoice_taxDue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invoice", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invoice_Pay_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invoice_Void(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invoice_Void(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InvoiceVoid(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Invoice); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Invoice`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invoice_Void(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Invoice_metadata(ctx, field)
			case "organization":
				return ec.fieldContext_Invoice_organization(ctx, field)
			case "contract":
				return ec.fieldContext_Invoice_contract(ctx, field)
			case "dryRun":
				return ec.fieldContext_Invoice_dryRun(ctx, field)
			case "postpaid":
				return ec.fieldContext_Invoice_postpaid(ctx, field)
			case "offCycle":
				return ec.fieldContext_Invoice_offCycle(ctx, field)
			case "amountDue":
				return ec.fieldContext_Invoice_amountDue(ctx, field)
			case "amountPaid":
				return ec.fieldContext_Invoice_amountPaid(ctx, field)
			case "amountRemaining":
				return ec.fieldContext_Invoice_amountRemaining(ctx, field)
			case "invoiceNumber":
				return ec.fieldContext_Invoice_invoiceNumber(ctx, field)
			case "invoicePeriodStart":
				return ec.fieldContext_Invoice_invoicePeriodStart(ctx, field)
			case "invoicePeriodEnd":
				return ec.fieldContext_Invoice_invoicePeriodEnd(ctx, field)
			case "invoiceUrl":
				return ec.fieldContext_Invoice_invoiceUrl(ctx, field)
			case "due":
				return ec.fieldContext_Invoice_due(ctx, field)
			case "currency":
				return ec.fieldContext_Invoice_currency(ctx, field)
			case "repositoryFileId":
				return ec.fieldContext_Invoice_repositoryFileId(ctx, field)
			case "invoiceLineItems":
				return ec.fieldContext_Invoice_invoiceLineItems(ctx, field)
			case "status":
				return ec.fieldContext_Invoice_status(ctx, field)
			case "note":
				return ec.fieldContext_Invoice_note(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_Invoice_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_Invoice_internationalPaymentsBankInfo(ctx, field)
			case "customer":
				return ec.fieldContext_Invoice_customer(ctx, field)
			case "provider":
				return ec.fieldContext_Invoice_provider(ctx, field)
			case "paid":
				return ec.fieldContext_Invoice_paid(ctx, field)
			case "subtotal":
				return ec.fieldContext_Invoice_subtotal(ctx, field)
			case "taxDue":
				return ec.fieldContext_Invoice_taxDue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invoice", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invoice_Void_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invoicingCycle_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invoicingCycle_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InvoicingCycleCreate(rctx, fc.Args["input"].(model.InvoicingCycleInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.InvoicingCycle); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.InvoicingCycle`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoicingCycle)
	fc.Result = res
	return ec.marshalNInvoicingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invoicingCycle_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InvoicingCycle_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InvoicingCycle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InvoicingCycle_updatedAt(ctx, field)
			case "type":
				return ec.fieldContext_InvoicingCycle_type(ctx, field)
			case "source":
				return ec.fieldContext_InvoicingCycle_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InvoicingCycle_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InvoicingCycle_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoicingCycle", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invoicingCycle_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_invoicingCycle_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_invoicingCycle_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().InvoicingCycleUpdate(rctx, fc.Args["input"].(model.InvoicingCycleUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.InvoicingCycle); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.InvoicingCycle`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoicingCycle)
	fc.Result = res
	return ec.marshalNInvoicingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_invoicingCycle_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InvoicingCycle_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InvoicingCycle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InvoicingCycle_updatedAt(ctx, field)
			case "type":
				return ec.fieldContext_InvoicingCycle_type(ctx, field)
			case "source":
				return ec.fieldContext_InvoicingCycle_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InvoicingCycle_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InvoicingCycle_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoicingCycle", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_invoicingCycle_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_jobRole_Delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_jobRole_Delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().JobRoleDelete(rctx, fc.Args["contactId"].(string), fc.Args["roleId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_jobRole_Delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_jobRole_Delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_jobRole_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_jobRole_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().JobRoleCreate(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.JobRoleInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JobRole)
	fc.Result = res
	return ec.marshalNJobRole2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_jobRole_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobRole_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobRole_updatedAt(ctx, field)
			case "organization":
				return ec.fieldContext_JobRole_organization(ctx, field)
			case "contact":
				return ec.fieldContext_JobRole_contact(ctx, field)
			case "jobTitle":
				return ec.fieldContext_JobRole_jobTitle(ctx, field)
			case "primary":
				return ec.fieldContext_JobRole_primary(ctx, field)
			case "description":
				return ec.fieldContext_JobRole_description(ctx, field)
			case "company":
				return ec.fieldContext_JobRole_company(ctx, field)
			case "startedAt":
				return ec.fieldContext_JobRole_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_JobRole_endedAt(ctx, field)
			case "source":
				return ec.fieldContext_JobRole_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_JobRole_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_JobRole_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_jobRole_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_jobRole_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_jobRole_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().JobRoleUpdate(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.JobRoleUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JobRole)
	fc.Result = res
	return ec.marshalNJobRole2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_jobRole_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobRole_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobRole_updatedAt(ctx, field)
			case "organization":
				return ec.fieldContext_JobRole_organization(ctx, field)
			case "contact":
				return ec.fieldContext_JobRole_contact(ctx, field)
			case "jobTitle":
				return ec.fieldContext_JobRole_jobTitle(ctx, field)
			case "primary":
				return ec.fieldContext_JobRole_primary(ctx, field)
			case "description":
				return ec.fieldContext_JobRole_description(ctx, field)
			case "company":
				return ec.fieldContext_JobRole_company(ctx, field)
			case "startedAt":
				return ec.fieldContext_JobRole_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_JobRole_endedAt(ctx, field)
			case "source":
				return ec.fieldContext_JobRole_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_JobRole_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_JobRole_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_jobRole_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_location_RemoveFromContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_location_RemoveFromContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LocationRemoveFromContact(rctx, fc.Args["contactId"].(string), fc.Args["locationId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Contact); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Contact`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_location_RemoveFromContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_location_RemoveFromContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_location_RemoveFromOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_location_RemoveFromOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LocationRemoveFromOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["locationId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_location_RemoveFromOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_location_RemoveFromOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_location_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_location_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LocationUpdate(rctx, fc.Args["input"].(model.LocationUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_location_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Location_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Location_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Location_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Location_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Location_appSource(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "rawAddress":
				return ec.fieldContext_Location_rawAddress(ctx, field)
			case "country":
				return ec.fieldContext_Location_country(ctx, field)
			case "region":
				return ec.fieldContext_Location_region(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "locality":
				return ec.fieldContext_Location_locality(ctx, field)
			case "street":
				return ec.fieldContext_Location_street(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "address2":
				return ec.fieldContext_Location_address2(ctx, field)
			case "zip":
				return ec.fieldContext_Location_zip(ctx, field)
			case "addressType":
				return ec.fieldContext_Location_addressType(ctx, field)
			case "houseNumber":
				return ec.fieldContext_Location_houseNumber(ctx, field)
			case "postalCode":
				return ec.fieldContext_Location_postalCode(ctx, field)
			case "plusFour":
				return ec.fieldContext_Location_plusFour(ctx, field)
			case "commercial":
				return ec.fieldContext_Location_commercial(ctx, field)
			case "predirection":
				return ec.fieldContext_Location_predirection(ctx, field)
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "timeZone":
				return ec.fieldContext_Location_timeZone(ctx, field)
			case "utcOffset":
				return ec.fieldContext_Location_utcOffset(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_location_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logEntry_CreateForOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logEntry_CreateForOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LogEntryCreateForOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["input"].(model.LogEntryInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logEntry_CreateForOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_logEntry_CreateForOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logEntry_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logEntry_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LogEntryUpdate(rctx, fc.Args["id"].(string), fc.Args["input"].(model.LogEntryUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logEntry_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_logEntry_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logEntry_AddTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logEntry_AddTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LogEntryAddTag(rctx, fc.Args["id"].(string), fc.Args["input"].(model.TagIDOrNameInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logEntry_AddTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_logEntry_AddTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logEntry_RemoveTag(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logEntry_RemoveTag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LogEntryRemoveTag(rctx, fc.Args["id"].(string), fc.Args["input"].(model.TagIDOrNameInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logEntry_RemoveTag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_logEntry_RemoveTag_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logEntry_ResetTags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logEntry_ResetTags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().LogEntryResetTags(rctx, fc.Args["id"].(string), fc.Args["input"].([]*model.TagIDOrNameInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logEntry_ResetTags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_logEntry_ResetTags_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlan_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlan_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanCreate(rctx, fc.Args["input"].(model.MasterPlanInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlan)
	fc.Result = res
	return ec.marshalNMasterPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlan_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_MasterPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_MasterPlan_retiredMilestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlan_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlan_CreateDefault(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlan_CreateDefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanCreateDefault(rctx, fc.Args["input"].(model.MasterPlanInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlan)
	fc.Result = res
	return ec.marshalNMasterPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlan_CreateDefault(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_MasterPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_MasterPlan_retiredMilestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlan_CreateDefault_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlan_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlan_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanUpdate(rctx, fc.Args["input"].(model.MasterPlanUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlan)
	fc.Result = res
	return ec.marshalNMasterPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlan_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_MasterPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_MasterPlan_retiredMilestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlan_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlan_Duplicate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlan_Duplicate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanDuplicate(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlan)
	fc.Result = res
	return ec.marshalNMasterPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlan_Duplicate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_MasterPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_MasterPlan_retiredMilestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlan_Duplicate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlanMilestone_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlanMilestone_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanMilestoneCreate(rctx, fc.Args["input"].(model.MasterPlanMilestoneInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlanMilestone)
	fc.Result = res
	return ec.marshalNMasterPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlanMilestone_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_MasterPlanMilestone_order(ctx, field)
			case "durationHours":
				return ec.fieldContext_MasterPlanMilestone_durationHours(ctx, field)
			case "optional":
				return ec.fieldContext_MasterPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_MasterPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlanMilestone_retired(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlanMilestone_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlanMilestone_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlanMilestone_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanMilestoneUpdate(rctx, fc.Args["input"].(model.MasterPlanMilestoneUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlanMilestone)
	fc.Result = res
	return ec.marshalNMasterPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlanMilestone_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_MasterPlanMilestone_order(ctx, field)
			case "durationHours":
				return ec.fieldContext_MasterPlanMilestone_durationHours(ctx, field)
			case "optional":
				return ec.fieldContext_MasterPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_MasterPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlanMilestone_retired(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlanMilestone_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlanMilestone_BulkUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlanMilestone_BulkUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanMilestoneBulkUpdate(rctx, fc.Args["input"].([]*model.MasterPlanMilestoneUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.MasterPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MasterPlanMilestone)
	fc.Result = res
	return ec.marshalNMasterPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlanMilestone_BulkUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_MasterPlanMilestone_order(ctx, field)
			case "durationHours":
				return ec.fieldContext_MasterPlanMilestone_durationHours(ctx, field)
			case "optional":
				return ec.fieldContext_MasterPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_MasterPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlanMilestone_retired(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlanMilestone_BulkUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlanMilestone_Reorder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlanMilestone_Reorder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanMilestoneReorder(rctx, fc.Args["input"].(model.MasterPlanMilestoneReorderInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlanMilestone_Reorder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlanMilestone_Reorder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_masterPlanMilestone_Duplicate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_masterPlanMilestone_Duplicate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().MasterPlanMilestoneDuplicate(rctx, fc.Args["masterPlanId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlanMilestone)
	fc.Result = res
	return ec.marshalNMasterPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_masterPlanMilestone_Duplicate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_MasterPlanMilestone_order(ctx, field)
			case "durationHours":
				return ec.fieldContext_MasterPlanMilestone_durationHours(ctx, field)
			case "optional":
				return ec.fieldContext_MasterPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_MasterPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlanMilestone_retired(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_masterPlanMilestone_Duplicate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingCreate(rctx, fc.Args["meeting"].(model.MeetingInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingUpdate(rctx, fc.Args["meetingId"].(string), fc.Args["meeting"].(model.MeetingUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_LinkAttendedBy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_LinkAttendedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingLinkAttendedBy(rctx, fc.Args["meetingId"].(string), fc.Args["participant"].(model.MeetingParticipantInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_LinkAttendedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_LinkAttendedBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_UnlinkAttendedBy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_UnlinkAttendedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingUnlinkAttendedBy(rctx, fc.Args["meetingId"].(string), fc.Args["participant"].(model.MeetingParticipantInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_UnlinkAttendedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_UnlinkAttendedBy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_LinkAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_LinkAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingLinkAttachment(rctx, fc.Args["meetingId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_LinkAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_LinkAttachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_UnlinkAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_UnlinkAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingUnlinkAttachment(rctx, fc.Args["meetingId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_UnlinkAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_UnlinkAttachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_LinkRecording(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_LinkRecording(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingLinkRecording(rctx, fc.Args["meetingId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_LinkRecording(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_LinkRecording_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_UnlinkRecording(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_UnlinkRecording(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingUnlinkRecording(rctx, fc.Args["meetingId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_UnlinkRecording(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_UnlinkRecording_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_AddNewLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_AddNewLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingAddNewLocation(rctx, fc.Args["meetingId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_AddNewLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Location_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Location_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Location_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Location_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Location_appSource(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "rawAddress":
				return ec.fieldContext_Location_rawAddress(ctx, field)
			case "country":
				return ec.fieldContext_Location_country(ctx, field)
			case "region":
				return ec.fieldContext_Location_region(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "locality":
				return ec.fieldContext_Location_locality(ctx, field)
			case "street":
				return ec.fieldContext_Location_street(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "address2":
				return ec.fieldContext_Location_address2(ctx, field)
			case "zip":
				return ec.fieldContext_Location_zip(ctx, field)
			case "addressType":
				return ec.fieldContext_Location_addressType(ctx, field)
			case "houseNumber":
				return ec.fieldContext_Location_houseNumber(ctx, field)
			case "postalCode":
				return ec.fieldContext_Location_postalCode(ctx, field)
			case "plusFour":
				return ec.fieldContext_Location_plusFour(ctx, field)
			case "commercial":
				return ec.fieldContext_Location_commercial(ctx, field)
			case "predirection":
				return ec.fieldContext_Location_predirection(ctx, field)
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "timeZone":
				return ec.fieldContext_Location_timeZone(ctx, field)
			case "utcOffset":
				return ec.fieldContext_Location_utcOffset(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_AddNewLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_meeting_AddNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_meeting_AddNote(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MeetingAddNote(rctx, fc.Args["meetingId"].(string), fc.Args["note"].(*model.NoteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_meeting_AddNote(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_meeting_AddNote_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_note_CreateForContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_note_CreateForContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NoteCreateForContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.NoteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_note_CreateForContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_note_CreateForContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_note_CreateForOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_note_CreateForOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NoteCreateForOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["input"].(model.NoteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_note_CreateForOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_note_CreateForOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_note_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_note_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NoteUpdate(rctx, fc.Args["input"].(model.NoteUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_note_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_note_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_note_Delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_note_Delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NoteDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_note_Delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_note_Delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_note_LinkAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_note_LinkAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NoteLinkAttachment(rctx, fc.Args["noteId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_note_LinkAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_note_LinkAttachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_note_UnlinkAttachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_note_UnlinkAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NoteUnlinkAttachment(rctx, fc.Args["noteId"].(string), fc.Args["attachmentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_note_UnlinkAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_note_UnlinkAttachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_opportunityUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_opportunityUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OpportunityUpdate(rctx, fc.Args["input"].(model.OpportunityUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Opportunity)
	fc.Result = res
	return ec.marshalNOpportunity2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_opportunityUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Opportunity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Opportunity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Opportunity_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Opportunity_name(ctx, field)
			case "amount":
				return ec.fieldContext_Opportunity_amount(ctx, field)
			case "maxAmount":
				return ec.fieldContext_Opportunity_maxAmount(ctx, field)
			case "internalType":
				return ec.fieldContext_Opportunity_internalType(ctx, field)
			case "externalType":
				return ec.fieldContext_Opportunity_externalType(ctx, field)
			case "internalStage":
				return ec.fieldContext_Opportunity_internalStage(ctx, field)
			case "externalStage":
				return ec.fieldContext_Opportunity_externalStage(ctx, field)
			case "estimatedClosedAt":
				return ec.fieldContext_Opportunity_estimatedClosedAt(ctx, field)
			case "generalNotes":
				return ec.fieldContext_Opportunity_generalNotes(ctx, field)
			case "nextSteps":
				return ec.fieldContext_Opportunity_nextSteps(ctx, field)
			case "renewedAt":
				return ec.fieldContext_Opportunity_renewedAt(ctx, field)
			case "renewalLikelihood":
				return ec.fieldContext_Opportunity_renewalLikelihood(ctx, field)
			case "renewalUpdatedByUserId":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserId(ctx, field)
			case "renewalUpdatedByUserAt":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserAt(ctx, field)
			case "comments":
				return ec.fieldContext_Opportunity_comments(ctx, field)
			case "createdBy":
				return ec.fieldContext_Opportunity_createdBy(ctx, field)
			case "owner":
				return ec.fieldContext_Opportunity_owner(ctx, field)
			case "source":
				return ec.fieldContext_Opportunity_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Opportunity_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Opportunity_appSource(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Opportunity_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Opportunity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_opportunityUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_opportunityRenewalUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_opportunityRenewalUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OpportunityRenewalUpdate(rctx, fc.Args["input"].(model.OpportunityRenewalUpdateInput), fc.Args["ownerUserId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Opportunity)
	fc.Result = res
	return ec.marshalNOpportunity2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_opportunityRenewalUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Opportunity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Opportunity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Opportunity_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Opportunity_name(ctx, field)
			case "amount":
				return ec.fieldContext_Opportunity_amount(ctx, field)
			case "maxAmount":
				return ec.fieldContext_Opportunity_maxAmount(ctx, field)
			case "internalType":
				return ec.fieldContext_Opportunity_internalType(ctx, field)
			case "externalType":
				return ec.fieldContext_Opportunity_externalType(ctx, field)
			case "internalStage":
				return ec.fieldContext_Opportunity_internalStage(ctx, field)
			case "externalStage":
				return ec.fieldContext_Opportunity_externalStage(ctx, field)
			case "estimatedClosedAt":
				return ec.fieldContext_Opportunity_estimatedClosedAt(ctx, field)
			case "generalNotes":
				return ec.fieldContext_Opportunity_generalNotes(ctx, field)
			case "nextSteps":
				return ec.fieldContext_Opportunity_nextSteps(ctx, field)
			case "renewedAt":
				return ec.fieldContext_Opportunity_renewedAt(ctx, field)
			case "renewalLikelihood":
				return ec.fieldContext_Opportunity_renewalLikelihood(ctx, field)
			case "renewalUpdatedByUserId":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserId(ctx, field)
			case "renewalUpdatedByUserAt":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserAt(ctx, field)
			case "comments":
				return ec.fieldContext_Opportunity_comments(ctx, field)
			case "createdBy":
				return ec.fieldContext_Opportunity_createdBy(ctx, field)
			case "owner":
				return ec.fieldContext_Opportunity_owner(ctx, field)
			case "source":
				return ec.fieldContext_Opportunity_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Opportunity_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Opportunity_appSource(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Opportunity_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Opportunity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_opportunityRenewalUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationCreate(rctx, fc.Args["input"].(model.OrganizationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationUpdate(rctx, fc.Args["input"].(model.OrganizationUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_Archive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_Archive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationArchive(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalOResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_Archive(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_Archive_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_ArchiveAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_ArchiveAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationArchiveAll(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalOResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_ArchiveAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_ArchiveAll_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_Hide(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_Hide(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationHide(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_Hide(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_Hide_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_HideAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_HideAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationHideAll(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalOResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_HideAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_HideAll_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_Show(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_Show(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationShow(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_Show(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_Show_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_ShowAll(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_ShowAll(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationShowAll(rctx, fc.Args["ids"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalOResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_ShowAll(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_ShowAll_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_Merge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_Merge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationMerge(rctx, fc.Args["primaryOrganizationId"].(string), fc.Args["mergedOrganizationIds"].([]string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_Merge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_Merge_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_AddSubsidiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_AddSubsidiary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationAddSubsidiary(rctx, fc.Args["input"].(model.LinkOrganizationsInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_AddSubsidiary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_AddSubsidiary_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_RemoveSubsidiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_RemoveSubsidiary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationRemoveSubsidiary(rctx, fc.Args["organizationId"].(string), fc.Args["subsidiaryId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_RemoveSubsidiary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_RemoveSubsidiary_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_AddNewLocation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_AddNewLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationAddNewLocation(rctx, fc.Args["organizationId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Location); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Location`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_AddNewLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Location_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Location_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Location_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Location_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Location_appSource(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "rawAddress":
				return ec.fieldContext_Location_rawAddress(ctx, field)
			case "country":
				return ec.fieldContext_Location_country(ctx, field)
			case "region":
				return ec.fieldContext_Location_region(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "locality":
				return ec.fieldContext_Location_locality(ctx, field)
			case "street":
				return ec.fieldContext_Location_street(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "address2":
				return ec.fieldContext_Location_address2(ctx, field)
			case "zip":
				return ec.fieldContext_Location_zip(ctx, field)
			case "addressType":
				return ec.fieldContext_Location_addressType(ctx, field)
			case "houseNumber":
				return ec.fieldContext_Location_houseNumber(ctx, field)
			case "postalCode":
				return ec.fieldContext_Location_postalCode(ctx, field)
			case "plusFour":
				return ec.fieldContext_Location_plusFour(ctx, field)
			case "commercial":
				return ec.fieldContext_Location_commercial(ctx, field)
			case "predirection":
				return ec.fieldContext_Location_predirection(ctx, field)
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "timeZone":
				return ec.fieldContext_Location_timeZone(ctx, field)
			case "utcOffset":
				return ec.fieldContext_Location_utcOffset(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_AddNewLocation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_AddSocial(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_AddSocial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationAddSocial(rctx, fc.Args["organizationId"].(string), fc.Args["input"].(model.SocialInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Social); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Social`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Social)
	fc.Result = res
	return ec.marshalNSocial2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_AddSocial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Social_id(ctx, field)
			case "platformName":
				return ec.fieldContext_Social_platformName(ctx, field)
			case "url":
				return ec.fieldContext_Social_url(ctx, field)
			case "createdAt":
				return ec.fieldContext_Social_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Social_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Social_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Social_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Social_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Social", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_AddSocial_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_SetOwner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_SetOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationSetOwner(rctx, fc.Args["organizationId"].(string), fc.Args["userId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_SetOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_SetOwner_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_UnsetOwner(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_UnsetOwner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationUnsetOwner(rctx, fc.Args["organizationId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_UnsetOwner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_UnsetOwner_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organization_UpdateOnboardingStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organization_UpdateOnboardingStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationUpdateOnboardingStatus(rctx, fc.Args["input"].(model.OnboardingStatusInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organization_UpdateOnboardingStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organization_UpdateOnboardingStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlan_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlan_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanCreate(rctx, fc.Args["input"].(model.OrganizationPlanInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlan)
	fc.Result = res
	return ec.marshalNOrganizationPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlan_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_OrganizationPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_OrganizationPlan_retiredMilestones(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlan_statusDetails(ctx, field)
			case "masterPlanId":
				return ec.fieldContext_OrganizationPlan_masterPlanId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlan_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlan_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlan_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanUpdate(rctx, fc.Args["input"].(model.OrganizationPlanUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlan)
	fc.Result = res
	return ec.marshalNOrganizationPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlan_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_OrganizationPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_OrganizationPlan_retiredMilestones(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlan_statusDetails(ctx, field)
			case "masterPlanId":
				return ec.fieldContext_OrganizationPlan_masterPlanId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlan_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlan_Duplicate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlan_Duplicate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanDuplicate(rctx, fc.Args["id"].(string), fc.Args["organizationId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlan)
	fc.Result = res
	return ec.marshalNOrganizationPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlan_Duplicate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_OrganizationPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_OrganizationPlan_retiredMilestones(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlan_statusDetails(ctx, field)
			case "masterPlanId":
				return ec.fieldContext_OrganizationPlan_masterPlanId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlan_Duplicate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlanMilestone_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlanMilestone_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanMilestoneCreate(rctx, fc.Args["input"].(model.OrganizationPlanMilestoneInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlanMilestone)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlanMilestone_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_OrganizationPlanMilestone_order(ctx, field)
			case "dueDate":
				return ec.fieldContext_OrganizationPlanMilestone_dueDate(ctx, field)
			case "optional":
				return ec.fieldContext_OrganizationPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_OrganizationPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlanMilestone_retired(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlanMilestone_statusDetails(ctx, field)
			case "adhoc":
				return ec.fieldContext_OrganizationPlanMilestone_adhoc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlanMilestone_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlanMilestone_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlanMilestone_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanMilestoneUpdate(rctx, fc.Args["input"].(model.OrganizationPlanMilestoneUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlanMilestone)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlanMilestone_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_OrganizationPlanMilestone_order(ctx, field)
			case "dueDate":
				return ec.fieldContext_OrganizationPlanMilestone_dueDate(ctx, field)
			case "optional":
				return ec.fieldContext_OrganizationPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_OrganizationPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlanMilestone_retired(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlanMilestone_statusDetails(ctx, field)
			case "adhoc":
				return ec.fieldContext_OrganizationPlanMilestone_adhoc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlanMilestone_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlanMilestone_BulkUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlanMilestone_BulkUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanMilestoneBulkUpdate(rctx, fc.Args["input"].([]*model.OrganizationPlanMilestoneUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.OrganizationPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationPlanMilestone)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlanMilestone_BulkUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_OrganizationPlanMilestone_order(ctx, field)
			case "dueDate":
				return ec.fieldContext_OrganizationPlanMilestone_dueDate(ctx, field)
			case "optional":
				return ec.fieldContext_OrganizationPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_OrganizationPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlanMilestone_retired(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlanMilestone_statusDetails(ctx, field)
			case "adhoc":
				return ec.fieldContext_OrganizationPlanMilestone_adhoc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlanMilestone_BulkUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlanMilestone_Reorder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlanMilestone_Reorder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanMilestoneReorder(rctx, fc.Args["input"].(model.OrganizationPlanMilestoneReorderInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlanMilestone_Reorder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlanMilestone_Reorder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_organizationPlanMilestone_Duplicate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_organizationPlanMilestone_Duplicate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().OrganizationPlanMilestoneDuplicate(rctx, fc.Args["organizationId"].(string), fc.Args["organizationPlanId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPlanMilestone); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlanMilestone`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlanMilestone)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestone(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_organizationPlanMilestone_Duplicate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_OrganizationPlanMilestone_order(ctx, field)
			case "dueDate":
				return ec.fieldContext_OrganizationPlanMilestone_dueDate(ctx, field)
			case "optional":
				return ec.fieldContext_OrganizationPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_OrganizationPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlanMilestone_retired(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlanMilestone_statusDetails(ctx, field)
			case "adhoc":
				return ec.fieldContext_OrganizationPlanMilestone_adhoc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestone", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_organizationPlanMilestone_Duplicate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberMergeToContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberMergeToContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberMergeToContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.PhoneNumberInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberMergeToContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberMergeToContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberUpdateInContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberUpdateInContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberUpdateInContact(rctx, fc.Args["contactId"].(string), fc.Args["input"].(model.PhoneNumberUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberUpdateInContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberUpdateInContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberRemoveFromContactByE164(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberRemoveFromContactByE164(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberRemoveFromContactByE164(rctx, fc.Args["contactId"].(string), fc.Args["e164"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberRemoveFromContactByE164(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberRemoveFromContactByE164_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberRemoveFromContactById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberRemoveFromContactById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberRemoveFromContactByID(rctx, fc.Args["contactId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberRemoveFromContactById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberRemoveFromContactById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberMergeToOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberMergeToOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberMergeToOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["input"].(model.PhoneNumberInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberMergeToOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberMergeToOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberUpdateInOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberUpdateInOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberUpdateInOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["input"].(model.PhoneNumberUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberUpdateInOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberUpdateInOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberRemoveFromOrganizationByE164(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberRemoveFromOrganizationByE164(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberRemoveFromOrganizationByE164(rctx, fc.Args["organizationId"].(string), fc.Args["e164"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberRemoveFromOrganizationByE164(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberRemoveFromOrganizationByE164_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberRemoveFromOrganizationById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberRemoveFromOrganizationById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberRemoveFromOrganizationByID(rctx, fc.Args["organizationId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberRemoveFromOrganizationById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberRemoveFromOrganizationById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberMergeToUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberMergeToUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberMergeToUser(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.PhoneNumberInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberMergeToUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberMergeToUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberUpdateInUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberUpdateInUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberUpdateInUser(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.PhoneNumberUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberUpdateInUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberUpdateInUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberRemoveFromUserByE164(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberRemoveFromUserByE164(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberRemoveFromUserByE164(rctx, fc.Args["userId"].(string), fc.Args["e164"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberRemoveFromUserByE164(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberRemoveFromUserByE164_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_phoneNumberRemoveFromUserById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_phoneNumberRemoveFromUserById(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PhoneNumberRemoveFromUserByID(rctx, fc.Args["userId"].(string), fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_phoneNumberRemoveFromUserById(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_phoneNumberRemoveFromUserById_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_player_Merge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_player_Merge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PlayerMerge(rctx, fc.Args["userId"].(string), fc.Args["input"].(model.PlayerInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "CUSTOMER_OS_PLATFORM_OWNER", "OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_player_Merge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_player_Merge_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reminder_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reminder_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReminderCreate(rctx, fc.Args["input"].(model.ReminderInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Reminder); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Reminder`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reminder)
	fc.Result = res
	return ec.marshalNReminder2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reminder_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Reminder_metadata(ctx, field)
			case "content":
				return ec.fieldContext_Reminder_content(ctx, field)
			case "owner":
				return ec.fieldContext_Reminder_owner(ctx, field)
			case "dueDate":
				return ec.fieldContext_Reminder_dueDate(ctx, field)
			case "dismissed":
				return ec.fieldContext_Reminder_dismissed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reminder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reminder_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reminder_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reminder_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReminderUpdate(rctx, fc.Args["input"].(model.ReminderUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Reminder); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Reminder`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reminder)
	fc.Result = res
	return ec.marshalNReminder2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reminder_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Reminder_metadata(ctx, field)
			case "content":
				return ec.fieldContext_Reminder_content(ctx, field)
			case "owner":
				return ec.fieldContext_Reminder_owner(ctx, field)
			case "dueDate":
				return ec.fieldContext_Reminder_dueDate(ctx, field)
			case "dismissed":
				return ec.fieldContext_Reminder_dismissed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reminder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reminder_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contractLineItem_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contractLineItem_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContractLineItemCreate(rctx, fc.Args["input"].(model.ServiceLineItemInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ServiceLineItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.ServiceLineItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ServiceLineItem)
	fc.Result = res
	return ec.marshalNServiceLineItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contractLineItem_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_ServiceLineItem_metadata(ctx, field)
			case "billingCycle":
				return ec.fieldContext_ServiceLineItem_billingCycle(ctx, field)
			case "comments":
				return ec.fieldContext_ServiceLineItem_comments(ctx, field)
			case "description":
				return ec.fieldContext_ServiceLineItem_description(ctx, field)
			case "parentId":
				return ec.fieldContext_ServiceLineItem_parentId(ctx, field)
			case "price":
				return ec.fieldContext_ServiceLineItem_price(ctx, field)
			case "quantity":
				return ec.fieldContext_ServiceLineItem_quantity(ctx, field)
			case "serviceEnded":
				return ec.fieldContext_ServiceLineItem_serviceEnded(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_ServiceLineItem_serviceStarted(ctx, field)
			case "tax":
				return ec.fieldContext_ServiceLineItem_tax(ctx, field)
			case "createdBy":
				return ec.fieldContext_ServiceLineItem_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_ServiceLineItem_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceLineItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contractLineItem_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contractLineItem_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contractLineItem_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContractLineItemUpdate(rctx, fc.Args["input"].(model.ServiceLineItemUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.ServiceLineItem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.ServiceLineItem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ServiceLineItem)
	fc.Result = res
	return ec.marshalNServiceLineItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contractLineItem_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_ServiceLineItem_metadata(ctx, field)
			case "billingCycle":
				return ec.fieldContext_ServiceLineItem_billingCycle(ctx, field)
			case "comments":
				return ec.fieldContext_ServiceLineItem_comments(ctx, field)
			case "description":
				return ec.fieldContext_ServiceLineItem_description(ctx, field)
			case "parentId":
				return ec.fieldContext_ServiceLineItem_parentId(ctx, field)
			case "price":
				return ec.fieldContext_ServiceLineItem_price(ctx, field)
			case "quantity":
				return ec.fieldContext_ServiceLineItem_quantity(ctx, field)
			case "serviceEnded":
				return ec.fieldContext_ServiceLineItem_serviceEnded(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_ServiceLineItem_serviceStarted(ctx, field)
			case "tax":
				return ec.fieldContext_ServiceLineItem_tax(ctx, field)
			case "createdBy":
				return ec.fieldContext_ServiceLineItem_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_ServiceLineItem_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceLineItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contractLineItem_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_contractLineItem_Close(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_contractLineItem_Close(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ContractLineItemClose(rctx, fc.Args["input"].(model.ServiceLineItemCloseInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_contractLineItem_Close(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_contractLineItem_Close_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_serviceLineItem_Delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_serviceLineItem_Delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ServiceLineItemDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.DeleteResponse); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.DeleteResponse`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteResponse)
	fc.Result = res
	return ec.marshalNDeleteResponse2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDeleteResponse(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_serviceLineItem_Delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accepted":
				return ec.fieldContext_DeleteResponse_accepted(ctx, field)
			case "completed":
				return ec.fieldContext_DeleteResponse_completed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteResponse", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_serviceLineItem_Delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_serviceLineItem_BulkUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_serviceLineItem_BulkUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ServiceLineItemBulkUpdate(rctx, fc.Args["input"].(model.ServiceLineItemBulkUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_serviceLineItem_BulkUpdate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_serviceLineItem_BulkUpdate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_social_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_social_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SocialUpdate(rctx, fc.Args["input"].(model.SocialUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Social); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Social`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Social)
	fc.Result = res
	return ec.marshalNSocial2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_social_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Social_id(ctx, field)
			case "platformName":
				return ec.fieldContext_Social_platformName(ctx, field)
			case "url":
				return ec.fieldContext_Social_url(ctx, field)
			case "createdAt":
				return ec.fieldContext_Social_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Social_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Social_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Social_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Social_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Social", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_social_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_social_Remove(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_social_Remove(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().SocialRemove(rctx, fc.Args["socialId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_social_Remove(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_social_Remove_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tag_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tag_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagCreate(rctx, fc.Args["input"].(model.TagInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tag_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Tag_source(ctx, field)
			case "appSource":
				return ec.fieldContext_Tag_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tag_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tag_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tag_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagUpdate(rctx, fc.Args["input"].(model.TagUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tag_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Tag_source(ctx, field)
			case "appSource":
				return ec.fieldContext_Tag_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tag_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tag_Delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tag_Delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TagDelete(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalOResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tag_Delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tag_Delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tenant_Merge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tenant_Merge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TenantMerge(rctx, fc.Args["tenant"].(model.TenantInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tenant_Merge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tenant_Merge_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tenant_AddBillingProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tenant_AddBillingProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TenantAddBillingProfile(rctx, fc.Args["input"].(model.TenantBillingProfileInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TenantBillingProfile); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TenantBillingProfile`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TenantBillingProfile)
	fc.Result = res
	return ec.marshalNTenantBillingProfile2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tenant_AddBillingProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenantBillingProfile_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenantBillingProfile_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenantBillingProfile_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_TenantBillingProfile_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_TenantBillingProfile_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_TenantBillingProfile_appSource(ctx, field)
			case "email":
				return ec.fieldContext_TenantBillingProfile_email(ctx, field)
			case "phone":
				return ec.fieldContext_TenantBillingProfile_phone(ctx, field)
			case "addressLine1":
				return ec.fieldContext_TenantBillingProfile_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_TenantBillingProfile_addressLine2(ctx, field)
			case "addressLine3":
				return ec.fieldContext_TenantBillingProfile_addressLine3(ctx, field)
			case "locality":
				return ec.fieldContext_TenantBillingProfile_locality(ctx, field)
			case "country":
				return ec.fieldContext_TenantBillingProfile_country(ctx, field)
			case "zip":
				return ec.fieldContext_TenantBillingProfile_zip(ctx, field)
			case "legalName":
				return ec.fieldContext_TenantBillingProfile_legalName(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_internationalPaymentsBankInfo(ctx, field)
			case "vatNumber":
				return ec.fieldContext_TenantBillingProfile_vatNumber(ctx, field)
			case "sendInvoicesFrom":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesFrom(ctx, field)
			case "sendInvoicesBcc":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesBcc(ctx, field)
			case "canPayWithCard":
				return ec.fieldContext_TenantBillingProfile_canPayWithCard(ctx, field)
			case "canPayWithDirectDebitSEPA":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitSEPA(ctx, field)
			case "canPayWithDirectDebitACH":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitACH(ctx, field)
			case "canPayWithDirectDebitBacs":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitBacs(ctx, field)
			case "canPayWithBankTransfer":
				return ec.fieldContext_TenantBillingProfile_canPayWithBankTransfer(ctx, field)
			case "canPayWithPigeon":
				return ec.fieldContext_TenantBillingProfile_canPayWithPigeon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantBillingProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tenant_AddBillingProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tenant_UpdateBillingProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tenant_UpdateBillingProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TenantUpdateBillingProfile(rctx, fc.Args["input"].(model.TenantBillingProfileUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TenantBillingProfile); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TenantBillingProfile`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TenantBillingProfile)
	fc.Result = res
	return ec.marshalNTenantBillingProfile2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tenant_UpdateBillingProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenantBillingProfile_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenantBillingProfile_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenantBillingProfile_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_TenantBillingProfile_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_TenantBillingProfile_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_TenantBillingProfile_appSource(ctx, field)
			case "email":
				return ec.fieldContext_TenantBillingProfile_email(ctx, field)
			case "phone":
				return ec.fieldContext_TenantBillingProfile_phone(ctx, field)
			case "addressLine1":
				return ec.fieldContext_TenantBillingProfile_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_TenantBillingProfile_addressLine2(ctx, field)
			case "addressLine3":
				return ec.fieldContext_TenantBillingProfile_addressLine3(ctx, field)
			case "locality":
				return ec.fieldContext_TenantBillingProfile_locality(ctx, field)
			case "country":
				return ec.fieldContext_TenantBillingProfile_country(ctx, field)
			case "zip":
				return ec.fieldContext_TenantBillingProfile_zip(ctx, field)
			case "legalName":
				return ec.fieldContext_TenantBillingProfile_legalName(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_internationalPaymentsBankInfo(ctx, field)
			case "vatNumber":
				return ec.fieldContext_TenantBillingProfile_vatNumber(ctx, field)
			case "sendInvoicesFrom":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesFrom(ctx, field)
			case "sendInvoicesBcc":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesBcc(ctx, field)
			case "canPayWithCard":
				return ec.fieldContext_TenantBillingProfile_canPayWithCard(ctx, field)
			case "canPayWithDirectDebitSEPA":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitSEPA(ctx, field)
			case "canPayWithDirectDebitACH":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitACH(ctx, field)
			case "canPayWithDirectDebitBacs":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitBacs(ctx, field)
			case "canPayWithBankTransfer":
				return ec.fieldContext_TenantBillingProfile_canPayWithBankTransfer(ctx, field)
			case "canPayWithPigeon":
				return ec.fieldContext_TenantBillingProfile_canPayWithPigeon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantBillingProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tenant_UpdateBillingProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tenant_UpdateSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tenant_UpdateSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().TenantUpdateSettings(rctx, fc.Args["input"].(*model.TenantSettingsInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TenantSettings); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TenantSettings`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TenantSettings)
	fc.Result = res
	return ec.marshalNTenantSettings2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tenant_UpdateSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "logoRepositoryFileId":
				return ec.fieldContext_TenantSettings_logoRepositoryFileId(ctx, field)
			case "baseCurrency":
				return ec.fieldContext_TenantSettings_baseCurrency(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_TenantSettings_billingEnabled(ctx, field)
			case "logoUrl":
				return ec.fieldContext_TenantSettings_logoUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantSettings", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tenant_UpdateSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_Create(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_Create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserCreate(rctx, fc.Args["input"].(model.UserInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_Create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_Create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_Update(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_Update(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserUpdate(rctx, fc.Args["input"].(model.UserUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_Update(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_Update_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_AddRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_AddRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserAddRole(rctx, fc.Args["id"].(string), fc.Args["role"].(model.Role))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_AddRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_AddRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_RemoveRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_RemoveRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserRemoveRole(rctx, fc.Args["id"].(string), fc.Args["role"].(model.Role))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_RemoveRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_RemoveRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_AddRoleInTenant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_AddRoleInTenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserAddRoleInTenant(rctx, fc.Args["id"].(string), fc.Args["tenant"].(string), fc.Args["role"].(model.Role))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "CUSTOMER_OS_PLATFORM_OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_AddRoleInTenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_AddRoleInTenant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_RemoveRoleInTenant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_RemoveRoleInTenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserRemoveRoleInTenant(rctx, fc.Args["id"].(string), fc.Args["tenant"].(string), fc.Args["role"].(model.Role))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "CUSTOMER_OS_PLATFORM_OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_RemoveRoleInTenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_RemoveRoleInTenant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_Delete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_Delete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserDelete(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_Delete(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_Delete_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_user_DeleteInTenant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_user_DeleteInTenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UserDeleteInTenant(rctx, fc.Args["id"].(string), fc.Args["tenant"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "CUSTOMER_OS_PLATFORM_OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_user_DeleteInTenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_user_DeleteInTenant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_customer_user_AddJobRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_customer_user_AddJobRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CustomerUserAddJobRole(rctx, fc.Args["id"].(string), fc.Args["jobRoleInput"].(model.JobRoleInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "OWNER", "CUSTOMER_OS_PLATFORM_OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.CustomerUser); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.CustomerUser`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CustomerUser)
	fc.Result = res
	return ec.marshalNCustomerUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_customer_user_AddJobRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomerUser_id(ctx, field)
			case "jobRole":
				return ec.fieldContext_CustomerUser_jobRole(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomerUser", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_customer_user_AddJobRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_workspace_MergeToTenant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_workspace_MergeToTenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().WorkspaceMergeToTenant(rctx, fc.Args["workspace"].(model.WorkspaceInput), fc.Args["tenant"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "CUSTOMER_OS_PLATFORM_OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_workspace_MergeToTenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_workspace_MergeToTenant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_workspace_Merge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_workspace_Merge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().WorkspaceMerge(rctx, fc.Args["workspace"].(model.WorkspaceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"OWNER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Result); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Result`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_workspace_Merge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "result":
				return ec.fieldContext_Result_result(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_workspace_Merge_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Note_id(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_content(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_contentType(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Note().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_noted(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_noted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Note().Noted(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.NotedEntity)
	fc.Result = res
	return ec.marshalNNotedEntity2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNotedEntityᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_noted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NotedEntity does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_includes(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_includes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Note().Includes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_includes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Attachment_createdAt(ctx, field)
			case "basePath":
				return ec.fieldContext_Attachment_basePath(ctx, field)
			case "cdnUrl":
				return ec.fieldContext_Attachment_cdnUrl(ctx, field)
			case "fileName":
				return ec.fieldContext_Attachment_fileName(ctx, field)
			case "mimeType":
				return ec.fieldContext_Attachment_mimeType(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "source":
				return ec.fieldContext_Attachment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Attachment_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_source(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Note_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Note) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Note_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Note_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Note",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotePage_content(ctx context.Context, field graphql.CollectedField, obj *model.NotePage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotePage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Note)
	fc.Result = res
	return ec.marshalNNote2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotePage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotePage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Note_id(ctx, field)
			case "content":
				return ec.fieldContext_Note_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Note_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Note_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Note_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Note_createdBy(ctx, field)
			case "noted":
				return ec.fieldContext_Note_noted(ctx, field)
			case "includes":
				return ec.fieldContext_Note_includes(ctx, field)
			case "source":
				return ec.fieldContext_Note_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Note_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Note_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Note", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotePage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.NotePage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotePage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotePage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotePage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotePage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.NotePage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotePage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotePage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotePage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OnboardingDetails_status(ctx context.Context, field graphql.CollectedField, obj *model.OnboardingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OnboardingDetails_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OnboardingStatus)
	fc.Result = res
	return ec.marshalNOnboardingStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OnboardingDetails_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OnboardingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OnboardingStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OnboardingDetails_comments(ctx context.Context, field graphql.CollectedField, obj *model.OnboardingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OnboardingDetails_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OnboardingDetails_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OnboardingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OnboardingDetails_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.OnboardingDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OnboardingDetails_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OnboardingDetails_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OnboardingDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_id(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_name(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_amount(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_maxAmount(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_maxAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_maxAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_internalType(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_internalType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.InternalType)
	fc.Result = res
	return ec.marshalNInternalType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInternalType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_internalType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type InternalType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_externalType(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_externalType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_externalType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_internalStage(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_internalStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalStage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.InternalStage)
	fc.Result = res
	return ec.marshalNInternalStage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInternalStage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_internalStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type InternalStage does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_externalStage(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_externalStage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalStage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_externalStage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_estimatedClosedAt(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_estimatedClosedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EstimatedClosedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_estimatedClosedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_generalNotes(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_generalNotes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeneralNotes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_generalNotes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_nextSteps(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_nextSteps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextSteps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_nextSteps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_renewedAt(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_renewedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_renewedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_renewalLikelihood(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_renewalLikelihood(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalLikelihood, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OpportunityRenewalLikelihood)
	fc.Result = res
	return ec.marshalNOpportunityRenewalLikelihood2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalLikelihood(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_renewalLikelihood(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OpportunityRenewalLikelihood does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_renewalUpdatedByUserId(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_renewalUpdatedByUserId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalUpdatedByUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_renewalUpdatedByUserId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_renewalUpdatedByUserAt(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_renewalUpdatedByUserAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalUpdatedByUserAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_renewalUpdatedByUserAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_comments(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Opportunity().CreatedBy(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_owner(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Opportunity().Owner(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_source(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Opportunity_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.Opportunity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Opportunity_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Opportunity().ExternalLinks(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.ExternalSystem); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.ExternalSystem`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Opportunity_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Opportunity",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccountDetails_renewalSummary(ctx context.Context, field graphql.CollectedField, obj *model.OrgAccountDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccountDetails_renewalSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalSummary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RenewalSummary)
	fc.Result = res
	return ec.marshalORenewalSummary2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalSummary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccountDetails_renewalSummary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccountDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "arrForecast":
				return ec.fieldContext_RenewalSummary_arrForecast(ctx, field)
			case "maxArrForecast":
				return ec.fieldContext_RenewalSummary_maxArrForecast(ctx, field)
			case "renewalLikelihood":
				return ec.fieldContext_RenewalSummary_renewalLikelihood(ctx, field)
			case "nextRenewalDate":
				return ec.fieldContext_RenewalSummary_nextRenewalDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RenewalSummary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrgAccountDetails_onboarding(ctx context.Context, field graphql.CollectedField, obj *model.OrgAccountDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrgAccountDetails_onboarding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Onboarding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OnboardingDetails)
	fc.Result = res
	return ec.marshalOOnboardingDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrgAccountDetails_onboarding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrgAccountDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_OnboardingDetails_status(ctx, field)
			case "comments":
				return ec.fieldContext_OnboardingDetails_comments(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OnboardingDetails_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OnboardingDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_accountDetails(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_accountDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrgAccountDetails)
	fc.Result = res
	return ec.marshalOOrgAccountDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrgAccountDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_accountDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "renewalSummary":
				return ec.fieldContext_OrgAccountDetails_renewalSummary(ctx, field)
			case "onboarding":
				return ec.fieldContext_OrgAccountDetails_onboarding(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrgAccountDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_contracts(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_contracts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Contracts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_contracts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Contract_metadata(ctx, field)
			case "billingDetails":
				return ec.fieldContext_Contract_billingDetails(ctx, field)
			case "committedPeriods":
				return ec.fieldContext_Contract_committedPeriods(ctx, field)
			case "contractEnded":
				return ec.fieldContext_Contract_contractEnded(ctx, field)
			case "contractLineItems":
				return ec.fieldContext_Contract_contractLineItems(ctx, field)
			case "contractName":
				return ec.fieldContext_Contract_contractName(ctx, field)
			case "contractRenewalCycle":
				return ec.fieldContext_Contract_contractRenewalCycle(ctx, field)
			case "contractSigned":
				return ec.fieldContext_Contract_contractSigned(ctx, field)
			case "contractUrl":
				return ec.fieldContext_Contract_contractUrl(ctx, field)
			case "currency":
				return ec.fieldContext_Contract_currency(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Contract_externalLinks(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_Contract_billingEnabled(ctx, field)
			case "opportunities":
				return ec.fieldContext_Contract_opportunities(ctx, field)
			case "owner":
				return ec.fieldContext_Contract_owner(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_Contract_serviceStarted(ctx, field)
			case "contractStatus":
				return ec.fieldContext_Contract_contractStatus(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "serviceStartedAt":
				return ec.fieldContext_Contract_serviceStartedAt(ctx, field)
			case "name":
				return ec.fieldContext_Contract_name(ctx, field)
			case "signedAt":
				return ec.fieldContext_Contract_signedAt(ctx, field)
			case "renewalCycle":
				return ec.fieldContext_Contract_renewalCycle(ctx, field)
			case "organizationLegalName":
				return ec.fieldContext_Contract_organizationLegalName(ctx, field)
			case "invoiceEmail":
				return ec.fieldContext_Contract_invoiceEmail(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Contract_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contract_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contract_appSource(ctx, field)
			case "renewalPeriods":
				return ec.fieldContext_Contract_renewalPeriods(ctx, field)
			case "endedAt":
				return ec.fieldContext_Contract_endedAt(ctx, field)
			case "serviceLineItems":
				return ec.fieldContext_Contract_serviceLineItems(ctx, field)
			case "invoiceNote":
				return ec.fieldContext_Contract_invoiceNote(ctx, field)
			case "billingCycle":
				return ec.fieldContext_Contract_billingCycle(ctx, field)
			case "invoicingStartDate":
				return ec.fieldContext_Contract_invoicingStartDate(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Contract_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Contract_addressLine2(ctx, field)
			case "zip":
				return ec.fieldContext_Contract_zip(ctx, field)
			case "locality":
				return ec.fieldContext_Contract_locality(ctx, field)
			case "country":
				return ec.fieldContext_Contract_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_customerOsId(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_customerOsId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerOsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_customerOsId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_customFields(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_customFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().CustomFields(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CustomField)
	fc.Result = res
	return ec.marshalNCustomField2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_customFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CustomField_id(ctx, field)
			case "name":
				return ec.fieldContext_CustomField_name(ctx, field)
			case "datatype":
				return ec.fieldContext_CustomField_datatype(ctx, field)
			case "value":
				return ec.fieldContext_CustomField_value(ctx, field)
			case "source":
				return ec.fieldContext_CustomField_source(ctx, field)
			case "createdAt":
				return ec.fieldContext_CustomField_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CustomField_updatedAt(ctx, field)
			case "template":
				return ec.fieldContext_CustomField_template(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CustomField", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_customId(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_customId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_customId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_description(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_domains(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_domains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Domains(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_domains(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_slackChannelId(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_slackChannelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlackChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_slackChannelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_employeeGrowthRate(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmployeeGrowthRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_employeeGrowthRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_employees(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_employees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Employees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_employees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_headquarters(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_headquarters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Headquarters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_headquarters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_industry(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_industry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_industry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_industryGroup(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_industryGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IndustryGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_industryGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_isCustomer(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_isCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsCustomer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_isCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_lastFundingAmount(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_lastFundingAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastFundingAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_lastFundingAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_lastFundingRound(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_lastFundingRound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastFundingRound, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FundingRound)
	fc.Result = res
	return ec.marshalOFundingRound2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFundingRound(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_lastFundingRound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FundingRound does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_lastTouchpoint(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_lastTouchpoint(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTouchpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LastTouchpoint)
	fc.Result = res
	return ec.marshalOLastTouchpoint2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLastTouchpoint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_lastTouchpoint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lastTouchPointAt":
				return ec.fieldContext_LastTouchpoint_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_LastTouchpoint_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_LastTouchpoint_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_LastTouchpoint_lastTouchPointTimelineEvent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LastTouchpoint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_locations(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Locations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Location)
	fc.Result = res
	return ec.marshalNLocation2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Location_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Location_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Location_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Location_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Location_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Location_appSource(ctx, field)
			case "name":
				return ec.fieldContext_Location_name(ctx, field)
			case "rawAddress":
				return ec.fieldContext_Location_rawAddress(ctx, field)
			case "country":
				return ec.fieldContext_Location_country(ctx, field)
			case "region":
				return ec.fieldContext_Location_region(ctx, field)
			case "district":
				return ec.fieldContext_Location_district(ctx, field)
			case "locality":
				return ec.fieldContext_Location_locality(ctx, field)
			case "street":
				return ec.fieldContext_Location_street(ctx, field)
			case "address":
				return ec.fieldContext_Location_address(ctx, field)
			case "address2":
				return ec.fieldContext_Location_address2(ctx, field)
			case "zip":
				return ec.fieldContext_Location_zip(ctx, field)
			case "addressType":
				return ec.fieldContext_Location_addressType(ctx, field)
			case "houseNumber":
				return ec.fieldContext_Location_houseNumber(ctx, field)
			case "postalCode":
				return ec.fieldContext_Location_postalCode(ctx, field)
			case "plusFour":
				return ec.fieldContext_Location_plusFour(ctx, field)
			case "commercial":
				return ec.fieldContext_Location_commercial(ctx, field)
			case "predirection":
				return ec.fieldContext_Location_predirection(ctx, field)
			case "latitude":
				return ec.fieldContext_Location_latitude(ctx, field)
			case "longitude":
				return ec.fieldContext_Location_longitude(ctx, field)
			case "timeZone":
				return ec.fieldContext_Location_timeZone(ctx, field)
			case "utcOffset":
				return ec.fieldContext_Location_utcOffset(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Location", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_logo(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_logo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_logo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_market(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_market(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Market, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Market)
	fc.Result = res
	return ec.marshalOMarket2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMarket(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_market(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Market does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_name(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_notes(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_notes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_notes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_owner(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_parentCompanies(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_parentCompanies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().ParentCompanies(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.LinkedOrganization)
	fc.Result = res
	return ec.marshalNLinkedOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkedOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_parentCompanies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "organization":
				return ec.fieldContext_LinkedOrganization_organization(ctx, field)
			case "type":
				return ec.fieldContext_LinkedOrganization_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkedOrganization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_public(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_public(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Public, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_public(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_socialMedia(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_socialMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().SocialMedia(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Social)
	fc.Result = res
	return ec.marshalNSocial2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_socialMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Social_id(ctx, field)
			case "platformName":
				return ec.fieldContext_Social_platformName(ctx, field)
			case "url":
				return ec.fieldContext_Social_url(ctx, field)
			case "createdAt":
				return ec.fieldContext_Social_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Social_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Social_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Social_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Social_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Social", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_subIndustry(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_subIndustry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubIndustry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_subIndustry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_subsidiaries(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_subsidiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Subsidiaries(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.LinkedOrganization)
	fc.Result = res
	return ec.marshalNLinkedOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkedOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_subsidiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "organization":
				return ec.fieldContext_LinkedOrganization_organization(ctx, field)
			case "type":
				return ec.fieldContext_LinkedOrganization_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkedOrganization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_tags(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Tags(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Tag)
	fc.Result = res
	return ec.marshalOTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Tag_source(ctx, field)
			case "appSource":
				return ec.fieldContext_Tag_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_targetAudience(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_targetAudience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetAudience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_targetAudience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_timelineEvents(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_timelineEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().TimelineEvents(rctx, obj, fc.Args["from"].(*time.Time), fc.Args["size"].(int), fc.Args["timelineEventTypes"].([]model.TimelineEventType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.TimelineEvent)
	fc.Result = res
	return ec.marshalNTimelineEvent2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_timelineEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimelineEvent does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Organization_timelineEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Organization_valueProposition(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_valueProposition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueProposition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_valueProposition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_website(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_website(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_website(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_yearFounded(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_yearFounded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.YearFounded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_yearFounded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_hide(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_hide(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hide, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_hide(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_contacts(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Contacts(rctx, obj, fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].([]*model.SortBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContactsPage)
	fc.Result = res
	return ec.marshalNContactsPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactsPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_contacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_ContactsPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_ContactsPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_ContactsPage_totalElements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContactsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Organization_contacts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Organization_jobRoles(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_jobRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().JobRoles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JobRole)
	fc.Result = res
	return ec.marshalNJobRole2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_jobRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobRole_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobRole_updatedAt(ctx, field)
			case "organization":
				return ec.fieldContext_JobRole_organization(ctx, field)
			case "contact":
				return ec.fieldContext_JobRole_contact(ctx, field)
			case "jobTitle":
				return ec.fieldContext_JobRole_jobTitle(ctx, field)
			case "primary":
				return ec.fieldContext_JobRole_primary(ctx, field)
			case "description":
				return ec.fieldContext_JobRole_description(ctx, field)
			case "company":
				return ec.fieldContext_JobRole_company(ctx, field)
			case "startedAt":
				return ec.fieldContext_JobRole_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_JobRole_endedAt(ctx, field)
			case "source":
				return ec.fieldContext_JobRole_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_JobRole_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_JobRole_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_emails(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_emails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Emails(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_emails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_phoneNumbers(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_phoneNumbers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().PhoneNumbers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_phoneNumbers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_suggestedMergeTo(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().SuggestedMergeTo(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SuggestedMergeOrganization)
	fc.Result = res
	return ec.marshalNSuggestedMergeOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSuggestedMergeOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_suggestedMergeTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "organization":
				return ec.fieldContext_SuggestedMergeOrganization_organization(ctx, field)
			case "confidence":
				return ec.fieldContext_SuggestedMergeOrganization_confidence(ctx, field)
			case "suggestedAt":
				return ec.fieldContext_SuggestedMergeOrganization_suggestedAt(ctx, field)
			case "suggestedBy":
				return ec.fieldContext_SuggestedMergeOrganization_suggestedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SuggestedMergeOrganization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_fieldSets(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_fieldSets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().FieldSets(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FieldSet)
	fc.Result = res
	return ec.marshalNFieldSet2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_fieldSets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FieldSet_id(ctx, field)
			case "name":
				return ec.fieldContext_FieldSet_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_FieldSet_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FieldSet_updatedAt(ctx, field)
			case "customFields":
				return ec.fieldContext_FieldSet_customFields(ctx, field)
			case "template":
				return ec.fieldContext_FieldSet_template(ctx, field)
			case "source":
				return ec.fieldContext_FieldSet_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldSet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_entityTemplate(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_entityTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().EntityTemplate(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EntityTemplate)
	fc.Result = res
	return ec.marshalOEntityTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_entityTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntityTemplate_id(ctx, field)
			case "version":
				return ec.fieldContext_EntityTemplate_version(ctx, field)
			case "name":
				return ec.fieldContext_EntityTemplate_name(ctx, field)
			case "extends":
				return ec.fieldContext_EntityTemplate_extends(ctx, field)
			case "fieldSetTemplates":
				return ec.fieldContext_EntityTemplate_fieldSetTemplates(ctx, field)
			case "customFieldTemplates":
				return ec.fieldContext_EntityTemplate_customFieldTemplates(ctx, field)
			case "createdAt":
				return ec.fieldContext_EntityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EntityTemplate_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_timelineEventsTotalCount(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().TimelineEventsTotalCount(rctx, obj, fc.Args["timelineEventTypes"].([]model.TimelineEventType))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_timelineEventsTotalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Organization_timelineEventsTotalCount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Organization_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().ExternalLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_issueSummaryByStatus(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().IssueSummaryByStatus(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.IssueSummaryByStatus)
	fc.Result = res
	return ec.marshalNIssueSummaryByStatus2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueSummaryByStatusᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_issueSummaryByStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_IssueSummaryByStatus_status(ctx, field)
			case "count":
				return ec.fieldContext_IssueSummaryByStatus_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IssueSummaryByStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_socials(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_socials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Socials(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Social)
	fc.Result = res
	return ec.marshalNSocial2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_socials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Social_id(ctx, field)
			case "platformName":
				return ec.fieldContext_Social_platformName(ctx, field)
			case "url":
				return ec.fieldContext_Social_url(ctx, field)
			case "createdAt":
				return ec.fieldContext_Social_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Social_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Social_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Social_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Social_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Social", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_isPublic(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_isPublic(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPublic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_isPublic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_note(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_logoUrl(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_logoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_logoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_id(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_source(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_referenceId(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_referenceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_referenceId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_lastTouchPointAt(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTouchPointAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_lastTouchPointAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_lastTouchPointType(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_lastTouchPointType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTouchPointType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LastTouchpointType)
	fc.Result = res
	return ec.marshalOLastTouchpointType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLastTouchpointType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_lastTouchPointType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type LastTouchpointType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_lastTouchPointTimelineEventId(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTouchPointTimelineEventID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_lastTouchPointTimelineEventId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_lastTouchPointTimelineEvent(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().LastTouchPointTimelineEvent(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.TimelineEvent)
	fc.Result = res
	return ec.marshalOTimelineEvent2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_lastTouchPointTimelineEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimelineEvent does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_subsidiaryOf(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_subsidiaryOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().SubsidiaryOf(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.LinkedOrganization)
	fc.Result = res
	return ec.marshalNLinkedOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkedOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_subsidiaryOf(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "organization":
				return ec.fieldContext_LinkedOrganization_organization(ctx, field)
			case "type":
				return ec.fieldContext_LinkedOrganization_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LinkedOrganization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPage_content(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPage_totalAvailable(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPage_totalAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPage_totalAvailable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationParticipant_organizationParticipant(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationParticipant_organizationParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationParticipant_organizationParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationParticipant_type(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationParticipant_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationParticipant_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_name(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_source(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_appSource(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_retired(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_retired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Retired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_retired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_milestones(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_milestones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationPlan().Milestones(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationPlanMilestone)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_milestones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_OrganizationPlanMilestone_order(ctx, field)
			case "dueDate":
				return ec.fieldContext_OrganizationPlanMilestone_dueDate(ctx, field)
			case "optional":
				return ec.fieldContext_OrganizationPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_OrganizationPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlanMilestone_retired(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlanMilestone_statusDetails(ctx, field)
			case "adhoc":
				return ec.fieldContext_OrganizationPlanMilestone_adhoc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_retiredMilestones(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_retiredMilestones(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationPlan().RetiredMilestones(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationPlanMilestone)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_retiredMilestones(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlanMilestone_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlanMilestone_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestone_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlanMilestone_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlanMilestone_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlanMilestone_appSource(ctx, field)
			case "order":
				return ec.fieldContext_OrganizationPlanMilestone_order(ctx, field)
			case "dueDate":
				return ec.fieldContext_OrganizationPlanMilestone_dueDate(ctx, field)
			case "optional":
				return ec.fieldContext_OrganizationPlanMilestone_optional(ctx, field)
			case "items":
				return ec.fieldContext_OrganizationPlanMilestone_items(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlanMilestone_retired(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlanMilestone_statusDetails(ctx, field)
			case "adhoc":
				return ec.fieldContext_OrganizationPlanMilestone_adhoc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestone", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_statusDetails(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_statusDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlanStatusDetails)
	fc.Result = res
	return ec.marshalNOrganizationPlanStatusDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanStatusDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_statusDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_OrganizationPlanStatusDetails_status(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanStatusDetails_updatedAt(ctx, field)
			case "text":
				return ec.fieldContext_OrganizationPlanStatusDetails_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanStatusDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlan_masterPlanId(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlan_masterPlanId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MasterPlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlan_masterPlanId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_name(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_source(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_appSource(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_order(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_dueDate(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_dueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_dueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_optional(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_optional(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Optional, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_optional(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_items(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationPlanMilestoneItem)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestoneItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_OrganizationPlanMilestoneItem_status(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestoneItem_updatedAt(ctx, field)
			case "text":
				return ec.fieldContext_OrganizationPlanMilestoneItem_text(ctx, field)
			case "uuid":
				return ec.fieldContext_OrganizationPlanMilestoneItem_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestoneItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_retired(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_retired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Retired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_retired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_statusDetails(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_statusDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlanMilestoneStatusDetails)
	fc.Result = res
	return ec.marshalNOrganizationPlanMilestoneStatusDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneStatusDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_statusDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_OrganizationPlanMilestoneStatusDetails_status(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlanMilestoneStatusDetails_updatedAt(ctx, field)
			case "text":
				return ec.fieldContext_OrganizationPlanMilestoneStatusDetails_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlanMilestoneStatusDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestone_adhoc(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestone) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestone_adhoc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adhoc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestone_adhoc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestone",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestoneItem_status(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestoneItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestoneItem_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OnboardingPlanMilestoneItemStatus)
	fc.Result = res
	return ec.marshalNOnboardingPlanMilestoneItemStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneItemStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestoneItem_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestoneItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OnboardingPlanMilestoneItemStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestoneItem_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestoneItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestoneItem_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestoneItem_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestoneItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestoneItem_text(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestoneItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestoneItem_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestoneItem_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestoneItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestoneItem_uuid(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestoneItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestoneItem_uuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestoneItem_uuid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestoneItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestoneStatusDetails_status(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestoneStatusDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestoneStatusDetails_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OnboardingPlanMilestoneStatus)
	fc.Result = res
	return ec.marshalNOnboardingPlanMilestoneStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestoneStatusDetails_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestoneStatusDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OnboardingPlanMilestoneStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestoneStatusDetails_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestoneStatusDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestoneStatusDetails_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestoneStatusDetails_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestoneStatusDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanMilestoneStatusDetails_text(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanMilestoneStatusDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanMilestoneStatusDetails_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanMilestoneStatusDetails_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanMilestoneStatusDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanStatusDetails_status(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanStatusDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanStatusDetails_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OnboardingPlanStatus)
	fc.Result = res
	return ec.marshalNOnboardingPlanStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanStatusDetails_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanStatusDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OnboardingPlanStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanStatusDetails_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanStatusDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanStatusDetails_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanStatusDetails_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanStatusDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationPlanStatusDetails_text(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationPlanStatusDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationPlanStatusDetails_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationPlanStatusDetails_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationPlanStatusDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_id(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_startedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_endedAt(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_endedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_endedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_pageTitle(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_pageTitle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_pageTitle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_pageUrl(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_pageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_pageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_application(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_application(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Application, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_application(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_sessionId(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_sessionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SessionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_sessionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_orderInSession(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_orderInSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderInSession, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_orderInSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_engagedTime(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_engagedTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EngagedTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_engagedTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_source(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageView_appSource(ctx context.Context, field graphql.CollectedField, obj *model.PageView) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageView_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageView_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageView",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_id(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_e164(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_e164(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.E164, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_e164(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_rawPhoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RawPhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_rawPhoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_validated(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_validated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_validated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_country(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PhoneNumber().Country(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Country)
	fc.Result = res
	return ec.marshalOCountry2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Country_id(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "codeA2":
				return ec.fieldContext_Country_codeA2(ctx, field)
			case "codeA3":
				return ec.fieldContext_Country_codeA3(ctx, field)
			case "phoneCode":
				return ec.fieldContext_Country_phoneCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_label(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumberLabel)
	fc.Result = res
	return ec.marshalOPhoneNumberLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberLabel(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PhoneNumberLabel does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_primary(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_primary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_primary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_source(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_appSource(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_users(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PhoneNumber().Users(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_contacts(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PhoneNumber().Contacts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_contacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumber_organizations(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumber) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumber_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PhoneNumber().Organizations(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumber_organizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumberParticipant_phoneNumberParticipant(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumberParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumberParticipant_phoneNumberParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumberParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumberParticipant_phoneNumberParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumberParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PhoneNumberParticipant_type(ctx context.Context, field graphql.CollectedField, obj *model.PhoneNumberParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PhoneNumberParticipant_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PhoneNumberParticipant_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PhoneNumberParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_id(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_identityId(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_identityId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IdentityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_identityId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_authId(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_authId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_authId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_users(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Player().Users(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PlayerUser)
	fc.Result = res
	return ec.marshalNPlayerUser2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_PlayerUser_user(ctx, field)
			case "default":
				return ec.fieldContext_PlayerUser_default(ctx, field)
			case "tenant":
				return ec.fieldContext_PlayerUser_tenant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerUser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_provider(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_provider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_source(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerUser_user(ctx context.Context, field graphql.CollectedField, obj *model.PlayerUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerUser_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerUser_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerUser_default(ctx context.Context, field graphql.CollectedField, obj *model.PlayerUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerUser_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerUser_default(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerUser_tenant(ctx context.Context, field graphql.CollectedField, obj *model.PlayerUser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerUser_tenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerUser_tenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerUser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_entityTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_entityTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EntityTemplates(rctx, fc.Args["extends"].(*model.EntityTemplateExtension))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.EntityTemplate)
	fc.Result = res
	return ec.marshalNEntityTemplate2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_entityTemplates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EntityTemplate_id(ctx, field)
			case "version":
				return ec.fieldContext_EntityTemplate_version(ctx, field)
			case "name":
				return ec.fieldContext_EntityTemplate_name(ctx, field)
			case "extends":
				return ec.fieldContext_EntityTemplate_extends(ctx, field)
			case "fieldSetTemplates":
				return ec.fieldContext_EntityTemplate_fieldSetTemplates(ctx, field)
			case "customFieldTemplates":
				return ec.fieldContext_EntityTemplate_customFieldTemplates(ctx, field)
			case "createdAt":
				return ec.fieldContext_EntityTemplate_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EntityTemplate_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EntityTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_entityTemplates_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_analysis(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_analysis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Analysis(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Analysis)
	fc.Result = res
	return ec.marshalNAnalysis2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysis(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_analysis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Analysis_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Analysis_createdAt(ctx, field)
			case "content":
				return ec.fieldContext_Analysis_content(ctx, field)
			case "contentType":
				return ec.fieldContext_Analysis_contentType(ctx, field)
			case "analysisType":
				return ec.fieldContext_Analysis_analysisType(ctx, field)
			case "describes":
				return ec.fieldContext_Analysis_describes(ctx, field)
			case "source":
				return ec.fieldContext_Analysis_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Analysis_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Analysis_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Analysis", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_analysis_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_attachment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_attachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Attachment(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Attachment)
	fc.Result = res
	return ec.marshalNAttachment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_attachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Attachment_createdAt(ctx, field)
			case "basePath":
				return ec.fieldContext_Attachment_basePath(ctx, field)
			case "cdnUrl":
				return ec.fieldContext_Attachment_cdnUrl(ctx, field)
			case "fileName":
				return ec.fieldContext_Attachment_fileName(ctx, field)
			case "mimeType":
				return ec.fieldContext_Attachment_mimeType(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "source":
				return ec.fieldContext_Attachment_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Attachment_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Attachment_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_attachment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_bankAccounts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_bankAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().BankAccounts(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.BankAccount); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.BankAccount`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BankAccount)
	fc.Result = res
	return ec.marshalNBankAccount2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_bankAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_BankAccount_metadata(ctx, field)
			case "bankName":
				return ec.fieldContext_BankAccount_bankName(ctx, field)
			case "currency":
				return ec.fieldContext_BankAccount_currency(ctx, field)
			case "bankTransferEnabled":
				return ec.fieldContext_BankAccount_bankTransferEnabled(ctx, field)
			case "allowInternational":
				return ec.fieldContext_BankAccount_allowInternational(ctx, field)
			case "iban":
				return ec.fieldContext_BankAccount_iban(ctx, field)
			case "bic":
				return ec.fieldContext_BankAccount_bic(ctx, field)
			case "sortCode":
				return ec.fieldContext_BankAccount_sortCode(ctx, field)
			case "accountNumber":
				return ec.fieldContext_BankAccount_accountNumber(ctx, field)
			case "routingNumber":
				return ec.fieldContext_BankAccount_routingNumber(ctx, field)
			case "otherDetails":
				return ec.fieldContext_BankAccount_otherDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BankAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_global_Cache(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_global_Cache(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GlobalCache(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GlobalCache)
	fc.Result = res
	return ec.marshalNGlobalCache2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGlobalCache(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_global_Cache(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "user":
				return ec.fieldContext_GlobalCache_user(ctx, field)
			case "isOwner":
				return ec.fieldContext_GlobalCache_isOwner(ctx, field)
			case "isGoogleActive":
				return ec.fieldContext_GlobalCache_isGoogleActive(ctx, field)
			case "isGoogleTokenExpired":
				return ec.fieldContext_GlobalCache_isGoogleTokenExpired(ctx, field)
			case "gCliCache":
				return ec.fieldContext_GlobalCache_gCliCache(ctx, field)
			case "minARRForecastValue":
				return ec.fieldContext_GlobalCache_minARRForecastValue(ctx, field)
			case "maxARRForecastValue":
				return ec.fieldContext_GlobalCache_maxARRForecastValue(ctx, field)
			case "contractsExist":
				return ec.fieldContext_GlobalCache_contractsExist(ctx, field)
			case "cdnLogoUrl":
				return ec.fieldContext_GlobalCache_cdnLogoUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GlobalCache", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_contact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Contact(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalOContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Contacts(rctx, fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].([]*model.SortBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ContactsPage)
	fc.Result = res
	return ec.marshalNContactsPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactsPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_ContactsPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_ContactsPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_ContactsPage_totalElements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ContactsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contacts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contact_ByEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contact_ByEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContactByEmail(rctx, fc.Args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contact_ByEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contact_ByEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contact_ByPhone(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contact_ByPhone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContactByPhone(rctx, fc.Args["e164"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contact)
	fc.Result = res
	return ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contact_ByPhone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Contact_id(ctx, field)
			case "title":
				return ec.fieldContext_Contact_title(ctx, field)
			case "prefix":
				return ec.fieldContext_Contact_prefix(ctx, field)
			case "name":
				return ec.fieldContext_Contact_name(ctx, field)
			case "firstName":
				return ec.fieldContext_Contact_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Contact_lastName(ctx, field)
			case "description":
				return ec.fieldContext_Contact_description(ctx, field)
			case "timezone":
				return ec.fieldContext_Contact_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_Contact_profilePhotoUrl(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contact_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contact_updatedAt(ctx, field)
			case "label":
				return ec.fieldContext_Contact_label(ctx, field)
			case "source":
				return ec.fieldContext_Contact_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contact_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contact_appSource(ctx, field)
			case "tags":
				return ec.fieldContext_Contact_tags(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Contact_jobRoles(ctx, field)
			case "organizations":
				return ec.fieldContext_Contact_organizations(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Contact_phoneNumbers(ctx, field)
			case "emails":
				return ec.fieldContext_Contact_emails(ctx, field)
			case "locations":
				return ec.fieldContext_Contact_locations(ctx, field)
			case "socials":
				return ec.fieldContext_Contact_socials(ctx, field)
			case "customFields":
				return ec.fieldContext_Contact_customFields(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Contact_fieldSets(ctx, field)
			case "template":
				return ec.fieldContext_Contact_template(ctx, field)
			case "owner":
				return ec.fieldContext_Contact_owner(ctx, field)
			case "notes":
				return ec.fieldContext_Contact_notes(ctx, field)
			case "notesByTime":
				return ec.fieldContext_Contact_notesByTime(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Contact_timelineEvents(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Contact_timelineEventsTotalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contact_ByPhone_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_contract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Contract(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Contract); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Contract`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Contract_metadata(ctx, field)
			case "billingDetails":
				return ec.fieldContext_Contract_billingDetails(ctx, field)
			case "committedPeriods":
				return ec.fieldContext_Contract_committedPeriods(ctx, field)
			case "contractEnded":
				return ec.fieldContext_Contract_contractEnded(ctx, field)
			case "contractLineItems":
				return ec.fieldContext_Contract_contractLineItems(ctx, field)
			case "contractName":
				return ec.fieldContext_Contract_contractName(ctx, field)
			case "contractRenewalCycle":
				return ec.fieldContext_Contract_contractRenewalCycle(ctx, field)
			case "contractSigned":
				return ec.fieldContext_Contract_contractSigned(ctx, field)
			case "contractUrl":
				return ec.fieldContext_Contract_contractUrl(ctx, field)
			case "currency":
				return ec.fieldContext_Contract_currency(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Contract_externalLinks(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_Contract_billingEnabled(ctx, field)
			case "opportunities":
				return ec.fieldContext_Contract_opportunities(ctx, field)
			case "owner":
				return ec.fieldContext_Contract_owner(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_Contract_serviceStarted(ctx, field)
			case "contractStatus":
				return ec.fieldContext_Contract_contractStatus(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "serviceStartedAt":
				return ec.fieldContext_Contract_serviceStartedAt(ctx, field)
			case "name":
				return ec.fieldContext_Contract_name(ctx, field)
			case "signedAt":
				return ec.fieldContext_Contract_signedAt(ctx, field)
			case "renewalCycle":
				return ec.fieldContext_Contract_renewalCycle(ctx, field)
			case "organizationLegalName":
				return ec.fieldContext_Contract_organizationLegalName(ctx, field)
			case "invoiceEmail":
				return ec.fieldContext_Contract_invoiceEmail(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Contract_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contract_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contract_appSource(ctx, field)
			case "renewalPeriods":
				return ec.fieldContext_Contract_renewalPeriods(ctx, field)
			case "endedAt":
				return ec.fieldContext_Contract_endedAt(ctx, field)
			case "serviceLineItems":
				return ec.fieldContext_Contract_serviceLineItems(ctx, field)
			case "invoiceNote":
				return ec.fieldContext_Contract_invoiceNote(ctx, field)
			case "billingCycle":
				return ec.fieldContext_Contract_billingCycle(ctx, field)
			case "invoicingStartDate":
				return ec.fieldContext_Contract_invoicingStartDate(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Contract_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Contract_addressLine2(ctx, field)
			case "zip":
				return ec.fieldContext_Contract_zip(ctx, field)
			case "locality":
				return ec.fieldContext_Contract_locality(ctx, field)
			case "country":
				return ec.fieldContext_Contract_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_contract_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboardView_Organizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboardView_Organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardViewOrganizations(rctx, fc.Args["pagination"].(model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].(*model.SortBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPage)
	fc.Result = res
	return ec.marshalOOrganizationPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboardView_Organizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_OrganizationPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_OrganizationPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_OrganizationPage_totalElements(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_OrganizationPage_totalAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboardView_Organizations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboardView_Renewals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboardView_Renewals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardViewRenewals(rctx, fc.Args["pagination"].(model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].(*model.SortBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RenewalsPage)
	fc.Result = res
	return ec.marshalORenewalsPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalsPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboardView_Renewals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_RenewalsPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_RenewalsPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_RenewalsPage_totalElements(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_RenewalsPage_totalAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RenewalsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboardView_Renewals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_CustomerMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_CustomerMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardCustomerMap(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DashboardCustomerMap)
	fc.Result = res
	return ec.marshalODashboardCustomerMap2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardCustomerMapᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_CustomerMap(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "organizationId":
				return ec.fieldContext_DashboardCustomerMap_organizationId(ctx, field)
			case "organization":
				return ec.fieldContext_DashboardCustomerMap_organization(ctx, field)
			case "state":
				return ec.fieldContext_DashboardCustomerMap_state(ctx, field)
			case "arr":
				return ec.fieldContext_DashboardCustomerMap_arr(ctx, field)
			case "contractSignedDate":
				return ec.fieldContext_DashboardCustomerMap_contractSignedDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardCustomerMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_MRRPerCustomer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_MRRPerCustomer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardMRRPerCustomer(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardMRRPerCustomer)
	fc.Result = res
	return ec.marshalODashboardMRRPerCustomer2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardMRRPerCustomer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_MRRPerCustomer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "mrrPerCustomer":
				return ec.fieldContext_DashboardMRRPerCustomer_mrrPerCustomer(ctx, field)
			case "increasePercentage":
				return ec.fieldContext_DashboardMRRPerCustomer_increasePercentage(ctx, field)
			case "perMonth":
				return ec.fieldContext_DashboardMRRPerCustomer_perMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardMRRPerCustomer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_MRRPerCustomer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_GrossRevenueRetention(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_GrossRevenueRetention(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardGrossRevenueRetention(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardGrossRevenueRetention)
	fc.Result = res
	return ec.marshalODashboardGrossRevenueRetention2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardGrossRevenueRetention(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_GrossRevenueRetention(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "grossRevenueRetention":
				return ec.fieldContext_DashboardGrossRevenueRetention_grossRevenueRetention(ctx, field)
			case "increasePercentage":
				return ec.fieldContext_DashboardGrossRevenueRetention_increasePercentage(ctx, field)
			case "increasePercentageValue":
				return ec.fieldContext_DashboardGrossRevenueRetention_increasePercentageValue(ctx, field)
			case "perMonth":
				return ec.fieldContext_DashboardGrossRevenueRetention_perMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardGrossRevenueRetention", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_GrossRevenueRetention_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_ARRBreakdown(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_ARRBreakdown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardARRBreakdown(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardARRBreakdown)
	fc.Result = res
	return ec.marshalODashboardARRBreakdown2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardARRBreakdown(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_ARRBreakdown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "arrBreakdown":
				return ec.fieldContext_DashboardARRBreakdown_arrBreakdown(ctx, field)
			case "increasePercentage":
				return ec.fieldContext_DashboardARRBreakdown_increasePercentage(ctx, field)
			case "perMonth":
				return ec.fieldContext_DashboardARRBreakdown_perMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardARRBreakdown", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_ARRBreakdown_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_RevenueAtRisk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_RevenueAtRisk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardRevenueAtRisk(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardRevenueAtRisk)
	fc.Result = res
	return ec.marshalODashboardRevenueAtRisk2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRevenueAtRisk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_RevenueAtRisk(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "highConfidence":
				return ec.fieldContext_DashboardRevenueAtRisk_highConfidence(ctx, field)
			case "atRisk":
				return ec.fieldContext_DashboardRevenueAtRisk_atRisk(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardRevenueAtRisk", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_RevenueAtRisk_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_RetentionRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_RetentionRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardRetentionRate(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardRetentionRate)
	fc.Result = res
	return ec.marshalODashboardRetentionRate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRetentionRate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_RetentionRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "retentionRate":
				return ec.fieldContext_DashboardRetentionRate_retentionRate(ctx, field)
			case "increasePercentage":
				return ec.fieldContext_DashboardRetentionRate_increasePercentage(ctx, field)
			case "increasePercentageValue":
				return ec.fieldContext_DashboardRetentionRate_increasePercentageValue(ctx, field)
			case "perMonth":
				return ec.fieldContext_DashboardRetentionRate_perMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardRetentionRate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_RetentionRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_NewCustomers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_NewCustomers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardNewCustomers(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardNewCustomers)
	fc.Result = res
	return ec.marshalODashboardNewCustomers2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardNewCustomers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_NewCustomers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "thisMonthCount":
				return ec.fieldContext_DashboardNewCustomers_thisMonthCount(ctx, field)
			case "thisMonthIncreasePercentage":
				return ec.fieldContext_DashboardNewCustomers_thisMonthIncreasePercentage(ctx, field)
			case "perMonth":
				return ec.fieldContext_DashboardNewCustomers_perMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardNewCustomers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_NewCustomers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_TimeToOnboard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_TimeToOnboard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardTimeToOnboard(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardTimeToOnboard)
	fc.Result = res
	return ec.marshalODashboardTimeToOnboard2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardTimeToOnboard(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_TimeToOnboard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timeToOnboard":
				return ec.fieldContext_DashboardTimeToOnboard_timeToOnboard(ctx, field)
			case "increasePercentage":
				return ec.fieldContext_DashboardTimeToOnboard_increasePercentage(ctx, field)
			case "perMonth":
				return ec.fieldContext_DashboardTimeToOnboard_perMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardTimeToOnboard", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_TimeToOnboard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_dashboard_OnboardingCompletion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dashboard_OnboardingCompletion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DashboardOnboardingCompletion(rctx, fc.Args["period"].(*model.DashboardPeriodInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DashboardOnboardingCompletion)
	fc.Result = res
	return ec.marshalODashboardOnboardingCompletion2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardOnboardingCompletion(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dashboard_OnboardingCompletion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "completionPercentage":
				return ec.fieldContext_DashboardOnboardingCompletion_completionPercentage(ctx, field)
			case "increasePercentage":
				return ec.fieldContext_DashboardOnboardingCompletion_increasePercentage(ctx, field)
			case "perMonth":
				return ec.fieldContext_DashboardOnboardingCompletion_perMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DashboardOnboardingCompletion", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dashboard_OnboardingCompletion_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_email(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Email(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Email); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Email`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Email)
	fc.Result = res
	return ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_email_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_externalSystemInstances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_externalSystemInstances(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().ExternalSystemInstances(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.ExternalSystemInstance); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.ExternalSystemInstance`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystemInstance)
	fc.Result = res
	return ec.marshalNExternalSystemInstance2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemInstanceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_externalSystemInstances(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystemInstance_type(ctx, field)
			case "stripeDetails":
				return ec.fieldContext_ExternalSystemInstance_stripeDetails(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystemInstance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_interactionSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_interactionSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InteractionSession(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionSession)
	fc.Result = res
	return ec.marshalNInteractionSession2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_interactionSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionSession_id(ctx, field)
			case "startedAt":
				return ec.fieldContext_InteractionSession_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_InteractionSession_endedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionSession_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InteractionSession_updatedAt(ctx, field)
			case "sessionIdentifier":
				return ec.fieldContext_InteractionSession_sessionIdentifier(ctx, field)
			case "name":
				return ec.fieldContext_InteractionSession_name(ctx, field)
			case "status":
				return ec.fieldContext_InteractionSession_status(ctx, field)
			case "type":
				return ec.fieldContext_InteractionSession_type(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionSession_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionSession_channelData(ctx, field)
			case "source":
				return ec.fieldContext_InteractionSession_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionSession_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionSession_appSource(ctx, field)
			case "events":
				return ec.fieldContext_InteractionSession_events(ctx, field)
			case "attendedBy":
				return ec.fieldContext_InteractionSession_attendedBy(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionSession_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_InteractionSession_describedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_interactionSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_interactionSession_BySessionIdentifier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_interactionSession_BySessionIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InteractionSessionBySessionIdentifier(rctx, fc.Args["sessionIdentifier"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionSession)
	fc.Result = res
	return ec.marshalNInteractionSession2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_interactionSession_BySessionIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionSession_id(ctx, field)
			case "startedAt":
				return ec.fieldContext_InteractionSession_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_InteractionSession_endedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionSession_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InteractionSession_updatedAt(ctx, field)
			case "sessionIdentifier":
				return ec.fieldContext_InteractionSession_sessionIdentifier(ctx, field)
			case "name":
				return ec.fieldContext_InteractionSession_name(ctx, field)
			case "status":
				return ec.fieldContext_InteractionSession_status(ctx, field)
			case "type":
				return ec.fieldContext_InteractionSession_type(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionSession_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionSession_channelData(ctx, field)
			case "source":
				return ec.fieldContext_InteractionSession_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionSession_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionSession_appSource(ctx, field)
			case "events":
				return ec.fieldContext_InteractionSession_events(ctx, field)
			case "attendedBy":
				return ec.fieldContext_InteractionSession_attendedBy(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionSession_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_InteractionSession_describedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_interactionSession_BySessionIdentifier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_interactionEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_interactionEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InteractionEvent(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionEvent)
	fc.Result = res
	return ec.marshalNInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_interactionEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_interactionEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_interactionEvent_ByEventIdentifier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_interactionEvent_ByEventIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InteractionEventByEventIdentifier(rctx, fc.Args["eventIdentifier"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InteractionEvent)
	fc.Result = res
	return ec.marshalNInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_interactionEvent_ByEventIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InteractionEvent_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InteractionEvent_createdAt(ctx, field)
			case "eventIdentifier":
				return ec.fieldContext_InteractionEvent_eventIdentifier(ctx, field)
			case "content":
				return ec.fieldContext_InteractionEvent_content(ctx, field)
			case "contentType":
				return ec.fieldContext_InteractionEvent_contentType(ctx, field)
			case "channel":
				return ec.fieldContext_InteractionEvent_channel(ctx, field)
			case "channelData":
				return ec.fieldContext_InteractionEvent_channelData(ctx, field)
			case "interactionSession":
				return ec.fieldContext_InteractionEvent_interactionSession(ctx, field)
			case "issue":
				return ec.fieldContext_InteractionEvent_issue(ctx, field)
			case "meeting":
				return ec.fieldContext_InteractionEvent_meeting(ctx, field)
			case "sentBy":
				return ec.fieldContext_InteractionEvent_sentBy(ctx, field)
			case "sentTo":
				return ec.fieldContext_InteractionEvent_sentTo(ctx, field)
			case "repliesTo":
				return ec.fieldContext_InteractionEvent_repliesTo(ctx, field)
			case "includes":
				return ec.fieldContext_InteractionEvent_includes(ctx, field)
			case "summary":
				return ec.fieldContext_InteractionEvent_summary(ctx, field)
			case "actionItems":
				return ec.fieldContext_InteractionEvent_actionItems(ctx, field)
			case "source":
				return ec.fieldContext_InteractionEvent_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InteractionEvent_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InteractionEvent_appSource(ctx, field)
			case "eventType":
				return ec.fieldContext_InteractionEvent_eventType(ctx, field)
			case "externalLinks":
				return ec.fieldContext_InteractionEvent_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InteractionEvent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_interactionEvent_ByEventIdentifier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_invoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_invoice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Invoice(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_invoice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Invoice_metadata(ctx, field)
			case "organization":
				return ec.fieldContext_Invoice_organization(ctx, field)
			case "contract":
				return ec.fieldContext_Invoice_contract(ctx, field)
			case "dryRun":
				return ec.fieldContext_Invoice_dryRun(ctx, field)
			case "postpaid":
				return ec.fieldContext_Invoice_postpaid(ctx, field)
			case "offCycle":
				return ec.fieldContext_Invoice_offCycle(ctx, field)
			case "amountDue":
				return ec.fieldContext_Invoice_amountDue(ctx, field)
			case "amountPaid":
				return ec.fieldContext_Invoice_amountPaid(ctx, field)
			case "amountRemaining":
				return ec.fieldContext_Invoice_amountRemaining(ctx, field)
			case "invoiceNumber":
				return ec.fieldContext_Invoice_invoiceNumber(ctx, field)
			case "invoicePeriodStart":
				return ec.fieldContext_Invoice_invoicePeriodStart(ctx, field)
			case "invoicePeriodEnd":
				return ec.fieldContext_Invoice_invoicePeriodEnd(ctx, field)
			case "invoiceUrl":
				return ec.fieldContext_Invoice_invoiceUrl(ctx, field)
			case "due":
				return ec.fieldContext_Invoice_due(ctx, field)
			case "currency":
				return ec.fieldContext_Invoice_currency(ctx, field)
			case "repositoryFileId":
				return ec.fieldContext_Invoice_repositoryFileId(ctx, field)
			case "invoiceLineItems":
				return ec.fieldContext_Invoice_invoiceLineItems(ctx, field)
			case "status":
				return ec.fieldContext_Invoice_status(ctx, field)
			case "note":
				return ec.fieldContext_Invoice_note(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_Invoice_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_Invoice_internationalPaymentsBankInfo(ctx, field)
			case "customer":
				return ec.fieldContext_Invoice_customer(ctx, field)
			case "provider":
				return ec.fieldContext_Invoice_provider(ctx, field)
			case "paid":
				return ec.fieldContext_Invoice_paid(ctx, field)
			case "subtotal":
				return ec.fieldContext_Invoice_subtotal(ctx, field)
			case "taxDue":
				return ec.fieldContext_Invoice_taxDue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invoice", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_invoice_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_invoices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_invoices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Invoices(rctx, fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].([]*model.SortBy), fc.Args["organizationId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoicesPage)
	fc.Result = res
	return ec.marshalNInvoicesPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicesPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_invoices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_InvoicesPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_InvoicesPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_InvoicesPage_totalElements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoicesPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_invoices_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_invoicingCycle(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_invoicingCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().InvoicingCycle(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.InvoicingCycle); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.InvoicingCycle`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.InvoicingCycle)
	fc.Result = res
	return ec.marshalNInvoicingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycle(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_invoicingCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_InvoicingCycle_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_InvoicingCycle_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_InvoicingCycle_updatedAt(ctx, field)
			case "type":
				return ec.fieldContext_InvoicingCycle_type(ctx, field)
			case "source":
				return ec.fieldContext_InvoicingCycle_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_InvoicingCycle_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_InvoicingCycle_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoicingCycle", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_issue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_issue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Issue(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Issue); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Issue`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Issue)
	fc.Result = res
	return ec.marshalNIssue2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_issue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Issue_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Issue_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Issue_updatedAt(ctx, field)
			case "subject":
				return ec.fieldContext_Issue_subject(ctx, field)
			case "status":
				return ec.fieldContext_Issue_status(ctx, field)
			case "priority":
				return ec.fieldContext_Issue_priority(ctx, field)
			case "description":
				return ec.fieldContext_Issue_description(ctx, field)
			case "tags":
				return ec.fieldContext_Issue_tags(ctx, field)
			case "interactionEvents":
				return ec.fieldContext_Issue_interactionEvents(ctx, field)
			case "comments":
				return ec.fieldContext_Issue_comments(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Issue_externalLinks(ctx, field)
			case "submittedBy":
				return ec.fieldContext_Issue_submittedBy(ctx, field)
			case "reportedBy":
				return ec.fieldContext_Issue_reportedBy(ctx, field)
			case "assignedTo":
				return ec.fieldContext_Issue_assignedTo(ctx, field)
			case "followedBy":
				return ec.fieldContext_Issue_followedBy(ctx, field)
			case "source":
				return ec.fieldContext_Issue_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Issue_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Issue_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Issue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_issue_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_logEntry(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_logEntry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().LogEntry(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.LogEntry); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.LogEntry`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.LogEntry)
	fc.Result = res
	return ec.marshalNLogEntry2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLogEntry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_logEntry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_LogEntry_id(ctx, field)
			case "content":
				return ec.fieldContext_LogEntry_content(ctx, field)
			case "contentType":
				return ec.fieldContext_LogEntry_contentType(ctx, field)
			case "createdAt":
				return ec.fieldContext_LogEntry_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_LogEntry_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_LogEntry_startedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_LogEntry_createdBy(ctx, field)
			case "tags":
				return ec.fieldContext_LogEntry_tags(ctx, field)
			case "source":
				return ec.fieldContext_LogEntry_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_LogEntry_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_LogEntry_appSource(ctx, field)
			case "externalLinks":
				return ec.fieldContext_LogEntry_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LogEntry", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_logEntry_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_masterPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_masterPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MasterPlan(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.MasterPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MasterPlan)
	fc.Result = res
	return ec.marshalNMasterPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_masterPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_MasterPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_MasterPlan_retiredMilestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_masterPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_masterPlans(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_masterPlans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().MasterPlans(rctx, fc.Args["retired"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.MasterPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.MasterPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MasterPlan)
	fc.Result = res
	return ec.marshalNMasterPlan2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_masterPlans(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MasterPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_MasterPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_MasterPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_MasterPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_MasterPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_MasterPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_MasterPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_MasterPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_MasterPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_MasterPlan_retiredMilestones(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MasterPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_masterPlans_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_meeting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_meeting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Meeting(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Meeting)
	fc.Result = res
	return ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_meeting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Meeting_id(ctx, field)
			case "name":
				return ec.fieldContext_Meeting_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Meeting_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Meeting_updatedAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_Meeting_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_Meeting_endedAt(ctx, field)
			case "conferenceUrl":
				return ec.fieldContext_Meeting_conferenceUrl(ctx, field)
			case "meetingExternalUrl":
				return ec.fieldContext_Meeting_meetingExternalUrl(ctx, field)
			case "attendedBy":
				return ec.fieldContext_Meeting_attendedBy(ctx, field)
			case "createdBy":
				return ec.fieldContext_Meeting_createdBy(ctx, field)
			case "includes":
				return ec.fieldContext_Meeting_includes(ctx, field)
			case "describedBy":
				return ec.fieldContext_Meeting_describedBy(ctx, field)
			case "note":
				return ec.fieldContext_Meeting_note(ctx, field)
			case "events":
				return ec.fieldContext_Meeting_events(ctx, field)
			case "recording":
				return ec.fieldContext_Meeting_recording(ctx, field)
			case "appSource":
				return ec.fieldContext_Meeting_appSource(ctx, field)
			case "source":
				return ec.fieldContext_Meeting_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Meeting_sourceOfTruth(ctx, field)
			case "agenda":
				return ec.fieldContext_Meeting_agenda(ctx, field)
			case "agendaContentType":
				return ec.fieldContext_Meeting_agendaContentType(ctx, field)
			case "externalSystem":
				return ec.fieldContext_Meeting_externalSystem(ctx, field)
			case "status":
				return ec.fieldContext_Meeting_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meeting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_meeting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_externalMeetings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_externalMeetings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ExternalMeetings(rctx, fc.Args["externalSystemId"].(string), fc.Args["externalId"].(*string), fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].([]*model.SortBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MeetingsPage)
	fc.Result = res
	return ec.marshalNMeetingsPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingsPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_externalMeetings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_MeetingsPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_MeetingsPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_MeetingsPage_totalElements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeetingsPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_externalMeetings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_opportunity(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_opportunity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Opportunity(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Opportunity); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Opportunity`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Opportunity)
	fc.Result = res
	return ec.marshalOOpportunity2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_opportunity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Opportunity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Opportunity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Opportunity_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Opportunity_name(ctx, field)
			case "amount":
				return ec.fieldContext_Opportunity_amount(ctx, field)
			case "maxAmount":
				return ec.fieldContext_Opportunity_maxAmount(ctx, field)
			case "internalType":
				return ec.fieldContext_Opportunity_internalType(ctx, field)
			case "externalType":
				return ec.fieldContext_Opportunity_externalType(ctx, field)
			case "internalStage":
				return ec.fieldContext_Opportunity_internalStage(ctx, field)
			case "externalStage":
				return ec.fieldContext_Opportunity_externalStage(ctx, field)
			case "estimatedClosedAt":
				return ec.fieldContext_Opportunity_estimatedClosedAt(ctx, field)
			case "generalNotes":
				return ec.fieldContext_Opportunity_generalNotes(ctx, field)
			case "nextSteps":
				return ec.fieldContext_Opportunity_nextSteps(ctx, field)
			case "renewedAt":
				return ec.fieldContext_Opportunity_renewedAt(ctx, field)
			case "renewalLikelihood":
				return ec.fieldContext_Opportunity_renewalLikelihood(ctx, field)
			case "renewalUpdatedByUserId":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserId(ctx, field)
			case "renewalUpdatedByUserAt":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserAt(ctx, field)
			case "comments":
				return ec.fieldContext_Opportunity_comments(ctx, field)
			case "createdBy":
				return ec.fieldContext_Opportunity_createdBy(ctx, field)
			case "owner":
				return ec.fieldContext_Opportunity_owner(ctx, field)
			case "source":
				return ec.fieldContext_Opportunity_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Opportunity_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Opportunity_appSource(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Opportunity_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Opportunity", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_opportunity_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_organizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Organizations(rctx, fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].([]*model.SortBy))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPage); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPage`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPage)
	fc.Result = res
	return ec.marshalNOrganizationPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_OrganizationPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_OrganizationPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_OrganizationPage_totalElements(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_OrganizationPage_totalAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_organizations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_organization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Organization(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_organization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_organization_ByCustomerOsId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organization_ByCustomerOsId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationByCustomerOsID(rctx, fc.Args["customerOsId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organization_ByCustomerOsId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_organization_ByCustomerOsId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_organization_DistinctOwners(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organization_DistinctOwners(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationDistinctOwners(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organization_DistinctOwners(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_organizationPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organizationPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationPlan(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.OrganizationPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationPlan)
	fc.Result = res
	return ec.marshalNOrganizationPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organizationPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_OrganizationPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_OrganizationPlan_retiredMilestones(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlan_statusDetails(ctx, field)
			case "masterPlanId":
				return ec.fieldContext_OrganizationPlan_masterPlanId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_organizationPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_organizationPlansForOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organizationPlansForOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationPlansForOrganization(rctx, fc.Args["organizationId"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.OrganizationPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationPlan)
	fc.Result = res
	return ec.marshalNOrganizationPlan2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organizationPlansForOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_OrganizationPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_OrganizationPlan_retiredMilestones(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlan_statusDetails(ctx, field)
			case "masterPlanId":
				return ec.fieldContext_OrganizationPlan_masterPlanId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_organizationPlansForOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_organizationPlans(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organizationPlans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().OrganizationPlans(rctx, fc.Args["retired"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.OrganizationPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.OrganizationPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationPlan)
	fc.Result = res
	return ec.marshalNOrganizationPlan2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organizationPlans(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OrganizationPlan_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_OrganizationPlan_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_OrganizationPlan_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_OrganizationPlan_name(ctx, field)
			case "source":
				return ec.fieldContext_OrganizationPlan_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_OrganizationPlan_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_OrganizationPlan_appSource(ctx, field)
			case "retired":
				return ec.fieldContext_OrganizationPlan_retired(ctx, field)
			case "milestones":
				return ec.fieldContext_OrganizationPlan_milestones(ctx, field)
			case "retiredMilestones":
				return ec.fieldContext_OrganizationPlan_retiredMilestones(ctx, field)
			case "statusDetails":
				return ec.fieldContext_OrganizationPlan_statusDetails(ctx, field)
			case "masterPlanId":
				return ec.fieldContext_OrganizationPlan_masterPlanId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_organizationPlans_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_phoneNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PhoneNumber(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_phoneNumber_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_player_ByAuthIdProvider(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_player_ByAuthIdProvider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PlayerByAuthIDProvider(rctx, fc.Args["authId"].(string), fc.Args["provider"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "CUSTOMER_OS_PLATFORM_OWNER", "OWNER", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Player); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Player`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_player_ByAuthIdProvider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "identityId":
				return ec.fieldContext_Player_identityId(ctx, field)
			case "authId":
				return ec.fieldContext_Player_authId(ctx, field)
			case "users":
				return ec.fieldContext_Player_users(ctx, field)
			case "provider":
				return ec.fieldContext_Player_provider(ctx, field)
			case "createdAt":
				return ec.fieldContext_Player_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Player_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Player_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Player_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Player_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_player_ByAuthIdProvider_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_reminder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_reminder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Reminder(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.Reminder); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Reminder`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Reminder)
	fc.Result = res
	return ec.marshalNReminder2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminder(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_reminder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Reminder_metadata(ctx, field)
			case "content":
				return ec.fieldContext_Reminder_content(ctx, field)
			case "owner":
				return ec.fieldContext_Reminder_owner(ctx, field)
			case "dueDate":
				return ec.fieldContext_Reminder_dueDate(ctx, field)
			case "dismissed":
				return ec.fieldContext_Reminder_dismissed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reminder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_reminder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_remindersForOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_remindersForOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().RemindersForOrganization(rctx, fc.Args["organizationId"].(string), fc.Args["dismissed"].(*bool))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.Reminder); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.Reminder`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Reminder)
	fc.Result = res
	return ec.marshalNReminder2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminderᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_remindersForOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Reminder_metadata(ctx, field)
			case "content":
				return ec.fieldContext_Reminder_content(ctx, field)
			case "owner":
				return ec.fieldContext_Reminder_owner(ctx, field)
			case "dueDate":
				return ec.fieldContext_Reminder_dueDate(ctx, field)
			case "dismissed":
				return ec.fieldContext_Reminder_dismissed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reminder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_remindersForOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gcli_Search(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gcli_Search(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GcliSearch(rctx, fc.Args["keyword"].(string), fc.Args["limit"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GCliItem)
	fc.Result = res
	return ec.marshalNGCliItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gcli_Search(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GCliItem_id(ctx, field)
			case "type":
				return ec.fieldContext_GCliItem_type(ctx, field)
			case "display":
				return ec.fieldContext_GCliItem_display(ctx, field)
			case "data":
				return ec.fieldContext_GCliItem_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GCliItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gcli_Search_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_serviceLineItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_serviceLineItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceLineItem(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ServiceLineItem)
	fc.Result = res
	return ec.marshalNServiceLineItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_serviceLineItem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_ServiceLineItem_metadata(ctx, field)
			case "billingCycle":
				return ec.fieldContext_ServiceLineItem_billingCycle(ctx, field)
			case "comments":
				return ec.fieldContext_ServiceLineItem_comments(ctx, field)
			case "description":
				return ec.fieldContext_ServiceLineItem_description(ctx, field)
			case "parentId":
				return ec.fieldContext_ServiceLineItem_parentId(ctx, field)
			case "price":
				return ec.fieldContext_ServiceLineItem_price(ctx, field)
			case "quantity":
				return ec.fieldContext_ServiceLineItem_quantity(ctx, field)
			case "serviceEnded":
				return ec.fieldContext_ServiceLineItem_serviceEnded(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_ServiceLineItem_serviceStarted(ctx, field)
			case "tax":
				return ec.fieldContext_ServiceLineItem_tax(ctx, field)
			case "createdBy":
				return ec.fieldContext_ServiceLineItem_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_ServiceLineItem_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceLineItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_serviceLineItem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_slack_Channels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_slack_Channels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SlackChannels(rctx, fc.Args["pagination"].(*model.Pagination))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.SlackChannelPage); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.SlackChannelPage`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SlackChannelPage)
	fc.Result = res
	return ec.marshalNSlackChannelPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSlackChannelPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_slack_Channels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_SlackChannelPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_SlackChannelPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_SlackChannelPage_totalElements(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_SlackChannelPage_totalAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SlackChannelPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_slack_Channels_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tags(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tags(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Tag)
	fc.Result = res
	return ec.marshalNTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tag_id(ctx, field)
			case "name":
				return ec.fieldContext_Tag_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tag_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tag_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Tag_source(ctx, field)
			case "appSource":
				return ec.fieldContext_Tag_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tag", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tenant(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenant_ByWorkspace(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenant_ByWorkspace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TenantByWorkspace(rctx, fc.Args["workspace"].(model.WorkspaceInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"USER", "ADMIN"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenant_ByWorkspace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tenant_ByWorkspace_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenant_ByEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenant_ByEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TenantByEmail(rctx, fc.Args["email"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenant_ByEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tenant_ByEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenantBillingProfiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenantBillingProfiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TenantBillingProfiles(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*model.TenantBillingProfile); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TenantBillingProfile`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TenantBillingProfile)
	fc.Result = res
	return ec.marshalNTenantBillingProfile2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenantBillingProfiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenantBillingProfile_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenantBillingProfile_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenantBillingProfile_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_TenantBillingProfile_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_TenantBillingProfile_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_TenantBillingProfile_appSource(ctx, field)
			case "email":
				return ec.fieldContext_TenantBillingProfile_email(ctx, field)
			case "phone":
				return ec.fieldContext_TenantBillingProfile_phone(ctx, field)
			case "addressLine1":
				return ec.fieldContext_TenantBillingProfile_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_TenantBillingProfile_addressLine2(ctx, field)
			case "addressLine3":
				return ec.fieldContext_TenantBillingProfile_addressLine3(ctx, field)
			case "locality":
				return ec.fieldContext_TenantBillingProfile_locality(ctx, field)
			case "country":
				return ec.fieldContext_TenantBillingProfile_country(ctx, field)
			case "zip":
				return ec.fieldContext_TenantBillingProfile_zip(ctx, field)
			case "legalName":
				return ec.fieldContext_TenantBillingProfile_legalName(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_internationalPaymentsBankInfo(ctx, field)
			case "vatNumber":
				return ec.fieldContext_TenantBillingProfile_vatNumber(ctx, field)
			case "sendInvoicesFrom":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesFrom(ctx, field)
			case "sendInvoicesBcc":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesBcc(ctx, field)
			case "canPayWithCard":
				return ec.fieldContext_TenantBillingProfile_canPayWithCard(ctx, field)
			case "canPayWithDirectDebitSEPA":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitSEPA(ctx, field)
			case "canPayWithDirectDebitACH":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitACH(ctx, field)
			case "canPayWithDirectDebitBacs":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitBacs(ctx, field)
			case "canPayWithBankTransfer":
				return ec.fieldContext_TenantBillingProfile_canPayWithBankTransfer(ctx, field)
			case "canPayWithPigeon":
				return ec.fieldContext_TenantBillingProfile_canPayWithPigeon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantBillingProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenantBillingProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenantBillingProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TenantBillingProfile(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TenantBillingProfile); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TenantBillingProfile`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TenantBillingProfile)
	fc.Result = res
	return ec.marshalNTenantBillingProfile2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenantBillingProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TenantBillingProfile_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_TenantBillingProfile_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TenantBillingProfile_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_TenantBillingProfile_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_TenantBillingProfile_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_TenantBillingProfile_appSource(ctx, field)
			case "email":
				return ec.fieldContext_TenantBillingProfile_email(ctx, field)
			case "phone":
				return ec.fieldContext_TenantBillingProfile_phone(ctx, field)
			case "addressLine1":
				return ec.fieldContext_TenantBillingProfile_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_TenantBillingProfile_addressLine2(ctx, field)
			case "addressLine3":
				return ec.fieldContext_TenantBillingProfile_addressLine3(ctx, field)
			case "locality":
				return ec.fieldContext_TenantBillingProfile_locality(ctx, field)
			case "country":
				return ec.fieldContext_TenantBillingProfile_country(ctx, field)
			case "zip":
				return ec.fieldContext_TenantBillingProfile_zip(ctx, field)
			case "legalName":
				return ec.fieldContext_TenantBillingProfile_legalName(ctx, field)
			case "domesticPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_domesticPaymentsBankInfo(ctx, field)
			case "internationalPaymentsBankInfo":
				return ec.fieldContext_TenantBillingProfile_internationalPaymentsBankInfo(ctx, field)
			case "vatNumber":
				return ec.fieldContext_TenantBillingProfile_vatNumber(ctx, field)
			case "sendInvoicesFrom":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesFrom(ctx, field)
			case "sendInvoicesBcc":
				return ec.fieldContext_TenantBillingProfile_sendInvoicesBcc(ctx, field)
			case "canPayWithCard":
				return ec.fieldContext_TenantBillingProfile_canPayWithCard(ctx, field)
			case "canPayWithDirectDebitSEPA":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitSEPA(ctx, field)
			case "canPayWithDirectDebitACH":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitACH(ctx, field)
			case "canPayWithDirectDebitBacs":
				return ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitBacs(ctx, field)
			case "canPayWithBankTransfer":
				return ec.fieldContext_TenantBillingProfile_canPayWithBankTransfer(ctx, field)
			case "canPayWithPigeon":
				return ec.fieldContext_TenantBillingProfile_canPayWithPigeon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantBillingProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tenantBillingProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenantSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tenantSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TenantSettings(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TenantSettings); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TenantSettings`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TenantSettings)
	fc.Result = res
	return ec.marshalNTenantSettings2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tenantSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "logoRepositoryFileId":
				return ec.fieldContext_TenantSettings_logoRepositoryFileId(ctx, field)
			case "baseCurrency":
				return ec.fieldContext_TenantSettings_baseCurrency(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_TenantSettings_billingEnabled(ctx, field)
			case "logoUrl":
				return ec.fieldContext_TenantSettings_logoUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_billableInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_billableInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().BillableInfo(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"USER", "ADMIN"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TenantBillableInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TenantBillableInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TenantBillableInfo)
	fc.Result = res
	return ec.marshalNTenantBillableInfo2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillableInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_billableInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "whitelistedOrganizations":
				return ec.fieldContext_TenantBillableInfo_whitelistedOrganizations(ctx, field)
			case "whitelistedContacts":
				return ec.fieldContext_TenantBillableInfo_whitelistedContacts(ctx, field)
			case "greylistedOrganizations":
				return ec.fieldContext_TenantBillableInfo_greylistedOrganizations(ctx, field)
			case "greylistedContacts":
				return ec.fieldContext_TenantBillableInfo_greylistedContacts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantBillableInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_timelineEvents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_timelineEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TimelineEvents(rctx, fc.Args["ids"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.TimelineEvent)
	fc.Result = res
	return ec.marshalNTimelineEvent2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_timelineEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimelineEvent does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_timelineEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].([]*model.SortBy))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.UserPage)
	fc.Result = res
	return ec.marshalNUserPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_UserPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_UserPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_UserPage_totalElements(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_user_ByEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_user_ByEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().UserByEmail(rctx, fc.Args["email"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "CUSTOMER_OS_PLATFORM_OWNER", "OWNER", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, nil, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_user_ByEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_ByEmail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tableViewDefs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tableViewDefs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().TableViewDefs(rctx, fc.Args["pagination"].(*model.Pagination), fc.Args["where"].(*model.Filter), fc.Args["sort"].(*model.SortBy))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.TableViewDefPage); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.TableViewDefPage`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TableViewDefPage)
	fc.Result = res
	return ec.marshalNTableViewDefPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTableViewDefPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tableViewDefs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_TableViewDefPage_content(ctx, field)
			case "totalPages":
				return ec.fieldContext_TableViewDefPage_totalPages(ctx, field)
			case "totalElements":
				return ec.fieldContext_TableViewDefPage_totalElements(ctx, field)
			case "totalAvailable":
				return ec.fieldContext_TableViewDefPage_totalAvailable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TableViewDefPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tableViewDefs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_content(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_owner(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Reminder().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_dueDate(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_dueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_dueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reminder_dismissed(ctx context.Context, field graphql.CollectedField, obj *model.Reminder) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reminder_dismissed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dismissed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reminder_dismissed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reminder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalRecord_organization(ctx context.Context, field graphql.CollectedField, obj *model.RenewalRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalRecord_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalRecord_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalRecord_contract(ctx context.Context, field graphql.CollectedField, obj *model.RenewalRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalRecord_contract(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalRecord_contract(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Contract_metadata(ctx, field)
			case "billingDetails":
				return ec.fieldContext_Contract_billingDetails(ctx, field)
			case "committedPeriods":
				return ec.fieldContext_Contract_committedPeriods(ctx, field)
			case "contractEnded":
				return ec.fieldContext_Contract_contractEnded(ctx, field)
			case "contractLineItems":
				return ec.fieldContext_Contract_contractLineItems(ctx, field)
			case "contractName":
				return ec.fieldContext_Contract_contractName(ctx, field)
			case "contractRenewalCycle":
				return ec.fieldContext_Contract_contractRenewalCycle(ctx, field)
			case "contractSigned":
				return ec.fieldContext_Contract_contractSigned(ctx, field)
			case "contractUrl":
				return ec.fieldContext_Contract_contractUrl(ctx, field)
			case "currency":
				return ec.fieldContext_Contract_currency(ctx, field)
			case "createdBy":
				return ec.fieldContext_Contract_createdBy(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Contract_externalLinks(ctx, field)
			case "billingEnabled":
				return ec.fieldContext_Contract_billingEnabled(ctx, field)
			case "opportunities":
				return ec.fieldContext_Contract_opportunities(ctx, field)
			case "owner":
				return ec.fieldContext_Contract_owner(ctx, field)
			case "serviceStarted":
				return ec.fieldContext_Contract_serviceStarted(ctx, field)
			case "contractStatus":
				return ec.fieldContext_Contract_contractStatus(ctx, field)
			case "status":
				return ec.fieldContext_Contract_status(ctx, field)
			case "serviceStartedAt":
				return ec.fieldContext_Contract_serviceStartedAt(ctx, field)
			case "name":
				return ec.fieldContext_Contract_name(ctx, field)
			case "signedAt":
				return ec.fieldContext_Contract_signedAt(ctx, field)
			case "renewalCycle":
				return ec.fieldContext_Contract_renewalCycle(ctx, field)
			case "organizationLegalName":
				return ec.fieldContext_Contract_organizationLegalName(ctx, field)
			case "invoiceEmail":
				return ec.fieldContext_Contract_invoiceEmail(ctx, field)
			case "id":
				return ec.fieldContext_Contract_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Contract_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Contract_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Contract_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Contract_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Contract_appSource(ctx, field)
			case "renewalPeriods":
				return ec.fieldContext_Contract_renewalPeriods(ctx, field)
			case "endedAt":
				return ec.fieldContext_Contract_endedAt(ctx, field)
			case "serviceLineItems":
				return ec.fieldContext_Contract_serviceLineItems(ctx, field)
			case "invoiceNote":
				return ec.fieldContext_Contract_invoiceNote(ctx, field)
			case "billingCycle":
				return ec.fieldContext_Contract_billingCycle(ctx, field)
			case "invoicingStartDate":
				return ec.fieldContext_Contract_invoicingStartDate(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Contract_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Contract_addressLine2(ctx, field)
			case "zip":
				return ec.fieldContext_Contract_zip(ctx, field)
			case "locality":
				return ec.fieldContext_Contract_locality(ctx, field)
			case "country":
				return ec.fieldContext_Contract_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Contract", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalRecord_opportunity(ctx context.Context, field graphql.CollectedField, obj *model.RenewalRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalRecord_opportunity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Opportunity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Opportunity)
	fc.Result = res
	return ec.marshalOOpportunity2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalRecord_opportunity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Opportunity_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Opportunity_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Opportunity_updatedAt(ctx, field)
			case "name":
				return ec.fieldContext_Opportunity_name(ctx, field)
			case "amount":
				return ec.fieldContext_Opportunity_amount(ctx, field)
			case "maxAmount":
				return ec.fieldContext_Opportunity_maxAmount(ctx, field)
			case "internalType":
				return ec.fieldContext_Opportunity_internalType(ctx, field)
			case "externalType":
				return ec.fieldContext_Opportunity_externalType(ctx, field)
			case "internalStage":
				return ec.fieldContext_Opportunity_internalStage(ctx, field)
			case "externalStage":
				return ec.fieldContext_Opportunity_externalStage(ctx, field)
			case "estimatedClosedAt":
				return ec.fieldContext_Opportunity_estimatedClosedAt(ctx, field)
			case "generalNotes":
				return ec.fieldContext_Opportunity_generalNotes(ctx, field)
			case "nextSteps":
				return ec.fieldContext_Opportunity_nextSteps(ctx, field)
			case "renewedAt":
				return ec.fieldContext_Opportunity_renewedAt(ctx, field)
			case "renewalLikelihood":
				return ec.fieldContext_Opportunity_renewalLikelihood(ctx, field)
			case "renewalUpdatedByUserId":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserId(ctx, field)
			case "renewalUpdatedByUserAt":
				return ec.fieldContext_Opportunity_renewalUpdatedByUserAt(ctx, field)
			case "comments":
				return ec.fieldContext_Opportunity_comments(ctx, field)
			case "createdBy":
				return ec.fieldContext_Opportunity_createdBy(ctx, field)
			case "owner":
				return ec.fieldContext_Opportunity_owner(ctx, field)
			case "source":
				return ec.fieldContext_Opportunity_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Opportunity_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Opportunity_appSource(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Opportunity_externalLinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Opportunity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalSummary_arrForecast(ctx context.Context, field graphql.CollectedField, obj *model.RenewalSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalSummary_arrForecast(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArrForecast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalSummary_arrForecast(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalSummary_maxArrForecast(ctx context.Context, field graphql.CollectedField, obj *model.RenewalSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalSummary_maxArrForecast(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxArrForecast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalSummary_maxArrForecast(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalSummary_renewalLikelihood(ctx context.Context, field graphql.CollectedField, obj *model.RenewalSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalSummary_renewalLikelihood(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RenewalLikelihood, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OpportunityRenewalLikelihood)
	fc.Result = res
	return ec.marshalOOpportunityRenewalLikelihood2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalLikelihood(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalSummary_renewalLikelihood(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OpportunityRenewalLikelihood does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalSummary_nextRenewalDate(ctx context.Context, field graphql.CollectedField, obj *model.RenewalSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalSummary_nextRenewalDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextRenewalDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalSummary_nextRenewalDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalSummary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalsPage_content(ctx context.Context, field graphql.CollectedField, obj *model.RenewalsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalsPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RenewalRecord)
	fc.Result = res
	return ec.marshalNRenewalRecord2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalRecordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalsPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "organization":
				return ec.fieldContext_RenewalRecord_organization(ctx, field)
			case "contract":
				return ec.fieldContext_RenewalRecord_contract(ctx, field)
			case "opportunity":
				return ec.fieldContext_RenewalRecord_opportunity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RenewalRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalsPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.RenewalsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalsPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalsPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalsPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.RenewalsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalsPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalsPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenewalsPage_totalAvailable(ctx context.Context, field graphql.CollectedField, obj *model.RenewalsPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RenewalsPage_totalAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RenewalsPage_totalAvailable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenewalsPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Result_result(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Result_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Result_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_billingCycle(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_billingCycle(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingCycle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.BilledType)
	fc.Result = res
	return ec.marshalNBilledType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_billingCycle(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BilledType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_comments(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_comments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_comments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_description(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_parentId(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_parentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_parentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_price(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_quantity(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_quantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_quantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_serviceEnded(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_serviceEnded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceEnded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_serviceEnded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_serviceStarted(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_serviceStarted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceStarted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_serviceStarted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_tax(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_tax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tax)
	fc.Result = res
	return ec.marshalNTax2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTax(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_tax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "salesTax":
				return ec.fieldContext_Tax_salesTax(ctx, field)
			case "vat":
				return ec.fieldContext_Tax_vat(ctx, field)
			case "taxRate":
				return ec.fieldContext_Tax_taxRate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tax", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceLineItem().CreatedBy(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceLineItem_externalLinks(ctx context.Context, field graphql.CollectedField, obj *model.ServiceLineItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceLineItem_externalLinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ServiceLineItem().ExternalLinks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExternalSystem)
	fc.Result = res
	return ec.marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceLineItem_externalLinks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceLineItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ExternalSystem_type(ctx, field)
			case "syncDate":
				return ec.fieldContext_ExternalSystem_syncDate(ctx, field)
			case "externalId":
				return ec.fieldContext_ExternalSystem_externalId(ctx, field)
			case "externalUrl":
				return ec.fieldContext_ExternalSystem_externalUrl(ctx, field)
			case "externalSource":
				return ec.fieldContext_ExternalSystem_externalSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ExternalSystem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannel_metadata(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannel_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Metadata)
	fc.Result = res
	return ec.marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannel_metadata(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Metadata_id(ctx, field)
			case "created":
				return ec.fieldContext_Metadata_created(ctx, field)
			case "lastUpdated":
				return ec.fieldContext_Metadata_lastUpdated(ctx, field)
			case "source":
				return ec.fieldContext_Metadata_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Metadata_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Metadata_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metadata", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannel_organization(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannel_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SlackChannel().Organization(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannel_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannel",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannel_channelId(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannel_channelId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannel_channelId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannel_channelName(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannel_channelName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannel_channelName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannelPage_content(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannelPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannelPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SlackChannel)
	fc.Result = res
	return ec.marshalNSlackChannel2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSlackChannelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannelPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannelPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_SlackChannel_metadata(ctx, field)
			case "organization":
				return ec.fieldContext_SlackChannel_organization(ctx, field)
			case "channelId":
				return ec.fieldContext_SlackChannel_channelId(ctx, field)
			case "channelName":
				return ec.fieldContext_SlackChannel_channelName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SlackChannel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannelPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannelPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannelPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannelPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannelPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannelPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannelPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannelPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannelPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannelPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SlackChannelPage_totalAvailable(ctx context.Context, field graphql.CollectedField, obj *model.SlackChannelPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SlackChannelPage_totalAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SlackChannelPage_totalAvailable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SlackChannelPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_id(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_platformName(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_platformName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_platformName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_url(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_source(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Social_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Social) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Social_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Social_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Social",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _State_id(ctx context.Context, field graphql.CollectedField, obj *model.State) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_State_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_State_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "State",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _State_country(ctx context.Context, field graphql.CollectedField, obj *model.State) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_State_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Country)
	fc.Result = res
	return ec.marshalNCountry2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCountry(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_State_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "State",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Country_id(ctx, field)
			case "name":
				return ec.fieldContext_Country_name(ctx, field)
			case "codeA2":
				return ec.fieldContext_Country_codeA2(ctx, field)
			case "codeA3":
				return ec.fieldContext_Country_codeA3(ctx, field)
			case "phoneCode":
				return ec.fieldContext_Country_phoneCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Country", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _State_name(ctx context.Context, field graphql.CollectedField, obj *model.State) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_State_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_State_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "State",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _State_code(ctx context.Context, field graphql.CollectedField, obj *model.State) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_State_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_State_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "State",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SuggestedMergeOrganization_organization(ctx context.Context, field graphql.CollectedField, obj *model.SuggestedMergeOrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SuggestedMergeOrganization_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SuggestedMergeOrganization_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SuggestedMergeOrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "metadata":
				return ec.fieldContext_Organization_metadata(ctx, field)
			case "accountDetails":
				return ec.fieldContext_Organization_accountDetails(ctx, field)
			case "contracts":
				return ec.fieldContext_Organization_contracts(ctx, field)
			case "customerOsId":
				return ec.fieldContext_Organization_customerOsId(ctx, field)
			case "customFields":
				return ec.fieldContext_Organization_customFields(ctx, field)
			case "customId":
				return ec.fieldContext_Organization_customId(ctx, field)
			case "description":
				return ec.fieldContext_Organization_description(ctx, field)
			case "domains":
				return ec.fieldContext_Organization_domains(ctx, field)
			case "slackChannelId":
				return ec.fieldContext_Organization_slackChannelId(ctx, field)
			case "employeeGrowthRate":
				return ec.fieldContext_Organization_employeeGrowthRate(ctx, field)
			case "employees":
				return ec.fieldContext_Organization_employees(ctx, field)
			case "headquarters":
				return ec.fieldContext_Organization_headquarters(ctx, field)
			case "industry":
				return ec.fieldContext_Organization_industry(ctx, field)
			case "industryGroup":
				return ec.fieldContext_Organization_industryGroup(ctx, field)
			case "isCustomer":
				return ec.fieldContext_Organization_isCustomer(ctx, field)
			case "lastFundingAmount":
				return ec.fieldContext_Organization_lastFundingAmount(ctx, field)
			case "lastFundingRound":
				return ec.fieldContext_Organization_lastFundingRound(ctx, field)
			case "lastTouchpoint":
				return ec.fieldContext_Organization_lastTouchpoint(ctx, field)
			case "locations":
				return ec.fieldContext_Organization_locations(ctx, field)
			case "logo":
				return ec.fieldContext_Organization_logo(ctx, field)
			case "market":
				return ec.fieldContext_Organization_market(ctx, field)
			case "name":
				return ec.fieldContext_Organization_name(ctx, field)
			case "notes":
				return ec.fieldContext_Organization_notes(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "parentCompanies":
				return ec.fieldContext_Organization_parentCompanies(ctx, field)
			case "public":
				return ec.fieldContext_Organization_public(ctx, field)
			case "socialMedia":
				return ec.fieldContext_Organization_socialMedia(ctx, field)
			case "subIndustry":
				return ec.fieldContext_Organization_subIndustry(ctx, field)
			case "subsidiaries":
				return ec.fieldContext_Organization_subsidiaries(ctx, field)
			case "tags":
				return ec.fieldContext_Organization_tags(ctx, field)
			case "targetAudience":
				return ec.fieldContext_Organization_targetAudience(ctx, field)
			case "timelineEvents":
				return ec.fieldContext_Organization_timelineEvents(ctx, field)
			case "valueProposition":
				return ec.fieldContext_Organization_valueProposition(ctx, field)
			case "website":
				return ec.fieldContext_Organization_website(ctx, field)
			case "yearFounded":
				return ec.fieldContext_Organization_yearFounded(ctx, field)
			case "hide":
				return ec.fieldContext_Organization_hide(ctx, field)
			case "contacts":
				return ec.fieldContext_Organization_contacts(ctx, field)
			case "jobRoles":
				return ec.fieldContext_Organization_jobRoles(ctx, field)
			case "emails":
				return ec.fieldContext_Organization_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_Organization_phoneNumbers(ctx, field)
			case "suggestedMergeTo":
				return ec.fieldContext_Organization_suggestedMergeTo(ctx, field)
			case "fieldSets":
				return ec.fieldContext_Organization_fieldSets(ctx, field)
			case "entityTemplate":
				return ec.fieldContext_Organization_entityTemplate(ctx, field)
			case "timelineEventsTotalCount":
				return ec.fieldContext_Organization_timelineEventsTotalCount(ctx, field)
			case "externalLinks":
				return ec.fieldContext_Organization_externalLinks(ctx, field)
			case "issueSummaryByStatus":
				return ec.fieldContext_Organization_issueSummaryByStatus(ctx, field)
			case "socials":
				return ec.fieldContext_Organization_socials(ctx, field)
			case "isPublic":
				return ec.fieldContext_Organization_isPublic(ctx, field)
			case "note":
				return ec.fieldContext_Organization_note(ctx, field)
			case "logoUrl":
				return ec.fieldContext_Organization_logoUrl(ctx, field)
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_Organization_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Organization_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Organization_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Organization_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Organization_appSource(ctx, field)
			case "referenceId":
				return ec.fieldContext_Organization_referenceId(ctx, field)
			case "lastTouchPointAt":
				return ec.fieldContext_Organization_lastTouchPointAt(ctx, field)
			case "lastTouchPointType":
				return ec.fieldContext_Organization_lastTouchPointType(ctx, field)
			case "lastTouchPointTimelineEventId":
				return ec.fieldContext_Organization_lastTouchPointTimelineEventId(ctx, field)
			case "lastTouchPointTimelineEvent":
				return ec.fieldContext_Organization_lastTouchPointTimelineEvent(ctx, field)
			case "subsidiaryOf":
				return ec.fieldContext_Organization_subsidiaryOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SuggestedMergeOrganization_confidence(ctx context.Context, field graphql.CollectedField, obj *model.SuggestedMergeOrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SuggestedMergeOrganization_confidence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SuggestedMergeOrganization_confidence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SuggestedMergeOrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SuggestedMergeOrganization_suggestedAt(ctx context.Context, field graphql.CollectedField, obj *model.SuggestedMergeOrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SuggestedMergeOrganization_suggestedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuggestedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SuggestedMergeOrganization_suggestedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SuggestedMergeOrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SuggestedMergeOrganization_suggestedBy(ctx context.Context, field graphql.CollectedField, obj *model.SuggestedMergeOrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SuggestedMergeOrganization_suggestedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SuggestedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SuggestedMergeOrganization_suggestedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SuggestedMergeOrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_id(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_name(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_order(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_type(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ViewType)
	fc.Result = res
	return ec.marshalOViewType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐViewType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ViewType_id(ctx, field)
			case "name":
				return ec.fieldContext_ViewType_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_ViewType_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ViewType_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ViewType_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ViewType", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_icon(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_columns(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_columns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Columns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ColumnDef)
	fc.Result = res
	return ec.marshalOColumnDef2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐColumnDef(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_columns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ColumnDef_id(ctx, field)
			case "type":
				return ec.fieldContext_ColumnDef_type(ctx, field)
			case "columnType":
				return ec.fieldContext_ColumnDef_columnType(ctx, field)
			case "isFilterable":
				return ec.fieldContext_ColumnDef_isFilterable(ctx, field)
			case "isSortable":
				return ec.fieldContext_ColumnDef_isSortable(ctx, field)
			case "isDefaultSort":
				return ec.fieldContext_ColumnDef_isDefaultSort(ctx, field)
			case "isVisible":
				return ec.fieldContext_ColumnDef_isVisible(ctx, field)
			case "createdAt":
				return ec.fieldContext_ColumnDef_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_ColumnDef_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_ColumnDef_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ColumnDef", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_filters(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_filters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_filters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_sorting(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_sorting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sorting, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_sorting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDef_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDef) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDef_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.TableViewDef().CreatedBy(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDef_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDef",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDefPage_content(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDefPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDefPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TableViewDef)
	fc.Result = res
	return ec.marshalNTableViewDef2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTableViewDefᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDefPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDefPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TableViewDef_id(ctx, field)
			case "name":
				return ec.fieldContext_TableViewDef_name(ctx, field)
			case "order":
				return ec.fieldContext_TableViewDef_order(ctx, field)
			case "type":
				return ec.fieldContext_TableViewDef_type(ctx, field)
			case "icon":
				return ec.fieldContext_TableViewDef_icon(ctx, field)
			case "columns":
				return ec.fieldContext_TableViewDef_columns(ctx, field)
			case "filters":
				return ec.fieldContext_TableViewDef_filters(ctx, field)
			case "sorting":
				return ec.fieldContext_TableViewDef_sorting(ctx, field)
			case "createdAt":
				return ec.fieldContext_TableViewDef_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TableViewDef_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TableViewDef_createdBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TableViewDef", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDefPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDefPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDefPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDefPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDefPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDefPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDefPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDefPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDefPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDefPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TableViewDefPage_totalAvailable(ctx context.Context, field graphql.CollectedField, obj *model.TableViewDefPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TableViewDefPage_totalAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TableViewDefPage_totalAvailable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TableViewDefPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_id(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_name(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_source(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tax_salesTax(ctx context.Context, field graphql.CollectedField, obj *model.Tax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tax_salesTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SalesTax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tax_salesTax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tax_vat(ctx context.Context, field graphql.CollectedField, obj *model.Tax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tax_vat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tax_vat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tax_taxRate(ctx context.Context, field graphql.CollectedField, obj *model.Tax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tax_taxRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tax_taxRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillableInfo_whitelistedOrganizations(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillableInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillableInfo_whitelistedOrganizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WhitelistedOrganizations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillableInfo_whitelistedOrganizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillableInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillableInfo_whitelistedContacts(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillableInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillableInfo_whitelistedContacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WhitelistedContacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillableInfo_whitelistedContacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillableInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillableInfo_greylistedOrganizations(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillableInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillableInfo_greylistedOrganizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GreylistedOrganizations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillableInfo_greylistedOrganizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillableInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillableInfo_greylistedContacts(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillableInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillableInfo_greylistedContacts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GreylistedContacts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillableInfo_greylistedContacts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillableInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_id(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_source(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_appSource(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_email(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_phone(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_phone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_phone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_addressLine1(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_addressLine1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_addressLine1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_addressLine2(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_addressLine2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_addressLine2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_addressLine3(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_addressLine3(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_addressLine3(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_locality(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_locality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_locality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_country(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_zip(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_zip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_zip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_legalName(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_legalName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LegalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_legalName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_domesticPaymentsBankInfo(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_domesticPaymentsBankInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DomesticPaymentsBankInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_domesticPaymentsBankInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_internationalPaymentsBankInfo(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_internationalPaymentsBankInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternationalPaymentsBankInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_internationalPaymentsBankInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_vatNumber(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_vatNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VatNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_vatNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_sendInvoicesFrom(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_sendInvoicesFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendInvoicesFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_sendInvoicesFrom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_sendInvoicesBcc(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_sendInvoicesBcc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendInvoicesBcc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_sendInvoicesBcc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_canPayWithCard(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_canPayWithCard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithCard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_canPayWithCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_canPayWithDirectDebitSEPA(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitSEPA(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithDirectDebitSepa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_canPayWithDirectDebitSEPA(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_canPayWithDirectDebitACH(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitACH(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithDirectDebitAch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_canPayWithDirectDebitACH(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_canPayWithDirectDebitBacs(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_canPayWithDirectDebitBacs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithDirectDebitBacs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_canPayWithDirectDebitBacs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_canPayWithBankTransfer(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_canPayWithBankTransfer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithBankTransfer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_canPayWithBankTransfer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantBillingProfile_canPayWithPigeon(ctx context.Context, field graphql.CollectedField, obj *model.TenantBillingProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantBillingProfile_canPayWithPigeon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanPayWithPigeon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantBillingProfile_canPayWithPigeon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantBillingProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantSettings_logoRepositoryFileId(ctx context.Context, field graphql.CollectedField, obj *model.TenantSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantSettings_logoRepositoryFileId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoRepositoryFileID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantSettings_logoRepositoryFileId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantSettings_baseCurrency(ctx context.Context, field graphql.CollectedField, obj *model.TenantSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantSettings_baseCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Currency)
	fc.Result = res
	return ec.marshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantSettings_baseCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Currency does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantSettings_billingEnabled(ctx context.Context, field graphql.CollectedField, obj *model.TenantSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantSettings_billingEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantSettings_billingEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantSettings_logoUrl(ctx context.Context, field graphql.CollectedField, obj *model.TenantSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TenantSettings_logoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TenantSettings_logoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_internal(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_internal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Internal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_internal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_bot(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_bot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_bot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_timezone(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_timezone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_profilePhotoUrl(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_profilePhotoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePhotoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_profilePhotoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_player(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_player(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Player(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "identityId":
				return ec.fieldContext_Player_identityId(ctx, field)
			case "authId":
				return ec.fieldContext_Player_authId(ctx, field)
			case "users":
				return ec.fieldContext_Player_users(ctx, field)
			case "provider":
				return ec.fieldContext_Player_provider(ctx, field)
			case "createdAt":
				return ec.fieldContext_Player_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Player_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_Player_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Player_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Player_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_roles(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_roles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Roles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.Role)
	fc.Result = res
	return ec.marshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_roles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Role does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_emails(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_emails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Emails(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Email)
	fc.Result = res
	return ec.marshalOEmail2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_emails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Email_id(ctx, field)
			case "email":
				return ec.fieldContext_Email_email(ctx, field)
			case "rawEmail":
				return ec.fieldContext_Email_rawEmail(ctx, field)
			case "emailValidationDetails":
				return ec.fieldContext_Email_emailValidationDetails(ctx, field)
			case "label":
				return ec.fieldContext_Email_label(ctx, field)
			case "primary":
				return ec.fieldContext_Email_primary(ctx, field)
			case "source":
				return ec.fieldContext_Email_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Email_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Email_appSource(ctx, field)
			case "createdAt":
				return ec.fieldContext_Email_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Email_updatedAt(ctx, field)
			case "users":
				return ec.fieldContext_Email_users(ctx, field)
			case "contacts":
				return ec.fieldContext_Email_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_Email_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Email", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_phoneNumbers(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_phoneNumbers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().PhoneNumbers(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_phoneNumbers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PhoneNumber_id(ctx, field)
			case "e164":
				return ec.fieldContext_PhoneNumber_e164(ctx, field)
			case "rawPhoneNumber":
				return ec.fieldContext_PhoneNumber_rawPhoneNumber(ctx, field)
			case "validated":
				return ec.fieldContext_PhoneNumber_validated(ctx, field)
			case "country":
				return ec.fieldContext_PhoneNumber_country(ctx, field)
			case "label":
				return ec.fieldContext_PhoneNumber_label(ctx, field)
			case "primary":
				return ec.fieldContext_PhoneNumber_primary(ctx, field)
			case "createdAt":
				return ec.fieldContext_PhoneNumber_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_PhoneNumber_updatedAt(ctx, field)
			case "source":
				return ec.fieldContext_PhoneNumber_source(ctx, field)
			case "appSource":
				return ec.fieldContext_PhoneNumber_appSource(ctx, field)
			case "users":
				return ec.fieldContext_PhoneNumber_users(ctx, field)
			case "contacts":
				return ec.fieldContext_PhoneNumber_contacts(ctx, field)
			case "organizations":
				return ec.fieldContext_PhoneNumber_organizations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PhoneNumber", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_jobRoles(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_jobRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().JobRoles(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JobRole)
	fc.Result = res
	return ec.marshalNJobRole2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_jobRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobRole_id(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobRole_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobRole_updatedAt(ctx, field)
			case "organization":
				return ec.fieldContext_JobRole_organization(ctx, field)
			case "contact":
				return ec.fieldContext_JobRole_contact(ctx, field)
			case "jobTitle":
				return ec.fieldContext_JobRole_jobTitle(ctx, field)
			case "primary":
				return ec.fieldContext_JobRole_primary(ctx, field)
			case "description":
				return ec.fieldContext_JobRole_description(ctx, field)
			case "company":
				return ec.fieldContext_JobRole_company(ctx, field)
			case "startedAt":
				return ec.fieldContext_JobRole_startedAt(ctx, field)
			case "endedAt":
				return ec.fieldContext_JobRole_endedAt(ctx, field)
			case "source":
				return ec.fieldContext_JobRole_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_JobRole_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_JobRole_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_calendars(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_calendars(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.User().Calendars(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Calendar)
	fc.Result = res
	return ec.marshalNCalendar2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCalendarᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_calendars(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Calendar_id(ctx, field)
			case "calType":
				return ec.fieldContext_Calendar_calType(ctx, field)
			case "createdAt":
				return ec.fieldContext_Calendar_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Calendar_updatedAt(ctx, field)
			case "link":
				return ec.fieldContext_Calendar_link(ctx, field)
			case "primary":
				return ec.fieldContext_Calendar_primary(ctx, field)
			case "source":
				return ec.fieldContext_Calendar_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_Calendar_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_Calendar_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Calendar", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_source(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_appSource(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPage_content(ctx context.Context, field graphql.CollectedField, obj *model.UserPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *model.UserPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPage_totalElements(ctx context.Context, field graphql.CollectedField, obj *model.UserPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserPage_totalElements(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalElements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt642int64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserPage_totalElements(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserParticipant_userParticipant(ctx context.Context, field graphql.CollectedField, obj *model.UserParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserParticipant_userParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserParticipant_userParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserParticipant_type(ctx context.Context, field graphql.CollectedField, obj *model.UserParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserParticipant_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserParticipant_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewType_id(ctx context.Context, field graphql.CollectedField, obj *model.ViewType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewType_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewType_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewType_name(ctx context.Context, field graphql.CollectedField, obj *model.ViewType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewType_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewType_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewType_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ViewType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewType_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewType_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewType_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ViewType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewType_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewType_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewType",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ViewType_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.ViewType) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ViewType_createdBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.ViewType().CreatedBy(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			roles, err := ec.unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx, []interface{}{"ADMIN", "USER"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasRole == nil {
				return nil, errors.New("directive hasRole is not implemented")
			}
			return ec.directives.HasRole(ctx, obj, directive0, roles)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasTenant == nil {
				return nil, errors.New("directive hasTenant is not implemented")
			}
			return ec.directives.HasTenant(ctx, obj, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*model.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ViewType_createdBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ViewType",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "internal":
				return ec.fieldContext_User_internal(ctx, field)
			case "bot":
				return ec.fieldContext_User_bot(ctx, field)
			case "timezone":
				return ec.fieldContext_User_timezone(ctx, field)
			case "profilePhotoUrl":
				return ec.fieldContext_User_profilePhotoUrl(ctx, field)
			case "player":
				return ec.fieldContext_User_player(ctx, field)
			case "roles":
				return ec.fieldContext_User_roles(ctx, field)
			case "emails":
				return ec.fieldContext_User_emails(ctx, field)
			case "phoneNumbers":
				return ec.fieldContext_User_phoneNumbers(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "jobRoles":
				return ec.fieldContext_User_jobRoles(ctx, field)
			case "calendars":
				return ec.fieldContext_User_calendars(ctx, field)
			case "source":
				return ec.fieldContext_User_source(ctx, field)
			case "sourceOfTruth":
				return ec.fieldContext_User_sourceOfTruth(ctx, field)
			case "appSource":
				return ec.fieldContext_User_appSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_id(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_name(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_provider(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_provider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_source(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_sourceOfTruth(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_sourceOfTruth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceOfTruth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.DataSource)
	fc.Result = res
	return ec.marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_sourceOfTruth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataSource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Workspace_appSource(ctx context.Context, field graphql.CollectedField, obj *model.Workspace) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Workspace_appSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Workspace_appSource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Workspace",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAnalysisDescriptionInput(ctx context.Context, obj interface{}) (model.AnalysisDescriptionInput, error) {
	var it model.AnalysisDescriptionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"interactionEventId", "interactionSessionId", "meetingId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "interactionEventId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interactionEventId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InteractionEventID = data
		case "interactionSessionId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interactionSessionId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InteractionSessionID = data
		case "meetingId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeetingID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAnalysisInput(ctx context.Context, obj interface{}) (model.AnalysisInput, error) {
	var it model.AnalysisInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "contentType", "analysisType", "describes", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "analysisType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("analysisType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AnalysisType = data
		case "describes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("describes"))
			data, err := ec.unmarshalNAnalysisDescriptionInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisDescriptionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Describes = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAttachmentInput(ctx context.Context, obj interface{}) (model.AttachmentInput, error) {
	var it model.AttachmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "createdAt", "cdnUrl", "basePath", "fileName", "mimeType", "size", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "cdnUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cdnUrl"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CdnURL = data
		case "basePath":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("basePath"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BasePath = data
		case "fileName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FileName = data
		case "mimeType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mimeType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MimeType = data
		case "size":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBankAccountCreateInput(ctx context.Context, obj interface{}) (model.BankAccountCreateInput, error) {
	var it model.BankAccountCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"currency", "bankName", "bankTransferEnabled", "allowInternational", "iban", "bic", "sortCode", "accountNumber", "routingNumber", "otherDetails"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "bankName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "bankTransferEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankTransferEnabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankTransferEnabled = data
		case "allowInternational":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowInternational"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowInternational = data
		case "iban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iban"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iban = data
		case "bic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bic"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Bic = data
		case "sortCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortCode = data
		case "accountNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumber = data
		case "routingNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routingNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoutingNumber = data
		case "otherDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherDetails"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherDetails = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBankAccountUpdateInput(ctx context.Context, obj interface{}) (model.BankAccountUpdateInput, error) {
	var it model.BankAccountUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "currency", "bankName", "bankTransferEnabled", "allowInternational", "iban", "bic", "sortCode", "accountNumber", "routingNumber", "otherDetails"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "bankName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankName = data
		case "bankTransferEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bankTransferEnabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BankTransferEnabled = data
		case "allowInternational":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowInternational"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AllowInternational = data
		case "iban":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iban"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Iban = data
		case "bic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bic"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Bic = data
		case "sortCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortCode = data
		case "accountNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountNumber = data
		case "routingNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routingNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RoutingNumber = data
		case "otherDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherDetails"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherDetails = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBillingDetailsInput(ctx context.Context, obj interface{}) (model.BillingDetailsInput, error) {
	var it model.BillingDetailsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"billingCycle", "invoicingStarted", "addressLine1", "addressLine2", "locality", "region", "country", "postalCode", "organizationLegalName", "billingEmail", "invoiceNote", "canPayWithCard", "canPayWithDirectDebit", "canPayWithBankTransfer", "payOnline", "payAutomatically"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "billingCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingCycle"))
			data, err := ec.unmarshalOContractBillingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractBillingCycle(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingCycle = data
		case "invoicingStarted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingStarted"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingStarted = data
		case "addressLine1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine1"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine1 = data
		case "addressLine2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine2 = data
		case "locality":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locality = data
		case "region":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Region = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "postalCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCode = data
		case "organizationLegalName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationLegalName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationLegalName = data
		case "billingEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingEmail = data
		case "invoiceNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoiceNote = data
		case "canPayWithCard":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithCard"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithCard = data
		case "canPayWithDirectDebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebit"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebit = data
		case "canPayWithBankTransfer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithBankTransfer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithBankTransfer = data
		case "payOnline":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payOnline"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PayOnline = data
		case "payAutomatically":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payAutomatically"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.PayAutomatically = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBillingProfileInput(ctx context.Context, obj interface{}) (model.BillingProfileInput, error) {
	var it model.BillingProfileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "legalName", "taxId", "createdAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "legalName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legalName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LegalName = data
		case "taxId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxID = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBillingProfileLinkEmailInput(ctx context.Context, obj interface{}) (model.BillingProfileLinkEmailInput, error) {
	var it model.BillingProfileLinkEmailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "billingProfileId", "emailId", "primary"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "billingProfileId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingProfileId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingProfileID = data
		case "emailId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmailID = data
		case "primary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Primary = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBillingProfileLinkLocationInput(ctx context.Context, obj interface{}) (model.BillingProfileLinkLocationInput, error) {
	var it model.BillingProfileLinkLocationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "billingProfileId", "locationId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "billingProfileId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingProfileId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingProfileID = data
		case "locationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBillingProfileUpdateInput(ctx context.Context, obj interface{}) (model.BillingProfileUpdateInput, error) {
	var it model.BillingProfileUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "billingProfileId", "legalName", "taxId", "updatedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "billingProfileId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingProfileId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingProfileID = data
		case "legalName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legalName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LegalName = data
		case "taxId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxID = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactInput(ctx context.Context, obj interface{}) (model.ContactInput, error) {
	var it model.ContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"templateId", "prefix", "firstName", "lastName", "name", "description", "timezone", "profilePhotoUrl", "createdAt", "customFields", "fieldSets", "email", "phoneNumber", "ownerId", "externalReference", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "templateId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TemplateID = data
		case "prefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Prefix = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "timezone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timezone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timezone = data
		case "profilePhotoUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilePhotoUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfilePhotoURL = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "customFields":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customFields"))
			data, err := ec.unmarshalOCustomFieldInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomFields = data
		case "fieldSets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldSets"))
			data, err := ec.unmarshalOFieldSetInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FieldSets = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOEmailInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOPhoneNumberInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "ownerId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerID = data
		case "externalReference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalReference"))
			data, err := ec.unmarshalOExternalSystemReferenceInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalReference = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactOrganizationInput(ctx context.Context, obj interface{}) (model.ContactOrganizationInput, error) {
	var it model.ContactOrganizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contactId", "organizationId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contactId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactID = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactTagInput(ctx context.Context, obj interface{}) (model.ContactTagInput, error) {
	var it model.ContactTagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contactId", "tagId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contactId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactID = data
		case "tagId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tagId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TagID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactUpdateInput(ctx context.Context, obj interface{}) (model.ContactUpdateInput, error) {
	var it model.ContactUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "patch", "firstName", "lastName", "name", "prefix", "description", "timezone", "profilePhotoUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "patch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patch"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Patch = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "prefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Prefix = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "timezone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timezone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timezone = data
		case "profilePhotoUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilePhotoUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfilePhotoURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractInput(ctx context.Context, obj interface{}) (model.ContractInput, error) {
	var it model.ContractInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "contractName", "contractRenewalCycle", "committedPeriods", "appSource", "contractUrl", "serviceStarted", "contractSigned", "currency", "billingEnabled", "invoicingStartDate", "externalReference", "billingCycle", "renewalPeriods", "renewalCycle", "signedAt", "serviceStartedAt", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "contractName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractName = data
		case "contractRenewalCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractRenewalCycle"))
			data, err := ec.unmarshalOContractRenewalCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractRenewalCycle = data
		case "committedPeriods":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("committedPeriods"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommittedPeriods = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "contractUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractURL = data
		case "serviceStarted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceStarted"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceStarted = data
		case "contractSigned":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractSigned"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractSigned = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "billingEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingEnabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingEnabled = data
		case "invoicingStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingStartDate = data
		case "externalReference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalReference"))
			data, err := ec.unmarshalOExternalSystemReferenceInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalReference = data
		case "billingCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingCycle"))
			data, err := ec.unmarshalOContractBillingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractBillingCycle(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingCycle = data
		case "renewalPeriods":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewalPeriods"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenewalPeriods = data
		case "renewalCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewalCycle"))
			data, err := ec.unmarshalOContractRenewalCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenewalCycle = data
		case "signedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.SignedAt = data
		case "serviceStartedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceStartedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceStartedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContractUpdateInput(ctx context.Context, obj interface{}) (model.ContractUpdateInput, error) {
	var it model.ContractUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contractId", "patch", "contractName", "contractUrl", "contractRenewalCycle", "committedPeriods", "serviceStarted", "contractSigned", "contractEnded", "currency", "billingDetails", "appSource", "billingEnabled", "canPayWithCard", "canPayWithDirectDebit", "canPayWithBankTransfer", "invoicingStartDate", "addressLine1", "addressLine2", "locality", "country", "zip", "billingCycle", "invoiceNote", "endedAt", "renewalPeriods", "invoiceEmail", "organizationLegalName", "renewalCycle", "signedAt", "serviceStartedAt", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contractId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractID = data
		case "patch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patch"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Patch = data
		case "contractName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractName = data
		case "contractUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractURL = data
		case "contractRenewalCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractRenewalCycle"))
			data, err := ec.unmarshalOContractRenewalCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractRenewalCycle = data
		case "committedPeriods":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("committedPeriods"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.CommittedPeriods = data
		case "serviceStarted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceStarted"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceStarted = data
		case "contractSigned":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractSigned"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractSigned = data
		case "contractEnded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractEnded"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractEnded = data
		case "currency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
			data, err := ec.unmarshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.Currency = data
		case "billingDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingDetails"))
			data, err := ec.unmarshalOBillingDetailsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingDetailsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingDetails = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "billingEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingEnabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingEnabled = data
		case "canPayWithCard":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithCard"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithCard = data
		case "canPayWithDirectDebit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebit"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebit = data
		case "canPayWithBankTransfer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithBankTransfer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithBankTransfer = data
		case "invoicingStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoicingStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoicingStartDate = data
		case "addressLine1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine1"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine1 = data
		case "addressLine2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine2 = data
		case "locality":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locality = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "zip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		case "billingCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingCycle"))
			data, err := ec.unmarshalOContractBillingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractBillingCycle(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingCycle = data
		case "invoiceNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoiceNote = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "renewalPeriods":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewalPeriods"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenewalPeriods = data
		case "invoiceEmail":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceEmail"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoiceEmail = data
		case "organizationLegalName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationLegalName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationLegalName = data
		case "renewalCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewalCycle"))
			data, err := ec.unmarshalOContractRenewalCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenewalCycle = data
		case "signedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("signedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.SignedAt = data
		case "serviceStartedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceStartedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceStartedAt = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomFieldEntityType(ctx context.Context, obj interface{}) (model.CustomFieldEntityType, error) {
	var it model.CustomFieldEntityType
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "entityType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "entityType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entityType"))
			data, err := ec.unmarshalNEntityType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityType(ctx, v)
			if err != nil {
				return it, err
			}
			it.EntityType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomFieldInput(ctx context.Context, obj interface{}) (model.CustomFieldInput, error) {
	var it model.CustomFieldInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "datatype", "value", "templateId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "datatype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("datatype"))
			data, err := ec.unmarshalOCustomFieldDataType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldDataType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Datatype = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNAny2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚐAnyTypeValue(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "templateId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TemplateID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomFieldTemplateInput(ctx context.Context, obj interface{}) (model.CustomFieldTemplateInput, error) {
	var it model.CustomFieldTemplateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "type", "order", "mandatory", "length", "min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNCustomFieldTemplateType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "mandatory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mandatory"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Mandatory = data
		case "length":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("length"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Length = data
		case "min":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Min = data
		case "max":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Max = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomFieldUpdateInput(ctx context.Context, obj interface{}) (model.CustomFieldUpdateInput, error) {
	var it model.CustomFieldUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "datatype", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "datatype":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("datatype"))
			data, err := ec.unmarshalNCustomFieldDataType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldDataType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Datatype = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNAny2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚐAnyTypeValue(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCustomerContactInput(ctx context.Context, obj interface{}) (model.CustomerContactInput, error) {
	var it model.CustomerContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"prefix", "firstName", "lastName", "name", "description", "timezone", "email", "createdAt", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "prefix":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("prefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Prefix = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "timezone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timezone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timezone = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOEmailInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDashboardPeriodInput(ctx context.Context, obj interface{}) (model.DashboardPeriodInput, error) {
	var it model.DashboardPeriodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"start", "end"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "start":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.Start = data
		case "end":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("end"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.End = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailInput(ctx context.Context, obj interface{}) (model.EmailInput, error) {
	var it model.EmailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "label", "primary", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOEmailLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailLabel(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "primary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Primary = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailUpdateInput(ctx context.Context, obj interface{}) (model.EmailUpdateInput, error) {
	var it model.EmailUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "label", "primary", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOEmailLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailLabel(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "primary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Primary = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEntityTemplateInput(ctx context.Context, obj interface{}) (model.EntityTemplateInput, error) {
	var it model.EntityTemplateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "extends", "fieldSetTemplateInputs", "customFieldTemplateInputs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "extends":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extends"))
			data, err := ec.unmarshalOEntityTemplateExtension2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateExtension(ctx, v)
			if err != nil {
				return it, err
			}
			it.Extends = data
		case "fieldSetTemplateInputs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldSetTemplateInputs"))
			data, err := ec.unmarshalOFieldSetTemplateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FieldSetTemplateInputs = data
		case "customFieldTemplateInputs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customFieldTemplateInputs"))
			data, err := ec.unmarshalOCustomFieldTemplateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomFieldTemplateInputs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExternalSystemReferenceInput(ctx context.Context, obj interface{}) (model.ExternalSystemReferenceInput, error) {
	var it model.ExternalSystemReferenceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"externalId", "syncDate", "type", "externalUrl", "externalSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "externalId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		case "syncDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("syncDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.SyncDate = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNExternalSystemType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "externalUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalURL = data
		case "externalSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFieldSetInput(ctx context.Context, obj interface{}) (model.FieldSetInput, error) {
	var it model.FieldSetInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "customFields", "templateId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "customFields":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customFields"))
			data, err := ec.unmarshalOCustomFieldInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomFields = data
		case "templateId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TemplateID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFieldSetTemplateInput(ctx context.Context, obj interface{}) (model.FieldSetTemplateInput, error) {
	var it model.FieldSetTemplateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "order", "customFieldTemplateInputs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "customFieldTemplateInputs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customFieldTemplateInputs"))
			data, err := ec.unmarshalOCustomFieldTemplateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomFieldTemplateInputs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFieldSetUpdateInput(ctx context.Context, obj interface{}) (model.FieldSetUpdateInput, error) {
	var it model.FieldSetUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilter(ctx context.Context, obj interface{}) (model.Filter, error) {
	var it model.Filter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"NOT", "AND", "OR", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "NOT":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NOT"))
			data, err := ec.unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, v)
			if err != nil {
				return it, err
			}
			it.Not = data
		case "AND":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AND"))
			data, err := ec.unmarshalOFilter2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilterᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.And = data
		case "OR":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OR"))
			data, err := ec.unmarshalOFilter2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilterᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Or = data
		case "filter":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			data, err := ec.unmarshalOFilterItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilterItem(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterItem(ctx context.Context, obj interface{}) (model.FilterItem, error) {
	var it model.FilterItem
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["operation"]; !present {
		asMap["operation"] = "EQ"
	}
	if _, present := asMap["caseSensitive"]; !present {
		asMap["caseSensitive"] = false
	}
	if _, present := asMap["includeEmpty"]; !present {
		asMap["includeEmpty"] = true
	}

	fieldsInOrder := [...]string{"property", "operation", "value", "caseSensitive", "includeEmpty"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "property":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("property"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Property = data
		case "operation":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operation"))
			data, err := ec.unmarshalNComparisonOperator2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐComparisonOperator(ctx, v)
			if err != nil {
				return it, err
			}
			it.Operation = data
		case "value":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNAny2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚐAnyTypeValue(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "caseSensitive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caseSensitive"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaseSensitive = data
		case "includeEmpty":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeEmpty"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IncludeEmpty = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInteractionEventInput(ctx context.Context, obj interface{}) (model.InteractionEventInput, error) {
	var it model.InteractionEventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"eventIdentifier", "externalId", "externalSystemId", "content", "contentType", "channel", "channelData", "interactionSession", "meetingId", "sentBy", "sentTo", "repliesTo", "eventType", "appSource", "createdAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "eventIdentifier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventIdentifier"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventIdentifier = data
		case "externalId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalID = data
		case "externalSystemId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalSystemId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalSystemID = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "channel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Channel = data
		case "channelData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelData"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelData = data
		case "interactionSession":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interactionSession"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InteractionSession = data
		case "meetingId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeetingID = data
		case "sentBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sentBy"))
			data, err := ec.unmarshalNInteractionEventParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SentBy = data
		case "sentTo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sentTo"))
			data, err := ec.unmarshalNInteractionEventParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SentTo = data
		case "repliesTo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("repliesTo"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RepliesTo = data
		case "eventType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventType = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInteractionEventParticipantInput(ctx context.Context, obj interface{}) (model.InteractionEventParticipantInput, error) {
	var it model.InteractionEventParticipantInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "phoneNumber", "contactID", "userID", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "contactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInteractionSessionInput(ctx context.Context, obj interface{}) (model.InteractionSessionInput, error) {
	var it model.InteractionSessionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sessionIdentifier", "name", "status", "type", "channel", "channelData", "attendedBy", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sessionIdentifier":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionIdentifier"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SessionIdentifier = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "channel":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Channel = data
		case "channelData":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelData"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChannelData = data
		case "attendedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attendedBy"))
			data, err := ec.unmarshalOInteractionSessionParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipantInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttendedBy = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInteractionSessionParticipantInput(ctx context.Context, obj interface{}) (model.InteractionSessionParticipantInput, error) {
	var it model.InteractionSessionParticipantInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "phoneNumber", "contactID", "userID", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "contactID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactID = data
		case "userID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceLineInput(ctx context.Context, obj interface{}) (model.InvoiceLineInput, error) {
	var it model.InvoiceLineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"serviceLineItemId", "name", "billed", "price", "quantity"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "serviceLineItemId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceLineItemId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceLineItemID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "billed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billed"))
			data, err := ec.unmarshalNBilledType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Billed = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceSimulateInput(ctx context.Context, obj interface{}) (model.InvoiceSimulateInput, error) {
	var it model.InvoiceSimulateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contractId", "periodStartDate", "periodEndDate", "invoiceLines"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contractId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractID = data
		case "periodStartDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodStartDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodStartDate = data
		case "periodEndDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodEndDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodEndDate = data
		case "invoiceLines":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceLines"))
			data, err := ec.unmarshalNInvoiceLineInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLineInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoiceLines = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceUpdateInput(ctx context.Context, obj interface{}) (model.InvoiceUpdateInput, error) {
	var it model.InvoiceUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "status", "patch"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOInvoiceStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "patch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patch"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Patch = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoicingCycleInput(ctx context.Context, obj interface{}) (model.InvoicingCycleInput, error) {
	var it model.InvoicingCycleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNInvoicingCycleType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoicingCycleUpdateInput(ctx context.Context, obj interface{}) (model.InvoicingCycleUpdateInput, error) {
	var it model.InvoicingCycleUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNInvoicingCycleType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobRoleInput(ctx context.Context, obj interface{}) (model.JobRoleInput, error) {
	var it model.JobRoleInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "jobTitle", "primary", "startedAt", "endedAt", "appSource", "description", "company"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "jobTitle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTitle"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobTitle = data
		case "primary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Primary = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Company = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobRoleUpdateInput(ctx context.Context, obj interface{}) (model.JobRoleUpdateInput, error) {
	var it model.JobRoleUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "startedAt", "endedAt", "organizationId", "jobTitle", "primary", "description", "company"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "jobTitle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobTitle"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobTitle = data
		case "primary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Primary = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "company":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Company = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLinkOrganizationsInput(ctx context.Context, obj interface{}) (model.LinkOrganizationsInput, error) {
	var it model.LinkOrganizationsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "subOrganizationId", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "subOrganizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrganizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubOrganizationID = data
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLocationUpdateInput(ctx context.Context, obj interface{}) (model.LocationUpdateInput, error) {
	var it model.LocationUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "rawAddress", "country", "region", "district", "locality", "street", "address", "address2", "zip", "addressType", "houseNumber", "postalCode", "plusFour", "commercial", "predirection", "latitude", "longitude", "timeZone", "utcOffset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "rawAddress":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rawAddress"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RawAddress = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "region":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Region = data
		case "district":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("district"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.District = data
		case "locality":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locality = data
		case "street":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Street = data
		case "address":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "address2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address2 = data
		case "zip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		case "addressType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressType = data
		case "houseNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("houseNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.HouseNumber = data
		case "postalCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostalCode = data
		case "plusFour":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plusFour"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlusFour = data
		case "commercial":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commercial"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Commercial = data
		case "predirection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("predirection"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Predirection = data
		case "latitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Latitude = data
		case "longitude":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longitude"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Longitude = data
		case "timeZone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeZone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeZone = data
		case "utcOffset":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("utcOffset"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.UtcOffset = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogEntryInput(ctx context.Context, obj interface{}) (model.LogEntryInput, error) {
	var it model.LogEntryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "contentType", "tags", "startedAt", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "tags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			data, err := ec.unmarshalOTagIdOrNameInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tags = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogEntryUpdateInput(ctx context.Context, obj interface{}) (model.LogEntryUpdateInput, error) {
	var it model.LogEntryUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "contentType", "startedAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMasterPlanInput(ctx context.Context, obj interface{}) (model.MasterPlanInput, error) {
	var it model.MasterPlanInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMasterPlanMilestoneInput(ctx context.Context, obj interface{}) (model.MasterPlanMilestoneInput, error) {
	var it model.MasterPlanMilestoneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"masterPlanId", "name", "order", "durationHours", "optional", "items"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "masterPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("masterPlanId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MasterPlanID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "durationHours":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationHours"))
			data, err := ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationHours = data
		case "optional":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optional"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Optional = data
		case "items":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("items"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Items = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMasterPlanMilestoneReorderInput(ctx context.Context, obj interface{}) (model.MasterPlanMilestoneReorderInput, error) {
	var it model.MasterPlanMilestoneReorderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"masterPlanId", "orderedIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "masterPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("masterPlanId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MasterPlanID = data
		case "orderedIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderedIds"))
			data, err := ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderedIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMasterPlanMilestoneUpdateInput(ctx context.Context, obj interface{}) (model.MasterPlanMilestoneUpdateInput, error) {
	var it model.MasterPlanMilestoneUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"masterPlanId", "id", "name", "order", "durationHours", "optional", "retired", "items"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "masterPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("masterPlanId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MasterPlanID = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "durationHours":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("durationHours"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.DurationHours = data
		case "optional":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optional"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Optional = data
		case "retired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Retired = data
		case "items":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("items"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Items = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMasterPlanUpdateInput(ctx context.Context, obj interface{}) (model.MasterPlanUpdateInput, error) {
	var it model.MasterPlanUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "retired"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "retired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Retired = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMeetingInput(ctx context.Context, obj interface{}) (model.MeetingInput, error) {
	var it model.MeetingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "attendedBy", "createdBy", "createdAt", "startedAt", "endedAt", "conferenceUrl", "meetingExternalUrl", "agenda", "agendaContentType", "note", "appSource", "externalSystem", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "attendedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attendedBy"))
			data, err := ec.unmarshalOMeetingParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AttendedBy = data
		case "createdBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			data, err := ec.unmarshalOMeetingParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedBy = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "conferenceUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conferenceUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConferenceURL = data
		case "meetingExternalUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingExternalUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeetingExternalURL = data
		case "agenda":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agenda"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Agenda = data
		case "agendaContentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agendaContentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgendaContentType = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalONoteInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "externalSystem":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalSystem"))
			data, err := ec.unmarshalOExternalSystemReferenceInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalSystem = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOMeetingStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMeetingParticipantInput(ctx context.Context, obj interface{}) (model.MeetingParticipantInput, error) {
	var it model.MeetingParticipantInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contactId", "userId", "organizationId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contactId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contactId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContactID = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMeetingUpdateInput(ctx context.Context, obj interface{}) (model.MeetingUpdateInput, error) {
	var it model.MeetingUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "startedAt", "endedAt", "conferenceUrl", "meetingExternalUrl", "agenda", "agendaContentType", "note", "appSource", "status", "externalSystem"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "startedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartedAt = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "conferenceUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conferenceUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ConferenceURL = data
		case "meetingExternalUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meetingExternalUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MeetingExternalURL = data
		case "agenda":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agenda"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Agenda = data
		case "agendaContentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("agendaContentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AgendaContentType = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalONoteUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOMeetingStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "externalSystem":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalSystem"))
			data, err := ec.unmarshalOExternalSystemReferenceInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalSystem = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNoteInput(ctx context.Context, obj interface{}) (model.NoteInput, error) {
	var it model.NoteInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "contentType", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNoteUpdateInput(ctx context.Context, obj interface{}) (model.NoteUpdateInput, error) {
	var it model.NoteUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "content", "contentType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "contentType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOnboardingStatusInput(ctx context.Context, obj interface{}) (model.OnboardingStatusInput, error) {
	var it model.OnboardingStatusInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationId", "status", "comments"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNOnboardingStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "comments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comments = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOpportunityRenewalUpdateInput(ctx context.Context, obj interface{}) (model.OpportunityRenewalUpdateInput, error) {
	var it model.OpportunityRenewalUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"opportunityId", "name", "amount", "renewalLikelihood", "comments", "appSource", "ownerUserId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "opportunityId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opportunityId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpportunityID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "renewalLikelihood":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renewalLikelihood"))
			data, err := ec.unmarshalOOpportunityRenewalLikelihood2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalLikelihood(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenewalLikelihood = data
		case "comments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comments = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "ownerUserId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ownerUserId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OwnerUserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOpportunityUpdateInput(ctx context.Context, obj interface{}) (model.OpportunityUpdateInput, error) {
	var it model.OpportunityUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"opportunityId", "name", "amount", "externalType", "externalStage", "estimatedClosedDate", "generalNotes", "nextSteps", "appSource", "externalReference"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "opportunityId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("opportunityId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpportunityID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "amount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Amount = data
		case "externalType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalType = data
		case "externalStage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalStage"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalStage = data
		case "estimatedClosedDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedClosedDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedClosedDate = data
		case "generalNotes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("generalNotes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.GeneralNotes = data
		case "nextSteps":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextSteps"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextSteps = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "externalReference":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalReference"))
			data, err := ec.unmarshalOExternalSystemReferenceInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExternalReference = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationInput(ctx context.Context, obj interface{}) (model.OrganizationInput, error) {
	var it model.OrganizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"customId", "name", "description", "notes", "domains", "website", "industry", "subIndustry", "industryGroup", "public", "isCustomer", "customFields", "market", "logo", "employeeGrowthRate", "headquarters", "yearFounded", "employees", "slackChannelId", "appSource", "fieldSets", "templateId", "isPublic", "referenceId", "note", "logoUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "customId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "domains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domains"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Domains = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "subIndustry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subIndustry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubIndustry = data
		case "industryGroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryGroup"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryGroup = data
		case "public":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Public = data
		case "isCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCustomer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCustomer = data
		case "customFields":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customFields"))
			data, err := ec.unmarshalOCustomFieldInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomFields = data
		case "market":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("market"))
			data, err := ec.unmarshalOMarket2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMarket(ctx, v)
			if err != nil {
				return it, err
			}
			it.Market = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "employeeGrowthRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeGrowthRate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeGrowthRate = data
		case "headquarters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("headquarters"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Headquarters = data
		case "yearFounded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearFounded"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearFounded = data
		case "employees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employees"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Employees = data
		case "slackChannelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slackChannelId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlackChannelID = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "fieldSets":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fieldSets"))
			data, err := ec.unmarshalOFieldSetInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.FieldSets = data
		case "templateId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TemplateID = data
		case "isPublic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPublic"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsPublic = data
		case "referenceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReferenceID = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "logoUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanInput(ctx context.Context, obj interface{}) (model.OrganizationPlanInput, error) {
	var it model.OrganizationPlanInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "masterPlanId", "organizationId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "masterPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("masterPlanId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MasterPlanID = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanMilestoneInput(ctx context.Context, obj interface{}) (model.OrganizationPlanMilestoneInput, error) {
	var it model.OrganizationPlanMilestoneInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationPlanId", "name", "order", "dueDate", "createdAt", "optional", "items", "organizationId", "adhoc"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPlanId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationPlanID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalNInt642int64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "optional":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optional"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Optional = data
		case "items":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("items"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Items = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "adhoc":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adhoc"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adhoc = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanMilestoneItemInput(ctx context.Context, obj interface{}) (model.OrganizationPlanMilestoneItemInput, error) {
	var it model.OrganizationPlanMilestoneItemInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "updatedAt", "text", "uuid"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNOnboardingPlanMilestoneItemStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneItemStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Text = data
		case "uuid":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("uuid"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.UUID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanMilestoneReorderInput(ctx context.Context, obj interface{}) (model.OrganizationPlanMilestoneReorderInput, error) {
	var it model.OrganizationPlanMilestoneReorderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationPlanId", "organizationId", "orderedIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPlanId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationPlanID = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "orderedIds":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderedIds"))
			data, err := ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrderedIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanMilestoneStatusDetailsInput(ctx context.Context, obj interface{}) (model.OrganizationPlanMilestoneStatusDetailsInput, error) {
	var it model.OrganizationPlanMilestoneStatusDetailsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "updatedAt", "text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNOnboardingPlanMilestoneStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Text = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanMilestoneUpdateInput(ctx context.Context, obj interface{}) (model.OrganizationPlanMilestoneUpdateInput, error) {
	var it model.OrganizationPlanMilestoneUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"organizationPlanId", "id", "name", "order", "dueDate", "updatedAt", "optional", "retired", "items", "statusDetails", "organizationId", "adhoc"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "organizationPlanId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationPlanId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationPlanID = data
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "order":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Order = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "optional":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optional"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Optional = data
		case "retired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Retired = data
		case "items":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("items"))
			data, err := ec.unmarshalOOrganizationPlanMilestoneItemInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItemInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Items = data
		case "statusDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetails"))
			data, err := ec.unmarshalOOrganizationPlanMilestoneStatusDetailsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneStatusDetailsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetails = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "adhoc":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adhoc"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Adhoc = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanStatusDetailsInput(ctx context.Context, obj interface{}) (model.OrganizationPlanStatusDetailsInput, error) {
	var it model.OrganizationPlanStatusDetailsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "updatedAt", "text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNOnboardingPlanStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "text":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Text = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationPlanUpdateInput(ctx context.Context, obj interface{}) (model.OrganizationPlanUpdateInput, error) {
	var it model.OrganizationPlanUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "retired", "statusDetails", "organizationId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "retired":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retired"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Retired = data
		case "statusDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusDetails"))
			data, err := ec.unmarshalOOrganizationPlanStatusDetailsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanStatusDetailsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.StatusDetails = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationUpdateInput(ctx context.Context, obj interface{}) (model.OrganizationUpdateInput, error) {
	var it model.OrganizationUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "customId", "patch", "name", "description", "notes", "website", "industry", "subIndustry", "industryGroup", "public", "isCustomer", "market", "employees", "targetAudience", "valueProposition", "lastFundingRound", "lastFundingAmount", "logo", "employeeGrowthRate", "headquarters", "yearFounded", "slackChannelId", "isPublic", "logoUrl", "domains", "note", "referenceId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "customId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CustomID = data
		case "patch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patch"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Patch = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "website":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Website = data
		case "industry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Industry = data
		case "subIndustry":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subIndustry"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SubIndustry = data
		case "industryGroup":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industryGroup"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndustryGroup = data
		case "public":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("public"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Public = data
		case "isCustomer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isCustomer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsCustomer = data
		case "market":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("market"))
			data, err := ec.unmarshalOMarket2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMarket(ctx, v)
			if err != nil {
				return it, err
			}
			it.Market = data
		case "employees":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employees"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Employees = data
		case "targetAudience":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetAudience"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetAudience = data
		case "valueProposition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueProposition"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueProposition = data
		case "lastFundingRound":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastFundingRound"))
			data, err := ec.unmarshalOFundingRound2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFundingRound(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastFundingRound = data
		case "lastFundingAmount":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastFundingAmount"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastFundingAmount = data
		case "logo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logo = data
		case "employeeGrowthRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("employeeGrowthRate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EmployeeGrowthRate = data
		case "headquarters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("headquarters"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Headquarters = data
		case "yearFounded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("yearFounded"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.YearFounded = data
		case "slackChannelId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slackChannelId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SlackChannelID = data
		case "isPublic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPublic"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsPublic = data
		case "logoUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoURL = data
		case "domains":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domains"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Domains = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "referenceId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("referenceId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReferenceID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagination(ctx context.Context, obj interface{}) (model.Pagination, error) {
	var it model.Pagination
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"page", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "limit":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneNumberInput(ctx context.Context, obj interface{}) (model.PhoneNumberInput, error) {
	var it model.PhoneNumberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"phoneNumber", "countryCodeA2", "label", "primary"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "countryCodeA2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCodeA2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryCodeA2 = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOPhoneNumberLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberLabel(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "primary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Primary = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneNumberUpdateInput(ctx context.Context, obj interface{}) (model.PhoneNumberUpdateInput, error) {
	var it model.PhoneNumberUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "label", "primary", "phoneNumber", "countryCodeA2"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "label":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("label"))
			data, err := ec.unmarshalOPhoneNumberLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberLabel(ctx, v)
			if err != nil {
				return it, err
			}
			it.Label = data
		case "primary":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("primary"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Primary = data
		case "phoneNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "countryCodeA2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCodeA2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryCodeA2 = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlayerInput(ctx context.Context, obj interface{}) (model.PlayerInput, error) {
	var it model.PlayerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"identityId", "authId", "provider", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "identityId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identityId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IdentityID = data
		case "authId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AuthID = data
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlayerUpdate(ctx context.Context, obj interface{}) (model.PlayerUpdate, error) {
	var it model.PlayerUpdate
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"identityId", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "identityId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identityId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IdentityID = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReminderInput(ctx context.Context, obj interface{}) (model.ReminderInput, error) {
	var it model.ReminderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"content", "dueDate", "organizationId", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "organizationId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OrganizationID = data
		case "userId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReminderUpdateInput(ctx context.Context, obj interface{}) (model.ReminderUpdateInput, error) {
	var it model.ReminderUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "content", "dueDate", "dismissed"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "content":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("content"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Content = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "dismissed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dismissed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Dismissed = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceLineItemBulkUpdateInput(ctx context.Context, obj interface{}) (model.ServiceLineItemBulkUpdateInput, error) {
	var it model.ServiceLineItemBulkUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"serviceLineItems", "contractId", "invoiceNote"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "serviceLineItems":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceLineItems"))
			data, err := ec.unmarshalNServiceLineItemBulkUpdateItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemBulkUpdateItem(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceLineItems = data
		case "contractId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractID = data
		case "invoiceNote":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("invoiceNote"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InvoiceNote = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceLineItemBulkUpdateItem(ctx context.Context, obj interface{}) (model.ServiceLineItemBulkUpdateItem, error) {
	var it model.ServiceLineItemBulkUpdateItem
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"serviceLineItemId", "name", "billed", "price", "quantity", "vatRate", "comments", "isRetroactiveCorrection", "serviceStarted"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "serviceLineItemId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceLineItemId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceLineItemID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "billed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billed"))
			data, err := ec.unmarshalOBilledType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Billed = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "vatRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatRate"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatRate = data
		case "comments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comments = data
		case "isRetroactiveCorrection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRetroactiveCorrection"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRetroactiveCorrection = data
		case "serviceStarted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceStarted"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceStarted = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceLineItemCloseInput(ctx context.Context, obj interface{}) (model.ServiceLineItemCloseInput, error) {
	var it model.ServiceLineItemCloseInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "endedAt", "serviceEnded"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "endedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndedAt = data
		case "serviceEnded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceEnded"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceEnded = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceLineItemInput(ctx context.Context, obj interface{}) (model.ServiceLineItemInput, error) {
	var it model.ServiceLineItemInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contractId", "description", "billingCycle", "price", "quantity", "tax", "appSource", "serviceStarted", "serviceEnded"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contractId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contractId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContractID = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "billingCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingCycle"))
			data, err := ec.unmarshalOBilledType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingCycle = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "tax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tax"))
			data, err := ec.unmarshalOTaxInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTaxInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tax = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "serviceStarted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceStarted"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceStarted = data
		case "serviceEnded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceEnded"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceEnded = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServiceLineItemUpdateInput(ctx context.Context, obj interface{}) (model.ServiceLineItemUpdateInput, error) {
	var it model.ServiceLineItemUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "description", "billingCycle", "price", "quantity", "tax", "comments", "appSource", "isRetroactiveCorrection", "serviceStarted", "serviceEnded"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "billingCycle":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingCycle"))
			data, err := ec.unmarshalOBilledType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingCycle = data
		case "price":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("price"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Price = data
		case "quantity":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("quantity"))
			data, err := ec.unmarshalOInt642ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Quantity = data
		case "tax":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tax"))
			data, err := ec.unmarshalOTaxInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTaxInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tax = data
		case "comments":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comments"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comments = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "isRetroactiveCorrection":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRetroactiveCorrection"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsRetroactiveCorrection = data
		case "serviceStarted":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceStarted"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceStarted = data
		case "serviceEnded":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceEnded"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ServiceEnded = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSocialInput(ctx context.Context, obj interface{}) (model.SocialInput, error) {
	var it model.SocialInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"platformName", "url", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "platformName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformName = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSocialUpdateInput(ctx context.Context, obj interface{}) (model.SocialUpdateInput, error) {
	var it model.SocialUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "platformName", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "platformName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlatformName = data
		case "url":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSortBy(ctx context.Context, obj interface{}) (model.SortBy, error) {
	var it model.SortBy
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}
	if _, present := asMap["caseSensitive"]; !present {
		asMap["caseSensitive"] = false
	}

	fieldsInOrder := [...]string{"by", "direction", "caseSensitive"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "by":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("by"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.By = data
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNSortingDirection2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortingDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "caseSensitive":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("caseSensitive"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CaseSensitive = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagIdOrNameInput(ctx context.Context, obj interface{}) (model.TagIDOrNameInput, error) {
	var it model.TagIDOrNameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagInput(ctx context.Context, obj interface{}) (model.TagInput, error) {
	var it model.TagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagUpdateInput(ctx context.Context, obj interface{}) (model.TagUpdateInput, error) {
	var it model.TagUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTaxInput(ctx context.Context, obj interface{}) (model.TaxInput, error) {
	var it model.TaxInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"taxRate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "taxRate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxRate"))
			data, err := ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaxRate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenantBillingProfileInput(ctx context.Context, obj interface{}) (model.TenantBillingProfileInput, error) {
	var it model.TenantBillingProfileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "phone", "addressLine1", "addressLine2", "addressLine3", "locality", "country", "zip", "legalName", "domesticPaymentsBankInfo", "internationalPaymentsBankInfo", "vatNumber", "sendInvoicesFrom", "sendInvoicesBcc", "canPayWithCard", "canPayWithDirectDebitSEPA", "canPayWithDirectDebitACH", "canPayWithDirectDebitBacs", "canPayWithBankTransfer", "canPayWithPigeon"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "addressLine1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine1"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine1 = data
		case "addressLine2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine2 = data
		case "addressLine3":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine3"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine3 = data
		case "locality":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locality = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "zip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		case "legalName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legalName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LegalName = data
		case "domesticPaymentsBankInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domesticPaymentsBankInfo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DomesticPaymentsBankInfo = data
		case "internationalPaymentsBankInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internationalPaymentsBankInfo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InternationalPaymentsBankInfo = data
		case "vatNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatNumber = data
		case "sendInvoicesFrom":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendInvoicesFrom"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendInvoicesFrom = data
		case "sendInvoicesBcc":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendInvoicesBcc"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendInvoicesBcc = data
		case "canPayWithCard":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithCard"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithCard = data
		case "canPayWithDirectDebitSEPA":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebitSEPA"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebitSepa = data
		case "canPayWithDirectDebitACH":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebitACH"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebitAch = data
		case "canPayWithDirectDebitBacs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebitBacs"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebitBacs = data
		case "canPayWithBankTransfer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithBankTransfer"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithBankTransfer = data
		case "canPayWithPigeon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithPigeon"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithPigeon = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenantBillingProfileUpdateInput(ctx context.Context, obj interface{}) (model.TenantBillingProfileUpdateInput, error) {
	var it model.TenantBillingProfileUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "patch", "email", "phone", "addressLine1", "addressLine2", "addressLine3", "locality", "country", "zip", "legalName", "domesticPaymentsBankInfo", "internationalPaymentsBankInfo", "vatNumber", "sendInvoicesFrom", "sendInvoicesBcc", "canPayWithCard", "canPayWithDirectDebitSEPA", "canPayWithDirectDebitACH", "canPayWithDirectDebitBacs", "canPayWithBankTransfer", "canPayWithPigeon"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "patch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patch"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Patch = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "addressLine1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine1"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine1 = data
		case "addressLine2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine2"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine2 = data
		case "addressLine3":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine3"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine3 = data
		case "locality":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locality"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Locality = data
		case "country":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "zip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zip"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Zip = data
		case "legalName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("legalName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LegalName = data
		case "domesticPaymentsBankInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("domesticPaymentsBankInfo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DomesticPaymentsBankInfo = data
		case "internationalPaymentsBankInfo":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internationalPaymentsBankInfo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.InternationalPaymentsBankInfo = data
		case "vatNumber":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vatNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.VatNumber = data
		case "sendInvoicesFrom":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendInvoicesFrom"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendInvoicesFrom = data
		case "sendInvoicesBcc":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendInvoicesBcc"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SendInvoicesBcc = data
		case "canPayWithCard":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithCard"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithCard = data
		case "canPayWithDirectDebitSEPA":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebitSEPA"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebitSepa = data
		case "canPayWithDirectDebitACH":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebitACH"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebitAch = data
		case "canPayWithDirectDebitBacs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithDirectDebitBacs"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithDirectDebitBacs = data
		case "canPayWithBankTransfer":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithBankTransfer"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithBankTransfer = data
		case "canPayWithPigeon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canPayWithPigeon"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanPayWithPigeon = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenantInput(ctx context.Context, obj interface{}) (model.TenantInput, error) {
	var it model.TenantInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenantSettingsInput(ctx context.Context, obj interface{}) (model.TenantSettingsInput, error) {
	var it model.TenantSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"patch", "logoUrl", "logoRepositoryFileId", "baseCurrency", "billingEnabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "patch":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patch"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Patch = data
		case "logoUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoURL = data
		case "logoRepositoryFileId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoRepositoryFileId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LogoRepositoryFileID = data
		case "baseCurrency":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("baseCurrency"))
			data, err := ec.unmarshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx, v)
			if err != nil {
				return it, err
			}
			it.BaseCurrency = data
		case "billingEnabled":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingEnabled"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.BillingEnabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimeRange(ctx context.Context, obj interface{}) (model.TimeRange, error) {
	var it model.TimeRange
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"from", "to"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "from":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("from"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.From = data
		case "to":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.To = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserInput(ctx context.Context, obj interface{}) (model.UserInput, error) {
	var it model.UserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "name", "timezone", "profilePhotoUrl", "email", "player", "appSource", "jobRoles"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "timezone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timezone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timezone = data
		case "profilePhotoUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilePhotoUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfilePhotoURL = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNEmailInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "player":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("player"))
			data, err := ec.unmarshalNPlayerInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Player = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		case "jobRoles":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jobRoles"))
			data, err := ec.unmarshalOJobRoleInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.JobRoles = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserUpdateInput(ctx context.Context, obj interface{}) (model.UserUpdateInput, error) {
	var it model.UserUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "firstName", "lastName", "name", "timezone", "profilePhotoUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "timezone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timezone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timezone = data
		case "profilePhotoUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profilePhotoUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfilePhotoURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorkspaceInput(ctx context.Context, obj interface{}) (model.WorkspaceInput, error) {
	var it model.WorkspaceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "provider", "appSource"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "provider":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provider = data
		case "appSource":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appSource"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AppSource = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _DescriptionNode(ctx context.Context, sel ast.SelectionSet, obj model.DescriptionNode) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.InteractionSession:
		return ec._InteractionSession(ctx, sel, &obj)
	case *model.InteractionSession:
		if obj == nil {
			return graphql.Null
		}
		return ec._InteractionSession(ctx, sel, obj)
	case model.InteractionEvent:
		return ec._InteractionEvent(ctx, sel, &obj)
	case *model.InteractionEvent:
		if obj == nil {
			return graphql.Null
		}
		return ec._InteractionEvent(ctx, sel, obj)
	case model.Meeting:
		return ec._Meeting(ctx, sel, &obj)
	case *model.Meeting:
		if obj == nil {
			return graphql.Null
		}
		return ec._Meeting(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _ExtensibleEntity(ctx context.Context, sel ast.SelectionSet, obj model.ExtensibleEntity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Contact:
		return ec._Contact(ctx, sel, &obj)
	case *model.Contact:
		if obj == nil {
			return graphql.Null
		}
		return ec._Contact(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _InteractionEventParticipant(ctx context.Context, sel ast.SelectionSet, obj model.InteractionEventParticipant) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.EmailParticipant:
		return ec._EmailParticipant(ctx, sel, &obj)
	case *model.EmailParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._EmailParticipant(ctx, sel, obj)
	case model.PhoneNumberParticipant:
		return ec._PhoneNumberParticipant(ctx, sel, &obj)
	case *model.PhoneNumberParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._PhoneNumberParticipant(ctx, sel, obj)
	case model.ContactParticipant:
		return ec._ContactParticipant(ctx, sel, &obj)
	case *model.ContactParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContactParticipant(ctx, sel, obj)
	case model.UserParticipant:
		return ec._UserParticipant(ctx, sel, &obj)
	case *model.UserParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserParticipant(ctx, sel, obj)
	case model.OrganizationParticipant:
		return ec._OrganizationParticipant(ctx, sel, &obj)
	case *model.OrganizationParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationParticipant(ctx, sel, obj)
	case model.JobRoleParticipant:
		return ec._JobRoleParticipant(ctx, sel, &obj)
	case *model.JobRoleParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._JobRoleParticipant(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _InteractionSessionParticipant(ctx context.Context, sel ast.SelectionSet, obj model.InteractionSessionParticipant) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.EmailParticipant:
		return ec._EmailParticipant(ctx, sel, &obj)
	case *model.EmailParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._EmailParticipant(ctx, sel, obj)
	case model.PhoneNumberParticipant:
		return ec._PhoneNumberParticipant(ctx, sel, &obj)
	case *model.PhoneNumberParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._PhoneNumberParticipant(ctx, sel, obj)
	case model.ContactParticipant:
		return ec._ContactParticipant(ctx, sel, &obj)
	case *model.ContactParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContactParticipant(ctx, sel, obj)
	case model.UserParticipant:
		return ec._UserParticipant(ctx, sel, &obj)
	case *model.UserParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserParticipant(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _IssueParticipant(ctx context.Context, sel ast.SelectionSet, obj model.IssueParticipant) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ContactParticipant:
		return ec._ContactParticipant(ctx, sel, &obj)
	case *model.ContactParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContactParticipant(ctx, sel, obj)
	case model.UserParticipant:
		return ec._UserParticipant(ctx, sel, &obj)
	case *model.UserParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserParticipant(ctx, sel, obj)
	case model.OrganizationParticipant:
		return ec._OrganizationParticipant(ctx, sel, &obj)
	case *model.OrganizationParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationParticipant(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _MeetingParticipant(ctx context.Context, sel ast.SelectionSet, obj model.MeetingParticipant) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ContactParticipant:
		return ec._ContactParticipant(ctx, sel, &obj)
	case *model.ContactParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContactParticipant(ctx, sel, obj)
	case model.UserParticipant:
		return ec._UserParticipant(ctx, sel, &obj)
	case *model.UserParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserParticipant(ctx, sel, obj)
	case model.OrganizationParticipant:
		return ec._OrganizationParticipant(ctx, sel, &obj)
	case *model.OrganizationParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationParticipant(ctx, sel, obj)
	case model.EmailParticipant:
		return ec._EmailParticipant(ctx, sel, &obj)
	case *model.EmailParticipant:
		if obj == nil {
			return graphql.Null
		}
		return ec._EmailParticipant(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _MetadataInterface(ctx context.Context, sel ast.SelectionSet, obj model.MetadataInterface) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.BankAccount:
		return ec._BankAccount(ctx, sel, &obj)
	case *model.BankAccount:
		if obj == nil {
			return graphql.Null
		}
		return ec._BankAccount(ctx, sel, obj)
	case model.Contract:
		return ec._Contract(ctx, sel, &obj)
	case *model.Contract:
		if obj == nil {
			return graphql.Null
		}
		return ec._Contract(ctx, sel, obj)
	case model.Invoice:
		return ec._Invoice(ctx, sel, &obj)
	case *model.Invoice:
		if obj == nil {
			return graphql.Null
		}
		return ec._Invoice(ctx, sel, obj)
	case model.InvoiceLine:
		return ec._InvoiceLine(ctx, sel, &obj)
	case *model.InvoiceLine:
		if obj == nil {
			return graphql.Null
		}
		return ec._InvoiceLine(ctx, sel, obj)
	case model.Organization:
		return ec._Organization(ctx, sel, &obj)
	case *model.Organization:
		if obj == nil {
			return graphql.Null
		}
		return ec._Organization(ctx, sel, obj)
	case model.Reminder:
		return ec._Reminder(ctx, sel, &obj)
	case *model.Reminder:
		if obj == nil {
			return graphql.Null
		}
		return ec._Reminder(ctx, sel, obj)
	case model.ServiceLineItem:
		return ec._ServiceLineItem(ctx, sel, &obj)
	case *model.ServiceLineItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._ServiceLineItem(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj model.Node) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.OrganizationPlanMilestone:
		return ec._OrganizationPlanMilestone(ctx, sel, &obj)
	case *model.OrganizationPlanMilestone:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationPlanMilestone(ctx, sel, obj)
	case model.Issue:
		return ec._Issue(ctx, sel, &obj)
	case *model.Issue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Issue(ctx, sel, obj)
	case model.Location:
		return ec._Location(ctx, sel, &obj)
	case *model.Location:
		if obj == nil {
			return graphql.Null
		}
		return ec._Location(ctx, sel, obj)
	case model.Contact:
		return ec._Contact(ctx, sel, &obj)
	case *model.Contact:
		if obj == nil {
			return graphql.Null
		}
		return ec._Contact(ctx, sel, obj)
	case model.MasterPlan:
		return ec._MasterPlan(ctx, sel, &obj)
	case *model.MasterPlan:
		if obj == nil {
			return graphql.Null
		}
		return ec._MasterPlan(ctx, sel, obj)
	case model.TenantBillingProfile:
		return ec._TenantBillingProfile(ctx, sel, &obj)
	case *model.TenantBillingProfile:
		if obj == nil {
			return graphql.Null
		}
		return ec._TenantBillingProfile(ctx, sel, obj)
	case model.Social:
		return ec._Social(ctx, sel, &obj)
	case *model.Social:
		if obj == nil {
			return graphql.Null
		}
		return ec._Social(ctx, sel, obj)
	case model.PageView:
		return ec._PageView(ctx, sel, &obj)
	case *model.PageView:
		if obj == nil {
			return graphql.Null
		}
		return ec._PageView(ctx, sel, obj)
	case model.OrganizationPlan:
		return ec._OrganizationPlan(ctx, sel, &obj)
	case *model.OrganizationPlan:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationPlan(ctx, sel, obj)
	case model.Metadata:
		return ec._Metadata(ctx, sel, &obj)
	case *model.Metadata:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metadata(ctx, sel, obj)
	case model.BillingProfile:
		return ec._BillingProfile(ctx, sel, &obj)
	case *model.BillingProfile:
		if obj == nil {
			return graphql.Null
		}
		return ec._BillingProfile(ctx, sel, obj)
	case model.MasterPlanMilestone:
		return ec._MasterPlanMilestone(ctx, sel, &obj)
	case *model.MasterPlanMilestone:
		if obj == nil {
			return graphql.Null
		}
		return ec._MasterPlanMilestone(ctx, sel, obj)
	case model.InvoicingCycle:
		return ec._InvoicingCycle(ctx, sel, &obj)
	case *model.InvoicingCycle:
		if obj == nil {
			return graphql.Null
		}
		return ec._InvoicingCycle(ctx, sel, obj)
	case model.InteractionSession:
		return ec._InteractionSession(ctx, sel, &obj)
	case *model.InteractionSession:
		if obj == nil {
			return graphql.Null
		}
		return ec._InteractionSession(ctx, sel, obj)
	case model.Attachment:
		return ec._Attachment(ctx, sel, &obj)
	case *model.Attachment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Attachment(ctx, sel, obj)
	case model.CustomField:
		return ec._CustomField(ctx, sel, &obj)
	case *model.CustomField:
		if obj == nil {
			return graphql.Null
		}
		return ec._CustomField(ctx, sel, obj)
	case model.ExtensibleEntity:
		if obj == nil {
			return graphql.Null
		}
		return ec._ExtensibleEntity(ctx, sel, obj)
	case model.Meeting:
		return ec._Meeting(ctx, sel, &obj)
	case *model.Meeting:
		if obj == nil {
			return graphql.Null
		}
		return ec._Meeting(ctx, sel, obj)
	case model.InteractionEvent:
		return ec._InteractionEvent(ctx, sel, &obj)
	case *model.InteractionEvent:
		if obj == nil {
			return graphql.Null
		}
		return ec._InteractionEvent(ctx, sel, obj)
	case model.Opportunity:
		return ec._Opportunity(ctx, sel, &obj)
	case *model.Opportunity:
		if obj == nil {
			return graphql.Null
		}
		return ec._Opportunity(ctx, sel, obj)
	case model.SourceFields:
		if obj == nil {
			return graphql.Null
		}
		return ec._SourceFields(ctx, sel, obj)
	case model.Analysis:
		return ec._Analysis(ctx, sel, &obj)
	case *model.Analysis:
		if obj == nil {
			return graphql.Null
		}
		return ec._Analysis(ctx, sel, obj)
	case model.FieldSetTemplate:
		return ec._FieldSetTemplate(ctx, sel, &obj)
	case *model.FieldSetTemplate:
		if obj == nil {
			return graphql.Null
		}
		return ec._FieldSetTemplate(ctx, sel, obj)
	case model.EntityTemplate:
		return ec._EntityTemplate(ctx, sel, &obj)
	case *model.EntityTemplate:
		if obj == nil {
			return graphql.Null
		}
		return ec._EntityTemplate(ctx, sel, obj)
	case model.CustomFieldTemplate:
		return ec._CustomFieldTemplate(ctx, sel, &obj)
	case *model.CustomFieldTemplate:
		if obj == nil {
			return graphql.Null
		}
		return ec._CustomFieldTemplate(ctx, sel, obj)
	case model.TableViewDef:
		return ec._TableViewDef(ctx, sel, &obj)
	case *model.TableViewDef:
		if obj == nil {
			return graphql.Null
		}
		return ec._TableViewDef(ctx, sel, obj)
	case model.ViewType:
		return ec._ViewType(ctx, sel, &obj)
	case *model.ViewType:
		if obj == nil {
			return graphql.Null
		}
		return ec._ViewType(ctx, sel, obj)
	case model.ColumnDef:
		return ec._ColumnDef(ctx, sel, &obj)
	case *model.ColumnDef:
		if obj == nil {
			return graphql.Null
		}
		return ec._ColumnDef(ctx, sel, obj)
	case model.ColumnType:
		return ec._ColumnType(ctx, sel, &obj)
	case *model.ColumnType:
		if obj == nil {
			return graphql.Null
		}
		return ec._ColumnType(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _NotedEntity(ctx context.Context, sel ast.SelectionSet, obj model.NotedEntity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Contact:
		return ec._Contact(ctx, sel, &obj)
	case *model.Contact:
		if obj == nil {
			return graphql.Null
		}
		return ec._Contact(ctx, sel, obj)
	case model.Organization:
		return ec._Organization(ctx, sel, &obj)
	case *model.Organization:
		if obj == nil {
			return graphql.Null
		}
		return ec._Organization(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Pages(ctx context.Context, sel ast.SelectionSet, obj model.Pages) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.ContactsPage:
		return ec._ContactsPage(ctx, sel, &obj)
	case *model.ContactsPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._ContactsPage(ctx, sel, obj)
	case model.RenewalsPage:
		return ec._RenewalsPage(ctx, sel, &obj)
	case *model.RenewalsPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._RenewalsPage(ctx, sel, obj)
	case model.InvoicesPage:
		return ec._InvoicesPage(ctx, sel, &obj)
	case *model.InvoicesPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._InvoicesPage(ctx, sel, obj)
	case model.MeetingsPage:
		return ec._MeetingsPage(ctx, sel, &obj)
	case *model.MeetingsPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._MeetingsPage(ctx, sel, obj)
	case model.NotePage:
		return ec._NotePage(ctx, sel, &obj)
	case *model.NotePage:
		if obj == nil {
			return graphql.Null
		}
		return ec._NotePage(ctx, sel, obj)
	case model.OrganizationPage:
		return ec._OrganizationPage(ctx, sel, &obj)
	case *model.OrganizationPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationPage(ctx, sel, obj)
	case model.SlackChannelPage:
		return ec._SlackChannelPage(ctx, sel, &obj)
	case *model.SlackChannelPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._SlackChannelPage(ctx, sel, obj)
	case model.UserPage:
		return ec._UserPage(ctx, sel, &obj)
	case *model.UserPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._UserPage(ctx, sel, obj)
	case model.TableViewDefPage:
		return ec._TableViewDefPage(ctx, sel, &obj)
	case *model.TableViewDefPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._TableViewDefPage(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SourceFields(ctx context.Context, sel ast.SelectionSet, obj model.SourceFields) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.BillingProfile:
		return ec._BillingProfile(ctx, sel, &obj)
	case *model.BillingProfile:
		if obj == nil {
			return graphql.Null
		}
		return ec._BillingProfile(ctx, sel, obj)
	case model.InvoicingCycle:
		return ec._InvoicingCycle(ctx, sel, &obj)
	case *model.InvoicingCycle:
		if obj == nil {
			return graphql.Null
		}
		return ec._InvoicingCycle(ctx, sel, obj)
	case model.Issue:
		return ec._Issue(ctx, sel, &obj)
	case *model.Issue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Issue(ctx, sel, obj)
	case model.Location:
		return ec._Location(ctx, sel, &obj)
	case *model.Location:
		if obj == nil {
			return graphql.Null
		}
		return ec._Location(ctx, sel, obj)
	case model.MasterPlan:
		return ec._MasterPlan(ctx, sel, &obj)
	case *model.MasterPlan:
		if obj == nil {
			return graphql.Null
		}
		return ec._MasterPlan(ctx, sel, obj)
	case model.MasterPlanMilestone:
		return ec._MasterPlanMilestone(ctx, sel, &obj)
	case *model.MasterPlanMilestone:
		if obj == nil {
			return graphql.Null
		}
		return ec._MasterPlanMilestone(ctx, sel, obj)
	case model.OrganizationPlan:
		return ec._OrganizationPlan(ctx, sel, &obj)
	case *model.OrganizationPlan:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationPlan(ctx, sel, obj)
	case model.OrganizationPlanMilestone:
		return ec._OrganizationPlanMilestone(ctx, sel, &obj)
	case *model.OrganizationPlanMilestone:
		if obj == nil {
			return graphql.Null
		}
		return ec._OrganizationPlanMilestone(ctx, sel, obj)
	case model.PageView:
		return ec._PageView(ctx, sel, &obj)
	case *model.PageView:
		if obj == nil {
			return graphql.Null
		}
		return ec._PageView(ctx, sel, obj)
	case model.Social:
		return ec._Social(ctx, sel, &obj)
	case *model.Social:
		if obj == nil {
			return graphql.Null
		}
		return ec._Social(ctx, sel, obj)
	case model.TenantBillingProfile:
		return ec._TenantBillingProfile(ctx, sel, &obj)
	case *model.TenantBillingProfile:
		if obj == nil {
			return graphql.Null
		}
		return ec._TenantBillingProfile(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _SourceFieldsInterface(ctx context.Context, sel ast.SelectionSet, obj model.SourceFieldsInterface) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Metadata:
		return ec._Metadata(ctx, sel, &obj)
	case *model.Metadata:
		if obj == nil {
			return graphql.Null
		}
		return ec._Metadata(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _TimelineEvent(ctx context.Context, sel ast.SelectionSet, obj model.TimelineEvent) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.PageView:
		return ec._PageView(ctx, sel, &obj)
	case *model.PageView:
		if obj == nil {
			return graphql.Null
		}
		return ec._PageView(ctx, sel, obj)
	case model.Issue:
		return ec._Issue(ctx, sel, &obj)
	case *model.Issue:
		if obj == nil {
			return graphql.Null
		}
		return ec._Issue(ctx, sel, obj)
	case model.InteractionSession:
		return ec._InteractionSession(ctx, sel, &obj)
	case *model.InteractionSession:
		if obj == nil {
			return graphql.Null
		}
		return ec._InteractionSession(ctx, sel, obj)
	case model.InteractionEvent:
		return ec._InteractionEvent(ctx, sel, &obj)
	case *model.InteractionEvent:
		if obj == nil {
			return graphql.Null
		}
		return ec._InteractionEvent(ctx, sel, obj)
	case model.Analysis:
		return ec._Analysis(ctx, sel, &obj)
	case *model.Analysis:
		if obj == nil {
			return graphql.Null
		}
		return ec._Analysis(ctx, sel, obj)
	case model.Meeting:
		return ec._Meeting(ctx, sel, &obj)
	case *model.Meeting:
		if obj == nil {
			return graphql.Null
		}
		return ec._Meeting(ctx, sel, obj)
	case model.Note:
		return ec._Note(ctx, sel, &obj)
	case *model.Note:
		if obj == nil {
			return graphql.Null
		}
		return ec._Note(ctx, sel, obj)
	case model.Action:
		return ec._Action(ctx, sel, &obj)
	case *model.Action:
		if obj == nil {
			return graphql.Null
		}
		return ec._Action(ctx, sel, obj)
	case model.LogEntry:
		return ec._LogEntry(ctx, sel, &obj)
	case *model.LogEntry:
		if obj == nil {
			return graphql.Null
		}
		return ec._LogEntry(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var actionImplementors = []string{"Action", "TimelineEvent"}

func (ec *executionContext) _Action(ctx context.Context, sel ast.SelectionSet, obj *model.Action) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Action")
		case "id":
			out.Values[i] = ec._Action_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Action_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._Action_content(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Action_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Action_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdBy":
			out.Values[i] = ec._Action_createdBy(ctx, field, obj)
		case "actionType":
			out.Values[i] = ec._Action_actionType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "metadata":
			out.Values[i] = ec._Action_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionItemImplementors = []string{"ActionItem"}

func (ec *executionContext) _ActionItem(ctx context.Context, sel ast.SelectionSet, obj *model.ActionItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionItem")
		case "id":
			out.Values[i] = ec._ActionItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._ActionItem_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._ActionItem_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._ActionItem_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._ActionItem_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var analysisImplementors = []string{"Analysis", "Node", "TimelineEvent"}

func (ec *executionContext) _Analysis(ctx context.Context, sel ast.SelectionSet, obj *model.Analysis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, analysisImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Analysis")
		case "id":
			out.Values[i] = ec._Analysis_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Analysis_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "content":
			out.Values[i] = ec._Analysis_content(ctx, field, obj)
		case "contentType":
			out.Values[i] = ec._Analysis_contentType(ctx, field, obj)
		case "analysisType":
			out.Values[i] = ec._Analysis_analysisType(ctx, field, obj)
		case "describes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Analysis_describes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._Analysis_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Analysis_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Analysis_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attachmentImplementors = []string{"Attachment", "Node"}

func (ec *executionContext) _Attachment(ctx context.Context, sel ast.SelectionSet, obj *model.Attachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attachment")
		case "id":
			out.Values[i] = ec._Attachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Attachment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "basePath":
			out.Values[i] = ec._Attachment_basePath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cdnUrl":
			out.Values[i] = ec._Attachment_cdnUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fileName":
			out.Values[i] = ec._Attachment_fileName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._Attachment_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "size":
			out.Values[i] = ec._Attachment_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Attachment_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Attachment_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Attachment_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bankAccountImplementors = []string{"BankAccount", "MetadataInterface"}

func (ec *executionContext) _BankAccount(ctx context.Context, sel ast.SelectionSet, obj *model.BankAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bankAccountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BankAccount")
		case "metadata":
			out.Values[i] = ec._BankAccount_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankName":
			out.Values[i] = ec._BankAccount_bankName(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._BankAccount_currency(ctx, field, obj)
		case "bankTransferEnabled":
			out.Values[i] = ec._BankAccount_bankTransferEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allowInternational":
			out.Values[i] = ec._BankAccount_allowInternational(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "iban":
			out.Values[i] = ec._BankAccount_iban(ctx, field, obj)
		case "bic":
			out.Values[i] = ec._BankAccount_bic(ctx, field, obj)
		case "sortCode":
			out.Values[i] = ec._BankAccount_sortCode(ctx, field, obj)
		case "accountNumber":
			out.Values[i] = ec._BankAccount_accountNumber(ctx, field, obj)
		case "routingNumber":
			out.Values[i] = ec._BankAccount_routingNumber(ctx, field, obj)
		case "otherDetails":
			out.Values[i] = ec._BankAccount_otherDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var billingDetailsImplementors = []string{"BillingDetails"}

func (ec *executionContext) _BillingDetails(ctx context.Context, sel ast.SelectionSet, obj *model.BillingDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingDetails")
		case "billingCycle":
			out.Values[i] = ec._BillingDetails_billingCycle(ctx, field, obj)
		case "invoicingStarted":
			out.Values[i] = ec._BillingDetails_invoicingStarted(ctx, field, obj)
		case "nextInvoicing":
			out.Values[i] = ec._BillingDetails_nextInvoicing(ctx, field, obj)
		case "addressLine1":
			out.Values[i] = ec._BillingDetails_addressLine1(ctx, field, obj)
		case "addressLine2":
			out.Values[i] = ec._BillingDetails_addressLine2(ctx, field, obj)
		case "locality":
			out.Values[i] = ec._BillingDetails_locality(ctx, field, obj)
		case "region":
			out.Values[i] = ec._BillingDetails_region(ctx, field, obj)
		case "country":
			out.Values[i] = ec._BillingDetails_country(ctx, field, obj)
		case "postalCode":
			out.Values[i] = ec._BillingDetails_postalCode(ctx, field, obj)
		case "organizationLegalName":
			out.Values[i] = ec._BillingDetails_organizationLegalName(ctx, field, obj)
		case "billingEmail":
			out.Values[i] = ec._BillingDetails_billingEmail(ctx, field, obj)
		case "invoiceNote":
			out.Values[i] = ec._BillingDetails_invoiceNote(ctx, field, obj)
		case "canPayWithCard":
			out.Values[i] = ec._BillingDetails_canPayWithCard(ctx, field, obj)
		case "canPayWithDirectDebit":
			out.Values[i] = ec._BillingDetails_canPayWithDirectDebit(ctx, field, obj)
		case "canPayWithBankTransfer":
			out.Values[i] = ec._BillingDetails_canPayWithBankTransfer(ctx, field, obj)
		case "payOnline":
			out.Values[i] = ec._BillingDetails_payOnline(ctx, field, obj)
		case "payAutomatically":
			out.Values[i] = ec._BillingDetails_payAutomatically(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var billingProfileImplementors = []string{"BillingProfile", "SourceFields", "Node"}

func (ec *executionContext) _BillingProfile(ctx context.Context, sel ast.SelectionSet, obj *model.BillingProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, billingProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BillingProfile")
		case "id":
			out.Values[i] = ec._BillingProfile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._BillingProfile_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._BillingProfile_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "legalName":
			out.Values[i] = ec._BillingProfile_legalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taxId":
			out.Values[i] = ec._BillingProfile_taxId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._BillingProfile_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._BillingProfile_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._BillingProfile_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var calendarImplementors = []string{"Calendar"}

func (ec *executionContext) _Calendar(ctx context.Context, sel ast.SelectionSet, obj *model.Calendar) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, calendarImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Calendar")
		case "id":
			out.Values[i] = ec._Calendar_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "calType":
			out.Values[i] = ec._Calendar_calType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Calendar_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Calendar_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "link":
			out.Values[i] = ec._Calendar_link(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._Calendar_primary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Calendar_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Calendar_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Calendar_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var columnDefImplementors = []string{"ColumnDef", "Node"}

func (ec *executionContext) _ColumnDef(ctx context.Context, sel ast.SelectionSet, obj *model.ColumnDef) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, columnDefImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ColumnDef")
		case "id":
			out.Values[i] = ec._ColumnDef_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._ColumnDef_type(ctx, field, obj)
		case "columnType":
			out.Values[i] = ec._ColumnDef_columnType(ctx, field, obj)
		case "isFilterable":
			out.Values[i] = ec._ColumnDef_isFilterable(ctx, field, obj)
		case "isSortable":
			out.Values[i] = ec._ColumnDef_isSortable(ctx, field, obj)
		case "isDefaultSort":
			out.Values[i] = ec._ColumnDef_isDefaultSort(ctx, field, obj)
		case "isVisible":
			out.Values[i] = ec._ColumnDef_isVisible(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ColumnDef_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ColumnDef_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ColumnDef_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var columnTypeImplementors = []string{"ColumnType", "Node"}

func (ec *executionContext) _ColumnType(ctx context.Context, sel ast.SelectionSet, obj *model.ColumnType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, columnTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ColumnType")
		case "id":
			out.Values[i] = ec._ColumnType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ColumnType_name(ctx, field, obj)
		case "viewTypeId":
			out.Values[i] = ec._ColumnType_viewTypeId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ColumnType_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ColumnType_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ColumnType_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *model.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "id":
			out.Values[i] = ec._Comment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "content":
			out.Values[i] = ec._Comment_content(ctx, field, obj)
		case "contentType":
			out.Values[i] = ec._Comment_contentType(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Comment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Comment_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Comment_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._Comment_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Comment_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Comment_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Comment_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactImplementors = []string{"Contact", "ExtensibleEntity", "Node", "NotedEntity"}

func (ec *executionContext) _Contact(ctx context.Context, sel ast.SelectionSet, obj *model.Contact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contact")
		case "id":
			out.Values[i] = ec._Contact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Contact_title(ctx, field, obj)
		case "prefix":
			out.Values[i] = ec._Contact_prefix(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Contact_name(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._Contact_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Contact_lastName(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Contact_description(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._Contact_timezone(ctx, field, obj)
		case "profilePhotoUrl":
			out.Values[i] = ec._Contact_profilePhotoUrl(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Contact_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Contact_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._Contact_label(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Contact_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Contact_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Contact_appSource(ctx, field, obj)
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_tags(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "jobRoles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_jobRoles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "organizations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_organizations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "phoneNumbers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_phoneNumbers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "emails":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_emails(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "locations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_locations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "socials":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_socials(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customFields":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_customFields(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fieldSets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_fieldSets(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "template":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_template(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "owner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_owner(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "notes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_notes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "notesByTime":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_notesByTime(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timelineEvents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_timelineEvents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timelineEventsTotalCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contact_timelineEventsTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactParticipantImplementors = []string{"ContactParticipant", "InteractionEventParticipant", "InteractionSessionParticipant", "IssueParticipant", "MeetingParticipant"}

func (ec *executionContext) _ContactParticipant(ctx context.Context, sel ast.SelectionSet, obj *model.ContactParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactParticipant")
		case "contactParticipant":
			out.Values[i] = ec._ContactParticipant_contactParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._ContactParticipant_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contactsPageImplementors = []string{"ContactsPage", "Pages"}

func (ec *executionContext) _ContactsPage(ctx context.Context, sel ast.SelectionSet, obj *model.ContactsPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contactsPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ContactsPage")
		case "content":
			out.Values[i] = ec._ContactsPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._ContactsPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._ContactsPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var contractImplementors = []string{"Contract", "MetadataInterface"}

func (ec *executionContext) _Contract(ctx context.Context, sel ast.SelectionSet, obj *model.Contract) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contract")
		case "metadata":
			out.Values[i] = ec._Contract_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "billingDetails":
			out.Values[i] = ec._Contract_billingDetails(ctx, field, obj)
		case "committedPeriods":
			out.Values[i] = ec._Contract_committedPeriods(ctx, field, obj)
		case "contractEnded":
			out.Values[i] = ec._Contract_contractEnded(ctx, field, obj)
		case "contractLineItems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_contractLineItems(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contractName":
			out.Values[i] = ec._Contract_contractName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contractRenewalCycle":
			out.Values[i] = ec._Contract_contractRenewalCycle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contractSigned":
			out.Values[i] = ec._Contract_contractSigned(ctx, field, obj)
		case "contractUrl":
			out.Values[i] = ec._Contract_contractUrl(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Contract_currency(ctx, field, obj)
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "billingEnabled":
			out.Values[i] = ec._Contract_billingEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "opportunities":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_opportunities(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "owner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_owner(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "serviceStarted":
			out.Values[i] = ec._Contract_serviceStarted(ctx, field, obj)
		case "contractStatus":
			out.Values[i] = ec._Contract_contractStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Contract_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "serviceStartedAt":
			out.Values[i] = ec._Contract_serviceStartedAt(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Contract_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "signedAt":
			out.Values[i] = ec._Contract_signedAt(ctx, field, obj)
		case "renewalCycle":
			out.Values[i] = ec._Contract_renewalCycle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "organizationLegalName":
			out.Values[i] = ec._Contract_organizationLegalName(ctx, field, obj)
		case "invoiceEmail":
			out.Values[i] = ec._Contract_invoiceEmail(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Contract_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Contract_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Contract_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._Contract_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Contract_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Contract_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renewalPeriods":
			out.Values[i] = ec._Contract_renewalPeriods(ctx, field, obj)
		case "endedAt":
			out.Values[i] = ec._Contract_endedAt(ctx, field, obj)
		case "serviceLineItems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Contract_serviceLineItems(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "invoiceNote":
			out.Values[i] = ec._Contract_invoiceNote(ctx, field, obj)
		case "billingCycle":
			out.Values[i] = ec._Contract_billingCycle(ctx, field, obj)
		case "invoicingStartDate":
			out.Values[i] = ec._Contract_invoicingStartDate(ctx, field, obj)
		case "addressLine1":
			out.Values[i] = ec._Contract_addressLine1(ctx, field, obj)
		case "addressLine2":
			out.Values[i] = ec._Contract_addressLine2(ctx, field, obj)
		case "zip":
			out.Values[i] = ec._Contract_zip(ctx, field, obj)
		case "locality":
			out.Values[i] = ec._Contract_locality(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Contract_country(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var countryImplementors = []string{"Country"}

func (ec *executionContext) _Country(ctx context.Context, sel ast.SelectionSet, obj *model.Country) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, countryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Country")
		case "id":
			out.Values[i] = ec._Country_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Country_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "codeA2":
			out.Values[i] = ec._Country_codeA2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "codeA3":
			out.Values[i] = ec._Country_codeA3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneCode":
			out.Values[i] = ec._Country_phoneCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customFieldImplementors = []string{"CustomField", "Node"}

func (ec *executionContext) _CustomField(ctx context.Context, sel ast.SelectionSet, obj *model.CustomField) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customFieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomField")
		case "id":
			out.Values[i] = ec._CustomField_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._CustomField_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "datatype":
			out.Values[i] = ec._CustomField_datatype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "value":
			out.Values[i] = ec._CustomField_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._CustomField_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._CustomField_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._CustomField_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "template":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CustomField_template(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customFieldTemplateImplementors = []string{"CustomFieldTemplate", "Node"}

func (ec *executionContext) _CustomFieldTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.CustomFieldTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customFieldTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomFieldTemplate")
		case "id":
			out.Values[i] = ec._CustomFieldTemplate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._CustomFieldTemplate_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._CustomFieldTemplate_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._CustomFieldTemplate_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._CustomFieldTemplate_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "order":
			out.Values[i] = ec._CustomFieldTemplate_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mandatory":
			out.Values[i] = ec._CustomFieldTemplate_mandatory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "length":
			out.Values[i] = ec._CustomFieldTemplate_length(ctx, field, obj)
		case "min":
			out.Values[i] = ec._CustomFieldTemplate_min(ctx, field, obj)
		case "max":
			out.Values[i] = ec._CustomFieldTemplate_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerContactImplementors = []string{"CustomerContact"}

func (ec *executionContext) _CustomerContact(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerContactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerContact")
		case "id":
			out.Values[i] = ec._CustomerContact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._CustomerContact_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerEmailImplementors = []string{"CustomerEmail"}

func (ec *executionContext) _CustomerEmail(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerEmail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerEmailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerEmail")
		case "id":
			out.Values[i] = ec._CustomerEmail_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerJobRoleImplementors = []string{"CustomerJobRole"}

func (ec *executionContext) _CustomerJobRole(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerJobRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerJobRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerJobRole")
		case "id":
			out.Values[i] = ec._CustomerJobRole_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var customerUserImplementors = []string{"CustomerUser"}

func (ec *executionContext) _CustomerUser(ctx context.Context, sel ast.SelectionSet, obj *model.CustomerUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, customerUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CustomerUser")
		case "id":
			out.Values[i] = ec._CustomerUser_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jobRole":
			out.Values[i] = ec._CustomerUser_jobRole(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardARRBreakdownImplementors = []string{"DashboardARRBreakdown"}

func (ec *executionContext) _DashboardARRBreakdown(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardARRBreakdown) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardARRBreakdownImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardARRBreakdown")
		case "arrBreakdown":
			out.Values[i] = ec._DashboardARRBreakdown_arrBreakdown(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "increasePercentage":
			out.Values[i] = ec._DashboardARRBreakdown_increasePercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "perMonth":
			out.Values[i] = ec._DashboardARRBreakdown_perMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardARRBreakdownPerMonthImplementors = []string{"DashboardARRBreakdownPerMonth"}

func (ec *executionContext) _DashboardARRBreakdownPerMonth(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardARRBreakdownPerMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardARRBreakdownPerMonthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardARRBreakdownPerMonth")
		case "year":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "newlyContracted":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_newlyContracted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "renewals":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_renewals(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "upsells":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_upsells(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "downgrades":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_downgrades(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cancellations":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_cancellations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "churned":
			out.Values[i] = ec._DashboardARRBreakdownPerMonth_churned(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardCustomerMapImplementors = []string{"DashboardCustomerMap"}

func (ec *executionContext) _DashboardCustomerMap(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardCustomerMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardCustomerMapImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardCustomerMap")
		case "organizationId":
			out.Values[i] = ec._DashboardCustomerMap_organizationId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "organization":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DashboardCustomerMap_organization(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "state":
			out.Values[i] = ec._DashboardCustomerMap_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "arr":
			out.Values[i] = ec._DashboardCustomerMap_arr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contractSignedDate":
			out.Values[i] = ec._DashboardCustomerMap_contractSignedDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardGrossRevenueRetentionImplementors = []string{"DashboardGrossRevenueRetention"}

func (ec *executionContext) _DashboardGrossRevenueRetention(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardGrossRevenueRetention) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardGrossRevenueRetentionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardGrossRevenueRetention")
		case "grossRevenueRetention":
			out.Values[i] = ec._DashboardGrossRevenueRetention_grossRevenueRetention(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "increasePercentage":
			out.Values[i] = ec._DashboardGrossRevenueRetention_increasePercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "increasePercentageValue":
			out.Values[i] = ec._DashboardGrossRevenueRetention_increasePercentageValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "perMonth":
			out.Values[i] = ec._DashboardGrossRevenueRetention_perMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardGrossRevenueRetentionPerMonthImplementors = []string{"DashboardGrossRevenueRetentionPerMonth"}

func (ec *executionContext) _DashboardGrossRevenueRetentionPerMonth(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardGrossRevenueRetentionPerMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardGrossRevenueRetentionPerMonthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardGrossRevenueRetentionPerMonth")
		case "year":
			out.Values[i] = ec._DashboardGrossRevenueRetentionPerMonth_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._DashboardGrossRevenueRetentionPerMonth_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "percentage":
			out.Values[i] = ec._DashboardGrossRevenueRetentionPerMonth_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardMRRPerCustomerImplementors = []string{"DashboardMRRPerCustomer"}

func (ec *executionContext) _DashboardMRRPerCustomer(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardMRRPerCustomer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardMRRPerCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardMRRPerCustomer")
		case "mrrPerCustomer":
			out.Values[i] = ec._DashboardMRRPerCustomer_mrrPerCustomer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "increasePercentage":
			out.Values[i] = ec._DashboardMRRPerCustomer_increasePercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "perMonth":
			out.Values[i] = ec._DashboardMRRPerCustomer_perMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardMRRPerCustomerPerMonthImplementors = []string{"DashboardMRRPerCustomerPerMonth"}

func (ec *executionContext) _DashboardMRRPerCustomerPerMonth(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardMRRPerCustomerPerMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardMRRPerCustomerPerMonthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardMRRPerCustomerPerMonth")
		case "year":
			out.Values[i] = ec._DashboardMRRPerCustomerPerMonth_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._DashboardMRRPerCustomerPerMonth_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._DashboardMRRPerCustomerPerMonth_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardNewCustomersImplementors = []string{"DashboardNewCustomers"}

func (ec *executionContext) _DashboardNewCustomers(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardNewCustomers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardNewCustomersImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardNewCustomers")
		case "thisMonthCount":
			out.Values[i] = ec._DashboardNewCustomers_thisMonthCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "thisMonthIncreasePercentage":
			out.Values[i] = ec._DashboardNewCustomers_thisMonthIncreasePercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "perMonth":
			out.Values[i] = ec._DashboardNewCustomers_perMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardNewCustomersPerMonthImplementors = []string{"DashboardNewCustomersPerMonth"}

func (ec *executionContext) _DashboardNewCustomersPerMonth(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardNewCustomersPerMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardNewCustomersPerMonthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardNewCustomersPerMonth")
		case "year":
			out.Values[i] = ec._DashboardNewCustomersPerMonth_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._DashboardNewCustomersPerMonth_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._DashboardNewCustomersPerMonth_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardOnboardingCompletionImplementors = []string{"DashboardOnboardingCompletion"}

func (ec *executionContext) _DashboardOnboardingCompletion(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardOnboardingCompletion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardOnboardingCompletionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardOnboardingCompletion")
		case "completionPercentage":
			out.Values[i] = ec._DashboardOnboardingCompletion_completionPercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "increasePercentage":
			out.Values[i] = ec._DashboardOnboardingCompletion_increasePercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "perMonth":
			out.Values[i] = ec._DashboardOnboardingCompletion_perMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardOnboardingCompletionPerMonthImplementors = []string{"DashboardOnboardingCompletionPerMonth"}

func (ec *executionContext) _DashboardOnboardingCompletionPerMonth(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardOnboardingCompletionPerMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardOnboardingCompletionPerMonthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardOnboardingCompletionPerMonth")
		case "year":
			out.Values[i] = ec._DashboardOnboardingCompletionPerMonth_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._DashboardOnboardingCompletionPerMonth_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._DashboardOnboardingCompletionPerMonth_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardRetentionRateImplementors = []string{"DashboardRetentionRate"}

func (ec *executionContext) _DashboardRetentionRate(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardRetentionRate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardRetentionRateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardRetentionRate")
		case "retentionRate":
			out.Values[i] = ec._DashboardRetentionRate_retentionRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "increasePercentage":
			out.Values[i] = ec._DashboardRetentionRate_increasePercentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "increasePercentageValue":
			out.Values[i] = ec._DashboardRetentionRate_increasePercentageValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "perMonth":
			out.Values[i] = ec._DashboardRetentionRate_perMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardRetentionRatePerMonthImplementors = []string{"DashboardRetentionRatePerMonth"}

func (ec *executionContext) _DashboardRetentionRatePerMonth(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardRetentionRatePerMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardRetentionRatePerMonthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardRetentionRatePerMonth")
		case "year":
			out.Values[i] = ec._DashboardRetentionRatePerMonth_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._DashboardRetentionRatePerMonth_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "renewCount":
			out.Values[i] = ec._DashboardRetentionRatePerMonth_renewCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "churnCount":
			out.Values[i] = ec._DashboardRetentionRatePerMonth_churnCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardRevenueAtRiskImplementors = []string{"DashboardRevenueAtRisk"}

func (ec *executionContext) _DashboardRevenueAtRisk(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardRevenueAtRisk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardRevenueAtRiskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardRevenueAtRisk")
		case "highConfidence":
			out.Values[i] = ec._DashboardRevenueAtRisk_highConfidence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "atRisk":
			out.Values[i] = ec._DashboardRevenueAtRisk_atRisk(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardTimeToOnboardImplementors = []string{"DashboardTimeToOnboard"}

func (ec *executionContext) _DashboardTimeToOnboard(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardTimeToOnboard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardTimeToOnboardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardTimeToOnboard")
		case "timeToOnboard":
			out.Values[i] = ec._DashboardTimeToOnboard_timeToOnboard(ctx, field, obj)
		case "increasePercentage":
			out.Values[i] = ec._DashboardTimeToOnboard_increasePercentage(ctx, field, obj)
		case "perMonth":
			out.Values[i] = ec._DashboardTimeToOnboard_perMonth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dashboardTimeToOnboardPerMonthImplementors = []string{"DashboardTimeToOnboardPerMonth"}

func (ec *executionContext) _DashboardTimeToOnboardPerMonth(ctx context.Context, sel ast.SelectionSet, obj *model.DashboardTimeToOnboardPerMonth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dashboardTimeToOnboardPerMonthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DashboardTimeToOnboardPerMonth")
		case "year":
			out.Values[i] = ec._DashboardTimeToOnboardPerMonth_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "month":
			out.Values[i] = ec._DashboardTimeToOnboardPerMonth_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._DashboardTimeToOnboardPerMonth_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteResponseImplementors = []string{"DeleteResponse"}

func (ec *executionContext) _DeleteResponse(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteResponse")
		case "accepted":
			out.Values[i] = ec._DeleteResponse_accepted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completed":
			out.Values[i] = ec._DeleteResponse_completed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emailImplementors = []string{"Email"}

func (ec *executionContext) _Email(ctx context.Context, sel ast.SelectionSet, obj *model.Email) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Email")
		case "id":
			out.Values[i] = ec._Email_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Email_email(ctx, field, obj)
		case "rawEmail":
			out.Values[i] = ec._Email_rawEmail(ctx, field, obj)
		case "emailValidationDetails":
			out.Values[i] = ec._Email_emailValidationDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "label":
			out.Values[i] = ec._Email_label(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._Email_primary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._Email_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Email_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Email_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Email_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Email_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Email_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Email_contacts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "organizations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Email_organizations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emailParticipantImplementors = []string{"EmailParticipant", "InteractionEventParticipant", "InteractionSessionParticipant", "MeetingParticipant"}

func (ec *executionContext) _EmailParticipant(ctx context.Context, sel ast.SelectionSet, obj *model.EmailParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailParticipant")
		case "emailParticipant":
			out.Values[i] = ec._EmailParticipant_emailParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._EmailParticipant_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emailValidationDetailsImplementors = []string{"EmailValidationDetails"}

func (ec *executionContext) _EmailValidationDetails(ctx context.Context, sel ast.SelectionSet, obj *model.EmailValidationDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailValidationDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailValidationDetails")
		case "validated":
			out.Values[i] = ec._EmailValidationDetails_validated(ctx, field, obj)
		case "isReachable":
			out.Values[i] = ec._EmailValidationDetails_isReachable(ctx, field, obj)
		case "isValidSyntax":
			out.Values[i] = ec._EmailValidationDetails_isValidSyntax(ctx, field, obj)
		case "canConnectSmtp":
			out.Values[i] = ec._EmailValidationDetails_canConnectSmtp(ctx, field, obj)
		case "acceptsMail":
			out.Values[i] = ec._EmailValidationDetails_acceptsMail(ctx, field, obj)
		case "hasFullInbox":
			out.Values[i] = ec._EmailValidationDetails_hasFullInbox(ctx, field, obj)
		case "isCatchAll":
			out.Values[i] = ec._EmailValidationDetails_isCatchAll(ctx, field, obj)
		case "isDeliverable":
			out.Values[i] = ec._EmailValidationDetails_isDeliverable(ctx, field, obj)
		case "isDisabled":
			out.Values[i] = ec._EmailValidationDetails_isDisabled(ctx, field, obj)
		case "error":
			out.Values[i] = ec._EmailValidationDetails_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var entityTemplateImplementors = []string{"EntityTemplate", "Node"}

func (ec *executionContext) _EntityTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.EntityTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EntityTemplate")
		case "id":
			out.Values[i] = ec._EntityTemplate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "version":
			out.Values[i] = ec._EntityTemplate_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._EntityTemplate_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "extends":
			out.Values[i] = ec._EntityTemplate_extends(ctx, field, obj)
		case "fieldSetTemplates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EntityTemplate_fieldSetTemplates(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customFieldTemplates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EntityTemplate_customFieldTemplates(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._EntityTemplate_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._EntityTemplate_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var externalSystemImplementors = []string{"ExternalSystem"}

func (ec *executionContext) _ExternalSystem(ctx context.Context, sel ast.SelectionSet, obj *model.ExternalSystem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, externalSystemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExternalSystem")
		case "type":
			out.Values[i] = ec._ExternalSystem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "syncDate":
			out.Values[i] = ec._ExternalSystem_syncDate(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._ExternalSystem_externalId(ctx, field, obj)
		case "externalUrl":
			out.Values[i] = ec._ExternalSystem_externalUrl(ctx, field, obj)
		case "externalSource":
			out.Values[i] = ec._ExternalSystem_externalSource(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var externalSystemInstanceImplementors = []string{"ExternalSystemInstance"}

func (ec *executionContext) _ExternalSystemInstance(ctx context.Context, sel ast.SelectionSet, obj *model.ExternalSystemInstance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, externalSystemInstanceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExternalSystemInstance")
		case "type":
			out.Values[i] = ec._ExternalSystemInstance_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "stripeDetails":
			out.Values[i] = ec._ExternalSystemInstance_stripeDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var externalSystemStripeDetailsImplementors = []string{"ExternalSystemStripeDetails"}

func (ec *executionContext) _ExternalSystemStripeDetails(ctx context.Context, sel ast.SelectionSet, obj *model.ExternalSystemStripeDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, externalSystemStripeDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExternalSystemStripeDetails")
		case "paymentMethodTypes":
			out.Values[i] = ec._ExternalSystemStripeDetails_paymentMethodTypes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldSetImplementors = []string{"FieldSet"}

func (ec *executionContext) _FieldSet(ctx context.Context, sel ast.SelectionSet, obj *model.FieldSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldSetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldSet")
		case "id":
			out.Values[i] = ec._FieldSet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._FieldSet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._FieldSet_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._FieldSet_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "customFields":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FieldSet_customFields(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "template":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FieldSet_template(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._FieldSet_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldSetTemplateImplementors = []string{"FieldSetTemplate", "Node"}

func (ec *executionContext) _FieldSetTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.FieldSetTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldSetTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldSetTemplate")
		case "id":
			out.Values[i] = ec._FieldSetTemplate_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._FieldSetTemplate_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._FieldSetTemplate_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._FieldSetTemplate_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "order":
			out.Values[i] = ec._FieldSetTemplate_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "customFieldTemplates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FieldSetTemplate_customFieldTemplates(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gCliAttributeKeyValuePairImplementors = []string{"GCliAttributeKeyValuePair"}

func (ec *executionContext) _GCliAttributeKeyValuePair(ctx context.Context, sel ast.SelectionSet, obj *model.GCliAttributeKeyValuePair) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gCliAttributeKeyValuePairImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GCliAttributeKeyValuePair")
		case "key":
			out.Values[i] = ec._GCliAttributeKeyValuePair_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._GCliAttributeKeyValuePair_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "display":
			out.Values[i] = ec._GCliAttributeKeyValuePair_display(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gCliItemImplementors = []string{"GCliItem"}

func (ec *executionContext) _GCliItem(ctx context.Context, sel ast.SelectionSet, obj *model.GCliItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gCliItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GCliItem")
		case "id":
			out.Values[i] = ec._GCliItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._GCliItem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "display":
			out.Values[i] = ec._GCliItem_display(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._GCliItem_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var globalCacheImplementors = []string{"GlobalCache"}

func (ec *executionContext) _GlobalCache(ctx context.Context, sel ast.SelectionSet, obj *model.GlobalCache) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, globalCacheImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GlobalCache")
		case "user":
			out.Values[i] = ec._GlobalCache_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isOwner":
			out.Values[i] = ec._GlobalCache_isOwner(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isGoogleActive":
			out.Values[i] = ec._GlobalCache_isGoogleActive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isGoogleTokenExpired":
			out.Values[i] = ec._GlobalCache_isGoogleTokenExpired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gCliCache":
			out.Values[i] = ec._GlobalCache_gCliCache(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minARRForecastValue":
			out.Values[i] = ec._GlobalCache_minARRForecastValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxARRForecastValue":
			out.Values[i] = ec._GlobalCache_maxARRForecastValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contractsExist":
			out.Values[i] = ec._GlobalCache_contractsExist(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cdnLogoUrl":
			out.Values[i] = ec._GlobalCache_cdnLogoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var interactionEventImplementors = []string{"InteractionEvent", "DescriptionNode", "Node", "TimelineEvent"}

func (ec *executionContext) _InteractionEvent(ctx context.Context, sel ast.SelectionSet, obj *model.InteractionEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interactionEventImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InteractionEvent")
		case "id":
			out.Values[i] = ec._InteractionEvent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._InteractionEvent_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "eventIdentifier":
			out.Values[i] = ec._InteractionEvent_eventIdentifier(ctx, field, obj)
		case "content":
			out.Values[i] = ec._InteractionEvent_content(ctx, field, obj)
		case "contentType":
			out.Values[i] = ec._InteractionEvent_contentType(ctx, field, obj)
		case "channel":
			out.Values[i] = ec._InteractionEvent_channel(ctx, field, obj)
		case "channelData":
			out.Values[i] = ec._InteractionEvent_channelData(ctx, field, obj)
		case "interactionSession":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_interactionSession(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "issue":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_issue(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "meeting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_meeting(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sentBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_sentBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "sentTo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_sentTo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "repliesTo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_repliesTo(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "includes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_includes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "summary":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_summary(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "actionItems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_actionItems(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._InteractionEvent_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._InteractionEvent_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._InteractionEvent_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "eventType":
			out.Values[i] = ec._InteractionEvent_eventType(ctx, field, obj)
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionEvent_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var interactionSessionImplementors = []string{"InteractionSession", "DescriptionNode", "Node", "TimelineEvent"}

func (ec *executionContext) _InteractionSession(ctx context.Context, sel ast.SelectionSet, obj *model.InteractionSession) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interactionSessionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InteractionSession")
		case "id":
			out.Values[i] = ec._InteractionSession_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startedAt":
			out.Values[i] = ec._InteractionSession_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "endedAt":
			out.Values[i] = ec._InteractionSession_endedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._InteractionSession_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._InteractionSession_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sessionIdentifier":
			out.Values[i] = ec._InteractionSession_sessionIdentifier(ctx, field, obj)
		case "name":
			out.Values[i] = ec._InteractionSession_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._InteractionSession_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._InteractionSession_type(ctx, field, obj)
		case "channel":
			out.Values[i] = ec._InteractionSession_channel(ctx, field, obj)
		case "channelData":
			out.Values[i] = ec._InteractionSession_channelData(ctx, field, obj)
		case "source":
			out.Values[i] = ec._InteractionSession_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._InteractionSession_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._InteractionSession_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionSession_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "attendedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionSession_attendedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "includes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionSession_includes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "describedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._InteractionSession_describedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invoiceImplementors = []string{"Invoice", "MetadataInterface"}

func (ec *executionContext) _Invoice(ctx context.Context, sel ast.SelectionSet, obj *model.Invoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Invoice")
		case "metadata":
			out.Values[i] = ec._Invoice_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "organization":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Invoice_organization(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contract":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Invoice_contract(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dryRun":
			out.Values[i] = ec._Invoice_dryRun(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "postpaid":
			out.Values[i] = ec._Invoice_postpaid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "offCycle":
			out.Values[i] = ec._Invoice_offCycle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amountDue":
			out.Values[i] = ec._Invoice_amountDue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amountPaid":
			out.Values[i] = ec._Invoice_amountPaid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amountRemaining":
			out.Values[i] = ec._Invoice_amountRemaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "invoiceNumber":
			out.Values[i] = ec._Invoice_invoiceNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "invoicePeriodStart":
			out.Values[i] = ec._Invoice_invoicePeriodStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "invoicePeriodEnd":
			out.Values[i] = ec._Invoice_invoicePeriodEnd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "invoiceUrl":
			out.Values[i] = ec._Invoice_invoiceUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "due":
			out.Values[i] = ec._Invoice_due(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "currency":
			out.Values[i] = ec._Invoice_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "repositoryFileId":
			out.Values[i] = ec._Invoice_repositoryFileId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "invoiceLineItems":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Invoice_invoiceLineItems(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			out.Values[i] = ec._Invoice_status(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Invoice_note(ctx, field, obj)
		case "domesticPaymentsBankInfo":
			out.Values[i] = ec._Invoice_domesticPaymentsBankInfo(ctx, field, obj)
		case "internationalPaymentsBankInfo":
			out.Values[i] = ec._Invoice_internationalPaymentsBankInfo(ctx, field, obj)
		case "customer":
			out.Values[i] = ec._Invoice_customer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "provider":
			out.Values[i] = ec._Invoice_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "paid":
			out.Values[i] = ec._Invoice_paid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subtotal":
			out.Values[i] = ec._Invoice_subtotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "taxDue":
			out.Values[i] = ec._Invoice_taxDue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invoiceCustomerImplementors = []string{"InvoiceCustomer"}

func (ec *executionContext) _InvoiceCustomer(ctx context.Context, sel ast.SelectionSet, obj *model.InvoiceCustomer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceCustomer")
		case "name":
			out.Values[i] = ec._InvoiceCustomer_name(ctx, field, obj)
		case "email":
			out.Values[i] = ec._InvoiceCustomer_email(ctx, field, obj)
		case "addressLine1":
			out.Values[i] = ec._InvoiceCustomer_addressLine1(ctx, field, obj)
		case "addressLine2":
			out.Values[i] = ec._InvoiceCustomer_addressLine2(ctx, field, obj)
		case "addressZip":
			out.Values[i] = ec._InvoiceCustomer_addressZip(ctx, field, obj)
		case "addressLocality":
			out.Values[i] = ec._InvoiceCustomer_addressLocality(ctx, field, obj)
		case "addressCountry":
			out.Values[i] = ec._InvoiceCustomer_addressCountry(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invoiceLineImplementors = []string{"InvoiceLine", "MetadataInterface"}

func (ec *executionContext) _InvoiceLine(ctx context.Context, sel ast.SelectionSet, obj *model.InvoiceLine) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceLineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceLine")
		case "metadata":
			out.Values[i] = ec._InvoiceLine_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._InvoiceLine_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._InvoiceLine_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "quantity":
			out.Values[i] = ec._InvoiceLine_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtotal":
			out.Values[i] = ec._InvoiceLine_subtotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taxDue":
			out.Values[i] = ec._InvoiceLine_taxDue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "total":
			out.Values[i] = ec._InvoiceLine_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invoiceProviderImplementors = []string{"InvoiceProvider"}

func (ec *executionContext) _InvoiceProvider(ctx context.Context, sel ast.SelectionSet, obj *model.InvoiceProvider) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceProviderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceProvider")
		case "logoUrl":
			out.Values[i] = ec._InvoiceProvider_logoUrl(ctx, field, obj)
		case "logoRepositoryFileId":
			out.Values[i] = ec._InvoiceProvider_logoRepositoryFileId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._InvoiceProvider_name(ctx, field, obj)
		case "addressLine1":
			out.Values[i] = ec._InvoiceProvider_addressLine1(ctx, field, obj)
		case "addressLine2":
			out.Values[i] = ec._InvoiceProvider_addressLine2(ctx, field, obj)
		case "addressZip":
			out.Values[i] = ec._InvoiceProvider_addressZip(ctx, field, obj)
		case "addressLocality":
			out.Values[i] = ec._InvoiceProvider_addressLocality(ctx, field, obj)
		case "addressCountry":
			out.Values[i] = ec._InvoiceProvider_addressCountry(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invoicesPageImplementors = []string{"InvoicesPage", "Pages"}

func (ec *executionContext) _InvoicesPage(ctx context.Context, sel ast.SelectionSet, obj *model.InvoicesPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoicesPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoicesPage")
		case "content":
			out.Values[i] = ec._InvoicesPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._InvoicesPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._InvoicesPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var invoicingCycleImplementors = []string{"InvoicingCycle", "SourceFields", "Node"}

func (ec *executionContext) _InvoicingCycle(ctx context.Context, sel ast.SelectionSet, obj *model.InvoicingCycle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoicingCycleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoicingCycle")
		case "id":
			out.Values[i] = ec._InvoicingCycle_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._InvoicingCycle_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._InvoicingCycle_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._InvoicingCycle_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._InvoicingCycle_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._InvoicingCycle_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._InvoicingCycle_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var issueImplementors = []string{"Issue", "SourceFields", "Node", "TimelineEvent"}

func (ec *executionContext) _Issue(ctx context.Context, sel ast.SelectionSet, obj *model.Issue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Issue")
		case "id":
			out.Values[i] = ec._Issue_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Issue_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Issue_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subject":
			out.Values[i] = ec._Issue_subject(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Issue_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "priority":
			out.Values[i] = ec._Issue_priority(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Issue_description(ctx, field, obj)
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_tags(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "interactionEvents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_interactionEvents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "comments":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_comments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "submittedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_submittedBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "reportedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_reportedBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "assignedTo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_assignedTo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "followedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Issue_followedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._Issue_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Issue_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Issue_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var issueSummaryByStatusImplementors = []string{"IssueSummaryByStatus"}

func (ec *executionContext) _IssueSummaryByStatus(ctx context.Context, sel ast.SelectionSet, obj *model.IssueSummaryByStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueSummaryByStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IssueSummaryByStatus")
		case "status":
			out.Values[i] = ec._IssueSummaryByStatus_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._IssueSummaryByStatus_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobRoleImplementors = []string{"JobRole"}

func (ec *executionContext) _JobRole(ctx context.Context, sel ast.SelectionSet, obj *model.JobRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobRole")
		case "id":
			out.Values[i] = ec._JobRole_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._JobRole_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._JobRole_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "organization":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JobRole_organization(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contact":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JobRole_contact(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "jobTitle":
			out.Values[i] = ec._JobRole_jobTitle(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._JobRole_primary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._JobRole_description(ctx, field, obj)
		case "company":
			out.Values[i] = ec._JobRole_company(ctx, field, obj)
		case "startedAt":
			out.Values[i] = ec._JobRole_startedAt(ctx, field, obj)
		case "endedAt":
			out.Values[i] = ec._JobRole_endedAt(ctx, field, obj)
		case "source":
			out.Values[i] = ec._JobRole_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._JobRole_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._JobRole_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobRoleParticipantImplementors = []string{"JobRoleParticipant", "InteractionEventParticipant"}

func (ec *executionContext) _JobRoleParticipant(ctx context.Context, sel ast.SelectionSet, obj *model.JobRoleParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobRoleParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobRoleParticipant")
		case "jobRoleParticipant":
			out.Values[i] = ec._JobRoleParticipant_jobRoleParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._JobRoleParticipant_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var lastTouchpointImplementors = []string{"LastTouchpoint"}

func (ec *executionContext) _LastTouchpoint(ctx context.Context, sel ast.SelectionSet, obj *model.LastTouchpoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lastTouchpointImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LastTouchpoint")
		case "lastTouchPointAt":
			out.Values[i] = ec._LastTouchpoint_lastTouchPointAt(ctx, field, obj)
		case "lastTouchPointType":
			out.Values[i] = ec._LastTouchpoint_lastTouchPointType(ctx, field, obj)
		case "lastTouchPointTimelineEventId":
			out.Values[i] = ec._LastTouchpoint_lastTouchPointTimelineEventId(ctx, field, obj)
		case "lastTouchPointTimelineEvent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._LastTouchpoint_lastTouchPointTimelineEvent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var linkedOrganizationImplementors = []string{"LinkedOrganization"}

func (ec *executionContext) _LinkedOrganization(ctx context.Context, sel ast.SelectionSet, obj *model.LinkedOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkedOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LinkedOrganization")
		case "organization":
			out.Values[i] = ec._LinkedOrganization_organization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._LinkedOrganization_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var locationImplementors = []string{"Location", "SourceFields", "Node"}

func (ec *executionContext) _Location(ctx context.Context, sel ast.SelectionSet, obj *model.Location) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, locationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Location")
		case "id":
			out.Values[i] = ec._Location_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Location_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Location_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Location_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Location_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Location_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Location_name(ctx, field, obj)
		case "rawAddress":
			out.Values[i] = ec._Location_rawAddress(ctx, field, obj)
		case "country":
			out.Values[i] = ec._Location_country(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Location_region(ctx, field, obj)
		case "district":
			out.Values[i] = ec._Location_district(ctx, field, obj)
		case "locality":
			out.Values[i] = ec._Location_locality(ctx, field, obj)
		case "street":
			out.Values[i] = ec._Location_street(ctx, field, obj)
		case "address":
			out.Values[i] = ec._Location_address(ctx, field, obj)
		case "address2":
			out.Values[i] = ec._Location_address2(ctx, field, obj)
		case "zip":
			out.Values[i] = ec._Location_zip(ctx, field, obj)
		case "addressType":
			out.Values[i] = ec._Location_addressType(ctx, field, obj)
		case "houseNumber":
			out.Values[i] = ec._Location_houseNumber(ctx, field, obj)
		case "postalCode":
			out.Values[i] = ec._Location_postalCode(ctx, field, obj)
		case "plusFour":
			out.Values[i] = ec._Location_plusFour(ctx, field, obj)
		case "commercial":
			out.Values[i] = ec._Location_commercial(ctx, field, obj)
		case "predirection":
			out.Values[i] = ec._Location_predirection(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._Location_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._Location_longitude(ctx, field, obj)
		case "timeZone":
			out.Values[i] = ec._Location_timeZone(ctx, field, obj)
		case "utcOffset":
			out.Values[i] = ec._Location_utcOffset(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var logEntryImplementors = []string{"LogEntry", "TimelineEvent"}

func (ec *executionContext) _LogEntry(ctx context.Context, sel ast.SelectionSet, obj *model.LogEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logEntryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogEntry")
		case "id":
			out.Values[i] = ec._LogEntry_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "content":
			out.Values[i] = ec._LogEntry_content(ctx, field, obj)
		case "contentType":
			out.Values[i] = ec._LogEntry_contentType(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._LogEntry_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._LogEntry_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startedAt":
			out.Values[i] = ec._LogEntry_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._LogEntry_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._LogEntry_tags(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._LogEntry_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._LogEntry_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._LogEntry_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._LogEntry_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var masterPlanImplementors = []string{"MasterPlan", "SourceFields", "Node"}

func (ec *executionContext) _MasterPlan(ctx context.Context, sel ast.SelectionSet, obj *model.MasterPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, masterPlanImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MasterPlan")
		case "id":
			out.Values[i] = ec._MasterPlan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._MasterPlan_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._MasterPlan_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._MasterPlan_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._MasterPlan_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._MasterPlan_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._MasterPlan_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "retired":
			out.Values[i] = ec._MasterPlan_retired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "milestones":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MasterPlan_milestones(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "retiredMilestones":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MasterPlan_retiredMilestones(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var masterPlanMilestoneImplementors = []string{"MasterPlanMilestone", "SourceFields", "Node"}

func (ec *executionContext) _MasterPlanMilestone(ctx context.Context, sel ast.SelectionSet, obj *model.MasterPlanMilestone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, masterPlanMilestoneImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MasterPlanMilestone")
		case "id":
			out.Values[i] = ec._MasterPlanMilestone_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._MasterPlanMilestone_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._MasterPlanMilestone_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MasterPlanMilestone_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._MasterPlanMilestone_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._MasterPlanMilestone_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._MasterPlanMilestone_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "order":
			out.Values[i] = ec._MasterPlanMilestone_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "durationHours":
			out.Values[i] = ec._MasterPlanMilestone_durationHours(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "optional":
			out.Values[i] = ec._MasterPlanMilestone_optional(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._MasterPlanMilestone_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "retired":
			out.Values[i] = ec._MasterPlanMilestone_retired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var meetingImplementors = []string{"Meeting", "DescriptionNode", "Node", "TimelineEvent"}

func (ec *executionContext) _Meeting(ctx context.Context, sel ast.SelectionSet, obj *model.Meeting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meetingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meeting")
		case "id":
			out.Values[i] = ec._Meeting_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Meeting_name(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Meeting_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Meeting_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startedAt":
			out.Values[i] = ec._Meeting_startedAt(ctx, field, obj)
		case "endedAt":
			out.Values[i] = ec._Meeting_endedAt(ctx, field, obj)
		case "conferenceUrl":
			out.Values[i] = ec._Meeting_conferenceUrl(ctx, field, obj)
		case "meetingExternalUrl":
			out.Values[i] = ec._Meeting_meetingExternalUrl(ctx, field, obj)
		case "attendedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_attendedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_createdBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "includes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_includes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "describedBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_describedBy(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "note":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_note(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "events":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_events(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "recording":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_recording(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "appSource":
			out.Values[i] = ec._Meeting_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._Meeting_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Meeting_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "agenda":
			out.Values[i] = ec._Meeting_agenda(ctx, field, obj)
		case "agendaContentType":
			out.Values[i] = ec._Meeting_agendaContentType(ctx, field, obj)
		case "externalSystem":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Meeting_externalSystem(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "status":
			out.Values[i] = ec._Meeting_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var meetingsPageImplementors = []string{"MeetingsPage", "Pages"}

func (ec *executionContext) _MeetingsPage(ctx context.Context, sel ast.SelectionSet, obj *model.MeetingsPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, meetingsPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeetingsPage")
		case "content":
			out.Values[i] = ec._MeetingsPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._MeetingsPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._MeetingsPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metadataImplementors = []string{"Metadata", "SourceFieldsInterface", "Node"}

func (ec *executionContext) _Metadata(ctx context.Context, sel ast.SelectionSet, obj *model.Metadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metadataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metadata")
		case "id":
			out.Values[i] = ec._Metadata_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "created":
			out.Values[i] = ec._Metadata_created(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastUpdated":
			out.Values[i] = ec._Metadata_lastUpdated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Metadata_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Metadata_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Metadata_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "analysis_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_analysis_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attachment_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_attachment_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccount_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bankAccount_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccount_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bankAccount_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "bankAccount_Delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_bankAccount_Delete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "billingProfile_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_billingProfile_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "billingProfile_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_billingProfile_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "billingProfile_LinkEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_billingProfile_LinkEmail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "billingProfile_UnlinkEmail":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_billingProfile_UnlinkEmail(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "billingProfile_LinkLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_billingProfile_LinkLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "billingProfile_UnlinkLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_billingProfile_UnlinkLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customer_contact_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customer_contact_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_HardDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_HardDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_Archive":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_Archive(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_RestoreFromArchive":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_RestoreFromArchive(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_Merge":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_Merge(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_AddTagById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_AddTagById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_RemoveTagById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_RemoveTagById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_AddOrganizationById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_AddOrganizationById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_RemoveOrganizationById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_RemoveOrganizationById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_AddNewLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_AddNewLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_RemoveLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_RemoveLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contact_AddSocial":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contact_AddSocial(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contract_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contract_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contract_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contract_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contract_Delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contract_Delete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldsMergeAndUpdateInContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldsMergeAndUpdateInContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldMergeToContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldMergeToContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldUpdateInContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldUpdateInContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldDeleteFromContactByName":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldDeleteFromContactByName(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldDeleteFromContactById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldDeleteFromContactById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldMergeToFieldSet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldMergeToFieldSet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldUpdateInFieldSet":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldUpdateInFieldSet(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldDeleteFromFieldSetById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldDeleteFromFieldSetById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fieldSetMergeToContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_fieldSetMergeToContact(ctx, field)
			})
		case "fieldSetUpdateInContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_fieldSetUpdateInContact(ctx, field)
			})
		case "fieldSetDeleteFromContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_fieldSetDeleteFromContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customFieldTemplate_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customFieldTemplate_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailMergeToContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailMergeToContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailUpdateInContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailUpdateInContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailRemoveFromContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailRemoveFromContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailRemoveFromContactById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailRemoveFromContactById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailMergeToUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailMergeToUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailUpdateInUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailUpdateInUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailRemoveFromUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailRemoveFromUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailRemoveFromUserById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailRemoveFromUserById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailMergeToOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailMergeToOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailUpdateInOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailUpdateInOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailRemoveFromOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailRemoveFromOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailRemoveFromOrganizationById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailRemoveFromOrganizationById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "emailDelete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_emailDelete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "entityTemplateCreate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_entityTemplateCreate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interactionSession_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_interactionSession_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interactionSession_LinkAttachment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_interactionSession_LinkAttachment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interactionEvent_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_interactionEvent_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interactionEvent_LinkAttachment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_interactionEvent_LinkAttachment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invoice_NextDryRunForContract":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invoice_NextDryRunForContract(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invoice_Simulate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invoice_Simulate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invoice_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invoice_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invoice_Pay":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invoice_Pay(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invoice_Void":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invoice_Void(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invoicingCycle_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invoicingCycle_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invoicingCycle_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_invoicingCycle_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jobRole_Delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_jobRole_Delete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jobRole_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_jobRole_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "jobRole_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_jobRole_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location_RemoveFromContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_location_RemoveFromContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location_RemoveFromOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_location_RemoveFromOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "location_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_location_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logEntry_CreateForOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logEntry_CreateForOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logEntry_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logEntry_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logEntry_AddTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logEntry_AddTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logEntry_RemoveTag":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logEntry_RemoveTag(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logEntry_ResetTags":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logEntry_ResetTags(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlan_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlan_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlan_CreateDefault":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlan_CreateDefault(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlan_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlan_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlan_Duplicate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlan_Duplicate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlanMilestone_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlanMilestone_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlanMilestone_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlanMilestone_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlanMilestone_BulkUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlanMilestone_BulkUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlanMilestone_Reorder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlanMilestone_Reorder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "masterPlanMilestone_Duplicate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_masterPlanMilestone_Duplicate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_LinkAttendedBy":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_LinkAttendedBy(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_UnlinkAttendedBy":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_UnlinkAttendedBy(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_LinkAttachment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_LinkAttachment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_UnlinkAttachment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_UnlinkAttachment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_LinkRecording":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_LinkRecording(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_UnlinkRecording":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_UnlinkRecording(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_AddNewLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_AddNewLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meeting_AddNote":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_meeting_AddNote(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note_CreateForContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_note_CreateForContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note_CreateForOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_note_CreateForOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_note_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note_Delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_note_Delete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note_LinkAttachment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_note_LinkAttachment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "note_UnlinkAttachment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_note_UnlinkAttachment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "opportunityUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_opportunityUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "opportunityRenewalUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_opportunityRenewalUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_Archive":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_Archive(ctx, field)
			})
		case "organization_ArchiveAll":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_ArchiveAll(ctx, field)
			})
		case "organization_Hide":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_Hide(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_HideAll":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_HideAll(ctx, field)
			})
		case "organization_Show":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_Show(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_ShowAll":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_ShowAll(ctx, field)
			})
		case "organization_Merge":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_Merge(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_AddSubsidiary":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_AddSubsidiary(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_RemoveSubsidiary":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_RemoveSubsidiary(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_AddNewLocation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_AddNewLocation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_AddSocial":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_AddSocial(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_SetOwner":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_SetOwner(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_UnsetOwner":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_UnsetOwner(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organization_UpdateOnboardingStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organization_UpdateOnboardingStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlan_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlan_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlan_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlan_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlan_Duplicate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlan_Duplicate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlanMilestone_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlanMilestone_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlanMilestone_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlanMilestone_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlanMilestone_BulkUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlanMilestone_BulkUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlanMilestone_Reorder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlanMilestone_Reorder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "organizationPlanMilestone_Duplicate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_organizationPlanMilestone_Duplicate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberMergeToContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberMergeToContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberUpdateInContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberUpdateInContact(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberRemoveFromContactByE164":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberRemoveFromContactByE164(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberRemoveFromContactById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberRemoveFromContactById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberMergeToOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberMergeToOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberUpdateInOrganization":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberUpdateInOrganization(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberRemoveFromOrganizationByE164":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberRemoveFromOrganizationByE164(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberRemoveFromOrganizationById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberRemoveFromOrganizationById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberMergeToUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberMergeToUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberUpdateInUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberUpdateInUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberRemoveFromUserByE164":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberRemoveFromUserByE164(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumberRemoveFromUserById":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_phoneNumberRemoveFromUserById(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "player_Merge":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_player_Merge(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reminder_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reminder_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reminder_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reminder_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contractLineItem_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contractLineItem_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contractLineItem_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contractLineItem_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contractLineItem_Close":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_contractLineItem_Close(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "serviceLineItem_Delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_serviceLineItem_Delete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "serviceLineItem_BulkUpdate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_serviceLineItem_BulkUpdate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "social_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_social_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "social_Remove":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_social_Remove(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tag_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tag_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tag_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tag_Update(ctx, field)
			})
		case "tag_Delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tag_Delete(ctx, field)
			})
		case "tenant_Merge":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tenant_Merge(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tenant_AddBillingProfile":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tenant_AddBillingProfile(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tenant_UpdateBillingProfile":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tenant_UpdateBillingProfile(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tenant_UpdateSettings":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tenant_UpdateSettings(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_Create":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_Create(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_Update":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_Update(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_AddRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_AddRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_RemoveRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_RemoveRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_AddRoleInTenant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_AddRoleInTenant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_RemoveRoleInTenant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_RemoveRoleInTenant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_Delete":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_Delete(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user_DeleteInTenant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_user_DeleteInTenant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "customer_user_AddJobRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_customer_user_AddJobRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "workspace_MergeToTenant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_workspace_MergeToTenant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "workspace_Merge":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_workspace_Merge(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var noteImplementors = []string{"Note", "TimelineEvent"}

func (ec *executionContext) _Note(ctx context.Context, sel ast.SelectionSet, obj *model.Note) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, noteImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Note")
		case "id":
			out.Values[i] = ec._Note_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "content":
			out.Values[i] = ec._Note_content(ctx, field, obj)
		case "contentType":
			out.Values[i] = ec._Note_contentType(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Note_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Note_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Note_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "noted":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Note_noted(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "includes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Note_includes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._Note_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Note_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Note_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var notePageImplementors = []string{"NotePage", "Pages"}

func (ec *executionContext) _NotePage(ctx context.Context, sel ast.SelectionSet, obj *model.NotePage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notePageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotePage")
		case "content":
			out.Values[i] = ec._NotePage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._NotePage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._NotePage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var onboardingDetailsImplementors = []string{"OnboardingDetails"}

func (ec *executionContext) _OnboardingDetails(ctx context.Context, sel ast.SelectionSet, obj *model.OnboardingDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, onboardingDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OnboardingDetails")
		case "status":
			out.Values[i] = ec._OnboardingDetails_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "comments":
			out.Values[i] = ec._OnboardingDetails_comments(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._OnboardingDetails_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var opportunityImplementors = []string{"Opportunity", "Node"}

func (ec *executionContext) _Opportunity(ctx context.Context, sel ast.SelectionSet, obj *model.Opportunity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, opportunityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Opportunity")
		case "id":
			out.Values[i] = ec._Opportunity_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Opportunity_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Opportunity_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Opportunity_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "amount":
			out.Values[i] = ec._Opportunity_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "maxAmount":
			out.Values[i] = ec._Opportunity_maxAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalType":
			out.Values[i] = ec._Opportunity_internalType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalType":
			out.Values[i] = ec._Opportunity_externalType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "internalStage":
			out.Values[i] = ec._Opportunity_internalStage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalStage":
			out.Values[i] = ec._Opportunity_externalStage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "estimatedClosedAt":
			out.Values[i] = ec._Opportunity_estimatedClosedAt(ctx, field, obj)
		case "generalNotes":
			out.Values[i] = ec._Opportunity_generalNotes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "nextSteps":
			out.Values[i] = ec._Opportunity_nextSteps(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renewedAt":
			out.Values[i] = ec._Opportunity_renewedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renewalLikelihood":
			out.Values[i] = ec._Opportunity_renewalLikelihood(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renewalUpdatedByUserId":
			out.Values[i] = ec._Opportunity_renewalUpdatedByUserId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renewalUpdatedByUserAt":
			out.Values[i] = ec._Opportunity_renewalUpdatedByUserAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "comments":
			out.Values[i] = ec._Opportunity_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Opportunity_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "owner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Opportunity_owner(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._Opportunity_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Opportunity_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Opportunity_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Opportunity_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var orgAccountDetailsImplementors = []string{"OrgAccountDetails"}

func (ec *executionContext) _OrgAccountDetails(ctx context.Context, sel ast.SelectionSet, obj *model.OrgAccountDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgAccountDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgAccountDetails")
		case "renewalSummary":
			out.Values[i] = ec._OrgAccountDetails_renewalSummary(ctx, field, obj)
		case "onboarding":
			out.Values[i] = ec._OrgAccountDetails_onboarding(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationImplementors = []string{"Organization", "NotedEntity", "MetadataInterface"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *model.Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "metadata":
			out.Values[i] = ec._Organization_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "accountDetails":
			out.Values[i] = ec._Organization_accountDetails(ctx, field, obj)
		case "contracts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_contracts(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customerOsId":
			out.Values[i] = ec._Organization_customerOsId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "customFields":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_customFields(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "customId":
			out.Values[i] = ec._Organization_customId(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Organization_description(ctx, field, obj)
		case "domains":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_domains(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "slackChannelId":
			out.Values[i] = ec._Organization_slackChannelId(ctx, field, obj)
		case "employeeGrowthRate":
			out.Values[i] = ec._Organization_employeeGrowthRate(ctx, field, obj)
		case "employees":
			out.Values[i] = ec._Organization_employees(ctx, field, obj)
		case "headquarters":
			out.Values[i] = ec._Organization_headquarters(ctx, field, obj)
		case "industry":
			out.Values[i] = ec._Organization_industry(ctx, field, obj)
		case "industryGroup":
			out.Values[i] = ec._Organization_industryGroup(ctx, field, obj)
		case "isCustomer":
			out.Values[i] = ec._Organization_isCustomer(ctx, field, obj)
		case "lastFundingAmount":
			out.Values[i] = ec._Organization_lastFundingAmount(ctx, field, obj)
		case "lastFundingRound":
			out.Values[i] = ec._Organization_lastFundingRound(ctx, field, obj)
		case "lastTouchpoint":
			out.Values[i] = ec._Organization_lastTouchpoint(ctx, field, obj)
		case "locations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_locations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "logo":
			out.Values[i] = ec._Organization_logo(ctx, field, obj)
		case "market":
			out.Values[i] = ec._Organization_market(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Organization_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "notes":
			out.Values[i] = ec._Organization_notes(ctx, field, obj)
		case "owner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_owner(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "parentCompanies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_parentCompanies(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "public":
			out.Values[i] = ec._Organization_public(ctx, field, obj)
		case "socialMedia":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_socialMedia(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subIndustry":
			out.Values[i] = ec._Organization_subIndustry(ctx, field, obj)
		case "subsidiaries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_subsidiaries(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_tags(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "targetAudience":
			out.Values[i] = ec._Organization_targetAudience(ctx, field, obj)
		case "timelineEvents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_timelineEvents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "valueProposition":
			out.Values[i] = ec._Organization_valueProposition(ctx, field, obj)
		case "website":
			out.Values[i] = ec._Organization_website(ctx, field, obj)
		case "yearFounded":
			out.Values[i] = ec._Organization_yearFounded(ctx, field, obj)
		case "hide":
			out.Values[i] = ec._Organization_hide(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "contacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_contacts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "jobRoles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_jobRoles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "emails":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_emails(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "phoneNumbers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_phoneNumbers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "suggestedMergeTo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_suggestedMergeTo(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "fieldSets":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_fieldSets(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "entityTemplate":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_entityTemplate(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "timelineEventsTotalCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_timelineEventsTotalCount(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "issueSummaryByStatus":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_issueSummaryByStatus(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "socials":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_socials(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isPublic":
			out.Values[i] = ec._Organization_isPublic(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Organization_note(ctx, field, obj)
		case "logoUrl":
			out.Values[i] = ec._Organization_logoUrl(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Organization_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Organization_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Organization_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._Organization_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Organization_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Organization_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "referenceId":
			out.Values[i] = ec._Organization_referenceId(ctx, field, obj)
		case "lastTouchPointAt":
			out.Values[i] = ec._Organization_lastTouchPointAt(ctx, field, obj)
		case "lastTouchPointType":
			out.Values[i] = ec._Organization_lastTouchPointType(ctx, field, obj)
		case "lastTouchPointTimelineEventId":
			out.Values[i] = ec._Organization_lastTouchPointTimelineEventId(ctx, field, obj)
		case "lastTouchPointTimelineEvent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_lastTouchPointTimelineEvent(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "subsidiaryOf":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_subsidiaryOf(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationPageImplementors = []string{"OrganizationPage", "Pages"}

func (ec *executionContext) _OrganizationPage(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPage")
		case "content":
			out.Values[i] = ec._OrganizationPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._OrganizationPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._OrganizationPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAvailable":
			out.Values[i] = ec._OrganizationPage_totalAvailable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationParticipantImplementors = []string{"OrganizationParticipant", "InteractionEventParticipant", "IssueParticipant", "MeetingParticipant"}

func (ec *executionContext) _OrganizationParticipant(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationParticipant")
		case "organizationParticipant":
			out.Values[i] = ec._OrganizationParticipant_organizationParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._OrganizationParticipant_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationPlanImplementors = []string{"OrganizationPlan", "SourceFields", "Node"}

func (ec *executionContext) _OrganizationPlan(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPlanImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPlan")
		case "id":
			out.Values[i] = ec._OrganizationPlan_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._OrganizationPlan_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._OrganizationPlan_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._OrganizationPlan_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._OrganizationPlan_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._OrganizationPlan_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._OrganizationPlan_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "retired":
			out.Values[i] = ec._OrganizationPlan_retired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "milestones":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationPlan_milestones(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "retiredMilestones":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationPlan_retiredMilestones(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "statusDetails":
			out.Values[i] = ec._OrganizationPlan_statusDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "masterPlanId":
			out.Values[i] = ec._OrganizationPlan_masterPlanId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationPlanMilestoneImplementors = []string{"OrganizationPlanMilestone", "SourceFields", "Node"}

func (ec *executionContext) _OrganizationPlanMilestone(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationPlanMilestone) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPlanMilestoneImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPlanMilestone")
		case "id":
			out.Values[i] = ec._OrganizationPlanMilestone_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._OrganizationPlanMilestone_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._OrganizationPlanMilestone_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._OrganizationPlanMilestone_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._OrganizationPlanMilestone_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._OrganizationPlanMilestone_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._OrganizationPlanMilestone_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "order":
			out.Values[i] = ec._OrganizationPlanMilestone_order(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dueDate":
			out.Values[i] = ec._OrganizationPlanMilestone_dueDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "optional":
			out.Values[i] = ec._OrganizationPlanMilestone_optional(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._OrganizationPlanMilestone_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "retired":
			out.Values[i] = ec._OrganizationPlanMilestone_retired(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "statusDetails":
			out.Values[i] = ec._OrganizationPlanMilestone_statusDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "adhoc":
			out.Values[i] = ec._OrganizationPlanMilestone_adhoc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationPlanMilestoneItemImplementors = []string{"OrganizationPlanMilestoneItem"}

func (ec *executionContext) _OrganizationPlanMilestoneItem(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationPlanMilestoneItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPlanMilestoneItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPlanMilestoneItem")
		case "status":
			out.Values[i] = ec._OrganizationPlanMilestoneItem_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._OrganizationPlanMilestoneItem_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._OrganizationPlanMilestoneItem_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uuid":
			out.Values[i] = ec._OrganizationPlanMilestoneItem_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationPlanMilestoneStatusDetailsImplementors = []string{"OrganizationPlanMilestoneStatusDetails"}

func (ec *executionContext) _OrganizationPlanMilestoneStatusDetails(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationPlanMilestoneStatusDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPlanMilestoneStatusDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPlanMilestoneStatusDetails")
		case "status":
			out.Values[i] = ec._OrganizationPlanMilestoneStatusDetails_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._OrganizationPlanMilestoneStatusDetails_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._OrganizationPlanMilestoneStatusDetails_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var organizationPlanStatusDetailsImplementors = []string{"OrganizationPlanStatusDetails"}

func (ec *executionContext) _OrganizationPlanStatusDetails(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationPlanStatusDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationPlanStatusDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationPlanStatusDetails")
		case "status":
			out.Values[i] = ec._OrganizationPlanStatusDetails_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._OrganizationPlanStatusDetails_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._OrganizationPlanStatusDetails_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageViewImplementors = []string{"PageView", "Node", "SourceFields", "TimelineEvent"}

func (ec *executionContext) _PageView(ctx context.Context, sel ast.SelectionSet, obj *model.PageView) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageViewImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageView")
		case "id":
			out.Values[i] = ec._PageView_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startedAt":
			out.Values[i] = ec._PageView_startedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endedAt":
			out.Values[i] = ec._PageView_endedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageTitle":
			out.Values[i] = ec._PageView_pageTitle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pageUrl":
			out.Values[i] = ec._PageView_pageUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "application":
			out.Values[i] = ec._PageView_application(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sessionId":
			out.Values[i] = ec._PageView_sessionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "orderInSession":
			out.Values[i] = ec._PageView_orderInSession(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "engagedTime":
			out.Values[i] = ec._PageView_engagedTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._PageView_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._PageView_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._PageView_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var phoneNumberImplementors = []string{"PhoneNumber"}

func (ec *executionContext) _PhoneNumber(ctx context.Context, sel ast.SelectionSet, obj *model.PhoneNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneNumberImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhoneNumber")
		case "id":
			out.Values[i] = ec._PhoneNumber_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "e164":
			out.Values[i] = ec._PhoneNumber_e164(ctx, field, obj)
		case "rawPhoneNumber":
			out.Values[i] = ec._PhoneNumber_rawPhoneNumber(ctx, field, obj)
		case "validated":
			out.Values[i] = ec._PhoneNumber_validated(ctx, field, obj)
		case "country":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PhoneNumber_country(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "label":
			out.Values[i] = ec._PhoneNumber_label(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._PhoneNumber_primary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PhoneNumber_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._PhoneNumber_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._PhoneNumber_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._PhoneNumber_appSource(ctx, field, obj)
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PhoneNumber_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "contacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PhoneNumber_contacts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "organizations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PhoneNumber_organizations(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var phoneNumberParticipantImplementors = []string{"PhoneNumberParticipant", "InteractionEventParticipant", "InteractionSessionParticipant"}

func (ec *executionContext) _PhoneNumberParticipant(ctx context.Context, sel ast.SelectionSet, obj *model.PhoneNumberParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneNumberParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhoneNumberParticipant")
		case "phoneNumberParticipant":
			out.Values[i] = ec._PhoneNumberParticipant_phoneNumberParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._PhoneNumberParticipant_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerImplementors = []string{"Player"}

func (ec *executionContext) _Player(ctx context.Context, sel ast.SelectionSet, obj *model.Player) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Player")
		case "id":
			out.Values[i] = ec._Player_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "identityId":
			out.Values[i] = ec._Player_identityId(ctx, field, obj)
		case "authId":
			out.Values[i] = ec._Player_authId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Player_users(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "provider":
			out.Values[i] = ec._Player_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Player_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._Player_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "source":
			out.Values[i] = ec._Player_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Player_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._Player_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerUserImplementors = []string{"PlayerUser"}

func (ec *executionContext) _PlayerUser(ctx context.Context, sel ast.SelectionSet, obj *model.PlayerUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerUserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerUser")
		case "user":
			out.Values[i] = ec._PlayerUser_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "default":
			out.Values[i] = ec._PlayerUser_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tenant":
			out.Values[i] = ec._PlayerUser_tenant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "entityTemplates":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_entityTemplates(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "analysis":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_analysis(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "attachment":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_attachment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "bankAccounts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_bankAccounts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "global_Cache":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_global_Cache(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contact":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contact(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contacts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contacts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contact_ByEmail":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contact_ByEmail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contact_ByPhone":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contact_ByPhone(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "contract":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_contract(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboardView_Organizations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboardView_Organizations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboardView_Renewals":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboardView_Renewals(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_CustomerMap":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_CustomerMap(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_MRRPerCustomer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_MRRPerCustomer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_GrossRevenueRetention":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_GrossRevenueRetention(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_ARRBreakdown":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_ARRBreakdown(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_RevenueAtRisk":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_RevenueAtRisk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_RetentionRate":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_RetentionRate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_NewCustomers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_NewCustomers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_TimeToOnboard":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_TimeToOnboard(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "dashboard_OnboardingCompletion":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dashboard_OnboardingCompletion(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "email":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_email(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "externalSystemInstances":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_externalSystemInstances(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "interactionSession":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_interactionSession(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "interactionSession_BySessionIdentifier":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_interactionSession_BySessionIdentifier(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "interactionEvent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_interactionEvent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "interactionEvent_ByEventIdentifier":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_interactionEvent_ByEventIdentifier(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "invoice":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_invoice(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "invoices":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_invoices(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "invoicingCycle":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_invoicingCycle(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "issue":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_issue(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "logEntry":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_logEntry(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "masterPlan":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_masterPlan(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "masterPlans":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_masterPlans(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "meeting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_meeting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "externalMeetings":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_externalMeetings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "opportunity":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_opportunity(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "organizations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "organization":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "organization_ByCustomerOsId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization_ByCustomerOsId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "organization_DistinctOwners":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization_DistinctOwners(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "organizationPlan":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationPlan(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "organizationPlansForOrganization":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationPlansForOrganization(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "organizationPlans":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationPlans(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "phoneNumber":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_phoneNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "player_ByAuthIdProvider":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_player_ByAuthIdProvider(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "reminder":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_reminder(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "remindersForOrganization":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_remindersForOrganization(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gcli_Search":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gcli_Search(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "serviceLineItem":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceLineItem(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "slack_Channels":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_slack_Channels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tags":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tags(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenant(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenant_ByWorkspace":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenant_ByWorkspace(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenant_ByEmail":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenant_ByEmail(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenantBillingProfiles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenantBillingProfiles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenantBillingProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenantBillingProfile(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenantSettings":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenantSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "billableInfo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_billableInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "timelineEvents":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_timelineEvents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "users":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "user_ByEmail":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user_ByEmail(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tableViewDefs":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tableViewDefs(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reminderImplementors = []string{"Reminder", "MetadataInterface"}

func (ec *executionContext) _Reminder(ctx context.Context, sel ast.SelectionSet, obj *model.Reminder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reminderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reminder")
		case "metadata":
			out.Values[i] = ec._Reminder_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "content":
			out.Values[i] = ec._Reminder_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "owner":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Reminder_owner(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "dueDate":
			out.Values[i] = ec._Reminder_dueDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "dismissed":
			out.Values[i] = ec._Reminder_dismissed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var renewalRecordImplementors = []string{"RenewalRecord"}

func (ec *executionContext) _RenewalRecord(ctx context.Context, sel ast.SelectionSet, obj *model.RenewalRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, renewalRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RenewalRecord")
		case "organization":
			out.Values[i] = ec._RenewalRecord_organization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contract":
			out.Values[i] = ec._RenewalRecord_contract(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "opportunity":
			out.Values[i] = ec._RenewalRecord_opportunity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var renewalSummaryImplementors = []string{"RenewalSummary"}

func (ec *executionContext) _RenewalSummary(ctx context.Context, sel ast.SelectionSet, obj *model.RenewalSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, renewalSummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RenewalSummary")
		case "arrForecast":
			out.Values[i] = ec._RenewalSummary_arrForecast(ctx, field, obj)
		case "maxArrForecast":
			out.Values[i] = ec._RenewalSummary_maxArrForecast(ctx, field, obj)
		case "renewalLikelihood":
			out.Values[i] = ec._RenewalSummary_renewalLikelihood(ctx, field, obj)
		case "nextRenewalDate":
			out.Values[i] = ec._RenewalSummary_nextRenewalDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var renewalsPageImplementors = []string{"RenewalsPage", "Pages"}

func (ec *executionContext) _RenewalsPage(ctx context.Context, sel ast.SelectionSet, obj *model.RenewalsPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, renewalsPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RenewalsPage")
		case "content":
			out.Values[i] = ec._RenewalsPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._RenewalsPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._RenewalsPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAvailable":
			out.Values[i] = ec._RenewalsPage_totalAvailable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var resultImplementors = []string{"Result"}

func (ec *executionContext) _Result(ctx context.Context, sel ast.SelectionSet, obj *model.Result) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Result")
		case "result":
			out.Values[i] = ec._Result_result(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var serviceLineItemImplementors = []string{"ServiceLineItem", "MetadataInterface"}

func (ec *executionContext) _ServiceLineItem(ctx context.Context, sel ast.SelectionSet, obj *model.ServiceLineItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceLineItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceLineItem")
		case "metadata":
			out.Values[i] = ec._ServiceLineItem_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "billingCycle":
			out.Values[i] = ec._ServiceLineItem_billingCycle(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "comments":
			out.Values[i] = ec._ServiceLineItem_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "description":
			out.Values[i] = ec._ServiceLineItem_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "parentId":
			out.Values[i] = ec._ServiceLineItem_parentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "price":
			out.Values[i] = ec._ServiceLineItem_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "quantity":
			out.Values[i] = ec._ServiceLineItem_quantity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "serviceEnded":
			out.Values[i] = ec._ServiceLineItem_serviceEnded(ctx, field, obj)
		case "serviceStarted":
			out.Values[i] = ec._ServiceLineItem_serviceStarted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tax":
			out.Values[i] = ec._ServiceLineItem_tax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceLineItem_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "externalLinks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ServiceLineItem_externalLinks(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var slackChannelImplementors = []string{"SlackChannel"}

func (ec *executionContext) _SlackChannel(ctx context.Context, sel ast.SelectionSet, obj *model.SlackChannel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, slackChannelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SlackChannel")
		case "metadata":
			out.Values[i] = ec._SlackChannel_metadata(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "organization":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SlackChannel_organization(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "channelId":
			out.Values[i] = ec._SlackChannel_channelId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "channelName":
			out.Values[i] = ec._SlackChannel_channelName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var slackChannelPageImplementors = []string{"SlackChannelPage", "Pages"}

func (ec *executionContext) _SlackChannelPage(ctx context.Context, sel ast.SelectionSet, obj *model.SlackChannelPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, slackChannelPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SlackChannelPage")
		case "content":
			out.Values[i] = ec._SlackChannelPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._SlackChannelPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._SlackChannelPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAvailable":
			out.Values[i] = ec._SlackChannelPage_totalAvailable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var socialImplementors = []string{"Social", "SourceFields", "Node"}

func (ec *executionContext) _Social(ctx context.Context, sel ast.SelectionSet, obj *model.Social) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socialImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Social")
		case "id":
			out.Values[i] = ec._Social_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "platformName":
			out.Values[i] = ec._Social_platformName(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Social_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Social_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Social_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Social_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Social_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Social_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stateImplementors = []string{"State"}

func (ec *executionContext) _State(ctx context.Context, sel ast.SelectionSet, obj *model.State) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("State")
		case "id":
			out.Values[i] = ec._State_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._State_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._State_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._State_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var suggestedMergeOrganizationImplementors = []string{"SuggestedMergeOrganization"}

func (ec *executionContext) _SuggestedMergeOrganization(ctx context.Context, sel ast.SelectionSet, obj *model.SuggestedMergeOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, suggestedMergeOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SuggestedMergeOrganization")
		case "organization":
			out.Values[i] = ec._SuggestedMergeOrganization_organization(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "confidence":
			out.Values[i] = ec._SuggestedMergeOrganization_confidence(ctx, field, obj)
		case "suggestedAt":
			out.Values[i] = ec._SuggestedMergeOrganization_suggestedAt(ctx, field, obj)
		case "suggestedBy":
			out.Values[i] = ec._SuggestedMergeOrganization_suggestedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tableViewDefImplementors = []string{"TableViewDef", "Node"}

func (ec *executionContext) _TableViewDef(ctx context.Context, sel ast.SelectionSet, obj *model.TableViewDef) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tableViewDefImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TableViewDef")
		case "id":
			out.Values[i] = ec._TableViewDef_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._TableViewDef_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "order":
			out.Values[i] = ec._TableViewDef_order(ctx, field, obj)
		case "type":
			out.Values[i] = ec._TableViewDef_type(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._TableViewDef_icon(ctx, field, obj)
		case "columns":
			out.Values[i] = ec._TableViewDef_columns(ctx, field, obj)
		case "filters":
			out.Values[i] = ec._TableViewDef_filters(ctx, field, obj)
		case "sorting":
			out.Values[i] = ec._TableViewDef_sorting(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._TableViewDef_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._TableViewDef_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TableViewDef_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tableViewDefPageImplementors = []string{"TableViewDefPage", "Pages"}

func (ec *executionContext) _TableViewDefPage(ctx context.Context, sel ast.SelectionSet, obj *model.TableViewDefPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tableViewDefPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TableViewDefPage")
		case "content":
			out.Values[i] = ec._TableViewDefPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._TableViewDefPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._TableViewDefPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalAvailable":
			out.Values[i] = ec._TableViewDefPage_totalAvailable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *model.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "id":
			out.Values[i] = ec._Tag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Tag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Tag_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Tag_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Tag_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Tag_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taxImplementors = []string{"Tax"}

func (ec *executionContext) _Tax(ctx context.Context, sel ast.SelectionSet, obj *model.Tax) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taxImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tax")
		case "salesTax":
			out.Values[i] = ec._Tax_salesTax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vat":
			out.Values[i] = ec._Tax_vat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taxRate":
			out.Values[i] = ec._Tax_taxRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenantBillableInfoImplementors = []string{"TenantBillableInfo"}

func (ec *executionContext) _TenantBillableInfo(ctx context.Context, sel ast.SelectionSet, obj *model.TenantBillableInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantBillableInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenantBillableInfo")
		case "whitelistedOrganizations":
			out.Values[i] = ec._TenantBillableInfo_whitelistedOrganizations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "whitelistedContacts":
			out.Values[i] = ec._TenantBillableInfo_whitelistedContacts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "greylistedOrganizations":
			out.Values[i] = ec._TenantBillableInfo_greylistedOrganizations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "greylistedContacts":
			out.Values[i] = ec._TenantBillableInfo_greylistedContacts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenantBillingProfileImplementors = []string{"TenantBillingProfile", "SourceFields", "Node"}

func (ec *executionContext) _TenantBillingProfile(ctx context.Context, sel ast.SelectionSet, obj *model.TenantBillingProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantBillingProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenantBillingProfile")
		case "id":
			out.Values[i] = ec._TenantBillingProfile_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._TenantBillingProfile_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._TenantBillingProfile_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._TenantBillingProfile_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._TenantBillingProfile_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._TenantBillingProfile_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._TenantBillingProfile_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phone":
			out.Values[i] = ec._TenantBillingProfile_phone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addressLine1":
			out.Values[i] = ec._TenantBillingProfile_addressLine1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addressLine2":
			out.Values[i] = ec._TenantBillingProfile_addressLine2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addressLine3":
			out.Values[i] = ec._TenantBillingProfile_addressLine3(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locality":
			out.Values[i] = ec._TenantBillingProfile_locality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._TenantBillingProfile_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "zip":
			out.Values[i] = ec._TenantBillingProfile_zip(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "legalName":
			out.Values[i] = ec._TenantBillingProfile_legalName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "domesticPaymentsBankInfo":
			out.Values[i] = ec._TenantBillingProfile_domesticPaymentsBankInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "internationalPaymentsBankInfo":
			out.Values[i] = ec._TenantBillingProfile_internationalPaymentsBankInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "vatNumber":
			out.Values[i] = ec._TenantBillingProfile_vatNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendInvoicesFrom":
			out.Values[i] = ec._TenantBillingProfile_sendInvoicesFrom(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendInvoicesBcc":
			out.Values[i] = ec._TenantBillingProfile_sendInvoicesBcc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canPayWithCard":
			out.Values[i] = ec._TenantBillingProfile_canPayWithCard(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canPayWithDirectDebitSEPA":
			out.Values[i] = ec._TenantBillingProfile_canPayWithDirectDebitSEPA(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canPayWithDirectDebitACH":
			out.Values[i] = ec._TenantBillingProfile_canPayWithDirectDebitACH(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canPayWithDirectDebitBacs":
			out.Values[i] = ec._TenantBillingProfile_canPayWithDirectDebitBacs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canPayWithBankTransfer":
			out.Values[i] = ec._TenantBillingProfile_canPayWithBankTransfer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canPayWithPigeon":
			out.Values[i] = ec._TenantBillingProfile_canPayWithPigeon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenantSettingsImplementors = []string{"TenantSettings"}

func (ec *executionContext) _TenantSettings(ctx context.Context, sel ast.SelectionSet, obj *model.TenantSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenantSettings")
		case "logoRepositoryFileId":
			out.Values[i] = ec._TenantSettings_logoRepositoryFileId(ctx, field, obj)
		case "baseCurrency":
			out.Values[i] = ec._TenantSettings_baseCurrency(ctx, field, obj)
		case "billingEnabled":
			out.Values[i] = ec._TenantSettings_billingEnabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logoUrl":
			out.Values[i] = ec._TenantSettings_logoUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
		case "internal":
			out.Values[i] = ec._User_internal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "bot":
			out.Values[i] = ec._User_bot(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timezone":
			out.Values[i] = ec._User_timezone(ctx, field, obj)
		case "profilePhotoUrl":
			out.Values[i] = ec._User_profilePhotoUrl(ctx, field, obj)
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "roles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_roles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "emails":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_emails(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "phoneNumbers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_phoneNumbers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "jobRoles":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_jobRoles(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "calendars":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_calendars(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "source":
			out.Values[i] = ec._User_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceOfTruth":
			out.Values[i] = ec._User_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appSource":
			out.Values[i] = ec._User_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userPageImplementors = []string{"UserPage", "Pages"}

func (ec *executionContext) _UserPage(ctx context.Context, sel ast.SelectionSet, obj *model.UserPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPage")
		case "content":
			out.Values[i] = ec._UserPage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalPages":
			out.Values[i] = ec._UserPage_totalPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalElements":
			out.Values[i] = ec._UserPage_totalElements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userParticipantImplementors = []string{"UserParticipant", "InteractionEventParticipant", "InteractionSessionParticipant", "IssueParticipant", "MeetingParticipant"}

func (ec *executionContext) _UserParticipant(ctx context.Context, sel ast.SelectionSet, obj *model.UserParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserParticipant")
		case "userParticipant":
			out.Values[i] = ec._UserParticipant_userParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._UserParticipant_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var viewTypeImplementors = []string{"ViewType", "Node"}

func (ec *executionContext) _ViewType(ctx context.Context, sel ast.SelectionSet, obj *model.ViewType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, viewTypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ViewType")
		case "id":
			out.Values[i] = ec._ViewType_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._ViewType_name(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ViewType_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "updatedAt":
			out.Values[i] = ec._ViewType_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdBy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ViewType_createdBy(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var workspaceImplementors = []string{"Workspace"}

func (ec *executionContext) _Workspace(ctx context.Context, sel ast.SelectionSet, obj *model.Workspace) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workspaceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Workspace")
		case "id":
			out.Values[i] = ec._Workspace_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Workspace_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "provider":
			out.Values[i] = ec._Workspace_provider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Workspace_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Workspace_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "source":
			out.Values[i] = ec._Workspace_source(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sourceOfTruth":
			out.Values[i] = ec._Workspace_sourceOfTruth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appSource":
			out.Values[i] = ec._Workspace_appSource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNActionItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐActionItem(ctx context.Context, sel ast.SelectionSet, v *model.ActionItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActionItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActionType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐActionType(ctx context.Context, v interface{}) (model.ActionType, error) {
	var res model.ActionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐActionType(ctx context.Context, sel ast.SelectionSet, v model.ActionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAnalysis2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysis(ctx context.Context, sel ast.SelectionSet, v model.Analysis) graphql.Marshaler {
	return ec._Analysis(ctx, sel, &v)
}

func (ec *executionContext) marshalNAnalysis2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Analysis) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAnalysis2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAnalysis2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysis(ctx context.Context, sel ast.SelectionSet, v *model.Analysis) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Analysis(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAnalysisDescriptionInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisDescriptionInputᚄ(ctx context.Context, v interface{}) ([]*model.AnalysisDescriptionInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AnalysisDescriptionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNAnalysisDescriptionInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisDescriptionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNAnalysisDescriptionInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisDescriptionInput(ctx context.Context, v interface{}) (*model.AnalysisDescriptionInput, error) {
	res, err := ec.unmarshalInputAnalysisDescriptionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAnalysisInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysisInput(ctx context.Context, v interface{}) (model.AnalysisInput, error) {
	res, err := ec.unmarshalInputAnalysisInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAny2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚐAnyTypeValue(ctx context.Context, v interface{}) (graph.AnyTypeValue, error) {
	res, err := graph.UnmarshalAnyTypeValue(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚐAnyTypeValue(ctx context.Context, sel ast.SelectionSet, v graph.AnyTypeValue) graphql.Marshaler {
	res := graph.MarshalAnyTypeValue(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNAttachment2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachment(ctx context.Context, sel ast.SelectionSet, v model.Attachment) graphql.Marshaler {
	return ec._Attachment(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttachment2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Attachment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAttachment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAttachment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *model.Attachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAttachmentInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachmentInput(ctx context.Context, v interface{}) (model.AttachmentInput, error) {
	res, err := ec.unmarshalInputAttachmentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBankAccount2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccount(ctx context.Context, sel ast.SelectionSet, v model.BankAccount) graphql.Marshaler {
	return ec._BankAccount(ctx, sel, &v)
}

func (ec *executionContext) marshalNBankAccount2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BankAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBankAccount2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBankAccount2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccount(ctx context.Context, sel ast.SelectionSet, v *model.BankAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BankAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBilledType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx context.Context, v interface{}) (model.BilledType, error) {
	var res model.BilledType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBilledType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx context.Context, sel ast.SelectionSet, v model.BilledType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBillingProfileInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileInput(ctx context.Context, v interface{}) (model.BillingProfileInput, error) {
	res, err := ec.unmarshalInputBillingProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBillingProfileLinkEmailInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileLinkEmailInput(ctx context.Context, v interface{}) (model.BillingProfileLinkEmailInput, error) {
	res, err := ec.unmarshalInputBillingProfileLinkEmailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBillingProfileLinkLocationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileLinkLocationInput(ctx context.Context, v interface{}) (model.BillingProfileLinkLocationInput, error) {
	res, err := ec.unmarshalInputBillingProfileLinkLocationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBillingProfileUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingProfileUpdateInput(ctx context.Context, v interface{}) (model.BillingProfileUpdateInput, error) {
	res, err := ec.unmarshalInputBillingProfileUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCalendar2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCalendarᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Calendar) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCalendar2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCalendar(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCalendar2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCalendar(ctx context.Context, sel ast.SelectionSet, v *model.Calendar) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Calendar(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCalendarType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCalendarType(ctx context.Context, v interface{}) (model.CalendarType, error) {
	var res model.CalendarType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCalendarType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCalendarType(ctx context.Context, sel ast.SelectionSet, v model.CalendarType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNComment2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNComment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNComparisonOperator2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐComparisonOperator(ctx context.Context, v interface{}) (model.ComparisonOperator, error) {
	var res model.ComparisonOperator
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNComparisonOperator2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐComparisonOperator(ctx context.Context, sel ast.SelectionSet, v model.ComparisonOperator) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNContact2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx context.Context, sel ast.SelectionSet, v model.Contact) graphql.Marshaler {
	return ec._Contact(ctx, sel, &v)
}

func (ec *executionContext) marshalNContact2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Contact) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx context.Context, sel ast.SelectionSet, v *model.Contact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Contact(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContactInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactInput(ctx context.Context, v interface{}) (model.ContactInput, error) {
	res, err := ec.unmarshalInputContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContactOrganizationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactOrganizationInput(ctx context.Context, v interface{}) (model.ContactOrganizationInput, error) {
	res, err := ec.unmarshalInputContactOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContactTagInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactTagInput(ctx context.Context, v interface{}) (model.ContactTagInput, error) {
	res, err := ec.unmarshalInputContactTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContactUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactUpdateInput(ctx context.Context, v interface{}) (model.ContactUpdateInput, error) {
	res, err := ec.unmarshalInputContactUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContactsPage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactsPage(ctx context.Context, sel ast.SelectionSet, v model.ContactsPage) graphql.Marshaler {
	return ec._ContactsPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNContactsPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContactsPage(ctx context.Context, sel ast.SelectionSet, v *model.ContactsPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ContactsPage(ctx, sel, v)
}

func (ec *executionContext) marshalNContract2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v model.Contract) graphql.Marshaler {
	return ec._Contract(ctx, sel, &v)
}

func (ec *executionContext) marshalNContract2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v *model.Contract) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Contract(ctx, sel, v)
}

func (ec *executionContext) unmarshalNContractInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractInput(ctx context.Context, v interface{}) (model.ContractInput, error) {
	res, err := ec.unmarshalInputContractInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContractRenewalCycle2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx context.Context, v interface{}) (model.ContractRenewalCycle, error) {
	var res model.ContractRenewalCycle
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractRenewalCycle2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx context.Context, sel ast.SelectionSet, v model.ContractRenewalCycle) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContractStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractStatus(ctx context.Context, v interface{}) (model.ContractStatus, error) {
	var res model.ContractStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContractStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractStatus(ctx context.Context, sel ast.SelectionSet, v model.ContractStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContractUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractUpdateInput(ctx context.Context, v interface{}) (model.ContractUpdateInput, error) {
	res, err := ec.unmarshalInputContractUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCountry2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCountry(ctx context.Context, sel ast.SelectionSet, v *model.Country) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomField2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomField(ctx context.Context, sel ast.SelectionSet, v model.CustomField) graphql.Marshaler {
	return ec._CustomField(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomField2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomField) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomField2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustomField2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomField(ctx context.Context, sel ast.SelectionSet, v *model.CustomField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomField(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomFieldDataType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldDataType(ctx context.Context, v interface{}) (model.CustomFieldDataType, error) {
	var res model.CustomFieldDataType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomFieldDataType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldDataType(ctx context.Context, sel ast.SelectionSet, v model.CustomFieldDataType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCustomFieldInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInput(ctx context.Context, v interface{}) (model.CustomFieldInput, error) {
	res, err := ec.unmarshalInputCustomFieldInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomFieldInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInput(ctx context.Context, v interface{}) (*model.CustomFieldInput, error) {
	res, err := ec.unmarshalInputCustomFieldInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomFieldTemplate2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplate(ctx context.Context, sel ast.SelectionSet, v model.CustomFieldTemplate) graphql.Marshaler {
	return ec._CustomFieldTemplate(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomFieldTemplate2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CustomFieldTemplate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCustomFieldTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCustomFieldTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplate(ctx context.Context, sel ast.SelectionSet, v *model.CustomFieldTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomFieldTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomFieldTemplateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateInput(ctx context.Context, v interface{}) (model.CustomFieldTemplateInput, error) {
	res, err := ec.unmarshalInputCustomFieldTemplateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomFieldTemplateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateInput(ctx context.Context, v interface{}) (*model.CustomFieldTemplateInput, error) {
	res, err := ec.unmarshalInputCustomFieldTemplateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCustomFieldTemplateType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateType(ctx context.Context, v interface{}) (model.CustomFieldTemplateType, error) {
	var res model.CustomFieldTemplateType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomFieldTemplateType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateType(ctx context.Context, sel ast.SelectionSet, v model.CustomFieldTemplateType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCustomFieldUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldUpdateInput(ctx context.Context, v interface{}) (model.CustomFieldUpdateInput, error) {
	res, err := ec.unmarshalInputCustomFieldUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomerContact2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerContact(ctx context.Context, sel ast.SelectionSet, v model.CustomerContact) graphql.Marshaler {
	return ec._CustomerContact(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerContact(ctx context.Context, sel ast.SelectionSet, v *model.CustomerContact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomerContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCustomerContactInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerContactInput(ctx context.Context, v interface{}) (model.CustomerContactInput, error) {
	res, err := ec.unmarshalInputCustomerContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCustomerEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerEmail(ctx context.Context, sel ast.SelectionSet, v *model.CustomerEmail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomerEmail(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerJobRole2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerJobRole(ctx context.Context, sel ast.SelectionSet, v *model.CustomerJobRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomerJobRole(ctx, sel, v)
}

func (ec *executionContext) marshalNCustomerUser2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerUser(ctx context.Context, sel ast.SelectionSet, v model.CustomerUser) graphql.Marshaler {
	return ec._CustomerUser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCustomerUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomerUser(ctx context.Context, sel ast.SelectionSet, v *model.CustomerUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CustomerUser(ctx, sel, v)
}

func (ec *executionContext) marshalNDashboardARRBreakdownPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardARRBreakdownPerMonth(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardARRBreakdownPerMonth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODashboardARRBreakdownPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardARRBreakdownPerMonth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNDashboardCustomerMap2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardCustomerMap(ctx context.Context, sel ast.SelectionSet, v *model.DashboardCustomerMap) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DashboardCustomerMap(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDashboardCustomerMapState2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardCustomerMapState(ctx context.Context, v interface{}) (model.DashboardCustomerMapState, error) {
	var res model.DashboardCustomerMapState
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDashboardCustomerMapState2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardCustomerMapState(ctx context.Context, sel ast.SelectionSet, v model.DashboardCustomerMapState) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDashboardGrossRevenueRetentionPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardGrossRevenueRetentionPerMonth(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardGrossRevenueRetentionPerMonth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODashboardGrossRevenueRetentionPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardGrossRevenueRetentionPerMonth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNDashboardMRRPerCustomerPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardMRRPerCustomerPerMonth(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardMRRPerCustomerPerMonth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODashboardMRRPerCustomerPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardMRRPerCustomerPerMonth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNDashboardNewCustomersPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardNewCustomersPerMonth(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardNewCustomersPerMonth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODashboardNewCustomersPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardNewCustomersPerMonth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNDashboardOnboardingCompletionPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardOnboardingCompletionPerMonthᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardOnboardingCompletionPerMonth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDashboardOnboardingCompletionPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardOnboardingCompletionPerMonth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDashboardOnboardingCompletionPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardOnboardingCompletionPerMonth(ctx context.Context, sel ast.SelectionSet, v *model.DashboardOnboardingCompletionPerMonth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DashboardOnboardingCompletionPerMonth(ctx, sel, v)
}

func (ec *executionContext) marshalNDashboardRetentionRatePerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRetentionRatePerMonth(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardRetentionRatePerMonth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODashboardRetentionRatePerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRetentionRatePerMonth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNDashboardTimeToOnboardPerMonth2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardTimeToOnboardPerMonthᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardTimeToOnboardPerMonth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDashboardTimeToOnboardPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardTimeToOnboardPerMonth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDashboardTimeToOnboardPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardTimeToOnboardPerMonth(ctx context.Context, sel ast.SelectionSet, v *model.DashboardTimeToOnboardPerMonth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DashboardTimeToOnboardPerMonth(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx context.Context, v interface{}) (model.DataSource, error) {
	var res model.DataSource
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataSource2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDataSource(ctx context.Context, sel ast.SelectionSet, v model.DataSource) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDeleteResponse2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDeleteResponse(ctx context.Context, sel ast.SelectionSet, v model.DeleteResponse) graphql.Marshaler {
	return ec._DeleteResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteResponse2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDeleteResponse(ctx context.Context, sel ast.SelectionSet, v *model.DeleteResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNDescriptionNode2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDescriptionNode(ctx context.Context, sel ast.SelectionSet, v model.DescriptionNode) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DescriptionNode(ctx, sel, v)
}

func (ec *executionContext) marshalNDescriptionNode2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDescriptionNodeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.DescriptionNode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDescriptionNode2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDescriptionNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmail2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx context.Context, sel ast.SelectionSet, v model.Email) graphql.Marshaler {
	return ec._Email(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmail2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Email) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx context.Context, sel ast.SelectionSet, v *model.Email) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Email(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmailInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx context.Context, v interface{}) (model.EmailInput, error) {
	res, err := ec.unmarshalInputEmailInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmailInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx context.Context, v interface{}) (*model.EmailInput, error) {
	res, err := ec.unmarshalInputEmailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmailUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailUpdateInput(ctx context.Context, v interface{}) (model.EmailUpdateInput, error) {
	res, err := ec.unmarshalInputEmailUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmailValidationDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailValidationDetails(ctx context.Context, sel ast.SelectionSet, v *model.EmailValidationDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EmailValidationDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNEntityTemplate2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplate(ctx context.Context, sel ast.SelectionSet, v model.EntityTemplate) graphql.Marshaler {
	return ec._EntityTemplate(ctx, sel, &v)
}

func (ec *executionContext) marshalNEntityTemplate2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.EntityTemplate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEntityTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEntityTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplate(ctx context.Context, sel ast.SelectionSet, v *model.EntityTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EntityTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEntityTemplateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateInput(ctx context.Context, v interface{}) (model.EntityTemplateInput, error) {
	res, err := ec.unmarshalInputEntityTemplateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEntityType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityType(ctx context.Context, v interface{}) (model.EntityType, error) {
	var res model.EntityType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEntityType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityType(ctx context.Context, sel ast.SelectionSet, v model.EntityType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNExternalSystem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ExternalSystem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExternalSystem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExternalSystem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystem(ctx context.Context, sel ast.SelectionSet, v *model.ExternalSystem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExternalSystem(ctx, sel, v)
}

func (ec *executionContext) marshalNExternalSystemInstance2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemInstanceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ExternalSystemInstance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExternalSystemInstance2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemInstance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExternalSystemInstance2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemInstance(ctx context.Context, sel ast.SelectionSet, v *model.ExternalSystemInstance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ExternalSystemInstance(ctx, sel, v)
}

func (ec *executionContext) unmarshalNExternalSystemType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemType(ctx context.Context, v interface{}) (model.ExternalSystemType, error) {
	var res model.ExternalSystemType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNExternalSystemType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemType(ctx context.Context, sel ast.SelectionSet, v model.ExternalSystemType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNFieldSet2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FieldSet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFieldSet2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFieldSet2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSet(ctx context.Context, sel ast.SelectionSet, v *model.FieldSet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FieldSet(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFieldSetInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInput(ctx context.Context, v interface{}) (model.FieldSetInput, error) {
	res, err := ec.unmarshalInputFieldSetInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFieldSetInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInput(ctx context.Context, v interface{}) (*model.FieldSetInput, error) {
	res, err := ec.unmarshalInputFieldSetInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFieldSetTemplate2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FieldSetTemplate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFieldSetTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFieldSetTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplate(ctx context.Context, sel ast.SelectionSet, v *model.FieldSetTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FieldSetTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFieldSetTemplateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplateInput(ctx context.Context, v interface{}) (*model.FieldSetTemplateInput, error) {
	res, err := ec.unmarshalInputFieldSetTemplateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFieldSetUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetUpdateInput(ctx context.Context, v interface{}) (model.FieldSetUpdateInput, error) {
	res, err := ec.unmarshalInputFieldSetUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) (*model.Filter, error) {
	res, err := ec.unmarshalInputFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNGCliAttributeKeyValuePair2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliAttributeKeyValuePair(ctx context.Context, sel ast.SelectionSet, v *model.GCliAttributeKeyValuePair) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GCliAttributeKeyValuePair(ctx, sel, v)
}

func (ec *executionContext) marshalNGCliItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GCliItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGCliItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGCliItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliItem(ctx context.Context, sel ast.SelectionSet, v *model.GCliItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GCliItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGCliSearchResultType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliSearchResultType(ctx context.Context, v interface{}) (model.GCliSearchResultType, error) {
	var res model.GCliSearchResultType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGCliSearchResultType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliSearchResultType(ctx context.Context, sel ast.SelectionSet, v model.GCliSearchResultType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNGlobalCache2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGlobalCache(ctx context.Context, sel ast.SelectionSet, v model.GlobalCache) graphql.Marshaler {
	return ec._GlobalCache(ctx, sel, &v)
}

func (ec *executionContext) marshalNGlobalCache2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGlobalCache(ctx context.Context, sel ast.SelectionSet, v *model.GlobalCache) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GlobalCache(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt642int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt642int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNInteractionEvent2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx context.Context, sel ast.SelectionSet, v model.InteractionEvent) graphql.Marshaler {
	return ec._InteractionEvent(ctx, sel, &v)
}

func (ec *executionContext) marshalNInteractionEvent2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.InteractionEvent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx context.Context, sel ast.SelectionSet, v *model.InteractionEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InteractionEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInteractionEventInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventInput(ctx context.Context, v interface{}) (model.InteractionEventInput, error) {
	res, err := ec.unmarshalInputInteractionEventInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInteractionEventParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipant(ctx context.Context, sel ast.SelectionSet, v model.InteractionEventParticipant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InteractionEventParticipant(ctx, sel, v)
}

func (ec *executionContext) marshalNInteractionEventParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantᚄ(ctx context.Context, sel ast.SelectionSet, v []model.InteractionEventParticipant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInteractionEventParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInteractionEventParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantInputᚄ(ctx context.Context, v interface{}) ([]*model.InteractionEventParticipantInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InteractionEventParticipantInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInteractionEventParticipantInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNInteractionEventParticipantInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEventParticipantInput(ctx context.Context, v interface{}) (*model.InteractionEventParticipantInput, error) {
	res, err := ec.unmarshalInputInteractionEventParticipantInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInteractionSession2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx context.Context, sel ast.SelectionSet, v model.InteractionSession) graphql.Marshaler {
	return ec._InteractionSession(ctx, sel, &v)
}

func (ec *executionContext) marshalNInteractionSession2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx context.Context, sel ast.SelectionSet, v *model.InteractionSession) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InteractionSession(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInteractionSessionInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionInput(ctx context.Context, v interface{}) (model.InteractionSessionInput, error) {
	res, err := ec.unmarshalInputInteractionSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInteractionSessionParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipant(ctx context.Context, sel ast.SelectionSet, v model.InteractionSessionParticipant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InteractionSessionParticipant(ctx, sel, v)
}

func (ec *executionContext) marshalNInteractionSessionParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipantᚄ(ctx context.Context, sel ast.SelectionSet, v []model.InteractionSessionParticipant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInteractionSessionParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInteractionSessionParticipantInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipantInput(ctx context.Context, v interface{}) (*model.InteractionSessionParticipantInput, error) {
	res, err := ec.unmarshalInputInteractionSessionParticipantInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInternalStage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInternalStage(ctx context.Context, v interface{}) (model.InternalStage, error) {
	var res model.InternalStage
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInternalStage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInternalStage(ctx context.Context, sel ast.SelectionSet, v model.InternalStage) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInternalType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInternalType(ctx context.Context, v interface{}) (model.InternalType, error) {
	var res model.InternalType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInternalType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInternalType(ctx context.Context, sel ast.SelectionSet, v model.InternalType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNInvoice2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoice(ctx context.Context, sel ast.SelectionSet, v model.Invoice) graphql.Marshaler {
	return ec._Invoice(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvoice2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Invoice) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInvoice2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInvoice2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoice(ctx context.Context, sel ast.SelectionSet, v *model.Invoice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Invoice(ctx, sel, v)
}

func (ec *executionContext) marshalNInvoiceCustomer2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceCustomer(ctx context.Context, sel ast.SelectionSet, v *model.InvoiceCustomer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvoiceCustomer(ctx, sel, v)
}

func (ec *executionContext) marshalNInvoiceLine2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLineᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.InvoiceLine) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInvoiceLine2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLine(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInvoiceLine2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLine(ctx context.Context, sel ast.SelectionSet, v *model.InvoiceLine) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvoiceLine(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInvoiceLineInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLineInputᚄ(ctx context.Context, v interface{}) ([]*model.InvoiceLineInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InvoiceLineInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInvoiceLineInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLineInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNInvoiceLineInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceLineInput(ctx context.Context, v interface{}) (*model.InvoiceLineInput, error) {
	res, err := ec.unmarshalInputInvoiceLineInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInvoiceProvider2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceProvider(ctx context.Context, sel ast.SelectionSet, v *model.InvoiceProvider) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvoiceProvider(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInvoiceSimulateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceSimulateInput(ctx context.Context, v interface{}) (model.InvoiceSimulateInput, error) {
	res, err := ec.unmarshalInputInvoiceSimulateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInvoiceUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceUpdateInput(ctx context.Context, v interface{}) (model.InvoiceUpdateInput, error) {
	res, err := ec.unmarshalInputInvoiceUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInvoicesPage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicesPage(ctx context.Context, sel ast.SelectionSet, v model.InvoicesPage) graphql.Marshaler {
	return ec._InvoicesPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvoicesPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicesPage(ctx context.Context, sel ast.SelectionSet, v *model.InvoicesPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvoicesPage(ctx, sel, v)
}

func (ec *executionContext) marshalNInvoicingCycle2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycle(ctx context.Context, sel ast.SelectionSet, v model.InvoicingCycle) graphql.Marshaler {
	return ec._InvoicingCycle(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvoicingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycle(ctx context.Context, sel ast.SelectionSet, v *model.InvoicingCycle) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvoicingCycle(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInvoicingCycleInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleInput(ctx context.Context, v interface{}) (model.InvoicingCycleInput, error) {
	res, err := ec.unmarshalInputInvoicingCycleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNInvoicingCycleType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleType(ctx context.Context, v interface{}) (model.InvoicingCycleType, error) {
	var res model.InvoicingCycleType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInvoicingCycleType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleType(ctx context.Context, sel ast.SelectionSet, v model.InvoicingCycleType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInvoicingCycleUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoicingCycleUpdateInput(ctx context.Context, v interface{}) (model.InvoicingCycleUpdateInput, error) {
	res, err := ec.unmarshalInputInvoicingCycleUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIssue2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssue(ctx context.Context, sel ast.SelectionSet, v model.Issue) graphql.Marshaler {
	return ec._Issue(ctx, sel, &v)
}

func (ec *executionContext) marshalNIssue2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssue(ctx context.Context, sel ast.SelectionSet, v *model.Issue) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Issue(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipant(ctx context.Context, sel ast.SelectionSet, v model.IssueParticipant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IssueParticipant(ctx, sel, v)
}

func (ec *executionContext) marshalNIssueParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipantᚄ(ctx context.Context, sel ast.SelectionSet, v []model.IssueParticipant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIssueSummaryByStatus2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueSummaryByStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.IssueSummaryByStatus) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIssueSummaryByStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueSummaryByStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIssueSummaryByStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueSummaryByStatus(ctx context.Context, sel ast.SelectionSet, v *model.IssueSummaryByStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IssueSummaryByStatus(ctx, sel, v)
}

func (ec *executionContext) marshalNJobRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRole(ctx context.Context, sel ast.SelectionSet, v model.JobRole) graphql.Marshaler {
	return ec._JobRole(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobRole2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.JobRole) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJobRole2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNJobRole2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRole(ctx context.Context, sel ast.SelectionSet, v *model.JobRole) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JobRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalNJobRoleInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleInput(ctx context.Context, v interface{}) (model.JobRoleInput, error) {
	res, err := ec.unmarshalInputJobRoleInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobRoleInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleInput(ctx context.Context, v interface{}) (*model.JobRoleInput, error) {
	res, err := ec.unmarshalInputJobRoleInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJobRoleUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleUpdateInput(ctx context.Context, v interface{}) (model.JobRoleUpdateInput, error) {
	res, err := ec.unmarshalInputJobRoleUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLinkOrganizationsInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkOrganizationsInput(ctx context.Context, v interface{}) (model.LinkOrganizationsInput, error) {
	res, err := ec.unmarshalInputLinkOrganizationsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLinkedOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkedOrganizationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.LinkedOrganization) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLinkedOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkedOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLinkedOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLinkedOrganization(ctx context.Context, sel ast.SelectionSet, v *model.LinkedOrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LinkedOrganization(ctx, sel, v)
}

func (ec *executionContext) marshalNLocation2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocation(ctx context.Context, sel ast.SelectionSet, v model.Location) graphql.Marshaler {
	return ec._Location(ctx, sel, &v)
}

func (ec *executionContext) marshalNLocation2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Location) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLocation2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLocation2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocation(ctx context.Context, sel ast.SelectionSet, v *model.Location) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Location(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLocationUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLocationUpdateInput(ctx context.Context, v interface{}) (model.LocationUpdateInput, error) {
	res, err := ec.unmarshalInputLocationUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLogEntry2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLogEntry(ctx context.Context, sel ast.SelectionSet, v model.LogEntry) graphql.Marshaler {
	return ec._LogEntry(ctx, sel, &v)
}

func (ec *executionContext) marshalNLogEntry2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLogEntry(ctx context.Context, sel ast.SelectionSet, v *model.LogEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LogEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLogEntryInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLogEntryInput(ctx context.Context, v interface{}) (model.LogEntryInput, error) {
	res, err := ec.unmarshalInputLogEntryInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLogEntryUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLogEntryUpdateInput(ctx context.Context, v interface{}) (model.LogEntryUpdateInput, error) {
	res, err := ec.unmarshalInputLogEntryUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMasterPlan2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx context.Context, sel ast.SelectionSet, v model.MasterPlan) graphql.Marshaler {
	return ec._MasterPlan(ctx, sel, &v)
}

func (ec *executionContext) marshalNMasterPlan2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MasterPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMasterPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMasterPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlan(ctx context.Context, sel ast.SelectionSet, v *model.MasterPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MasterPlan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMasterPlanInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanInput(ctx context.Context, v interface{}) (model.MasterPlanInput, error) {
	res, err := ec.unmarshalInputMasterPlanInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMasterPlanMilestone2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestone(ctx context.Context, sel ast.SelectionSet, v model.MasterPlanMilestone) graphql.Marshaler {
	return ec._MasterPlanMilestone(ctx, sel, &v)
}

func (ec *executionContext) marshalNMasterPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MasterPlanMilestone) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMasterPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMasterPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestone(ctx context.Context, sel ast.SelectionSet, v *model.MasterPlanMilestone) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MasterPlanMilestone(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMasterPlanMilestoneInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneInput(ctx context.Context, v interface{}) (model.MasterPlanMilestoneInput, error) {
	res, err := ec.unmarshalInputMasterPlanMilestoneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMasterPlanMilestoneReorderInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneReorderInput(ctx context.Context, v interface{}) (model.MasterPlanMilestoneReorderInput, error) {
	res, err := ec.unmarshalInputMasterPlanMilestoneReorderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMasterPlanMilestoneUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneUpdateInput(ctx context.Context, v interface{}) (model.MasterPlanMilestoneUpdateInput, error) {
	res, err := ec.unmarshalInputMasterPlanMilestoneUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMasterPlanMilestoneUpdateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneUpdateInputᚄ(ctx context.Context, v interface{}) ([]*model.MasterPlanMilestoneUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.MasterPlanMilestoneUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMasterPlanMilestoneUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNMasterPlanMilestoneUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanMilestoneUpdateInput(ctx context.Context, v interface{}) (*model.MasterPlanMilestoneUpdateInput, error) {
	res, err := ec.unmarshalInputMasterPlanMilestoneUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMasterPlanUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMasterPlanUpdateInput(ctx context.Context, v interface{}) (model.MasterPlanUpdateInput, error) {
	res, err := ec.unmarshalInputMasterPlanUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeeting2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx context.Context, sel ast.SelectionSet, v model.Meeting) graphql.Marshaler {
	return ec._Meeting(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeeting2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Meeting) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx context.Context, sel ast.SelectionSet, v *model.Meeting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Meeting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMeetingInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingInput(ctx context.Context, v interface{}) (model.MeetingInput, error) {
	res, err := ec.unmarshalInputMeetingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeetingParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipant(ctx context.Context, sel ast.SelectionSet, v model.MeetingParticipant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MeetingParticipant(ctx, sel, v)
}

func (ec *executionContext) marshalNMeetingParticipant2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantᚄ(ctx context.Context, sel ast.SelectionSet, v []model.MeetingParticipant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMeetingParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNMeetingParticipantInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInput(ctx context.Context, v interface{}) (model.MeetingParticipantInput, error) {
	res, err := ec.unmarshalInputMeetingParticipantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMeetingParticipantInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInput(ctx context.Context, v interface{}) (*model.MeetingParticipantInput, error) {
	res, err := ec.unmarshalInputMeetingParticipantInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMeetingStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingStatus(ctx context.Context, v interface{}) (model.MeetingStatus, error) {
	var res model.MeetingStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeetingStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingStatus(ctx context.Context, sel ast.SelectionSet, v model.MeetingStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMeetingUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingUpdateInput(ctx context.Context, v interface{}) (model.MeetingUpdateInput, error) {
	res, err := ec.unmarshalInputMeetingUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMeetingsPage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingsPage(ctx context.Context, sel ast.SelectionSet, v model.MeetingsPage) graphql.Marshaler {
	return ec._MeetingsPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNMeetingsPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingsPage(ctx context.Context, sel ast.SelectionSet, v *model.MeetingsPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MeetingsPage(ctx, sel, v)
}

func (ec *executionContext) marshalNMetadata2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMetadata(ctx context.Context, sel ast.SelectionSet, v *model.Metadata) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Metadata(ctx, sel, v)
}

func (ec *executionContext) marshalNNote2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx context.Context, sel ast.SelectionSet, v model.Note) graphql.Marshaler {
	return ec._Note(ctx, sel, &v)
}

func (ec *executionContext) marshalNNote2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Note) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNote2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNote2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNote(ctx context.Context, sel ast.SelectionSet, v *model.Note) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Note(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNoteInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteInput(ctx context.Context, v interface{}) (model.NoteInput, error) {
	res, err := ec.unmarshalInputNoteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotePage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNotePage(ctx context.Context, sel ast.SelectionSet, v model.NotePage) graphql.Marshaler {
	return ec._NotePage(ctx, sel, &v)
}

func (ec *executionContext) marshalNNotePage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNotePage(ctx context.Context, sel ast.SelectionSet, v *model.NotePage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NotePage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNoteUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteUpdateInput(ctx context.Context, v interface{}) (model.NoteUpdateInput, error) {
	res, err := ec.unmarshalInputNoteUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotedEntity2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNotedEntity(ctx context.Context, sel ast.SelectionSet, v model.NotedEntity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NotedEntity(ctx, sel, v)
}

func (ec *executionContext) marshalNNotedEntity2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNotedEntityᚄ(ctx context.Context, sel ast.SelectionSet, v []model.NotedEntity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotedEntity2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNotedEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNOnboardingPlanMilestoneItemStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneItemStatus(ctx context.Context, v interface{}) (model.OnboardingPlanMilestoneItemStatus, error) {
	var res model.OnboardingPlanMilestoneItemStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOnboardingPlanMilestoneItemStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneItemStatus(ctx context.Context, sel ast.SelectionSet, v model.OnboardingPlanMilestoneItemStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOnboardingPlanMilestoneStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneStatus(ctx context.Context, v interface{}) (model.OnboardingPlanMilestoneStatus, error) {
	var res model.OnboardingPlanMilestoneStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOnboardingPlanMilestoneStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanMilestoneStatus(ctx context.Context, sel ast.SelectionSet, v model.OnboardingPlanMilestoneStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOnboardingPlanStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanStatus(ctx context.Context, v interface{}) (model.OnboardingPlanStatus, error) {
	var res model.OnboardingPlanStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOnboardingPlanStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingPlanStatus(ctx context.Context, sel ast.SelectionSet, v model.OnboardingPlanStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOnboardingStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingStatus(ctx context.Context, v interface{}) (model.OnboardingStatus, error) {
	var res model.OnboardingStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOnboardingStatus2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingStatus(ctx context.Context, sel ast.SelectionSet, v model.OnboardingStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOnboardingStatusInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingStatusInput(ctx context.Context, v interface{}) (model.OnboardingStatusInput, error) {
	res, err := ec.unmarshalInputOnboardingStatusInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOpportunity2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx context.Context, sel ast.SelectionSet, v model.Opportunity) graphql.Marshaler {
	return ec._Opportunity(ctx, sel, &v)
}

func (ec *executionContext) marshalNOpportunity2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx context.Context, sel ast.SelectionSet, v *model.Opportunity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Opportunity(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOpportunityRenewalLikelihood2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalLikelihood(ctx context.Context, v interface{}) (model.OpportunityRenewalLikelihood, error) {
	var res model.OpportunityRenewalLikelihood
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOpportunityRenewalLikelihood2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalLikelihood(ctx context.Context, sel ast.SelectionSet, v model.OpportunityRenewalLikelihood) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOpportunityRenewalUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalUpdateInput(ctx context.Context, v interface{}) (model.OpportunityRenewalUpdateInput, error) {
	res, err := ec.unmarshalInputOpportunityRenewalUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOpportunityUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityUpdateInput(ctx context.Context, v interface{}) (model.OpportunityUpdateInput, error) {
	res, err := ec.unmarshalInputOpportunityUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganization2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v model.Organization) graphql.Marshaler {
	return ec._Organization(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Organization) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *model.Organization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationInput(ctx context.Context, v interface{}) (model.OrganizationInput, error) {
	res, err := ec.unmarshalInputOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPage(ctx context.Context, sel ast.SelectionSet, v model.OrganizationPage) graphql.Marshaler {
	return ec._OrganizationPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPage(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationPage(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationPlan2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlan(ctx context.Context, sel ast.SelectionSet, v model.OrganizationPlan) graphql.Marshaler {
	return ec._OrganizationPlan(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationPlan2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OrganizationPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrganizationPlan2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlan(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationPlan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPlanInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanInput(ctx context.Context, v interface{}) (model.OrganizationPlanInput, error) {
	res, err := ec.unmarshalInputOrganizationPlanInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPlanMilestone2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestone(ctx context.Context, sel ast.SelectionSet, v model.OrganizationPlanMilestone) graphql.Marshaler {
	return ec._OrganizationPlanMilestone(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationPlanMilestone2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OrganizationPlanMilestone) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestone(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrganizationPlanMilestone2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestone(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationPlanMilestone) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationPlanMilestone(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPlanMilestoneInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneInput(ctx context.Context, v interface{}) (model.OrganizationPlanMilestoneInput, error) {
	res, err := ec.unmarshalInputOrganizationPlanMilestoneInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPlanMilestoneItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OrganizationPlanMilestoneItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationPlanMilestoneItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOrganizationPlanMilestoneItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItem(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationPlanMilestoneItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationPlanMilestoneItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPlanMilestoneReorderInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneReorderInput(ctx context.Context, v interface{}) (model.OrganizationPlanMilestoneReorderInput, error) {
	res, err := ec.unmarshalInputOrganizationPlanMilestoneReorderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPlanMilestoneStatusDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneStatusDetails(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationPlanMilestoneStatusDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationPlanMilestoneStatusDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPlanMilestoneUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneUpdateInput(ctx context.Context, v interface{}) (model.OrganizationPlanMilestoneUpdateInput, error) {
	res, err := ec.unmarshalInputOrganizationPlanMilestoneUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationPlanMilestoneUpdateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneUpdateInputᚄ(ctx context.Context, v interface{}) ([]*model.OrganizationPlanMilestoneUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OrganizationPlanMilestoneUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOrganizationPlanMilestoneUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNOrganizationPlanMilestoneUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneUpdateInput(ctx context.Context, v interface{}) (*model.OrganizationPlanMilestoneUpdateInput, error) {
	res, err := ec.unmarshalInputOrganizationPlanMilestoneUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationPlanStatusDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanStatusDetails(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationPlanStatusDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationPlanStatusDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationPlanUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanUpdateInput(ctx context.Context, v interface{}) (model.OrganizationPlanUpdateInput, error) {
	res, err := ec.unmarshalInputOrganizationPlanUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOrganizationUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationUpdateInput(ctx context.Context, v interface{}) (model.OrganizationUpdateInput, error) {
	res, err := ec.unmarshalInputOrganizationUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPagination2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx context.Context, v interface{}) (model.Pagination, error) {
	res, err := ec.unmarshalInputPagination(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPhoneNumber2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx context.Context, sel ast.SelectionSet, v model.PhoneNumber) graphql.Marshaler {
	return ec._PhoneNumber(ctx, sel, &v)
}

func (ec *executionContext) marshalNPhoneNumber2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PhoneNumber) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPhoneNumber2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumber(ctx context.Context, sel ast.SelectionSet, v *model.PhoneNumber) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PhoneNumber(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPhoneNumberInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberInput(ctx context.Context, v interface{}) (model.PhoneNumberInput, error) {
	res, err := ec.unmarshalInputPhoneNumberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPhoneNumberUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberUpdateInput(ctx context.Context, v interface{}) (model.PhoneNumberUpdateInput, error) {
	res, err := ec.unmarshalInputPhoneNumberUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlayer2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v model.Player) graphql.Marshaler {
	return ec._Player(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlayer2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *model.Player) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlayerInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerInput(ctx context.Context, v interface{}) (model.PlayerInput, error) {
	res, err := ec.unmarshalInputPlayerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPlayerInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerInput(ctx context.Context, v interface{}) (*model.PlayerInput, error) {
	res, err := ec.unmarshalInputPlayerInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlayerUser2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PlayerUser) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlayerUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlayerUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPlayerUser(ctx context.Context, sel ast.SelectionSet, v *model.PlayerUser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlayerUser(ctx, sel, v)
}

func (ec *executionContext) marshalNReminder2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminder(ctx context.Context, sel ast.SelectionSet, v model.Reminder) graphql.Marshaler {
	return ec._Reminder(ctx, sel, &v)
}

func (ec *executionContext) marshalNReminder2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Reminder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReminder2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReminder2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminder(ctx context.Context, sel ast.SelectionSet, v *model.Reminder) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Reminder(ctx, sel, v)
}

func (ec *executionContext) unmarshalNReminderInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminderInput(ctx context.Context, v interface{}) (model.ReminderInput, error) {
	res, err := ec.unmarshalInputReminderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNReminderUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐReminderUpdateInput(ctx context.Context, v interface{}) (model.ReminderUpdateInput, error) {
	res, err := ec.unmarshalInputReminderUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRenewalRecord2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalRecordᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RenewalRecord) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRenewalRecord2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRenewalRecord2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalRecord(ctx context.Context, sel ast.SelectionSet, v *model.RenewalRecord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RenewalRecord(ctx, sel, v)
}

func (ec *executionContext) marshalNResult2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v model.Result) graphql.Marshaler {
	return ec._Result(ctx, sel, &v)
}

func (ec *executionContext) marshalNResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v *model.Result) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Result(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) (model.Role, error) {
	var res model.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v model.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx context.Context, v interface{}) ([]model.Role, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.Role, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRole2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRoleᚄ(ctx context.Context, sel ast.SelectionSet, v []model.Role) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRole2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNServiceLineItem2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItem(ctx context.Context, sel ast.SelectionSet, v model.ServiceLineItem) graphql.Marshaler {
	return ec._ServiceLineItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNServiceLineItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItem(ctx context.Context, sel ast.SelectionSet, v *model.ServiceLineItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ServiceLineItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNServiceLineItemBulkUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemBulkUpdateInput(ctx context.Context, v interface{}) (model.ServiceLineItemBulkUpdateInput, error) {
	res, err := ec.unmarshalInputServiceLineItemBulkUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNServiceLineItemBulkUpdateItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemBulkUpdateItem(ctx context.Context, v interface{}) ([]*model.ServiceLineItemBulkUpdateItem, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ServiceLineItemBulkUpdateItem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOServiceLineItemBulkUpdateItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemBulkUpdateItem(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNServiceLineItemCloseInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemCloseInput(ctx context.Context, v interface{}) (model.ServiceLineItemCloseInput, error) {
	res, err := ec.unmarshalInputServiceLineItemCloseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNServiceLineItemInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemInput(ctx context.Context, v interface{}) (model.ServiceLineItemInput, error) {
	res, err := ec.unmarshalInputServiceLineItemInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNServiceLineItemUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemUpdateInput(ctx context.Context, v interface{}) (model.ServiceLineItemUpdateInput, error) {
	res, err := ec.unmarshalInputServiceLineItemUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSlackChannel2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSlackChannelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SlackChannel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSlackChannel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSlackChannel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSlackChannel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSlackChannel(ctx context.Context, sel ast.SelectionSet, v *model.SlackChannel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SlackChannel(ctx, sel, v)
}

func (ec *executionContext) marshalNSlackChannelPage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSlackChannelPage(ctx context.Context, sel ast.SelectionSet, v model.SlackChannelPage) graphql.Marshaler {
	return ec._SlackChannelPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNSlackChannelPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSlackChannelPage(ctx context.Context, sel ast.SelectionSet, v *model.SlackChannelPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SlackChannelPage(ctx, sel, v)
}

func (ec *executionContext) marshalNSocial2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocial(ctx context.Context, sel ast.SelectionSet, v model.Social) graphql.Marshaler {
	return ec._Social(ctx, sel, &v)
}

func (ec *executionContext) marshalNSocial2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Social) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSocial2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSocial2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocial(ctx context.Context, sel ast.SelectionSet, v *model.Social) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Social(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSocialInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialInput(ctx context.Context, v interface{}) (model.SocialInput, error) {
	res, err := ec.unmarshalInputSocialInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSocialUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSocialUpdateInput(ctx context.Context, v interface{}) (model.SocialUpdateInput, error) {
	res, err := ec.unmarshalInputSocialUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSortBy2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortBy(ctx context.Context, v interface{}) (*model.SortBy, error) {
	res, err := ec.unmarshalInputSortBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSortingDirection2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortingDirection(ctx context.Context, v interface{}) (model.SortingDirection, error) {
	var res model.SortingDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSortingDirection2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortingDirection(ctx context.Context, sel ast.SelectionSet, v model.SortingDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSuggestedMergeOrganization2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSuggestedMergeOrganizationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SuggestedMergeOrganization) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSuggestedMergeOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSuggestedMergeOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSuggestedMergeOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSuggestedMergeOrganization(ctx context.Context, sel ast.SelectionSet, v *model.SuggestedMergeOrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SuggestedMergeOrganization(ctx, sel, v)
}

func (ec *executionContext) marshalNTableViewDef2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTableViewDefᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TableViewDef) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTableViewDef2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTableViewDef(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTableViewDef2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTableViewDef(ctx context.Context, sel ast.SelectionSet, v *model.TableViewDef) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TableViewDef(ctx, sel, v)
}

func (ec *executionContext) marshalNTableViewDefPage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTableViewDefPage(ctx context.Context, sel ast.SelectionSet, v model.TableViewDefPage) graphql.Marshaler {
	return ec._TableViewDefPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNTableViewDefPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTableViewDefPage(ctx context.Context, sel ast.SelectionSet, v *model.TableViewDefPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TableViewDefPage(ctx, sel, v)
}

func (ec *executionContext) marshalNTag2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v model.Tag) graphql.Marshaler {
	return ec._Tag(ctx, sel, &v)
}

func (ec *executionContext) marshalNTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Tag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTag2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v *model.Tag) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTagIdOrNameInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInput(ctx context.Context, v interface{}) (model.TagIDOrNameInput, error) {
	res, err := ec.unmarshalInputTagIdOrNameInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagIdOrNameInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInput(ctx context.Context, v interface{}) (*model.TagIDOrNameInput, error) {
	res, err := ec.unmarshalInputTagIdOrNameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagInput(ctx context.Context, v interface{}) (model.TagInput, error) {
	res, err := ec.unmarshalInputTagInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTagUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagUpdateInput(ctx context.Context, v interface{}) (model.TagUpdateInput, error) {
	res, err := ec.unmarshalInputTagUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTax2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTax(ctx context.Context, sel ast.SelectionSet, v *model.Tax) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tax(ctx, sel, v)
}

func (ec *executionContext) marshalNTenantBillableInfo2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillableInfo(ctx context.Context, sel ast.SelectionSet, v model.TenantBillableInfo) graphql.Marshaler {
	return ec._TenantBillableInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNTenantBillableInfo2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillableInfo(ctx context.Context, sel ast.SelectionSet, v *model.TenantBillableInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenantBillableInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNTenantBillingProfile2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfile(ctx context.Context, sel ast.SelectionSet, v model.TenantBillingProfile) graphql.Marshaler {
	return ec._TenantBillingProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNTenantBillingProfile2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfileᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TenantBillingProfile) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTenantBillingProfile2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTenantBillingProfile2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfile(ctx context.Context, sel ast.SelectionSet, v *model.TenantBillingProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenantBillingProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTenantBillingProfileInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfileInput(ctx context.Context, v interface{}) (model.TenantBillingProfileInput, error) {
	res, err := ec.unmarshalInputTenantBillingProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTenantBillingProfileUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantBillingProfileUpdateInput(ctx context.Context, v interface{}) (model.TenantBillingProfileUpdateInput, error) {
	res, err := ec.unmarshalInputTenantBillingProfileUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTenantInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantInput(ctx context.Context, v interface{}) (model.TenantInput, error) {
	res, err := ec.unmarshalInputTenantInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTenantSettings2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantSettings(ctx context.Context, sel ast.SelectionSet, v model.TenantSettings) graphql.Marshaler {
	return ec._TenantSettings(ctx, sel, &v)
}

func (ec *executionContext) marshalNTenantSettings2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantSettings(ctx context.Context, sel ast.SelectionSet, v *model.TenantSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenantSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTimelineEvent2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEvent(ctx context.Context, sel ast.SelectionSet, v model.TimelineEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TimelineEvent(ctx, sel, v)
}

func (ec *executionContext) marshalNTimelineEvent2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventᚄ(ctx context.Context, sel ast.SelectionSet, v []model.TimelineEvent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimelineEvent2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNTimelineEventType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventType(ctx context.Context, v interface{}) (model.TimelineEventType, error) {
	var res model.TimelineEventType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimelineEventType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventType(ctx context.Context, sel ast.SelectionSet, v model.TimelineEventType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserInput(ctx context.Context, v interface{}) (model.UserInput, error) {
	res, err := ec.unmarshalInputUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserPage2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserPage(ctx context.Context, sel ast.SelectionSet, v model.UserPage) graphql.Marshaler {
	return ec._UserPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserPage(ctx context.Context, sel ast.SelectionSet, v *model.UserPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserPage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserUpdateInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUserUpdateInput(ctx context.Context, v interface{}) (model.UserUpdateInput, error) {
	res, err := ec.unmarshalInputUserUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNWorkspaceInput2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐWorkspaceInput(ctx context.Context, v interface{}) (model.WorkspaceInput, error) {
	res, err := ec.unmarshalInputWorkspaceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOActionItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐActionItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ActionItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNActionItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐActionItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOAnalysis2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAnalysis(ctx context.Context, sel ast.SelectionSet, v *model.Analysis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Analysis(ctx, sel, v)
}

func (ec *executionContext) marshalOAttachment2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *model.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBankAccountCreateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccountCreateInput(ctx context.Context, v interface{}) (*model.BankAccountCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBankAccountCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBankAccountUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBankAccountUpdateInput(ctx context.Context, v interface{}) (*model.BankAccountUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBankAccountUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBilledType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx context.Context, v interface{}) (*model.BilledType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BilledType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBilledType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBilledType(ctx context.Context, sel ast.SelectionSet, v *model.BilledType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOBillingDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingDetails(ctx context.Context, sel ast.SelectionSet, v *model.BillingDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BillingDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBillingDetailsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐBillingDetailsInput(ctx context.Context, v interface{}) (*model.BillingDetailsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBillingDetailsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOColumnDef2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐColumnDef(ctx context.Context, sel ast.SelectionSet, v []*model.ColumnDef) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOColumnDef2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐColumnDef(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOColumnDef2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐColumnDef(ctx context.Context, sel ast.SelectionSet, v *model.ColumnDef) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ColumnDef(ctx, sel, v)
}

func (ec *executionContext) marshalOColumnType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐColumnType(ctx context.Context, sel ast.SelectionSet, v *model.ColumnType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ColumnType(ctx, sel, v)
}

func (ec *executionContext) marshalOContact2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContact(ctx context.Context, sel ast.SelectionSet, v *model.Contact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Contact(ctx, sel, v)
}

func (ec *executionContext) marshalOContract2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Contract) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContract2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContract(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOContractBillingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractBillingCycle(ctx context.Context, v interface{}) (*model.ContractBillingCycle, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ContractBillingCycle)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContractBillingCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractBillingCycle(ctx context.Context, sel ast.SelectionSet, v *model.ContractBillingCycle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContractRenewalCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx context.Context, v interface{}) (*model.ContractRenewalCycle, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ContractRenewalCycle)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContractRenewalCycle2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐContractRenewalCycle(ctx context.Context, sel ast.SelectionSet, v *model.ContractRenewalCycle) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCountry2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCountry(ctx context.Context, sel ast.SelectionSet, v *model.Country) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Country(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx context.Context, v interface{}) (*model.Currency, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Currency)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCurrency2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCurrency(ctx context.Context, sel ast.SelectionSet, v *model.Currency) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCustomFieldDataType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldDataType(ctx context.Context, v interface{}) (*model.CustomFieldDataType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CustomFieldDataType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCustomFieldDataType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldDataType(ctx context.Context, sel ast.SelectionSet, v *model.CustomFieldDataType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCustomFieldInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInputᚄ(ctx context.Context, v interface{}) ([]*model.CustomFieldInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CustomFieldInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCustomFieldInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCustomFieldTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplate(ctx context.Context, sel ast.SelectionSet, v *model.CustomFieldTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CustomFieldTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCustomFieldTemplateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateInputᚄ(ctx context.Context, v interface{}) ([]*model.CustomFieldTemplateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CustomFieldTemplateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCustomFieldTemplateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐCustomFieldTemplateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODashboardARRBreakdown2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardARRBreakdown(ctx context.Context, sel ast.SelectionSet, v *model.DashboardARRBreakdown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardARRBreakdown(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardARRBreakdownPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardARRBreakdownPerMonth(ctx context.Context, sel ast.SelectionSet, v *model.DashboardARRBreakdownPerMonth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardARRBreakdownPerMonth(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardCustomerMap2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardCustomerMapᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DashboardCustomerMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDashboardCustomerMap2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardCustomerMap(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODashboardGrossRevenueRetention2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardGrossRevenueRetention(ctx context.Context, sel ast.SelectionSet, v *model.DashboardGrossRevenueRetention) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardGrossRevenueRetention(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardGrossRevenueRetentionPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardGrossRevenueRetentionPerMonth(ctx context.Context, sel ast.SelectionSet, v *model.DashboardGrossRevenueRetentionPerMonth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardGrossRevenueRetentionPerMonth(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardMRRPerCustomer2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardMRRPerCustomer(ctx context.Context, sel ast.SelectionSet, v *model.DashboardMRRPerCustomer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardMRRPerCustomer(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardMRRPerCustomerPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardMRRPerCustomerPerMonth(ctx context.Context, sel ast.SelectionSet, v *model.DashboardMRRPerCustomerPerMonth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardMRRPerCustomerPerMonth(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardNewCustomers2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardNewCustomers(ctx context.Context, sel ast.SelectionSet, v *model.DashboardNewCustomers) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardNewCustomers(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardNewCustomersPerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardNewCustomersPerMonth(ctx context.Context, sel ast.SelectionSet, v *model.DashboardNewCustomersPerMonth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardNewCustomersPerMonth(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardOnboardingCompletion2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardOnboardingCompletion(ctx context.Context, sel ast.SelectionSet, v *model.DashboardOnboardingCompletion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardOnboardingCompletion(ctx, sel, v)
}

func (ec *executionContext) unmarshalODashboardPeriodInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardPeriodInput(ctx context.Context, v interface{}) (*model.DashboardPeriodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDashboardPeriodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODashboardRetentionRate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRetentionRate(ctx context.Context, sel ast.SelectionSet, v *model.DashboardRetentionRate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardRetentionRate(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardRetentionRatePerMonth2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRetentionRatePerMonth(ctx context.Context, sel ast.SelectionSet, v *model.DashboardRetentionRatePerMonth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardRetentionRatePerMonth(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardRevenueAtRisk2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardRevenueAtRisk(ctx context.Context, sel ast.SelectionSet, v *model.DashboardRevenueAtRisk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardRevenueAtRisk(ctx, sel, v)
}

func (ec *executionContext) marshalODashboardTimeToOnboard2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐDashboardTimeToOnboard(ctx context.Context, sel ast.SelectionSet, v *model.DashboardTimeToOnboard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DashboardTimeToOnboard(ctx, sel, v)
}

func (ec *executionContext) marshalOEmail2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Email) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmail2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmail(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOEmailInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailInput(ctx context.Context, v interface{}) (*model.EmailInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEmailLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailLabel(ctx context.Context, v interface{}) (*model.EmailLabel, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EmailLabel)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEmailLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEmailLabel(ctx context.Context, sel ast.SelectionSet, v *model.EmailLabel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOEntityTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplate(ctx context.Context, sel ast.SelectionSet, v *model.EntityTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EntityTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEntityTemplateExtension2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateExtension(ctx context.Context, v interface{}) (*model.EntityTemplateExtension, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EntityTemplateExtension)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEntityTemplateExtension2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐEntityTemplateExtension(ctx context.Context, sel ast.SelectionSet, v *model.EntityTemplateExtension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOExternalSystemReferenceInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemReferenceInput(ctx context.Context, v interface{}) (*model.ExternalSystemReferenceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputExternalSystemReferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOExternalSystemStripeDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐExternalSystemStripeDetails(ctx context.Context, sel ast.SelectionSet, v *model.ExternalSystemStripeDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ExternalSystemStripeDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOFieldSet2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSet(ctx context.Context, sel ast.SelectionSet, v *model.FieldSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FieldSet(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFieldSetInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInputᚄ(ctx context.Context, v interface{}) ([]*model.FieldSetInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FieldSetInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFieldSetInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFieldSetTemplate2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplate(ctx context.Context, sel ast.SelectionSet, v *model.FieldSetTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FieldSetTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFieldSetTemplateInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplateInputᚄ(ctx context.Context, v interface{}) ([]*model.FieldSetTemplateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.FieldSetTemplateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFieldSetTemplateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFieldSetTemplateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFilter2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilterᚄ(ctx context.Context, v interface{}) ([]*model.Filter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.Filter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFilter2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilter(ctx context.Context, v interface{}) (*model.Filter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFilterItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFilterItem(ctx context.Context, v interface{}) (*model.FilterItem, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilterItem(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOFundingRound2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFundingRound(ctx context.Context, v interface{}) (*model.FundingRound, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FundingRound)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFundingRound2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐFundingRound(ctx context.Context, sel ast.SelectionSet, v *model.FundingRound) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOGCliAttributeKeyValuePair2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliAttributeKeyValuePairᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GCliAttributeKeyValuePair) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGCliAttributeKeyValuePair2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐGCliAttributeKeyValuePair(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) marshalOInteractionEvent2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionEvent(ctx context.Context, sel ast.SelectionSet, v *model.InteractionEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InteractionEvent(ctx, sel, v)
}

func (ec *executionContext) marshalOInteractionSession2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSession(ctx context.Context, sel ast.SelectionSet, v *model.InteractionSession) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InteractionSession(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInteractionSessionParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipantInputᚄ(ctx context.Context, v interface{}) ([]*model.InteractionSessionParticipantInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.InteractionSessionParticipantInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInteractionSessionParticipantInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInteractionSessionParticipantInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInvoiceStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceStatus(ctx context.Context, v interface{}) (*model.InvoiceStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.InvoiceStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInvoiceStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐInvoiceStatus(ctx context.Context, sel ast.SelectionSet, v *model.InvoiceStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOIssue2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssue(ctx context.Context, sel ast.SelectionSet, v *model.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Issue(ctx, sel, v)
}

func (ec *executionContext) marshalOIssueParticipant2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐIssueParticipant(ctx context.Context, sel ast.SelectionSet, v model.IssueParticipant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IssueParticipant(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobRoleInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleInputᚄ(ctx context.Context, v interface{}) ([]*model.JobRoleInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.JobRoleInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNJobRoleInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐJobRoleInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLastTouchpoint2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLastTouchpoint(ctx context.Context, sel ast.SelectionSet, v *model.LastTouchpoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LastTouchpoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLastTouchpointType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLastTouchpointType(ctx context.Context, v interface{}) (*model.LastTouchpointType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LastTouchpointType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLastTouchpointType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐLastTouchpointType(ctx context.Context, sel ast.SelectionSet, v *model.LastTouchpointType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMarket2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMarket(ctx context.Context, v interface{}) (*model.Market, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Market)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMarket2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMarket(ctx context.Context, sel ast.SelectionSet, v *model.Market) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMeeting2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeeting(ctx context.Context, sel ast.SelectionSet, v *model.Meeting) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Meeting(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMeetingParticipantInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInputᚄ(ctx context.Context, v interface{}) ([]*model.MeetingParticipantInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.MeetingParticipantInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMeetingParticipantInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingParticipantInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMeetingStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingStatus(ctx context.Context, v interface{}) (*model.MeetingStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MeetingStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMeetingStatus2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐMeetingStatus(ctx context.Context, sel ast.SelectionSet, v *model.MeetingStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONoteInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteInput(ctx context.Context, v interface{}) (*model.NoteInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNoteInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONoteUpdateInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐNoteUpdateInput(ctx context.Context, v interface{}) (*model.NoteUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNoteUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOnboardingDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOnboardingDetails(ctx context.Context, sel ast.SelectionSet, v *model.OnboardingDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OnboardingDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOOpportunity2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Opportunity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOpportunity2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOOpportunity2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunity(ctx context.Context, sel ast.SelectionSet, v *model.Opportunity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Opportunity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOpportunityRenewalLikelihood2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalLikelihood(ctx context.Context, v interface{}) (*model.OpportunityRenewalLikelihood, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OpportunityRenewalLikelihood)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOpportunityRenewalLikelihood2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOpportunityRenewalLikelihood(ctx context.Context, sel ast.SelectionSet, v *model.OpportunityRenewalLikelihood) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOrgAccountDetails2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrgAccountDetails(ctx context.Context, sel ast.SelectionSet, v *model.OrgAccountDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgAccountDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganization2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *model.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPage(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationPage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOrganizationPlanMilestoneItemInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItemInput(ctx context.Context, v interface{}) ([]*model.OrganizationPlanMilestoneItemInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.OrganizationPlanMilestoneItemInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOOrganizationPlanMilestoneItemInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItemInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOOrganizationPlanMilestoneItemInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneItemInput(ctx context.Context, v interface{}) (*model.OrganizationPlanMilestoneItemInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationPlanMilestoneItemInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationPlanMilestoneStatusDetailsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanMilestoneStatusDetailsInput(ctx context.Context, v interface{}) (*model.OrganizationPlanMilestoneStatusDetailsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationPlanMilestoneStatusDetailsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOOrganizationPlanStatusDetailsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐOrganizationPlanStatusDetailsInput(ctx context.Context, v interface{}) (*model.OrganizationPlanStatusDetailsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputOrganizationPlanStatusDetailsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPagination2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPagination(ctx context.Context, v interface{}) (*model.Pagination, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPagination(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPhoneNumberInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberInput(ctx context.Context, v interface{}) (*model.PhoneNumberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhoneNumberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPhoneNumberLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberLabel(ctx context.Context, v interface{}) (*model.PhoneNumberLabel, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.PhoneNumberLabel)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPhoneNumberLabel2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐPhoneNumberLabel(ctx context.Context, sel ast.SelectionSet, v *model.PhoneNumberLabel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalORenewalSummary2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalSummary(ctx context.Context, sel ast.SelectionSet, v *model.RenewalSummary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RenewalSummary(ctx, sel, v)
}

func (ec *executionContext) marshalORenewalsPage2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐRenewalsPage(ctx context.Context, sel ast.SelectionSet, v *model.RenewalsPage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RenewalsPage(ctx, sel, v)
}

func (ec *executionContext) marshalOResult2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v *model.Result) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Result(ctx, sel, v)
}

func (ec *executionContext) marshalOServiceLineItem2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ServiceLineItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNServiceLineItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOServiceLineItemBulkUpdateItem2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐServiceLineItemBulkUpdateItem(ctx context.Context, v interface{}) (*model.ServiceLineItemBulkUpdateItem, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputServiceLineItemBulkUpdateItem(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSortBy2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortByᚄ(ctx context.Context, v interface{}) ([]*model.SortBy, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SortBy, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSortBy2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortBy(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSortBy2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐSortBy(ctx context.Context, v interface{}) (*model.SortBy, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSortBy(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v []*model.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTag2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTag2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTag2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTag2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTag(ctx context.Context, sel ast.SelectionSet, v *model.Tag) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tag(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTagIdOrNameInput2ᚕᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInputᚄ(ctx context.Context, v interface{}) ([]*model.TagIDOrNameInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TagIDOrNameInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTagIdOrNameInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTagIDOrNameInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTaxInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTaxInput(ctx context.Context, v interface{}) (*model.TaxInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTaxInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTenantSettingsInput2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTenantSettingsInput(ctx context.Context, v interface{}) (*model.TenantSettingsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTenantSettingsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOTimeRange2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimeRange(ctx context.Context, v interface{}) (*model.TimeRange, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimeRange(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimelineEvent2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEvent(ctx context.Context, sel ast.SelectionSet, v model.TimelineEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimelineEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimelineEventType2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventTypeᚄ(ctx context.Context, v interface{}) ([]model.TimelineEventType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.TimelineEventType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTimelineEventType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimelineEventType2ᚕgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []model.TimelineEventType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTimelineEventType2githubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐTimelineEventType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOViewType2ᚖgithubᚗcomᚋopenlineᚑaiᚋopenlineᚑcustomerᚑosᚋpackagesᚋserverᚋcustomerᚑosᚑapiᚑsdkᚋgraphᚋmodelᚐViewType(ctx context.Context, sel ast.SelectionSet, v *model.ViewType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ViewType(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
