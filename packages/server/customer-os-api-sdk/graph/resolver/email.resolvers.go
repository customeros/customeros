package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
)

// Users is the resolver for the users field.
func (r *emailResolver) Users(ctx context.Context, obj *model.Email) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Contacts is the resolver for the contacts field.
func (r *emailResolver) Contacts(ctx context.Context, obj *model.Email) ([]*model.Contact, error) {
	panic(fmt.Errorf("not implemented: Contacts - contacts"))
}

// Organizations is the resolver for the organizations field.
func (r *emailResolver) Organizations(ctx context.Context, obj *model.Email) ([]*model.Organization, error) {
	panic(fmt.Errorf("not implemented: Organizations - organizations"))
}

// EmailMergeToContact is the resolver for the emailMergeToContact field.
func (r *mutationResolver) EmailMergeToContact(ctx context.Context, contactID string, input model.EmailInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailMergeToContact - emailMergeToContact"))
}

// EmailRemoveFromContact is the resolver for the emailRemoveFromContact field.
func (r *mutationResolver) EmailRemoveFromContact(ctx context.Context, contactID string, email string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: EmailRemoveFromContact - emailRemoveFromContact"))
}

// EmailReplaceForContact is the resolver for the emailReplaceForContact field.
func (r *mutationResolver) EmailReplaceForContact(ctx context.Context, contactID string, previousEmail *string, input model.EmailInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailReplaceForContact - emailReplaceForContact"))
}

// EmailMergeToUser is the resolver for the emailMergeToUser field.
func (r *mutationResolver) EmailMergeToUser(ctx context.Context, userID string, input model.EmailInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailMergeToUser - emailMergeToUser"))
}

// EmailRemoveFromUser is the resolver for the emailRemoveFromUser field.
func (r *mutationResolver) EmailRemoveFromUser(ctx context.Context, userID string, email string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: EmailRemoveFromUser - emailRemoveFromUser"))
}

// EmailReplaceForUser is the resolver for the emailReplaceForUser field.
func (r *mutationResolver) EmailReplaceForUser(ctx context.Context, userID string, previousEmail *string, input model.EmailInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailReplaceForUser - emailReplaceForUser"))
}

// EmailMergeToOrganization is the resolver for the emailMergeToOrganization field.
func (r *mutationResolver) EmailMergeToOrganization(ctx context.Context, organizationID string, input model.EmailInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailMergeToOrganization - emailMergeToOrganization"))
}

// EmailRemoveFromOrganization is the resolver for the emailRemoveFromOrganization field.
func (r *mutationResolver) EmailRemoveFromOrganization(ctx context.Context, organizationID string, email string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: EmailRemoveFromOrganization - emailRemoveFromOrganization"))
}

// EmailReplaceForOrganization is the resolver for the emailReplaceForOrganization field.
func (r *mutationResolver) EmailReplaceForOrganization(ctx context.Context, organizationID string, previousEmail *string, input model.EmailInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailReplaceForOrganization - emailReplaceForOrganization"))
}

// EmailValidate is the resolver for the email_Validate field.
func (r *mutationResolver) EmailValidate(ctx context.Context, id string) (*model.ActionResponse, error) {
	panic(fmt.Errorf("not implemented: EmailValidate - email_Validate"))
}

// EmailUpdate is the resolver for the emailUpdate field.
func (r *mutationResolver) EmailUpdate(ctx context.Context, input model.EmailUpdateAddressInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailUpdate - emailUpdate"))
}

// EmailUpdateInContact is the resolver for the emailUpdateInContact field.
func (r *mutationResolver) EmailUpdateInContact(ctx context.Context, contactID string, input model.EmailRelationUpdateInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailUpdateInContact - emailUpdateInContact"))
}

// EmailUpdateInUser is the resolver for the emailUpdateInUser field.
func (r *mutationResolver) EmailUpdateInUser(ctx context.Context, userID string, input model.EmailRelationUpdateInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailUpdateInUser - emailUpdateInUser"))
}

// EmailUpdateInOrganization is the resolver for the emailUpdateInOrganization field.
func (r *mutationResolver) EmailUpdateInOrganization(ctx context.Context, organizationID string, input model.EmailRelationUpdateInput) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: EmailUpdateInOrganization - emailUpdateInOrganization"))
}

// Email is the resolver for the email field.
func (r *queryResolver) Email(ctx context.Context, id string) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Email returns generated.EmailResolver implementation.
func (r *Resolver) Email() generated.EmailResolver { return &emailResolver{r} }

type emailResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) EmailRemoveFromContactByID(ctx context.Context, contactID string, id string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: EmailRemoveFromContactByID - emailRemoveFromContactById"))
}
func (r *mutationResolver) EmailRemoveFromUserByID(ctx context.Context, userID string, id string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: EmailRemoveFromUserByID - emailRemoveFromUserById"))
}
func (r *mutationResolver) EmailRemoveFromOrganizationByID(ctx context.Context, organizationID string, id string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: EmailRemoveFromOrganizationByID - emailRemoveFromOrganizationById"))
}
func (r *mutationResolver) EmailDelete(ctx context.Context, id string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: EmailDelete - emailDelete"))
}
