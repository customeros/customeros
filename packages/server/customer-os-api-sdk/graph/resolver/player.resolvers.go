package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
)

// PlayerMerge is the resolver for the player_Merge field.
func (r *mutationResolver) PlayerMerge(ctx context.Context, userID string, input model.PlayerInput) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: PlayerMerge - player_Merge"))
}

// Users is the resolver for the users field.
func (r *playerResolver) Users(ctx context.Context, obj *model.Player) ([]*model.PlayerUser, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// PlayerByAuthIDProvider is the resolver for the player_ByAuthIdProvider field.
func (r *queryResolver) PlayerByAuthIDProvider(ctx context.Context, authID string, provider string) (*model.Player, error) {
	panic(fmt.Errorf("not implemented: PlayerByAuthIDProvider - player_ByAuthIdProvider"))
}

// Player returns generated.PlayerResolver implementation.
func (r *Resolver) Player() generated.PlayerResolver { return &playerResolver{r} }

type playerResolver struct{ *Resolver }
