package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
)

// Sequences is the resolver for the sequences field.
func (r *flowResolver) Sequences(ctx context.Context, obj *model.Flow) ([]*model.FlowSequence, error) {
	panic(fmt.Errorf("not implemented: Sequences - sequences"))
}

// Flow is the resolver for the flow field.
func (r *flowSequenceResolver) Flow(ctx context.Context, obj *model.FlowSequence) (*model.Flow, error) {
	panic(fmt.Errorf("not implemented: Flow - flow"))
}

// Steps is the resolver for the steps field.
func (r *flowSequenceResolver) Steps(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceStep, error) {
	panic(fmt.Errorf("not implemented: Steps - steps"))
}

// Contacts is the resolver for the contacts field.
func (r *flowSequenceResolver) Contacts(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceContact, error) {
	panic(fmt.Errorf("not implemented: Contacts - contacts"))
}

// Mailboxes is the resolver for the mailboxes field.
func (r *flowSequenceResolver) Mailboxes(ctx context.Context, obj *model.FlowSequence) ([]*model.Mailbox, error) {
	panic(fmt.Errorf("not implemented: Mailboxes - mailboxes"))
}

// Contact is the resolver for the contact field.
func (r *flowSequenceContactResolver) Contact(ctx context.Context, obj *model.FlowSequenceContact) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: Contact - contact"))
}

// Email is the resolver for the email field.
func (r *flowSequenceContactResolver) Email(ctx context.Context, obj *model.FlowSequenceContact) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Email is the resolver for the email field.
func (r *flowSequenceStepResolver) Email(ctx context.Context, obj *model.FlowSequenceStep) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Flows is the resolver for the flows field.
func (r *queryResolver) Flows(ctx context.Context) ([]*model.Flow, error) {
	panic(fmt.Errorf("not implemented: Flows - flows"))
}

// Sequences is the resolver for the sequences field.
func (r *queryResolver) Sequences(ctx context.Context) ([]*model.FlowSequence, error) {
	panic(fmt.Errorf("not implemented: Sequences - sequences"))
}

// Flow returns generated.FlowResolver implementation.
func (r *Resolver) Flow() generated.FlowResolver { return &flowResolver{r} }

// FlowSequence returns generated.FlowSequenceResolver implementation.
func (r *Resolver) FlowSequence() generated.FlowSequenceResolver { return &flowSequenceResolver{r} }

// FlowSequenceContact returns generated.FlowSequenceContactResolver implementation.
func (r *Resolver) FlowSequenceContact() generated.FlowSequenceContactResolver {
	return &flowSequenceContactResolver{r}
}

// FlowSequenceStep returns generated.FlowSequenceStepResolver implementation.
func (r *Resolver) FlowSequenceStep() generated.FlowSequenceStepResolver {
	return &flowSequenceStepResolver{r}
}

type flowResolver struct{ *Resolver }
type flowSequenceResolver struct{ *Resolver }
type flowSequenceContactResolver struct{ *Resolver }
type flowSequenceStepResolver struct{ *Resolver }
