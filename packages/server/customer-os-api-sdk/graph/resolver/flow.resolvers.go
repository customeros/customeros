package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
)

// Sequences is the resolver for the sequences field.
func (r *flowResolver) Sequences(ctx context.Context, obj *model.Flow) ([]*model.FlowSequence, error) {
	panic(fmt.Errorf("not implemented: Sequences - sequences"))
}

// Flow is the resolver for the flow field.
func (r *flowSequenceResolver) Flow(ctx context.Context, obj *model.FlowSequence) (*model.Flow, error) {
	panic(fmt.Errorf("not implemented: Flow - flow"))
}

// Steps is the resolver for the steps field.
func (r *flowSequenceResolver) Steps(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceStep, error) {
	panic(fmt.Errorf("not implemented: Steps - steps"))
}

// Contacts is the resolver for the contacts field.
func (r *flowSequenceResolver) Contacts(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceContact, error) {
	panic(fmt.Errorf("not implemented: Contacts - contacts"))
}

// Mailboxes is the resolver for the mailboxes field.
func (r *flowSequenceResolver) Mailboxes(ctx context.Context, obj *model.FlowSequence) ([]*model.Mailbox, error) {
	panic(fmt.Errorf("not implemented: Mailboxes - mailboxes"))
}

// Contact is the resolver for the contact field.
func (r *flowSequenceContactResolver) Contact(ctx context.Context, obj *model.FlowSequenceContact) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: Contact - contact"))
}

// Email is the resolver for the email field.
func (r *flowSequenceContactResolver) Email(ctx context.Context, obj *model.FlowSequenceContact) (*model.Email, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// FlowSequenceStore is the resolver for the flow_sequence_store field.
func (r *mutationResolver) FlowSequenceStore(ctx context.Context, input model.FlowSequenceStoreInput) (*model.FlowSequence, error) {
	panic(fmt.Errorf("not implemented: FlowSequenceStore - flow_sequence_store"))
}

// FlowSequenceLinkContact is the resolver for the flow_sequence_LinkContact field.
func (r *mutationResolver) FlowSequenceLinkContact(ctx context.Context, sequenceID string, contactID string, emailID string) (*model.FlowSequenceContact, error) {
	panic(fmt.Errorf("not implemented: FlowSequenceLinkContact - flow_sequence_LinkContact"))
}

// FlowSequenceUnlinkContact is the resolver for the flow_sequence_UnlinkContact field.
func (r *mutationResolver) FlowSequenceUnlinkContact(ctx context.Context, sequenceID string, contactID string, emailID string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: FlowSequenceUnlinkContact - flow_sequence_UnlinkContact"))
}

// FlowChangeStatus is the resolver for the flow_changeStatus field.
func (r *mutationResolver) FlowChangeStatus(ctx context.Context, id string, status model.FlowStatus) (*model.Flow, error) {
	panic(fmt.Errorf("not implemented: FlowChangeStatus - flow_changeStatus"))
}

// FlowSequenceChangeStatus is the resolver for the flow_sequence_changeStatus field.
func (r *mutationResolver) FlowSequenceChangeStatus(ctx context.Context, id string, status model.FlowSequenceStatus) (*model.FlowSequence, error) {
	panic(fmt.Errorf("not implemented: FlowSequenceChangeStatus - flow_sequence_changeStatus"))
}

// FlowSequenceStepChangeStatus is the resolver for the flow_sequence_step_changeStatus field.
func (r *mutationResolver) FlowSequenceStepChangeStatus(ctx context.Context, id string, status model.FlowSequenceStepStatus) (*model.FlowSequenceStep, error) {
	panic(fmt.Errorf("not implemented: FlowSequenceStepChangeStatus - flow_sequence_step_changeStatus"))
}

// Flows is the resolver for the flows field.
func (r *queryResolver) Flows(ctx context.Context) ([]*model.Flow, error) {
	panic(fmt.Errorf("not implemented: Flows - flows"))
}

// Sequences is the resolver for the sequences field.
func (r *queryResolver) Sequences(ctx context.Context) ([]*model.FlowSequence, error) {
	panic(fmt.Errorf("not implemented: Sequences - sequences"))
}

// Flow returns generated.FlowResolver implementation.
func (r *Resolver) Flow() generated.FlowResolver { return &flowResolver{r} }

// FlowSequence returns generated.FlowSequenceResolver implementation.
func (r *Resolver) FlowSequence() generated.FlowSequenceResolver { return &flowSequenceResolver{r} }

// FlowSequenceContact returns generated.FlowSequenceContactResolver implementation.
func (r *Resolver) FlowSequenceContact() generated.FlowSequenceContactResolver {
	return &flowSequenceContactResolver{r}
}

type flowResolver struct{ *Resolver }
type flowSequenceResolver struct{ *Resolver }
type flowSequenceContactResolver struct{ *Resolver }
