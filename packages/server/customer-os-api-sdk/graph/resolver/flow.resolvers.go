package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
)

// Contacts is the resolver for the contacts field.
func (r *flowResolver) Contacts(ctx context.Context, obj *model.Flow) ([]*model.FlowContact, error) {
	panic(fmt.Errorf("not implemented: Contacts - contacts"))
}

// Senders is the resolver for the senders field.
func (r *flowResolver) Senders(ctx context.Context, obj *model.Flow) ([]*model.FlowSender, error) {
	panic(fmt.Errorf("not implemented: Senders - senders"))
}

// Contact is the resolver for the contact field.
func (r *flowContactResolver) Contact(ctx context.Context, obj *model.FlowContact) (*model.Contact, error) {
	panic(fmt.Errorf("not implemented: Contact - contact"))
}

// Flow is the resolver for the flow field.
func (r *flowSenderResolver) Flow(ctx context.Context, obj *model.FlowSender) (*model.Flow, error) {
	panic(fmt.Errorf("not implemented: Flow - flow"))
}

// User is the resolver for the user field.
func (r *flowSenderResolver) User(ctx context.Context, obj *model.FlowSender) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// FlowMerge is the resolver for the flow_Merge field.
func (r *mutationResolver) FlowMerge(ctx context.Context, input model.FlowMergeInput) (*model.Flow, error) {
	panic(fmt.Errorf("not implemented: FlowMerge - flow_Merge"))
}

// FlowChangeStatus is the resolver for the flow_changeStatus field.
func (r *mutationResolver) FlowChangeStatus(ctx context.Context, id string, status model.FlowStatus) (*model.Flow, error) {
	panic(fmt.Errorf("not implemented: FlowChangeStatus - flow_changeStatus"))
}

// FlowContactAdd is the resolver for the flowContact_Add field.
func (r *mutationResolver) FlowContactAdd(ctx context.Context, flowID string, contactID string) (*model.FlowContact, error) {
	panic(fmt.Errorf("not implemented: FlowParticipantAdd - flowContact_Add"))
}

// FlowContactAddBulk is the resolver for the flowContact_AddBulk field.
func (r *mutationResolver) FlowContactAddBulk(ctx context.Context, flowID string, contactID []string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: FlowContactAddBulk - flowContact_AddBulk"))
}

// FlowContactDelete is the resolver for the flowContact_Delete field.
func (r *mutationResolver) FlowContactDelete(ctx context.Context, id string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: FlowParticipantDelete - flowContact_Delete"))
}

// FlowContactDeleteBulk is the resolver for the flowContact_DeleteBulk field.
func (r *mutationResolver) FlowContactDeleteBulk(ctx context.Context, id []string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: FlowContactDeleteBulk - flowContact_DeleteBulk"))
}

// FlowSenderMerge is the resolver for the flowSender_Merge field.
func (r *mutationResolver) FlowSenderMerge(ctx context.Context, flowID string, input model.FlowSenderMergeInput) (*model.FlowSender, error) {
	panic(fmt.Errorf("not implemented: FlowSenderMerge - flowSender_Merge"))
}

// FlowSenderDelete is the resolver for the flowSender_Delete field.
func (r *mutationResolver) FlowSenderDelete(ctx context.Context, id string) (*model.Result, error) {
	panic(fmt.Errorf("not implemented: FlowSenderDelete - flowSender_Delete"))
}

// Flows is the resolver for the flows field.
func (r *queryResolver) Flows(ctx context.Context) ([]*model.Flow, error) {
	panic(fmt.Errorf("not implemented: Flows - flows"))
}

// FlowEmailVariables is the resolver for the flow_emailVariables field.
func (r *queryResolver) FlowEmailVariables(ctx context.Context) ([]*model.EmailVariableEntity, error) {
	panic(fmt.Errorf("not implemented: FlowEmailVariables - flow_emailVariables"))
}

// Flow returns generated.FlowResolver implementation.
func (r *Resolver) Flow() generated.FlowResolver { return &flowResolver{r} }

// FlowContact returns generated.FlowContactResolver implementation.
func (r *Resolver) FlowContact() generated.FlowContactResolver { return &flowContactResolver{r} }

// FlowSender returns generated.FlowSenderResolver implementation.
func (r *Resolver) FlowSender() generated.FlowSenderResolver { return &flowSenderResolver{r} }

type flowResolver struct{ *Resolver }
type flowContactResolver struct{ *Resolver }
type flowSenderResolver struct{ *Resolver }
