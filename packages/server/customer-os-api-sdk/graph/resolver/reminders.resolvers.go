package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
)

// ReminderCreate is the resolver for the reminder_Create field.
func (r *mutationResolver) ReminderCreate(ctx context.Context, input model.ReminderInput) (*model.Reminder, error) {
	panic(fmt.Errorf("not implemented: ReminderCreate - reminder_Create"))
}

// ReminderUpdate is the resolver for the reminder_Update field.
func (r *mutationResolver) ReminderUpdate(ctx context.Context, input model.ReminderUpdateInput) (*model.Reminder, error) {
	panic(fmt.Errorf("not implemented: ReminderUpdate - reminder_Update"))
}

// Reminder is the resolver for the reminder field.
func (r *queryResolver) Reminder(ctx context.Context, id string) (*model.Reminder, error) {
	panic(fmt.Errorf("not implemented: Reminder - reminder"))
}

// RemindersForOrganization is the resolver for the remindersForOrganization field.
func (r *queryResolver) RemindersForOrganization(ctx context.Context, organizationID string, dismissed *bool) ([]*model.Reminder, error) {
	panic(fmt.Errorf("not implemented: RemindersForOrganization - remindersForOrganization"))
}

// Owner is the resolver for the owner field.
func (r *reminderResolver) Owner(ctx context.Context, obj *model.Reminder) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Reminder returns generated.ReminderResolver implementation.
func (r *Resolver) Reminder() generated.ReminderResolver { return &reminderResolver{r} }

type reminderResolver struct{ *Resolver }
