package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api-sdk/graph/model"
)

// OfferingCreate is the resolver for the offering_Create field.
func (r *mutationResolver) OfferingCreate(ctx context.Context, input *model.OfferingCreateInput) (*string, error) {
	panic(fmt.Errorf("not implemented: OfferingCreate - offering_Create"))
}

// OfferingUpdate is the resolver for the offering_Update field.
func (r *mutationResolver) OfferingUpdate(ctx context.Context, input *model.OfferingUpdateInput) (*string, error) {
	panic(fmt.Errorf("not implemented: OfferingUpdate - offering_Update"))
}

// ExternalLinks is the resolver for the externalLinks field.
func (r *offeringResolver) ExternalLinks(ctx context.Context, obj *model.Offering) ([]*model.ExternalSystem, error) {
	panic(fmt.Errorf("not implemented: ExternalLinks - externalLinks"))
}

// Offerings is the resolver for the offerings field.
func (r *queryResolver) Offerings(ctx context.Context) ([]*model.Offering, error) {
	panic(fmt.Errorf("not implemented: Offerings - offerings"))
}

// Offering returns generated.OfferingResolver implementation.
func (r *Resolver) Offering() generated.OfferingResolver { return &offeringResolver{r} }

type offeringResolver struct{ *Resolver }
