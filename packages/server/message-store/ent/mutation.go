// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/openline-ai/openline-customer-os/packages/server/message-store/ent/messagefeed"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/ent/messageitem"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMessageFeed = "MessageFeed"
	TypeMessageItem = "MessageItem"
)

// MessageFeedMutation represents an operation that mutates the MessageFeed nodes in the graph.
type MessageFeedMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	username            *string
	clearedFields       map[string]struct{}
	message_item        map[int]struct{}
	removedmessage_item map[int]struct{}
	clearedmessage_item bool
	done                bool
	oldValue            func(context.Context) (*MessageFeed, error)
	predicates          []predicate.MessageFeed
}

var _ ent.Mutation = (*MessageFeedMutation)(nil)

// messagefeedOption allows management of the mutation configuration using functional options.
type messagefeedOption func(*MessageFeedMutation)

// newMessageFeedMutation creates new mutation for the MessageFeed entity.
func newMessageFeedMutation(c config, op Op, opts ...messagefeedOption) *MessageFeedMutation {
	m := &MessageFeedMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageFeed,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageFeedID sets the ID field of the mutation.
func withMessageFeedID(id int) messagefeedOption {
	return func(m *MessageFeedMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageFeed
		)
		m.oldValue = func(ctx context.Context) (*MessageFeed, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageFeed.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageFeed sets the old MessageFeed of the mutation.
func withMessageFeed(node *MessageFeed) messagefeedOption {
	return func(m *MessageFeedMutation) {
		m.oldValue = func(context.Context) (*MessageFeed, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageFeedMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageFeedMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageFeedMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageFeedMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageFeed.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *MessageFeedMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *MessageFeedMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the MessageFeed entity.
// If the MessageFeed object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageFeedMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *MessageFeedMutation) ResetUsername() {
	m.username = nil
}

// AddMessageItemIDs adds the "message_item" edge to the MessageItem entity by ids.
func (m *MessageFeedMutation) AddMessageItemIDs(ids ...int) {
	if m.message_item == nil {
		m.message_item = make(map[int]struct{})
	}
	for i := range ids {
		m.message_item[ids[i]] = struct{}{}
	}
}

// ClearMessageItem clears the "message_item" edge to the MessageItem entity.
func (m *MessageFeedMutation) ClearMessageItem() {
	m.clearedmessage_item = true
}

// MessageItemCleared reports if the "message_item" edge to the MessageItem entity was cleared.
func (m *MessageFeedMutation) MessageItemCleared() bool {
	return m.clearedmessage_item
}

// RemoveMessageItemIDs removes the "message_item" edge to the MessageItem entity by IDs.
func (m *MessageFeedMutation) RemoveMessageItemIDs(ids ...int) {
	if m.removedmessage_item == nil {
		m.removedmessage_item = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.message_item, ids[i])
		m.removedmessage_item[ids[i]] = struct{}{}
	}
}

// RemovedMessageItem returns the removed IDs of the "message_item" edge to the MessageItem entity.
func (m *MessageFeedMutation) RemovedMessageItemIDs() (ids []int) {
	for id := range m.removedmessage_item {
		ids = append(ids, id)
	}
	return
}

// MessageItemIDs returns the "message_item" edge IDs in the mutation.
func (m *MessageFeedMutation) MessageItemIDs() (ids []int) {
	for id := range m.message_item {
		ids = append(ids, id)
	}
	return
}

// ResetMessageItem resets all changes to the "message_item" edge.
func (m *MessageFeedMutation) ResetMessageItem() {
	m.message_item = nil
	m.clearedmessage_item = false
	m.removedmessage_item = nil
}

// Where appends a list predicates to the MessageFeedMutation builder.
func (m *MessageFeedMutation) Where(ps ...predicate.MessageFeed) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageFeedMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MessageFeed).
func (m *MessageFeedMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageFeedMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.username != nil {
		fields = append(fields, messagefeed.FieldUsername)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageFeedMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagefeed.FieldUsername:
		return m.Username()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageFeedMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagefeed.FieldUsername:
		return m.OldUsername(ctx)
	}
	return nil, fmt.Errorf("unknown MessageFeed field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageFeedMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagefeed.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	}
	return fmt.Errorf("unknown MessageFeed field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageFeedMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageFeedMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageFeedMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageFeed numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageFeedMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageFeedMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageFeedMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageFeed nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageFeedMutation) ResetField(name string) error {
	switch name {
	case messagefeed.FieldUsername:
		m.ResetUsername()
		return nil
	}
	return fmt.Errorf("unknown MessageFeed field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageFeedMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.message_item != nil {
		edges = append(edges, messagefeed.EdgeMessageItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageFeedMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case messagefeed.EdgeMessageItem:
		ids := make([]ent.Value, 0, len(m.message_item))
		for id := range m.message_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageFeedMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmessage_item != nil {
		edges = append(edges, messagefeed.EdgeMessageItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageFeedMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case messagefeed.EdgeMessageItem:
		ids := make([]ent.Value, 0, len(m.removedmessage_item))
		for id := range m.removedmessage_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageFeedMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessage_item {
		edges = append(edges, messagefeed.EdgeMessageItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageFeedMutation) EdgeCleared(name string) bool {
	switch name {
	case messagefeed.EdgeMessageItem:
		return m.clearedmessage_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageFeedMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageFeed unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageFeedMutation) ResetEdge(name string) error {
	switch name {
	case messagefeed.EdgeMessageItem:
		m.ResetMessageItem()
		return nil
	}
	return fmt.Errorf("unknown MessageFeed edge %s", name)
}

// MessageItemMutation represents an operation that mutates the MessageItem nodes in the graph.
type MessageItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_type               *messageitem.Type
	username            *string
	message             *string
	channel             *messageitem.Channel
	direction           *messageitem.Direction
	time                *time.Time
	clearedFields       map[string]struct{}
	message_feed        *int
	clearedmessage_feed bool
	done                bool
	oldValue            func(context.Context) (*MessageItem, error)
	predicates          []predicate.MessageItem
}

var _ ent.Mutation = (*MessageItemMutation)(nil)

// messageitemOption allows management of the mutation configuration using functional options.
type messageitemOption func(*MessageItemMutation)

// newMessageItemMutation creates new mutation for the MessageItem entity.
func newMessageItemMutation(c config, op Op, opts ...messageitemOption) *MessageItemMutation {
	m := &MessageItemMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageItemID sets the ID field of the mutation.
func withMessageItemID(id int) messageitemOption {
	return func(m *MessageItemMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageItem
		)
		m.oldValue = func(ctx context.Context) (*MessageItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageItem sets the old MessageItem of the mutation.
func withMessageItem(node *MessageItem) messageitemOption {
	return func(m *MessageItemMutation) {
		m.oldValue = func(context.Context) (*MessageItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *MessageItemMutation) SetType(value messageitem.Type) {
	m._type = &value
}

// GetType returns the value of the "type" field in the mutation.
func (m *MessageItemMutation) GetType() (r messageitem.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the MessageItem entity.
// If the MessageItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageItemMutation) OldType(ctx context.Context) (v messageitem.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MessageItemMutation) ResetType() {
	m._type = nil
}

// SetUsername sets the "username" field.
func (m *MessageItemMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *MessageItemMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the MessageItem entity.
// If the MessageItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageItemMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *MessageItemMutation) ResetUsername() {
	m.username = nil
}

// SetMessage sets the "message" field.
func (m *MessageItemMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *MessageItemMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the MessageItem entity.
// If the MessageItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageItemMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *MessageItemMutation) ResetMessage() {
	m.message = nil
}

// SetChannel sets the "channel" field.
func (m *MessageItemMutation) SetChannel(value messageitem.Channel) {
	m.channel = &value
}

// Channel returns the value of the "channel" field in the mutation.
func (m *MessageItemMutation) Channel() (r messageitem.Channel, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the MessageItem entity.
// If the MessageItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageItemMutation) OldChannel(ctx context.Context) (v messageitem.Channel, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ResetChannel resets all changes to the "channel" field.
func (m *MessageItemMutation) ResetChannel() {
	m.channel = nil
}

// SetDirection sets the "direction" field.
func (m *MessageItemMutation) SetDirection(value messageitem.Direction) {
	m.direction = &value
}

// Direction returns the value of the "direction" field in the mutation.
func (m *MessageItemMutation) Direction() (r messageitem.Direction, exists bool) {
	v := m.direction
	if v == nil {
		return
	}
	return *v, true
}

// OldDirection returns the old "direction" field's value of the MessageItem entity.
// If the MessageItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageItemMutation) OldDirection(ctx context.Context) (v messageitem.Direction, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDirection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDirection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDirection: %w", err)
	}
	return oldValue.Direction, nil
}

// ResetDirection resets all changes to the "direction" field.
func (m *MessageItemMutation) ResetDirection() {
	m.direction = nil
}

// SetTime sets the "time" field.
func (m *MessageItemMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *MessageItemMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the MessageItem entity.
// If the MessageItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageItemMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ClearTime clears the value of the "time" field.
func (m *MessageItemMutation) ClearTime() {
	m.time = nil
	m.clearedFields[messageitem.FieldTime] = struct{}{}
}

// TimeCleared returns if the "time" field was cleared in this mutation.
func (m *MessageItemMutation) TimeCleared() bool {
	_, ok := m.clearedFields[messageitem.FieldTime]
	return ok
}

// ResetTime resets all changes to the "time" field.
func (m *MessageItemMutation) ResetTime() {
	m.time = nil
	delete(m.clearedFields, messageitem.FieldTime)
}

// SetMessageFeedID sets the "message_feed" edge to the MessageFeed entity by id.
func (m *MessageItemMutation) SetMessageFeedID(id int) {
	m.message_feed = &id
}

// ClearMessageFeed clears the "message_feed" edge to the MessageFeed entity.
func (m *MessageItemMutation) ClearMessageFeed() {
	m.clearedmessage_feed = true
}

// MessageFeedCleared reports if the "message_feed" edge to the MessageFeed entity was cleared.
func (m *MessageItemMutation) MessageFeedCleared() bool {
	return m.clearedmessage_feed
}

// MessageFeedID returns the "message_feed" edge ID in the mutation.
func (m *MessageItemMutation) MessageFeedID() (id int, exists bool) {
	if m.message_feed != nil {
		return *m.message_feed, true
	}
	return
}

// MessageFeedIDs returns the "message_feed" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageFeedID instead. It exists only for internal usage by the builders.
func (m *MessageItemMutation) MessageFeedIDs() (ids []int) {
	if id := m.message_feed; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessageFeed resets all changes to the "message_feed" edge.
func (m *MessageItemMutation) ResetMessageFeed() {
	m.message_feed = nil
	m.clearedmessage_feed = false
}

// Where appends a list predicates to the MessageItemMutation builder.
func (m *MessageItemMutation) Where(ps ...predicate.MessageItem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MessageItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MessageItem).
func (m *MessageItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageItemMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m._type != nil {
		fields = append(fields, messageitem.FieldType)
	}
	if m.username != nil {
		fields = append(fields, messageitem.FieldUsername)
	}
	if m.message != nil {
		fields = append(fields, messageitem.FieldMessage)
	}
	if m.channel != nil {
		fields = append(fields, messageitem.FieldChannel)
	}
	if m.direction != nil {
		fields = append(fields, messageitem.FieldDirection)
	}
	if m.time != nil {
		fields = append(fields, messageitem.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messageitem.FieldType:
		return m.GetType()
	case messageitem.FieldUsername:
		return m.Username()
	case messageitem.FieldMessage:
		return m.Message()
	case messageitem.FieldChannel:
		return m.Channel()
	case messageitem.FieldDirection:
		return m.Direction()
	case messageitem.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messageitem.FieldType:
		return m.OldType(ctx)
	case messageitem.FieldUsername:
		return m.OldUsername(ctx)
	case messageitem.FieldMessage:
		return m.OldMessage(ctx)
	case messageitem.FieldChannel:
		return m.OldChannel(ctx)
	case messageitem.FieldDirection:
		return m.OldDirection(ctx)
	case messageitem.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown MessageItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messageitem.FieldType:
		v, ok := value.(messageitem.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case messageitem.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case messageitem.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case messageitem.FieldChannel:
		v, ok := value.(messageitem.Channel)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	case messageitem.FieldDirection:
		v, ok := value.(messageitem.Direction)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDirection(v)
		return nil
	case messageitem.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown MessageItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(messageitem.FieldTime) {
		fields = append(fields, messageitem.FieldTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageItemMutation) ClearField(name string) error {
	switch name {
	case messageitem.FieldTime:
		m.ClearTime()
		return nil
	}
	return fmt.Errorf("unknown MessageItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageItemMutation) ResetField(name string) error {
	switch name {
	case messageitem.FieldType:
		m.ResetType()
		return nil
	case messageitem.FieldUsername:
		m.ResetUsername()
		return nil
	case messageitem.FieldMessage:
		m.ResetMessage()
		return nil
	case messageitem.FieldChannel:
		m.ResetChannel()
		return nil
	case messageitem.FieldDirection:
		m.ResetDirection()
		return nil
	case messageitem.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown MessageItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.message_feed != nil {
		edges = append(edges, messageitem.EdgeMessageFeed)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case messageitem.EdgeMessageFeed:
		if id := m.message_feed; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmessage_feed {
		edges = append(edges, messageitem.EdgeMessageFeed)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageItemMutation) EdgeCleared(name string) bool {
	switch name {
	case messageitem.EdgeMessageFeed:
		return m.clearedmessage_feed
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageItemMutation) ClearEdge(name string) error {
	switch name {
	case messageitem.EdgeMessageFeed:
		m.ClearMessageFeed()
		return nil
	}
	return fmt.Errorf("unknown MessageItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageItemMutation) ResetEdge(name string) error {
	switch name {
	case messageitem.EdgeMessageFeed:
		m.ResetMessageFeed()
		return nil
	}
	return fmt.Errorf("unknown MessageItem edge %s", name)
}
