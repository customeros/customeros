// Code generated by ent, DO NOT EDIT.

package messageitem

import (
	"fmt"
)

const (
	// Label holds the string label denoting the messageitem type in the database.
	Label = "message_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldDirection holds the string denoting the direction field in the database.
	FieldDirection = "direction"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeMessageFeed holds the string denoting the message_feed edge name in mutations.
	EdgeMessageFeed = "message_feed"
	// Table holds the table name of the messageitem in the database.
	Table = "message_items"
	// MessageFeedTable is the table that holds the message_feed relation/edge.
	MessageFeedTable = "message_items"
	// MessageFeedInverseTable is the table name for the MessageFeed entity.
	// It exists in this package in order to avoid circular dependency with the "messagefeed" package.
	MessageFeedInverseTable = "message_feeds"
	// MessageFeedColumn is the table column denoting the message_feed relation/edge.
	MessageFeedColumn = "message_feed_message_item"
)

// Columns holds all SQL columns for messageitem fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldUsername,
	FieldMessage,
	FieldChannel,
	FieldDirection,
	FieldTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "message_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"message_feed_message_item",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeMESSAGE Type = "MESSAGE"
	TypeFILE    Type = "FILE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeMESSAGE, TypeFILE:
		return nil
	default:
		return fmt.Errorf("messageitem: invalid enum value for type field: %q", _type)
	}
}

// Channel defines the type for the "channel" enum field.
type Channel string

// Channel values.
const (
	ChannelCHAT     Channel = "CHAT"
	ChannelMAIL     Channel = "MAIL"
	ChannelWHATSAPP Channel = "WHATSAPP"
	ChannelFACEBOOK Channel = "FACEBOOK"
	ChannelTWITTER  Channel = "TWITTER"
	ChannelVOICE    Channel = "VOICE"
)

func (c Channel) String() string {
	return string(c)
}

// ChannelValidator is a validator for the "channel" field enum values. It is called by the builders before save.
func ChannelValidator(c Channel) error {
	switch c {
	case ChannelCHAT, ChannelMAIL, ChannelWHATSAPP, ChannelFACEBOOK, ChannelTWITTER, ChannelVOICE:
		return nil
	default:
		return fmt.Errorf("messageitem: invalid enum value for channel field: %q", c)
	}
}

// Direction defines the type for the "direction" enum field.
type Direction string

// Direction values.
const (
	DirectionINBOUND  Direction = "INBOUND"
	DirectionOUTBOUND Direction = "OUTBOUND"
)

func (d Direction) String() string {
	return string(d)
}

// DirectionValidator is a validator for the "direction" field enum values. It is called by the builders before save.
func DirectionValidator(d Direction) error {
	switch d {
	case DirectionINBOUND, DirectionOUTBOUND:
		return nil
	default:
		return fmt.Errorf("messageitem: invalid enum value for direction field: %q", d)
	}
}
