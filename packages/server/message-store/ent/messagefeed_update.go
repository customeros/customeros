// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/ent/messagefeed"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/ent/messageitem"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/ent/predicate"
)

// MessageFeedUpdate is the builder for updating MessageFeed entities.
type MessageFeedUpdate struct {
	config
	hooks    []Hook
	mutation *MessageFeedMutation
}

// Where appends a list predicates to the MessageFeedUpdate builder.
func (mfu *MessageFeedUpdate) Where(ps ...predicate.MessageFeed) *MessageFeedUpdate {
	mfu.mutation.Where(ps...)
	return mfu
}

// SetUsername sets the "username" field.
func (mfu *MessageFeedUpdate) SetUsername(s string) *MessageFeedUpdate {
	mfu.mutation.SetUsername(s)
	return mfu
}

// AddMessageItemIDs adds the "message_item" edge to the MessageItem entity by IDs.
func (mfu *MessageFeedUpdate) AddMessageItemIDs(ids ...int) *MessageFeedUpdate {
	mfu.mutation.AddMessageItemIDs(ids...)
	return mfu
}

// AddMessageItem adds the "message_item" edges to the MessageItem entity.
func (mfu *MessageFeedUpdate) AddMessageItem(m ...*MessageItem) *MessageFeedUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfu.AddMessageItemIDs(ids...)
}

// Mutation returns the MessageFeedMutation object of the builder.
func (mfu *MessageFeedUpdate) Mutation() *MessageFeedMutation {
	return mfu.mutation
}

// ClearMessageItem clears all "message_item" edges to the MessageItem entity.
func (mfu *MessageFeedUpdate) ClearMessageItem() *MessageFeedUpdate {
	mfu.mutation.ClearMessageItem()
	return mfu
}

// RemoveMessageItemIDs removes the "message_item" edge to MessageItem entities by IDs.
func (mfu *MessageFeedUpdate) RemoveMessageItemIDs(ids ...int) *MessageFeedUpdate {
	mfu.mutation.RemoveMessageItemIDs(ids...)
	return mfu
}

// RemoveMessageItem removes "message_item" edges to MessageItem entities.
func (mfu *MessageFeedUpdate) RemoveMessageItem(m ...*MessageItem) *MessageFeedUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfu.RemoveMessageItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mfu *MessageFeedUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mfu.hooks) == 0 {
		affected, err = mfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageFeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mfu.mutation = mutation
			affected, err = mfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mfu.hooks) - 1; i >= 0; i-- {
			if mfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mfu *MessageFeedUpdate) SaveX(ctx context.Context) int {
	affected, err := mfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mfu *MessageFeedUpdate) Exec(ctx context.Context) error {
	_, err := mfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfu *MessageFeedUpdate) ExecX(ctx context.Context) {
	if err := mfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mfu *MessageFeedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagefeed.Table,
			Columns: messagefeed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagefeed.FieldID,
			},
		},
	}
	if ps := mfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mfu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagefeed.FieldUsername,
		})
	}
	if mfu.mutation.MessageItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagefeed.MessageItemTable,
			Columns: []string{messagefeed.MessageItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messageitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfu.mutation.RemovedMessageItemIDs(); len(nodes) > 0 && !mfu.mutation.MessageItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagefeed.MessageItemTable,
			Columns: []string{messagefeed.MessageItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messageitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfu.mutation.MessageItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagefeed.MessageItemTable,
			Columns: []string{messagefeed.MessageItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messageitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagefeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MessageFeedUpdateOne is the builder for updating a single MessageFeed entity.
type MessageFeedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageFeedMutation
}

// SetUsername sets the "username" field.
func (mfuo *MessageFeedUpdateOne) SetUsername(s string) *MessageFeedUpdateOne {
	mfuo.mutation.SetUsername(s)
	return mfuo
}

// AddMessageItemIDs adds the "message_item" edge to the MessageItem entity by IDs.
func (mfuo *MessageFeedUpdateOne) AddMessageItemIDs(ids ...int) *MessageFeedUpdateOne {
	mfuo.mutation.AddMessageItemIDs(ids...)
	return mfuo
}

// AddMessageItem adds the "message_item" edges to the MessageItem entity.
func (mfuo *MessageFeedUpdateOne) AddMessageItem(m ...*MessageItem) *MessageFeedUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfuo.AddMessageItemIDs(ids...)
}

// Mutation returns the MessageFeedMutation object of the builder.
func (mfuo *MessageFeedUpdateOne) Mutation() *MessageFeedMutation {
	return mfuo.mutation
}

// ClearMessageItem clears all "message_item" edges to the MessageItem entity.
func (mfuo *MessageFeedUpdateOne) ClearMessageItem() *MessageFeedUpdateOne {
	mfuo.mutation.ClearMessageItem()
	return mfuo
}

// RemoveMessageItemIDs removes the "message_item" edge to MessageItem entities by IDs.
func (mfuo *MessageFeedUpdateOne) RemoveMessageItemIDs(ids ...int) *MessageFeedUpdateOne {
	mfuo.mutation.RemoveMessageItemIDs(ids...)
	return mfuo
}

// RemoveMessageItem removes "message_item" edges to MessageItem entities.
func (mfuo *MessageFeedUpdateOne) RemoveMessageItem(m ...*MessageItem) *MessageFeedUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mfuo.RemoveMessageItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mfuo *MessageFeedUpdateOne) Select(field string, fields ...string) *MessageFeedUpdateOne {
	mfuo.fields = append([]string{field}, fields...)
	return mfuo
}

// Save executes the query and returns the updated MessageFeed entity.
func (mfuo *MessageFeedUpdateOne) Save(ctx context.Context) (*MessageFeed, error) {
	var (
		err  error
		node *MessageFeed
	)
	if len(mfuo.hooks) == 0 {
		node, err = mfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MessageFeedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mfuo.mutation = mutation
			node, err = mfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mfuo.hooks) - 1; i >= 0; i-- {
			if mfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mfuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mfuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*MessageFeed)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MessageFeedMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mfuo *MessageFeedUpdateOne) SaveX(ctx context.Context) *MessageFeed {
	node, err := mfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mfuo *MessageFeedUpdateOne) Exec(ctx context.Context) error {
	_, err := mfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mfuo *MessageFeedUpdateOne) ExecX(ctx context.Context) {
	if err := mfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mfuo *MessageFeedUpdateOne) sqlSave(ctx context.Context) (_node *MessageFeed, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   messagefeed.Table,
			Columns: messagefeed.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: messagefeed.FieldID,
			},
		},
	}
	id, ok := mfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageFeed.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagefeed.FieldID)
		for _, f := range fields {
			if !messagefeed.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagefeed.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mfuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: messagefeed.FieldUsername,
		})
	}
	if mfuo.mutation.MessageItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagefeed.MessageItemTable,
			Columns: []string{messagefeed.MessageItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messageitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfuo.mutation.RemovedMessageItemIDs(); len(nodes) > 0 && !mfuo.mutation.MessageItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagefeed.MessageItemTable,
			Columns: []string{messagefeed.MessageItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messageitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mfuo.mutation.MessageItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   messagefeed.MessageItemTable,
			Columns: []string{messagefeed.MessageItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: messageitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MessageFeed{config: mfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagefeed.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
