// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ConversationsColumns holds the columns for the "conversations" table.
	ConversationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "contact_id", Type: field.TypeString, Unique: true},
		{Name: "created_on", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "updated_on", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"NEW", "IN_PROGRESS", "CLOSED"}},
		{Name: "last_message", Type: field.TypeString, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "last_sender_id", Type: field.TypeString},
		{Name: "last_sender_type", Type: field.TypeEnum, Enums: []string{"CONTACT", "USER"}},
	}
	// ConversationsTable holds the schema information for the "conversations" table.
	ConversationsTable = &schema.Table{
		Name:       "conversations",
		Columns:    ConversationsColumns,
		PrimaryKey: []*schema.Column{ConversationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "conversation_contact_id",
				Unique:  true,
				Columns: []*schema.Column{ConversationsColumns[1]},
			},
		},
	}
	// ConversationItemsColumns holds the columns for the "conversation_items" table.
	ConversationItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"MESSAGE", "FILE"}},
		{Name: "sender_id", Type: field.TypeString},
		{Name: "sender_type", Type: field.TypeEnum, Enums: []string{"CONTACT", "USER"}},
		{Name: "message", Type: field.TypeString, SchemaType: map[string]string{"postgres": "text"}},
		{Name: "channel", Type: field.TypeEnum, Enums: []string{"CHAT", "MAIL", "WHATSAPP", "FACEBOOK", "TWITTER", "VOICE"}},
		{Name: "direction", Type: field.TypeEnum, Enums: []string{"INBOUND", "OUTBOUND"}},
		{Name: "time", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "conversation_conversation_item", Type: field.TypeInt},
	}
	// ConversationItemsTable holds the schema information for the "conversation_items" table.
	ConversationItemsTable = &schema.Table{
		Name:       "conversation_items",
		Columns:    ConversationItemsColumns,
		PrimaryKey: []*schema.Column{ConversationItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "conversation_items_conversations_conversation_item",
				Columns:    []*schema.Column{ConversationItemsColumns[8]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "conversationitem_time_conversation_conversation_item",
				Unique:  false,
				Columns: []*schema.Column{ConversationItemsColumns[7], ConversationItemsColumns[8]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ConversationsTable,
		ConversationItemsTable,
	}
)

func init() {
	ConversationItemsTable.ForeignKeys[0].RefTable = ConversationsTable
}
