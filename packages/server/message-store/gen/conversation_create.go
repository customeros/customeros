// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversation"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversationitem"
)

// ConversationCreate is the builder for creating a Conversation entity.
type ConversationCreate struct {
	config
	mutation *ConversationMutation
	hooks    []Hook
}

// SetContactId sets the "contactId" field.
func (cc *ConversationCreate) SetContactId(s string) *ConversationCreate {
	cc.mutation.SetContactId(s)
	return cc
}

// SetCreatedOn sets the "createdOn" field.
func (cc *ConversationCreate) SetCreatedOn(t time.Time) *ConversationCreate {
	cc.mutation.SetCreatedOn(t)
	return cc
}

// SetUpdatedOn sets the "updatedOn" field.
func (cc *ConversationCreate) SetUpdatedOn(t time.Time) *ConversationCreate {
	cc.mutation.SetUpdatedOn(t)
	return cc
}

// SetState sets the "state" field.
func (cc *ConversationCreate) SetState(c conversation.State) *ConversationCreate {
	cc.mutation.SetState(c)
	return cc
}

// SetLastMessage sets the "lastMessage" field.
func (cc *ConversationCreate) SetLastMessage(s string) *ConversationCreate {
	cc.mutation.SetLastMessage(s)
	return cc
}

// SetLastSenderId sets the "lastSenderId" field.
func (cc *ConversationCreate) SetLastSenderId(s string) *ConversationCreate {
	cc.mutation.SetLastSenderId(s)
	return cc
}

// SetLastSenderType sets the "lastSenderType" field.
func (cc *ConversationCreate) SetLastSenderType(cst conversation.LastSenderType) *ConversationCreate {
	cc.mutation.SetLastSenderType(cst)
	return cc
}

// AddConversationItemIDs adds the "conversation_item" edge to the ConversationItem entity by IDs.
func (cc *ConversationCreate) AddConversationItemIDs(ids ...int) *ConversationCreate {
	cc.mutation.AddConversationItemIDs(ids...)
	return cc
}

// AddConversationItem adds the "conversation_item" edges to the ConversationItem entity.
func (cc *ConversationCreate) AddConversationItem(c ...*ConversationItem) *ConversationCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddConversationItemIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cc *ConversationCreate) Mutation() *ConversationMutation {
	return cc.mutation
}

// Save creates the Conversation in the database.
func (cc *ConversationCreate) Save(ctx context.Context) (*Conversation, error) {
	var (
		err  error
		node *Conversation
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConversationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Conversation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConversationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConversationCreate) SaveX(ctx context.Context) *Conversation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConversationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConversationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConversationCreate) check() error {
	if _, ok := cc.mutation.ContactId(); !ok {
		return &ValidationError{Name: "contactId", err: errors.New(`gen: missing required field "Conversation.contactId"`)}
	}
	if _, ok := cc.mutation.CreatedOn(); !ok {
		return &ValidationError{Name: "createdOn", err: errors.New(`gen: missing required field "Conversation.createdOn"`)}
	}
	if _, ok := cc.mutation.UpdatedOn(); !ok {
		return &ValidationError{Name: "updatedOn", err: errors.New(`gen: missing required field "Conversation.updatedOn"`)}
	}
	if _, ok := cc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`gen: missing required field "Conversation.state"`)}
	}
	if v, ok := cc.mutation.State(); ok {
		if err := conversation.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`gen: validator failed for field "Conversation.state": %w`, err)}
		}
	}
	if _, ok := cc.mutation.LastMessage(); !ok {
		return &ValidationError{Name: "lastMessage", err: errors.New(`gen: missing required field "Conversation.lastMessage"`)}
	}
	if _, ok := cc.mutation.LastSenderId(); !ok {
		return &ValidationError{Name: "lastSenderId", err: errors.New(`gen: missing required field "Conversation.lastSenderId"`)}
	}
	if _, ok := cc.mutation.LastSenderType(); !ok {
		return &ValidationError{Name: "lastSenderType", err: errors.New(`gen: missing required field "Conversation.lastSenderType"`)}
	}
	if v, ok := cc.mutation.LastSenderType(); ok {
		if err := conversation.LastSenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "lastSenderType", err: fmt.Errorf(`gen: validator failed for field "Conversation.lastSenderType": %w`, err)}
		}
	}
	return nil
}

func (cc *ConversationCreate) sqlSave(ctx context.Context) (*Conversation, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *ConversationCreate) createSpec() (*Conversation, *sqlgraph.CreateSpec) {
	var (
		_node = &Conversation{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: conversation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: conversation.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.ContactId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldContactId,
		})
		_node.ContactId = value
	}
	if value, ok := cc.mutation.CreatedOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: conversation.FieldCreatedOn,
		})
		_node.CreatedOn = value
	}
	if value, ok := cc.mutation.UpdatedOn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: conversation.FieldUpdatedOn,
		})
		_node.UpdatedOn = value
	}
	if value, ok := cc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversation.FieldState,
		})
		_node.State = value
	}
	if value, ok := cc.mutation.LastMessage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldLastMessage,
		})
		_node.LastMessage = value
	}
	if value, ok := cc.mutation.LastSenderId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldLastSenderId,
		})
		_node.LastSenderId = value
	}
	if value, ok := cc.mutation.LastSenderType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversation.FieldLastSenderType,
		})
		_node.LastSenderType = value
	}
	if nodes := cc.mutation.ConversationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationItemTable,
			Columns: []string{conversation.ConversationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversationitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConversationCreateBulk is the builder for creating many Conversation entities in bulk.
type ConversationCreateBulk struct {
	config
	builders []*ConversationCreate
}

// Save creates the Conversation entities in the database.
func (ccb *ConversationCreateBulk) Save(ctx context.Context) ([]*Conversation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Conversation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConversationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConversationCreateBulk) SaveX(ctx context.Context) []*Conversation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConversationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConversationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
