// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/migrate"

	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/messagefeed"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/messageitem"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// MessageFeed is the client for interacting with the MessageFeed builders.
	MessageFeed *MessageFeedClient
	// MessageItem is the client for interacting with the MessageItem builders.
	MessageItem *MessageItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.MessageFeed = NewMessageFeedClient(c.config)
	c.MessageItem = NewMessageItemClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("gen: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("gen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		MessageFeed: NewMessageFeedClient(cfg),
		MessageItem: NewMessageItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		MessageFeed: NewMessageFeedClient(cfg),
		MessageItem: NewMessageItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		MessageFeed.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.MessageFeed.Use(hooks...)
	c.MessageItem.Use(hooks...)
}

// MessageFeedClient is a client for the MessageFeed schema.
type MessageFeedClient struct {
	config
}

// NewMessageFeedClient returns a client for the MessageFeed from the given config.
func NewMessageFeedClient(c config) *MessageFeedClient {
	return &MessageFeedClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagefeed.Hooks(f(g(h())))`.
func (c *MessageFeedClient) Use(hooks ...Hook) {
	c.hooks.MessageFeed = append(c.hooks.MessageFeed, hooks...)
}

// Create returns a builder for creating a MessageFeed entity.
func (c *MessageFeedClient) Create() *MessageFeedCreate {
	mutation := newMessageFeedMutation(c.config, OpCreate)
	return &MessageFeedCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageFeed entities.
func (c *MessageFeedClient) CreateBulk(builders ...*MessageFeedCreate) *MessageFeedCreateBulk {
	return &MessageFeedCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageFeed.
func (c *MessageFeedClient) Update() *MessageFeedUpdate {
	mutation := newMessageFeedMutation(c.config, OpUpdate)
	return &MessageFeedUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageFeedClient) UpdateOne(mf *MessageFeed) *MessageFeedUpdateOne {
	mutation := newMessageFeedMutation(c.config, OpUpdateOne, withMessageFeed(mf))
	return &MessageFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageFeedClient) UpdateOneID(id int) *MessageFeedUpdateOne {
	mutation := newMessageFeedMutation(c.config, OpUpdateOne, withMessageFeedID(id))
	return &MessageFeedUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageFeed.
func (c *MessageFeedClient) Delete() *MessageFeedDelete {
	mutation := newMessageFeedMutation(c.config, OpDelete)
	return &MessageFeedDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageFeedClient) DeleteOne(mf *MessageFeed) *MessageFeedDeleteOne {
	return c.DeleteOneID(mf.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MessageFeedClient) DeleteOneID(id int) *MessageFeedDeleteOne {
	builder := c.Delete().Where(messagefeed.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageFeedDeleteOne{builder}
}

// Query returns a query builder for MessageFeed.
func (c *MessageFeedClient) Query() *MessageFeedQuery {
	return &MessageFeedQuery{
		config: c.config,
	}
}

// Get returns a MessageFeed entity by its id.
func (c *MessageFeedClient) Get(ctx context.Context, id int) (*MessageFeed, error) {
	return c.Query().Where(messagefeed.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageFeedClient) GetX(ctx context.Context, id int) *MessageFeed {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessageItem queries the message_item edge of a MessageFeed.
func (c *MessageFeedClient) QueryMessageItem(mf *MessageFeed) *MessageItemQuery {
	query := &MessageItemQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messagefeed.Table, messagefeed.FieldID, id),
			sqlgraph.To(messageitem.Table, messageitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, messagefeed.MessageItemTable, messagefeed.MessageItemColumn),
		)
		fromV = sqlgraph.Neighbors(mf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageFeedClient) Hooks() []Hook {
	return c.hooks.MessageFeed
}

// MessageItemClient is a client for the MessageItem schema.
type MessageItemClient struct {
	config
}

// NewMessageItemClient returns a client for the MessageItem from the given config.
func NewMessageItemClient(c config) *MessageItemClient {
	return &MessageItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messageitem.Hooks(f(g(h())))`.
func (c *MessageItemClient) Use(hooks ...Hook) {
	c.hooks.MessageItem = append(c.hooks.MessageItem, hooks...)
}

// Create returns a builder for creating a MessageItem entity.
func (c *MessageItemClient) Create() *MessageItemCreate {
	mutation := newMessageItemMutation(c.config, OpCreate)
	return &MessageItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageItem entities.
func (c *MessageItemClient) CreateBulk(builders ...*MessageItemCreate) *MessageItemCreateBulk {
	return &MessageItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageItem.
func (c *MessageItemClient) Update() *MessageItemUpdate {
	mutation := newMessageItemMutation(c.config, OpUpdate)
	return &MessageItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageItemClient) UpdateOne(mi *MessageItem) *MessageItemUpdateOne {
	mutation := newMessageItemMutation(c.config, OpUpdateOne, withMessageItem(mi))
	return &MessageItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageItemClient) UpdateOneID(id int) *MessageItemUpdateOne {
	mutation := newMessageItemMutation(c.config, OpUpdateOne, withMessageItemID(id))
	return &MessageItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageItem.
func (c *MessageItemClient) Delete() *MessageItemDelete {
	mutation := newMessageItemMutation(c.config, OpDelete)
	return &MessageItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageItemClient) DeleteOne(mi *MessageItem) *MessageItemDeleteOne {
	return c.DeleteOneID(mi.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MessageItemClient) DeleteOneID(id int) *MessageItemDeleteOne {
	builder := c.Delete().Where(messageitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageItemDeleteOne{builder}
}

// Query returns a query builder for MessageItem.
func (c *MessageItemClient) Query() *MessageItemQuery {
	return &MessageItemQuery{
		config: c.config,
	}
}

// Get returns a MessageItem entity by its id.
func (c *MessageItemClient) Get(ctx context.Context, id int) (*MessageItem, error) {
	return c.Query().Where(messageitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageItemClient) GetX(ctx context.Context, id int) *MessageItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessageFeed queries the message_feed edge of a MessageItem.
func (c *MessageItemClient) QueryMessageFeed(mi *MessageItem) *MessageFeedQuery {
	query := &MessageFeedQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messageitem.Table, messageitem.FieldID, id),
			sqlgraph.To(messagefeed.Table, messagefeed.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, messageitem.MessageFeedTable, messageitem.MessageFeedColumn),
		)
		fromV = sqlgraph.Neighbors(mi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageItemClient) Hooks() []Hook {
	return c.hooks.MessageItem
}
