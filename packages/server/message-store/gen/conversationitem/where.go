// Code generated by ent, DO NOT EDIT.

package conversationitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SenderId applies equality check predicate on the "senderId" field. It's identical to SenderIdEQ.
func SenderId(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderId), v))
	})
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// SenderIdEQ applies the EQ predicate on the "senderId" field.
func SenderIdEQ(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderId), v))
	})
}

// SenderIdNEQ applies the NEQ predicate on the "senderId" field.
func SenderIdNEQ(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSenderId), v))
	})
}

// SenderIdIn applies the In predicate on the "senderId" field.
func SenderIdIn(vs ...string) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSenderId), v...))
	})
}

// SenderIdNotIn applies the NotIn predicate on the "senderId" field.
func SenderIdNotIn(vs ...string) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSenderId), v...))
	})
}

// SenderIdGT applies the GT predicate on the "senderId" field.
func SenderIdGT(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSenderId), v))
	})
}

// SenderIdGTE applies the GTE predicate on the "senderId" field.
func SenderIdGTE(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSenderId), v))
	})
}

// SenderIdLT applies the LT predicate on the "senderId" field.
func SenderIdLT(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSenderId), v))
	})
}

// SenderIdLTE applies the LTE predicate on the "senderId" field.
func SenderIdLTE(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSenderId), v))
	})
}

// SenderIdContains applies the Contains predicate on the "senderId" field.
func SenderIdContains(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSenderId), v))
	})
}

// SenderIdHasPrefix applies the HasPrefix predicate on the "senderId" field.
func SenderIdHasPrefix(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSenderId), v))
	})
}

// SenderIdHasSuffix applies the HasSuffix predicate on the "senderId" field.
func SenderIdHasSuffix(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSenderId), v))
	})
}

// SenderIdEqualFold applies the EqualFold predicate on the "senderId" field.
func SenderIdEqualFold(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSenderId), v))
	})
}

// SenderIdContainsFold applies the ContainsFold predicate on the "senderId" field.
func SenderIdContainsFold(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSenderId), v))
	})
}

// SenderTypeEQ applies the EQ predicate on the "senderType" field.
func SenderTypeEQ(v SenderType) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSenderType), v))
	})
}

// SenderTypeNEQ applies the NEQ predicate on the "senderType" field.
func SenderTypeNEQ(v SenderType) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSenderType), v))
	})
}

// SenderTypeIn applies the In predicate on the "senderType" field.
func SenderTypeIn(vs ...SenderType) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSenderType), v...))
	})
}

// SenderTypeNotIn applies the NotIn predicate on the "senderType" field.
func SenderTypeNotIn(vs ...SenderType) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSenderType), v...))
	})
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v Channel) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChannel), v))
	})
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v Channel) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChannel), v))
	})
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...Channel) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChannel), v...))
	})
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...Channel) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChannel), v...))
	})
}

// DirectionEQ applies the EQ predicate on the "direction" field.
func DirectionEQ(v Direction) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDirection), v))
	})
}

// DirectionNEQ applies the NEQ predicate on the "direction" field.
func DirectionNEQ(v Direction) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDirection), v))
	})
}

// DirectionIn applies the In predicate on the "direction" field.
func DirectionIn(vs ...Direction) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDirection), v...))
	})
}

// DirectionNotIn applies the NotIn predicate on the "direction" field.
func DirectionNotIn(vs ...Direction) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDirection), v...))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.ConversationItem {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// HasConversation applies the HasEdge predicate on the "conversation" edge.
func HasConversation() predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConversationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConversationTable, ConversationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationWith applies the HasEdge predicate on the "conversation" edge with a given conditions (other predicates).
func HasConversationWith(preds ...predicate.Conversation) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConversationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConversationTable, ConversationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConversationItem) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConversationItem) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConversationItem) predicate.ConversationItem {
	return predicate.ConversationItem(func(s *sql.Selector) {
		p(s.Not())
	})
}
