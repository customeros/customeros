// Code generated by ent, DO NOT EDIT.

package conversationitem

import (
	"fmt"
)

const (
	// Label holds the string label denoting the conversationitem type in the database.
	Label = "conversation_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSenderId holds the string denoting the senderid field in the database.
	FieldSenderId = "sender_id"
	// FieldSenderType holds the string denoting the sendertype field in the database.
	FieldSenderType = "sender_type"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldDirection holds the string denoting the direction field in the database.
	FieldDirection = "direction"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeConversation holds the string denoting the conversation edge name in mutations.
	EdgeConversation = "conversation"
	// Table holds the table name of the conversationitem in the database.
	Table = "conversation_items"
	// ConversationTable is the table that holds the conversation relation/edge.
	ConversationTable = "conversation_items"
	// ConversationInverseTable is the table name for the Conversation entity.
	// It exists in this package in order to avoid circular dependency with the "conversation" package.
	ConversationInverseTable = "conversations"
	// ConversationColumn is the table column denoting the conversation relation/edge.
	ConversationColumn = "conversation_conversation_item"
)

// Columns holds all SQL columns for conversationitem fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldSenderId,
	FieldSenderType,
	FieldMessage,
	FieldChannel,
	FieldDirection,
	FieldTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "conversation_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"conversation_conversation_item",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeMESSAGE Type = "MESSAGE"
	TypeFILE    Type = "FILE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeMESSAGE, TypeFILE:
		return nil
	default:
		return fmt.Errorf("conversationitem: invalid enum value for type field: %q", _type)
	}
}

// SenderType defines the type for the "senderType" enum field.
type SenderType string

// SenderType values.
const (
	SenderTypeCONTACT SenderType = "CONTACT"
	SenderTypeUSER    SenderType = "USER"
)

func (st SenderType) String() string {
	return string(st)
}

// SenderTypeValidator is a validator for the "senderType" field enum values. It is called by the builders before save.
func SenderTypeValidator(st SenderType) error {
	switch st {
	case SenderTypeCONTACT, SenderTypeUSER:
		return nil
	default:
		return fmt.Errorf("conversationitem: invalid enum value for senderType field: %q", st)
	}
}

// Channel defines the type for the "channel" enum field.
type Channel string

// Channel values.
const (
	ChannelCHAT     Channel = "CHAT"
	ChannelMAIL     Channel = "MAIL"
	ChannelWHATSAPP Channel = "WHATSAPP"
	ChannelFACEBOOK Channel = "FACEBOOK"
	ChannelTWITTER  Channel = "TWITTER"
	ChannelVOICE    Channel = "VOICE"
)

func (c Channel) String() string {
	return string(c)
}

// ChannelValidator is a validator for the "channel" field enum values. It is called by the builders before save.
func ChannelValidator(c Channel) error {
	switch c {
	case ChannelCHAT, ChannelMAIL, ChannelWHATSAPP, ChannelFACEBOOK, ChannelTWITTER, ChannelVOICE:
		return nil
	default:
		return fmt.Errorf("conversationitem: invalid enum value for channel field: %q", c)
	}
}

// Direction defines the type for the "direction" enum field.
type Direction string

// Direction values.
const (
	DirectionINBOUND  Direction = "INBOUND"
	DirectionOUTBOUND Direction = "OUTBOUND"
)

func (d Direction) String() string {
	return string(d)
}

// DirectionValidator is a validator for the "direction" field enum values. It is called by the builders before save.
func DirectionValidator(d Direction) error {
	switch d {
	case DirectionINBOUND, DirectionOUTBOUND:
		return nil
	default:
		return fmt.Errorf("conversationitem: invalid enum value for direction field: %q", d)
	}
}
