// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversation"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversationitem"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/predicate"
)

// ConversationUpdate is the builder for updating Conversation entities.
type ConversationUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMutation
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cu *ConversationUpdate) Where(ps ...predicate.Conversation) *ConversationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetContactId sets the "contactId" field.
func (cu *ConversationUpdate) SetContactId(s string) *ConversationUpdate {
	cu.mutation.SetContactId(s)
	return cu
}

// SetCreatedOn sets the "createdOn" field.
func (cu *ConversationUpdate) SetCreatedOn(t time.Time) *ConversationUpdate {
	cu.mutation.SetCreatedOn(t)
	return cu
}

// SetUpdatedOn sets the "updatedOn" field.
func (cu *ConversationUpdate) SetUpdatedOn(t time.Time) *ConversationUpdate {
	cu.mutation.SetUpdatedOn(t)
	return cu
}

// SetState sets the "state" field.
func (cu *ConversationUpdate) SetState(c conversation.State) *ConversationUpdate {
	cu.mutation.SetState(c)
	return cu
}

// SetLastMessage sets the "lastMessage" field.
func (cu *ConversationUpdate) SetLastMessage(s string) *ConversationUpdate {
	cu.mutation.SetLastMessage(s)
	return cu
}

// SetLastSenderId sets the "lastSenderId" field.
func (cu *ConversationUpdate) SetLastSenderId(s string) *ConversationUpdate {
	cu.mutation.SetLastSenderId(s)
	return cu
}

// SetLastSenderType sets the "lastSenderType" field.
func (cu *ConversationUpdate) SetLastSenderType(cst conversation.LastSenderType) *ConversationUpdate {
	cu.mutation.SetLastSenderType(cst)
	return cu
}

// AddConversationItemIDs adds the "conversation_item" edge to the ConversationItem entity by IDs.
func (cu *ConversationUpdate) AddConversationItemIDs(ids ...int) *ConversationUpdate {
	cu.mutation.AddConversationItemIDs(ids...)
	return cu
}

// AddConversationItem adds the "conversation_item" edges to the ConversationItem entity.
func (cu *ConversationUpdate) AddConversationItem(c ...*ConversationItem) *ConversationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddConversationItemIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cu *ConversationUpdate) Mutation() *ConversationMutation {
	return cu.mutation
}

// ClearConversationItem clears all "conversation_item" edges to the ConversationItem entity.
func (cu *ConversationUpdate) ClearConversationItem() *ConversationUpdate {
	cu.mutation.ClearConversationItem()
	return cu
}

// RemoveConversationItemIDs removes the "conversation_item" edge to ConversationItem entities by IDs.
func (cu *ConversationUpdate) RemoveConversationItemIDs(ids ...int) *ConversationUpdate {
	cu.mutation.RemoveConversationItemIDs(ids...)
	return cu
}

// RemoveConversationItem removes "conversation_item" edges to ConversationItem entities.
func (cu *ConversationUpdate) RemoveConversationItem(c ...*ConversationItem) *ConversationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveConversationItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConversationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConversationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConversationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConversationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConversationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConversationUpdate) check() error {
	if v, ok := cu.mutation.State(); ok {
		if err := conversation.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`gen: validator failed for field "Conversation.state": %w`, err)}
		}
	}
	if v, ok := cu.mutation.LastSenderType(); ok {
		if err := conversation.LastSenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "lastSenderType", err: fmt.Errorf(`gen: validator failed for field "Conversation.lastSenderType": %w`, err)}
		}
	}
	return nil
}

func (cu *ConversationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   conversation.Table,
			Columns: conversation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: conversation.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ContactId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldContactId,
		})
	}
	if value, ok := cu.mutation.CreatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: conversation.FieldCreatedOn,
		})
	}
	if value, ok := cu.mutation.UpdatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: conversation.FieldUpdatedOn,
		})
	}
	if value, ok := cu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversation.FieldState,
		})
	}
	if value, ok := cu.mutation.LastMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldLastMessage,
		})
	}
	if value, ok := cu.mutation.LastSenderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldLastSenderId,
		})
	}
	if value, ok := cu.mutation.LastSenderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversation.FieldLastSenderType,
		})
	}
	if cu.mutation.ConversationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationItemTable,
			Columns: []string{conversation.ConversationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversationitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedConversationItemIDs(); len(nodes) > 0 && !cu.mutation.ConversationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationItemTable,
			Columns: []string{conversation.ConversationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversationitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ConversationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationItemTable,
			Columns: []string{conversation.ConversationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversationitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ConversationUpdateOne is the builder for updating a single Conversation entity.
type ConversationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMutation
}

// SetContactId sets the "contactId" field.
func (cuo *ConversationUpdateOne) SetContactId(s string) *ConversationUpdateOne {
	cuo.mutation.SetContactId(s)
	return cuo
}

// SetCreatedOn sets the "createdOn" field.
func (cuo *ConversationUpdateOne) SetCreatedOn(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetCreatedOn(t)
	return cuo
}

// SetUpdatedOn sets the "updatedOn" field.
func (cuo *ConversationUpdateOne) SetUpdatedOn(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetUpdatedOn(t)
	return cuo
}

// SetState sets the "state" field.
func (cuo *ConversationUpdateOne) SetState(c conversation.State) *ConversationUpdateOne {
	cuo.mutation.SetState(c)
	return cuo
}

// SetLastMessage sets the "lastMessage" field.
func (cuo *ConversationUpdateOne) SetLastMessage(s string) *ConversationUpdateOne {
	cuo.mutation.SetLastMessage(s)
	return cuo
}

// SetLastSenderId sets the "lastSenderId" field.
func (cuo *ConversationUpdateOne) SetLastSenderId(s string) *ConversationUpdateOne {
	cuo.mutation.SetLastSenderId(s)
	return cuo
}

// SetLastSenderType sets the "lastSenderType" field.
func (cuo *ConversationUpdateOne) SetLastSenderType(cst conversation.LastSenderType) *ConversationUpdateOne {
	cuo.mutation.SetLastSenderType(cst)
	return cuo
}

// AddConversationItemIDs adds the "conversation_item" edge to the ConversationItem entity by IDs.
func (cuo *ConversationUpdateOne) AddConversationItemIDs(ids ...int) *ConversationUpdateOne {
	cuo.mutation.AddConversationItemIDs(ids...)
	return cuo
}

// AddConversationItem adds the "conversation_item" edges to the ConversationItem entity.
func (cuo *ConversationUpdateOne) AddConversationItem(c ...*ConversationItem) *ConversationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddConversationItemIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cuo *ConversationUpdateOne) Mutation() *ConversationMutation {
	return cuo.mutation
}

// ClearConversationItem clears all "conversation_item" edges to the ConversationItem entity.
func (cuo *ConversationUpdateOne) ClearConversationItem() *ConversationUpdateOne {
	cuo.mutation.ClearConversationItem()
	return cuo
}

// RemoveConversationItemIDs removes the "conversation_item" edge to ConversationItem entities by IDs.
func (cuo *ConversationUpdateOne) RemoveConversationItemIDs(ids ...int) *ConversationUpdateOne {
	cuo.mutation.RemoveConversationItemIDs(ids...)
	return cuo
}

// RemoveConversationItem removes "conversation_item" edges to ConversationItem entities.
func (cuo *ConversationUpdateOne) RemoveConversationItem(c ...*ConversationItem) *ConversationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveConversationItemIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConversationUpdateOne) Select(field string, fields ...string) *ConversationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conversation entity.
func (cuo *ConversationUpdateOne) Save(ctx context.Context) (*Conversation, error) {
	var (
		err  error
		node *Conversation
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConversationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Conversation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConversationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConversationUpdateOne) SaveX(ctx context.Context) *Conversation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConversationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConversationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConversationUpdateOne) check() error {
	if v, ok := cuo.mutation.State(); ok {
		if err := conversation.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`gen: validator failed for field "Conversation.state": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.LastSenderType(); ok {
		if err := conversation.LastSenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "lastSenderType", err: fmt.Errorf(`gen: validator failed for field "Conversation.lastSenderType": %w`, err)}
		}
	}
	return nil
}

func (cuo *ConversationUpdateOne) sqlSave(ctx context.Context) (_node *Conversation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   conversation.Table,
			Columns: conversation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: conversation.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Conversation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversation.FieldID)
		for _, f := range fields {
			if !conversation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != conversation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ContactId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldContactId,
		})
	}
	if value, ok := cuo.mutation.CreatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: conversation.FieldCreatedOn,
		})
	}
	if value, ok := cuo.mutation.UpdatedOn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: conversation.FieldUpdatedOn,
		})
	}
	if value, ok := cuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversation.FieldState,
		})
	}
	if value, ok := cuo.mutation.LastMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldLastMessage,
		})
	}
	if value, ok := cuo.mutation.LastSenderId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversation.FieldLastSenderId,
		})
	}
	if value, ok := cuo.mutation.LastSenderType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversation.FieldLastSenderType,
		})
	}
	if cuo.mutation.ConversationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationItemTable,
			Columns: []string{conversation.ConversationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversationitem.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedConversationItemIDs(); len(nodes) > 0 && !cuo.mutation.ConversationItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationItemTable,
			Columns: []string{conversation.ConversationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversationitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ConversationItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ConversationItemTable,
			Columns: []string{conversation.ConversationItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversationitem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Conversation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
