// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversation"
)

// Conversation is the model entity for the Conversation schema.
type Conversation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ContactId holds the value of the "contactId" field.
	ContactId string `json:"contactId,omitempty"`
	// CreatedOn holds the value of the "createdOn" field.
	CreatedOn time.Time `json:"createdOn,omitempty"`
	// UpdatedOn holds the value of the "updatedOn" field.
	UpdatedOn time.Time `json:"updatedOn,omitempty"`
	// State holds the value of the "state" field.
	State conversation.State `json:"state,omitempty"`
	// LastMessage holds the value of the "lastMessage" field.
	LastMessage string `json:"lastMessage,omitempty"`
	// LastSenderId holds the value of the "lastSenderId" field.
	LastSenderId string `json:"lastSenderId,omitempty"`
	// LastSenderType holds the value of the "lastSenderType" field.
	LastSenderType conversation.LastSenderType `json:"lastSenderType,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConversationQuery when eager-loading is set.
	Edges ConversationEdges `json:"edges"`
}

// ConversationEdges holds the relations/edges for other nodes in the graph.
type ConversationEdges struct {
	// ConversationItem holds the value of the conversation_item edge.
	ConversationItem []*ConversationItem `json:"conversation_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ConversationItemOrErr returns the ConversationItem value or an error if the edge
// was not loaded in eager-loading.
func (e ConversationEdges) ConversationItemOrErr() ([]*ConversationItem, error) {
	if e.loadedTypes[0] {
		return e.ConversationItem, nil
	}
	return nil, &NotLoadedError{edge: "conversation_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Conversation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case conversation.FieldID:
			values[i] = new(sql.NullInt64)
		case conversation.FieldContactId, conversation.FieldState, conversation.FieldLastMessage, conversation.FieldLastSenderId, conversation.FieldLastSenderType:
			values[i] = new(sql.NullString)
		case conversation.FieldCreatedOn, conversation.FieldUpdatedOn:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Conversation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Conversation fields.
func (c *Conversation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conversation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case conversation.FieldContactId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contactId", values[i])
			} else if value.Valid {
				c.ContactId = value.String
			}
		case conversation.FieldCreatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdOn", values[i])
			} else if value.Valid {
				c.CreatedOn = value.Time
			}
		case conversation.FieldUpdatedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedOn", values[i])
			} else if value.Valid {
				c.UpdatedOn = value.Time
			}
		case conversation.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				c.State = conversation.State(value.String)
			}
		case conversation.FieldLastMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastMessage", values[i])
			} else if value.Valid {
				c.LastMessage = value.String
			}
		case conversation.FieldLastSenderId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastSenderId", values[i])
			} else if value.Valid {
				c.LastSenderId = value.String
			}
		case conversation.FieldLastSenderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastSenderType", values[i])
			} else if value.Valid {
				c.LastSenderType = conversation.LastSenderType(value.String)
			}
		}
	}
	return nil
}

// QueryConversationItem queries the "conversation_item" edge of the Conversation entity.
func (c *Conversation) QueryConversationItem() *ConversationItemQuery {
	return (&ConversationClient{config: c.config}).QueryConversationItem(c)
}

// Update returns a builder for updating this Conversation.
// Note that you need to call Conversation.Unwrap() before calling this method if this Conversation
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Conversation) Update() *ConversationUpdateOne {
	return (&ConversationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Conversation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Conversation) Unwrap() *Conversation {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("gen: Conversation is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Conversation) String() string {
	var builder strings.Builder
	builder.WriteString("Conversation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("contactId=")
	builder.WriteString(c.ContactId)
	builder.WriteString(", ")
	builder.WriteString("createdOn=")
	builder.WriteString(c.CreatedOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedOn=")
	builder.WriteString(c.UpdatedOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", c.State))
	builder.WriteString(", ")
	builder.WriteString("lastMessage=")
	builder.WriteString(c.LastMessage)
	builder.WriteString(", ")
	builder.WriteString("lastSenderId=")
	builder.WriteString(c.LastSenderId)
	builder.WriteString(", ")
	builder.WriteString("lastSenderType=")
	builder.WriteString(fmt.Sprintf("%v", c.LastSenderType))
	builder.WriteByte(')')
	return builder.String()
}

// Conversations is a parsable slice of Conversation.
type Conversations []*Conversation

func (c Conversations) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
