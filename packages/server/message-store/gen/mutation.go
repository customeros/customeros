// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversation"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversationitem"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeConversation     = "Conversation"
	TypeConversationItem = "ConversationItem"
)

// ConversationMutation represents an operation that mutates the Conversation nodes in the graph.
type ConversationMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	contactId                *string
	createdOn                *time.Time
	updatedOn                *time.Time
	state                    *conversation.State
	lastMessage              *string
	lastSenderId             *string
	lastSenderType           *conversation.LastSenderType
	clearedFields            map[string]struct{}
	conversation_item        map[int]struct{}
	removedconversation_item map[int]struct{}
	clearedconversation_item bool
	done                     bool
	oldValue                 func(context.Context) (*Conversation, error)
	predicates               []predicate.Conversation
}

var _ ent.Mutation = (*ConversationMutation)(nil)

// conversationOption allows management of the mutation configuration using functional options.
type conversationOption func(*ConversationMutation)

// newConversationMutation creates new mutation for the Conversation entity.
func newConversationMutation(c config, op Op, opts ...conversationOption) *ConversationMutation {
	m := &ConversationMutation{
		config:        c,
		op:            op,
		typ:           TypeConversation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConversationID sets the ID field of the mutation.
func withConversationID(id int) conversationOption {
	return func(m *ConversationMutation) {
		var (
			err   error
			once  sync.Once
			value *Conversation
		)
		m.oldValue = func(ctx context.Context) (*Conversation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Conversation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConversation sets the old Conversation of the mutation.
func withConversation(node *Conversation) conversationOption {
	return func(m *ConversationMutation) {
		m.oldValue = func(context.Context) (*Conversation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConversationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConversationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConversationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConversationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Conversation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetContactId sets the "contactId" field.
func (m *ConversationMutation) SetContactId(s string) {
	m.contactId = &s
}

// ContactId returns the value of the "contactId" field in the mutation.
func (m *ConversationMutation) ContactId() (r string, exists bool) {
	v := m.contactId
	if v == nil {
		return
	}
	return *v, true
}

// OldContactId returns the old "contactId" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldContactId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactId: %w", err)
	}
	return oldValue.ContactId, nil
}

// ResetContactId resets all changes to the "contactId" field.
func (m *ConversationMutation) ResetContactId() {
	m.contactId = nil
}

// SetCreatedOn sets the "createdOn" field.
func (m *ConversationMutation) SetCreatedOn(t time.Time) {
	m.createdOn = &t
}

// CreatedOn returns the value of the "createdOn" field in the mutation.
func (m *ConversationMutation) CreatedOn() (r time.Time, exists bool) {
	v := m.createdOn
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedOn returns the old "createdOn" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldCreatedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedOn: %w", err)
	}
	return oldValue.CreatedOn, nil
}

// ResetCreatedOn resets all changes to the "createdOn" field.
func (m *ConversationMutation) ResetCreatedOn() {
	m.createdOn = nil
}

// SetUpdatedOn sets the "updatedOn" field.
func (m *ConversationMutation) SetUpdatedOn(t time.Time) {
	m.updatedOn = &t
}

// UpdatedOn returns the value of the "updatedOn" field in the mutation.
func (m *ConversationMutation) UpdatedOn() (r time.Time, exists bool) {
	v := m.updatedOn
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedOn returns the old "updatedOn" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldUpdatedOn(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedOn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedOn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedOn: %w", err)
	}
	return oldValue.UpdatedOn, nil
}

// ResetUpdatedOn resets all changes to the "updatedOn" field.
func (m *ConversationMutation) ResetUpdatedOn() {
	m.updatedOn = nil
}

// SetState sets the "state" field.
func (m *ConversationMutation) SetState(c conversation.State) {
	m.state = &c
}

// State returns the value of the "state" field in the mutation.
func (m *ConversationMutation) State() (r conversation.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldState(ctx context.Context) (v conversation.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *ConversationMutation) ResetState() {
	m.state = nil
}

// SetLastMessage sets the "lastMessage" field.
func (m *ConversationMutation) SetLastMessage(s string) {
	m.lastMessage = &s
}

// LastMessage returns the value of the "lastMessage" field in the mutation.
func (m *ConversationMutation) LastMessage() (r string, exists bool) {
	v := m.lastMessage
	if v == nil {
		return
	}
	return *v, true
}

// OldLastMessage returns the old "lastMessage" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldLastMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastMessage: %w", err)
	}
	return oldValue.LastMessage, nil
}

// ResetLastMessage resets all changes to the "lastMessage" field.
func (m *ConversationMutation) ResetLastMessage() {
	m.lastMessage = nil
}

// SetLastSenderId sets the "lastSenderId" field.
func (m *ConversationMutation) SetLastSenderId(s string) {
	m.lastSenderId = &s
}

// LastSenderId returns the value of the "lastSenderId" field in the mutation.
func (m *ConversationMutation) LastSenderId() (r string, exists bool) {
	v := m.lastSenderId
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSenderId returns the old "lastSenderId" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldLastSenderId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSenderId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSenderId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSenderId: %w", err)
	}
	return oldValue.LastSenderId, nil
}

// ResetLastSenderId resets all changes to the "lastSenderId" field.
func (m *ConversationMutation) ResetLastSenderId() {
	m.lastSenderId = nil
}

// SetLastSenderType sets the "lastSenderType" field.
func (m *ConversationMutation) SetLastSenderType(cst conversation.LastSenderType) {
	m.lastSenderType = &cst
}

// LastSenderType returns the value of the "lastSenderType" field in the mutation.
func (m *ConversationMutation) LastSenderType() (r conversation.LastSenderType, exists bool) {
	v := m.lastSenderType
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSenderType returns the old "lastSenderType" field's value of the Conversation entity.
// If the Conversation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationMutation) OldLastSenderType(ctx context.Context) (v conversation.LastSenderType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSenderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSenderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSenderType: %w", err)
	}
	return oldValue.LastSenderType, nil
}

// ResetLastSenderType resets all changes to the "lastSenderType" field.
func (m *ConversationMutation) ResetLastSenderType() {
	m.lastSenderType = nil
}

// AddConversationItemIDs adds the "conversation_item" edge to the ConversationItem entity by ids.
func (m *ConversationMutation) AddConversationItemIDs(ids ...int) {
	if m.conversation_item == nil {
		m.conversation_item = make(map[int]struct{})
	}
	for i := range ids {
		m.conversation_item[ids[i]] = struct{}{}
	}
}

// ClearConversationItem clears the "conversation_item" edge to the ConversationItem entity.
func (m *ConversationMutation) ClearConversationItem() {
	m.clearedconversation_item = true
}

// ConversationItemCleared reports if the "conversation_item" edge to the ConversationItem entity was cleared.
func (m *ConversationMutation) ConversationItemCleared() bool {
	return m.clearedconversation_item
}

// RemoveConversationItemIDs removes the "conversation_item" edge to the ConversationItem entity by IDs.
func (m *ConversationMutation) RemoveConversationItemIDs(ids ...int) {
	if m.removedconversation_item == nil {
		m.removedconversation_item = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.conversation_item, ids[i])
		m.removedconversation_item[ids[i]] = struct{}{}
	}
}

// RemovedConversationItem returns the removed IDs of the "conversation_item" edge to the ConversationItem entity.
func (m *ConversationMutation) RemovedConversationItemIDs() (ids []int) {
	for id := range m.removedconversation_item {
		ids = append(ids, id)
	}
	return
}

// ConversationItemIDs returns the "conversation_item" edge IDs in the mutation.
func (m *ConversationMutation) ConversationItemIDs() (ids []int) {
	for id := range m.conversation_item {
		ids = append(ids, id)
	}
	return
}

// ResetConversationItem resets all changes to the "conversation_item" edge.
func (m *ConversationMutation) ResetConversationItem() {
	m.conversation_item = nil
	m.clearedconversation_item = false
	m.removedconversation_item = nil
}

// Where appends a list predicates to the ConversationMutation builder.
func (m *ConversationMutation) Where(ps ...predicate.Conversation) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ConversationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Conversation).
func (m *ConversationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConversationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.contactId != nil {
		fields = append(fields, conversation.FieldContactId)
	}
	if m.createdOn != nil {
		fields = append(fields, conversation.FieldCreatedOn)
	}
	if m.updatedOn != nil {
		fields = append(fields, conversation.FieldUpdatedOn)
	}
	if m.state != nil {
		fields = append(fields, conversation.FieldState)
	}
	if m.lastMessage != nil {
		fields = append(fields, conversation.FieldLastMessage)
	}
	if m.lastSenderId != nil {
		fields = append(fields, conversation.FieldLastSenderId)
	}
	if m.lastSenderType != nil {
		fields = append(fields, conversation.FieldLastSenderType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConversationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case conversation.FieldContactId:
		return m.ContactId()
	case conversation.FieldCreatedOn:
		return m.CreatedOn()
	case conversation.FieldUpdatedOn:
		return m.UpdatedOn()
	case conversation.FieldState:
		return m.State()
	case conversation.FieldLastMessage:
		return m.LastMessage()
	case conversation.FieldLastSenderId:
		return m.LastSenderId()
	case conversation.FieldLastSenderType:
		return m.LastSenderType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConversationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case conversation.FieldContactId:
		return m.OldContactId(ctx)
	case conversation.FieldCreatedOn:
		return m.OldCreatedOn(ctx)
	case conversation.FieldUpdatedOn:
		return m.OldUpdatedOn(ctx)
	case conversation.FieldState:
		return m.OldState(ctx)
	case conversation.FieldLastMessage:
		return m.OldLastMessage(ctx)
	case conversation.FieldLastSenderId:
		return m.OldLastSenderId(ctx)
	case conversation.FieldLastSenderType:
		return m.OldLastSenderType(ctx)
	}
	return nil, fmt.Errorf("unknown Conversation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case conversation.FieldContactId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactId(v)
		return nil
	case conversation.FieldCreatedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedOn(v)
		return nil
	case conversation.FieldUpdatedOn:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedOn(v)
		return nil
	case conversation.FieldState:
		v, ok := value.(conversation.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case conversation.FieldLastMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastMessage(v)
		return nil
	case conversation.FieldLastSenderId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSenderId(v)
		return nil
	case conversation.FieldLastSenderType:
		v, ok := value.(conversation.LastSenderType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSenderType(v)
		return nil
	}
	return fmt.Errorf("unknown Conversation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConversationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConversationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Conversation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConversationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConversationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConversationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Conversation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConversationMutation) ResetField(name string) error {
	switch name {
	case conversation.FieldContactId:
		m.ResetContactId()
		return nil
	case conversation.FieldCreatedOn:
		m.ResetCreatedOn()
		return nil
	case conversation.FieldUpdatedOn:
		m.ResetUpdatedOn()
		return nil
	case conversation.FieldState:
		m.ResetState()
		return nil
	case conversation.FieldLastMessage:
		m.ResetLastMessage()
		return nil
	case conversation.FieldLastSenderId:
		m.ResetLastSenderId()
		return nil
	case conversation.FieldLastSenderType:
		m.ResetLastSenderType()
		return nil
	}
	return fmt.Errorf("unknown Conversation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConversationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.conversation_item != nil {
		edges = append(edges, conversation.EdgeConversationItem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConversationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case conversation.EdgeConversationItem:
		ids := make([]ent.Value, 0, len(m.conversation_item))
		for id := range m.conversation_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConversationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedconversation_item != nil {
		edges = append(edges, conversation.EdgeConversationItem)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConversationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case conversation.EdgeConversationItem:
		ids := make([]ent.Value, 0, len(m.removedconversation_item))
		for id := range m.removedconversation_item {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConversationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconversation_item {
		edges = append(edges, conversation.EdgeConversationItem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConversationMutation) EdgeCleared(name string) bool {
	switch name {
	case conversation.EdgeConversationItem:
		return m.clearedconversation_item
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConversationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Conversation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConversationMutation) ResetEdge(name string) error {
	switch name {
	case conversation.EdgeConversationItem:
		m.ResetConversationItem()
		return nil
	}
	return fmt.Errorf("unknown Conversation edge %s", name)
}

// ConversationItemMutation represents an operation that mutates the ConversationItem nodes in the graph.
type ConversationItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_type               *conversationitem.Type
	senderId            *string
	senderType          *conversationitem.SenderType
	message             *string
	channel             *conversationitem.Channel
	direction           *conversationitem.Direction
	time                *time.Time
	clearedFields       map[string]struct{}
	conversation        *int
	clearedconversation bool
	done                bool
	oldValue            func(context.Context) (*ConversationItem, error)
	predicates          []predicate.ConversationItem
}

var _ ent.Mutation = (*ConversationItemMutation)(nil)

// conversationitemOption allows management of the mutation configuration using functional options.
type conversationitemOption func(*ConversationItemMutation)

// newConversationItemMutation creates new mutation for the ConversationItem entity.
func newConversationItemMutation(c config, op Op, opts ...conversationitemOption) *ConversationItemMutation {
	m := &ConversationItemMutation{
		config:        c,
		op:            op,
		typ:           TypeConversationItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConversationItemID sets the ID field of the mutation.
func withConversationItemID(id int) conversationitemOption {
	return func(m *ConversationItemMutation) {
		var (
			err   error
			once  sync.Once
			value *ConversationItem
		)
		m.oldValue = func(ctx context.Context) (*ConversationItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ConversationItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConversationItem sets the old ConversationItem of the mutation.
func withConversationItem(node *ConversationItem) conversationitemOption {
	return func(m *ConversationItemMutation) {
		m.oldValue = func(context.Context) (*ConversationItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConversationItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConversationItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConversationItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConversationItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ConversationItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *ConversationItemMutation) SetType(c conversationitem.Type) {
	m._type = &c
}

// GetType returns the value of the "type" field in the mutation.
func (m *ConversationItemMutation) GetType() (r conversationitem.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the ConversationItem entity.
// If the ConversationItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationItemMutation) OldType(ctx context.Context) (v conversationitem.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ConversationItemMutation) ResetType() {
	m._type = nil
}

// SetSenderId sets the "senderId" field.
func (m *ConversationItemMutation) SetSenderId(s string) {
	m.senderId = &s
}

// SenderId returns the value of the "senderId" field in the mutation.
func (m *ConversationItemMutation) SenderId() (r string, exists bool) {
	v := m.senderId
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderId returns the old "senderId" field's value of the ConversationItem entity.
// If the ConversationItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationItemMutation) OldSenderId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderId: %w", err)
	}
	return oldValue.SenderId, nil
}

// ResetSenderId resets all changes to the "senderId" field.
func (m *ConversationItemMutation) ResetSenderId() {
	m.senderId = nil
}

// SetSenderType sets the "senderType" field.
func (m *ConversationItemMutation) SetSenderType(ct conversationitem.SenderType) {
	m.senderType = &ct
}

// SenderType returns the value of the "senderType" field in the mutation.
func (m *ConversationItemMutation) SenderType() (r conversationitem.SenderType, exists bool) {
	v := m.senderType
	if v == nil {
		return
	}
	return *v, true
}

// OldSenderType returns the old "senderType" field's value of the ConversationItem entity.
// If the ConversationItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationItemMutation) OldSenderType(ctx context.Context) (v conversationitem.SenderType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSenderType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSenderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSenderType: %w", err)
	}
	return oldValue.SenderType, nil
}

// ResetSenderType resets all changes to the "senderType" field.
func (m *ConversationItemMutation) ResetSenderType() {
	m.senderType = nil
}

// SetMessage sets the "message" field.
func (m *ConversationItemMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *ConversationItemMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the ConversationItem entity.
// If the ConversationItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationItemMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *ConversationItemMutation) ResetMessage() {
	m.message = nil
}

// SetChannel sets the "channel" field.
func (m *ConversationItemMutation) SetChannel(c conversationitem.Channel) {
	m.channel = &c
}

// Channel returns the value of the "channel" field in the mutation.
func (m *ConversationItemMutation) Channel() (r conversationitem.Channel, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the ConversationItem entity.
// If the ConversationItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationItemMutation) OldChannel(ctx context.Context) (v conversationitem.Channel, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ResetChannel resets all changes to the "channel" field.
func (m *ConversationItemMutation) ResetChannel() {
	m.channel = nil
}

// SetDirection sets the "direction" field.
func (m *ConversationItemMutation) SetDirection(c conversationitem.Direction) {
	m.direction = &c
}

// Direction returns the value of the "direction" field in the mutation.
func (m *ConversationItemMutation) Direction() (r conversationitem.Direction, exists bool) {
	v := m.direction
	if v == nil {
		return
	}
	return *v, true
}

// OldDirection returns the old "direction" field's value of the ConversationItem entity.
// If the ConversationItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationItemMutation) OldDirection(ctx context.Context) (v conversationitem.Direction, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDirection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDirection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDirection: %w", err)
	}
	return oldValue.Direction, nil
}

// ResetDirection resets all changes to the "direction" field.
func (m *ConversationItemMutation) ResetDirection() {
	m.direction = nil
}

// SetTime sets the "time" field.
func (m *ConversationItemMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *ConversationItemMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the ConversationItem entity.
// If the ConversationItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationItemMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *ConversationItemMutation) ResetTime() {
	m.time = nil
}

// SetConversationID sets the "conversation" edge to the Conversation entity by id.
func (m *ConversationItemMutation) SetConversationID(id int) {
	m.conversation = &id
}

// ClearConversation clears the "conversation" edge to the Conversation entity.
func (m *ConversationItemMutation) ClearConversation() {
	m.clearedconversation = true
}

// ConversationCleared reports if the "conversation" edge to the Conversation entity was cleared.
func (m *ConversationItemMutation) ConversationCleared() bool {
	return m.clearedconversation
}

// ConversationID returns the "conversation" edge ID in the mutation.
func (m *ConversationItemMutation) ConversationID() (id int, exists bool) {
	if m.conversation != nil {
		return *m.conversation, true
	}
	return
}

// ConversationIDs returns the "conversation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ConversationID instead. It exists only for internal usage by the builders.
func (m *ConversationItemMutation) ConversationIDs() (ids []int) {
	if id := m.conversation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetConversation resets all changes to the "conversation" edge.
func (m *ConversationItemMutation) ResetConversation() {
	m.conversation = nil
	m.clearedconversation = false
}

// Where appends a list predicates to the ConversationItemMutation builder.
func (m *ConversationItemMutation) Where(ps ...predicate.ConversationItem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ConversationItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ConversationItem).
func (m *ConversationItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConversationItemMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m._type != nil {
		fields = append(fields, conversationitem.FieldType)
	}
	if m.senderId != nil {
		fields = append(fields, conversationitem.FieldSenderId)
	}
	if m.senderType != nil {
		fields = append(fields, conversationitem.FieldSenderType)
	}
	if m.message != nil {
		fields = append(fields, conversationitem.FieldMessage)
	}
	if m.channel != nil {
		fields = append(fields, conversationitem.FieldChannel)
	}
	if m.direction != nil {
		fields = append(fields, conversationitem.FieldDirection)
	}
	if m.time != nil {
		fields = append(fields, conversationitem.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConversationItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case conversationitem.FieldType:
		return m.GetType()
	case conversationitem.FieldSenderId:
		return m.SenderId()
	case conversationitem.FieldSenderType:
		return m.SenderType()
	case conversationitem.FieldMessage:
		return m.Message()
	case conversationitem.FieldChannel:
		return m.Channel()
	case conversationitem.FieldDirection:
		return m.Direction()
	case conversationitem.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConversationItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case conversationitem.FieldType:
		return m.OldType(ctx)
	case conversationitem.FieldSenderId:
		return m.OldSenderId(ctx)
	case conversationitem.FieldSenderType:
		return m.OldSenderType(ctx)
	case conversationitem.FieldMessage:
		return m.OldMessage(ctx)
	case conversationitem.FieldChannel:
		return m.OldChannel(ctx)
	case conversationitem.FieldDirection:
		return m.OldDirection(ctx)
	case conversationitem.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown ConversationItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case conversationitem.FieldType:
		v, ok := value.(conversationitem.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case conversationitem.FieldSenderId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderId(v)
		return nil
	case conversationitem.FieldSenderType:
		v, ok := value.(conversationitem.SenderType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSenderType(v)
		return nil
	case conversationitem.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case conversationitem.FieldChannel:
		v, ok := value.(conversationitem.Channel)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	case conversationitem.FieldDirection:
		v, ok := value.(conversationitem.Direction)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDirection(v)
		return nil
	case conversationitem.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown ConversationItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConversationItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConversationItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ConversationItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConversationItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConversationItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConversationItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ConversationItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConversationItemMutation) ResetField(name string) error {
	switch name {
	case conversationitem.FieldType:
		m.ResetType()
		return nil
	case conversationitem.FieldSenderId:
		m.ResetSenderId()
		return nil
	case conversationitem.FieldSenderType:
		m.ResetSenderType()
		return nil
	case conversationitem.FieldMessage:
		m.ResetMessage()
		return nil
	case conversationitem.FieldChannel:
		m.ResetChannel()
		return nil
	case conversationitem.FieldDirection:
		m.ResetDirection()
		return nil
	case conversationitem.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown ConversationItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConversationItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.conversation != nil {
		edges = append(edges, conversationitem.EdgeConversation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConversationItemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case conversationitem.EdgeConversation:
		if id := m.conversation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConversationItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConversationItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConversationItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconversation {
		edges = append(edges, conversationitem.EdgeConversation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConversationItemMutation) EdgeCleared(name string) bool {
	switch name {
	case conversationitem.EdgeConversation:
		return m.clearedconversation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConversationItemMutation) ClearEdge(name string) error {
	switch name {
	case conversationitem.EdgeConversation:
		m.ClearConversation()
		return nil
	}
	return fmt.Errorf("unknown ConversationItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConversationItemMutation) ResetEdge(name string) error {
	switch name {
	case conversationitem.EdgeConversation:
		m.ResetConversation()
		return nil
	}
	return fmt.Errorf("unknown ConversationItem edge %s", name)
}
