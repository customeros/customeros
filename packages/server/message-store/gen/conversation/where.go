// Code generated by ent, DO NOT EDIT.

package conversation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ContactId applies equality check predicate on the "contactId" field. It's identical to ContactIdEQ.
func ContactId(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactId), v))
	})
}

// CreatedOn applies equality check predicate on the "createdOn" field. It's identical to CreatedOnEQ.
func CreatedOn(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedOn), v))
	})
}

// UpdatedOn applies equality check predicate on the "updatedOn" field. It's identical to UpdatedOnEQ.
func UpdatedOn(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedOn), v))
	})
}

// LastMessage applies equality check predicate on the "lastMessage" field. It's identical to LastMessageEQ.
func LastMessage(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastMessage), v))
	})
}

// LastSenderId applies equality check predicate on the "lastSenderId" field. It's identical to LastSenderIdEQ.
func LastSenderId(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSenderId), v))
	})
}

// ContactIdEQ applies the EQ predicate on the "contactId" field.
func ContactIdEQ(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactId), v))
	})
}

// ContactIdNEQ applies the NEQ predicate on the "contactId" field.
func ContactIdNEQ(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactId), v))
	})
}

// ContactIdIn applies the In predicate on the "contactId" field.
func ContactIdIn(vs ...string) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContactId), v...))
	})
}

// ContactIdNotIn applies the NotIn predicate on the "contactId" field.
func ContactIdNotIn(vs ...string) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContactId), v...))
	})
}

// ContactIdGT applies the GT predicate on the "contactId" field.
func ContactIdGT(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactId), v))
	})
}

// ContactIdGTE applies the GTE predicate on the "contactId" field.
func ContactIdGTE(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactId), v))
	})
}

// ContactIdLT applies the LT predicate on the "contactId" field.
func ContactIdLT(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactId), v))
	})
}

// ContactIdLTE applies the LTE predicate on the "contactId" field.
func ContactIdLTE(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactId), v))
	})
}

// ContactIdContains applies the Contains predicate on the "contactId" field.
func ContactIdContains(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactId), v))
	})
}

// ContactIdHasPrefix applies the HasPrefix predicate on the "contactId" field.
func ContactIdHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactId), v))
	})
}

// ContactIdHasSuffix applies the HasSuffix predicate on the "contactId" field.
func ContactIdHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactId), v))
	})
}

// ContactIdEqualFold applies the EqualFold predicate on the "contactId" field.
func ContactIdEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactId), v))
	})
}

// ContactIdContainsFold applies the ContainsFold predicate on the "contactId" field.
func ContactIdContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactId), v))
	})
}

// CreatedOnEQ applies the EQ predicate on the "createdOn" field.
func CreatedOnEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnNEQ applies the NEQ predicate on the "createdOn" field.
func CreatedOnNEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnIn applies the In predicate on the "createdOn" field.
func CreatedOnIn(vs ...time.Time) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedOn), v...))
	})
}

// CreatedOnNotIn applies the NotIn predicate on the "createdOn" field.
func CreatedOnNotIn(vs ...time.Time) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedOn), v...))
	})
}

// CreatedOnGT applies the GT predicate on the "createdOn" field.
func CreatedOnGT(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnGTE applies the GTE predicate on the "createdOn" field.
func CreatedOnGTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnLT applies the LT predicate on the "createdOn" field.
func CreatedOnLT(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedOn), v))
	})
}

// CreatedOnLTE applies the LTE predicate on the "createdOn" field.
func CreatedOnLTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedOn), v))
	})
}

// UpdatedOnEQ applies the EQ predicate on the "updatedOn" field.
func UpdatedOnEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedOn), v))
	})
}

// UpdatedOnNEQ applies the NEQ predicate on the "updatedOn" field.
func UpdatedOnNEQ(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedOn), v))
	})
}

// UpdatedOnIn applies the In predicate on the "updatedOn" field.
func UpdatedOnIn(vs ...time.Time) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedOn), v...))
	})
}

// UpdatedOnNotIn applies the NotIn predicate on the "updatedOn" field.
func UpdatedOnNotIn(vs ...time.Time) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedOn), v...))
	})
}

// UpdatedOnGT applies the GT predicate on the "updatedOn" field.
func UpdatedOnGT(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedOn), v))
	})
}

// UpdatedOnGTE applies the GTE predicate on the "updatedOn" field.
func UpdatedOnGTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedOn), v))
	})
}

// UpdatedOnLT applies the LT predicate on the "updatedOn" field.
func UpdatedOnLT(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedOn), v))
	})
}

// UpdatedOnLTE applies the LTE predicate on the "updatedOn" field.
func UpdatedOnLTE(v time.Time) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedOn), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// LastMessageEQ applies the EQ predicate on the "lastMessage" field.
func LastMessageEQ(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastMessage), v))
	})
}

// LastMessageNEQ applies the NEQ predicate on the "lastMessage" field.
func LastMessageNEQ(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastMessage), v))
	})
}

// LastMessageIn applies the In predicate on the "lastMessage" field.
func LastMessageIn(vs ...string) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastMessage), v...))
	})
}

// LastMessageNotIn applies the NotIn predicate on the "lastMessage" field.
func LastMessageNotIn(vs ...string) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastMessage), v...))
	})
}

// LastMessageGT applies the GT predicate on the "lastMessage" field.
func LastMessageGT(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastMessage), v))
	})
}

// LastMessageGTE applies the GTE predicate on the "lastMessage" field.
func LastMessageGTE(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastMessage), v))
	})
}

// LastMessageLT applies the LT predicate on the "lastMessage" field.
func LastMessageLT(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastMessage), v))
	})
}

// LastMessageLTE applies the LTE predicate on the "lastMessage" field.
func LastMessageLTE(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastMessage), v))
	})
}

// LastMessageContains applies the Contains predicate on the "lastMessage" field.
func LastMessageContains(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastMessage), v))
	})
}

// LastMessageHasPrefix applies the HasPrefix predicate on the "lastMessage" field.
func LastMessageHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastMessage), v))
	})
}

// LastMessageHasSuffix applies the HasSuffix predicate on the "lastMessage" field.
func LastMessageHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastMessage), v))
	})
}

// LastMessageEqualFold applies the EqualFold predicate on the "lastMessage" field.
func LastMessageEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastMessage), v))
	})
}

// LastMessageContainsFold applies the ContainsFold predicate on the "lastMessage" field.
func LastMessageContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastMessage), v))
	})
}

// LastSenderIdEQ applies the EQ predicate on the "lastSenderId" field.
func LastSenderIdEQ(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdNEQ applies the NEQ predicate on the "lastSenderId" field.
func LastSenderIdNEQ(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdIn applies the In predicate on the "lastSenderId" field.
func LastSenderIdIn(vs ...string) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastSenderId), v...))
	})
}

// LastSenderIdNotIn applies the NotIn predicate on the "lastSenderId" field.
func LastSenderIdNotIn(vs ...string) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastSenderId), v...))
	})
}

// LastSenderIdGT applies the GT predicate on the "lastSenderId" field.
func LastSenderIdGT(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdGTE applies the GTE predicate on the "lastSenderId" field.
func LastSenderIdGTE(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdLT applies the LT predicate on the "lastSenderId" field.
func LastSenderIdLT(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdLTE applies the LTE predicate on the "lastSenderId" field.
func LastSenderIdLTE(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdContains applies the Contains predicate on the "lastSenderId" field.
func LastSenderIdContains(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdHasPrefix applies the HasPrefix predicate on the "lastSenderId" field.
func LastSenderIdHasPrefix(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdHasSuffix applies the HasSuffix predicate on the "lastSenderId" field.
func LastSenderIdHasSuffix(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdEqualFold applies the EqualFold predicate on the "lastSenderId" field.
func LastSenderIdEqualFold(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastSenderId), v))
	})
}

// LastSenderIdContainsFold applies the ContainsFold predicate on the "lastSenderId" field.
func LastSenderIdContainsFold(v string) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastSenderId), v))
	})
}

// LastSenderTypeEQ applies the EQ predicate on the "lastSenderType" field.
func LastSenderTypeEQ(v LastSenderType) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSenderType), v))
	})
}

// LastSenderTypeNEQ applies the NEQ predicate on the "lastSenderType" field.
func LastSenderTypeNEQ(v LastSenderType) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastSenderType), v))
	})
}

// LastSenderTypeIn applies the In predicate on the "lastSenderType" field.
func LastSenderTypeIn(vs ...LastSenderType) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastSenderType), v...))
	})
}

// LastSenderTypeNotIn applies the NotIn predicate on the "lastSenderType" field.
func LastSenderTypeNotIn(vs ...LastSenderType) predicate.Conversation {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Conversation(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastSenderType), v...))
	})
}

// HasConversationItem applies the HasEdge predicate on the "conversation_item" edge.
func HasConversationItem() predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConversationItemTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConversationItemTable, ConversationItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationItemWith applies the HasEdge predicate on the "conversation_item" edge with a given conditions (other predicates).
func HasConversationItemWith(preds ...predicate.ConversationItem) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConversationItemInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ConversationItemTable, ConversationItemColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Conversation) predicate.Conversation {
	return predicate.Conversation(func(s *sql.Selector) {
		p(s.Not())
	})
}
