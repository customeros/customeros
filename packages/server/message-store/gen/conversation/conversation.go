// Code generated by ent, DO NOT EDIT.

package conversation

import (
	"fmt"
)

const (
	// Label holds the string label denoting the conversation type in the database.
	Label = "conversation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldContactId holds the string denoting the contactid field in the database.
	FieldContactId = "contact_id"
	// FieldCreatedOn holds the string denoting the createdon field in the database.
	FieldCreatedOn = "created_on"
	// FieldUpdatedOn holds the string denoting the updatedon field in the database.
	FieldUpdatedOn = "updated_on"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldLastMessage holds the string denoting the lastmessage field in the database.
	FieldLastMessage = "last_message"
	// FieldLastSenderId holds the string denoting the lastsenderid field in the database.
	FieldLastSenderId = "last_sender_id"
	// FieldLastSenderType holds the string denoting the lastsendertype field in the database.
	FieldLastSenderType = "last_sender_type"
	// EdgeConversationItem holds the string denoting the conversation_item edge name in mutations.
	EdgeConversationItem = "conversation_item"
	// Table holds the table name of the conversation in the database.
	Table = "conversations"
	// ConversationItemTable is the table that holds the conversation_item relation/edge.
	ConversationItemTable = "conversation_items"
	// ConversationItemInverseTable is the table name for the ConversationItem entity.
	// It exists in this package in order to avoid circular dependency with the "conversationitem" package.
	ConversationItemInverseTable = "conversation_items"
	// ConversationItemColumn is the table column denoting the conversation_item relation/edge.
	ConversationItemColumn = "conversation_conversation_item"
)

// Columns holds all SQL columns for conversation fields.
var Columns = []string{
	FieldID,
	FieldContactId,
	FieldCreatedOn,
	FieldUpdatedOn,
	FieldState,
	FieldLastMessage,
	FieldLastSenderId,
	FieldLastSenderType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateNEW         State = "NEW"
	StateIN_PROGRESS State = "IN_PROGRESS"
	StateCLOSED      State = "CLOSED"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateNEW, StateIN_PROGRESS, StateCLOSED:
		return nil
	default:
		return fmt.Errorf("conversation: invalid enum value for state field: %q", s)
	}
}

// LastSenderType defines the type for the "lastSenderType" enum field.
type LastSenderType string

// LastSenderType values.
const (
	LastSenderTypeCONTACT LastSenderType = "CONTACT"
	LastSenderTypeUSER    LastSenderType = "USER"
)

func (lst LastSenderType) String() string {
	return string(lst)
}

// LastSenderTypeValidator is a validator for the "lastSenderType" field enum values. It is called by the builders before save.
func LastSenderTypeValidator(lst LastSenderType) error {
	switch lst {
	case LastSenderTypeCONTACT, LastSenderTypeUSER:
		return nil
	default:
		return fmt.Errorf("conversation: invalid enum value for lastSenderType field: %q", lst)
	}
}
