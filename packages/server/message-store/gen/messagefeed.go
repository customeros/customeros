// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/messagefeed"
)

// MessageFeed is the model entity for the MessageFeed schema.
type MessageFeed struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ContactId holds the value of the "contactId" field.
	ContactId string `json:"contactId,omitempty"`
	// FirstName holds the value of the "firstName" field.
	FirstName string `json:"firstName,omitempty"`
	// LastName holds the value of the "lastName" field.
	LastName string `json:"lastName,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageFeedQuery when eager-loading is set.
	Edges MessageFeedEdges `json:"edges"`
}

// MessageFeedEdges holds the relations/edges for other nodes in the graph.
type MessageFeedEdges struct {
	// MessageItem holds the value of the message_item edge.
	MessageItem []*MessageItem `json:"message_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MessageItemOrErr returns the MessageItem value or an error if the edge
// was not loaded in eager-loading.
func (e MessageFeedEdges) MessageItemOrErr() ([]*MessageItem, error) {
	if e.loadedTypes[0] {
		return e.MessageItem, nil
	}
	return nil, &NotLoadedError{edge: "message_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageFeed) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagefeed.FieldID:
			values[i] = new(sql.NullInt64)
		case messagefeed.FieldContactId, messagefeed.FieldFirstName, messagefeed.FieldLastName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MessageFeed", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageFeed fields.
func (mf *MessageFeed) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagefeed.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mf.ID = int(value.Int64)
		case messagefeed.FieldContactId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contactId", values[i])
			} else if value.Valid {
				mf.ContactId = value.String
			}
		case messagefeed.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstName", values[i])
			} else if value.Valid {
				mf.FirstName = value.String
			}
		case messagefeed.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastName", values[i])
			} else if value.Valid {
				mf.LastName = value.String
			}
		}
	}
	return nil
}

// QueryMessageItem queries the "message_item" edge of the MessageFeed entity.
func (mf *MessageFeed) QueryMessageItem() *MessageItemQuery {
	return (&MessageFeedClient{config: mf.config}).QueryMessageItem(mf)
}

// Update returns a builder for updating this MessageFeed.
// Note that you need to call MessageFeed.Unwrap() before calling this method if this MessageFeed
// was returned from a transaction, and the transaction was committed or rolled back.
func (mf *MessageFeed) Update() *MessageFeedUpdateOne {
	return (&MessageFeedClient{config: mf.config}).UpdateOne(mf)
}

// Unwrap unwraps the MessageFeed entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mf *MessageFeed) Unwrap() *MessageFeed {
	_tx, ok := mf.config.driver.(*txDriver)
	if !ok {
		panic("gen: MessageFeed is not a transactional entity")
	}
	mf.config.driver = _tx.drv
	return mf
}

// String implements the fmt.Stringer.
func (mf *MessageFeed) String() string {
	var builder strings.Builder
	builder.WriteString("MessageFeed(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mf.ID))
	builder.WriteString("contactId=")
	builder.WriteString(mf.ContactId)
	builder.WriteString(", ")
	builder.WriteString("firstName=")
	builder.WriteString(mf.FirstName)
	builder.WriteString(", ")
	builder.WriteString("lastName=")
	builder.WriteString(mf.LastName)
	builder.WriteByte(')')
	return builder.String()
}

// MessageFeeds is a parsable slice of MessageFeed.
type MessageFeeds []*MessageFeed

func (mf MessageFeeds) config(cfg config) {
	for _i := range mf {
		mf[_i].config = cfg
	}
}
