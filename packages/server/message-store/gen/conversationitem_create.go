// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversation"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversationitem"
)

// ConversationItemCreate is the builder for creating a ConversationItem entity.
type ConversationItemCreate struct {
	config
	mutation *ConversationItemMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (cic *ConversationItemCreate) SetType(c conversationitem.Type) *ConversationItemCreate {
	cic.mutation.SetType(c)
	return cic
}

// SetSenderId sets the "senderId" field.
func (cic *ConversationItemCreate) SetSenderId(s string) *ConversationItemCreate {
	cic.mutation.SetSenderId(s)
	return cic
}

// SetSenderType sets the "senderType" field.
func (cic *ConversationItemCreate) SetSenderType(ct conversationitem.SenderType) *ConversationItemCreate {
	cic.mutation.SetSenderType(ct)
	return cic
}

// SetMessage sets the "message" field.
func (cic *ConversationItemCreate) SetMessage(s string) *ConversationItemCreate {
	cic.mutation.SetMessage(s)
	return cic
}

// SetChannel sets the "channel" field.
func (cic *ConversationItemCreate) SetChannel(c conversationitem.Channel) *ConversationItemCreate {
	cic.mutation.SetChannel(c)
	return cic
}

// SetDirection sets the "direction" field.
func (cic *ConversationItemCreate) SetDirection(c conversationitem.Direction) *ConversationItemCreate {
	cic.mutation.SetDirection(c)
	return cic
}

// SetTime sets the "time" field.
func (cic *ConversationItemCreate) SetTime(t time.Time) *ConversationItemCreate {
	cic.mutation.SetTime(t)
	return cic
}

// SetConversationID sets the "conversation" edge to the Conversation entity by ID.
func (cic *ConversationItemCreate) SetConversationID(id int) *ConversationItemCreate {
	cic.mutation.SetConversationID(id)
	return cic
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (cic *ConversationItemCreate) SetConversation(c *Conversation) *ConversationItemCreate {
	return cic.SetConversationID(c.ID)
}

// Mutation returns the ConversationItemMutation object of the builder.
func (cic *ConversationItemCreate) Mutation() *ConversationItemMutation {
	return cic.mutation
}

// Save creates the ConversationItem in the database.
func (cic *ConversationItemCreate) Save(ctx context.Context) (*ConversationItem, error) {
	var (
		err  error
		node *ConversationItem
	)
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConversationItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			if node, err = cic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			if cic.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = cic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConversationItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConversationItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *ConversationItemCreate) SaveX(ctx context.Context) *ConversationItem {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *ConversationItemCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *ConversationItemCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *ConversationItemCreate) check() error {
	if _, ok := cic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`gen: missing required field "ConversationItem.type"`)}
	}
	if v, ok := cic.mutation.GetType(); ok {
		if err := conversationitem.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`gen: validator failed for field "ConversationItem.type": %w`, err)}
		}
	}
	if _, ok := cic.mutation.SenderId(); !ok {
		return &ValidationError{Name: "senderId", err: errors.New(`gen: missing required field "ConversationItem.senderId"`)}
	}
	if _, ok := cic.mutation.SenderType(); !ok {
		return &ValidationError{Name: "senderType", err: errors.New(`gen: missing required field "ConversationItem.senderType"`)}
	}
	if v, ok := cic.mutation.SenderType(); ok {
		if err := conversationitem.SenderTypeValidator(v); err != nil {
			return &ValidationError{Name: "senderType", err: fmt.Errorf(`gen: validator failed for field "ConversationItem.senderType": %w`, err)}
		}
	}
	if _, ok := cic.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`gen: missing required field "ConversationItem.message"`)}
	}
	if _, ok := cic.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`gen: missing required field "ConversationItem.channel"`)}
	}
	if v, ok := cic.mutation.Channel(); ok {
		if err := conversationitem.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`gen: validator failed for field "ConversationItem.channel": %w`, err)}
		}
	}
	if _, ok := cic.mutation.Direction(); !ok {
		return &ValidationError{Name: "direction", err: errors.New(`gen: missing required field "ConversationItem.direction"`)}
	}
	if v, ok := cic.mutation.Direction(); ok {
		if err := conversationitem.DirectionValidator(v); err != nil {
			return &ValidationError{Name: "direction", err: fmt.Errorf(`gen: validator failed for field "ConversationItem.direction": %w`, err)}
		}
	}
	if _, ok := cic.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`gen: missing required field "ConversationItem.time"`)}
	}
	if _, ok := cic.mutation.ConversationID(); !ok {
		return &ValidationError{Name: "conversation", err: errors.New(`gen: missing required edge "ConversationItem.conversation"`)}
	}
	return nil
}

func (cic *ConversationItemCreate) sqlSave(ctx context.Context) (*ConversationItem, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cic *ConversationItemCreate) createSpec() (*ConversationItem, *sqlgraph.CreateSpec) {
	var (
		_node = &ConversationItem{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: conversationitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: conversationitem.FieldID,
			},
		}
	)
	if value, ok := cic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversationitem.FieldType,
		})
		_node.Type = value
	}
	if value, ok := cic.mutation.SenderId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversationitem.FieldSenderId,
		})
		_node.SenderId = value
	}
	if value, ok := cic.mutation.SenderType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversationitem.FieldSenderType,
		})
		_node.SenderType = value
	}
	if value, ok := cic.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: conversationitem.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := cic.mutation.Channel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversationitem.FieldChannel,
		})
		_node.Channel = value
	}
	if value, ok := cic.mutation.Direction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: conversationitem.FieldDirection,
		})
		_node.Direction = value
	}
	if value, ok := cic.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: conversationitem.FieldTime,
		})
		_node.Time = value
	}
	if nodes := cic.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   conversationitem.ConversationTable,
			Columns: []string{conversationitem.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: conversation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.conversation_conversation_item = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConversationItemCreateBulk is the builder for creating many ConversationItem entities in bulk.
type ConversationItemCreateBulk struct {
	config
	builders []*ConversationItemCreate
}

// Save creates the ConversationItem entities in the database.
func (cicb *ConversationItemCreateBulk) Save(ctx context.Context) ([]*ConversationItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*ConversationItem, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConversationItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *ConversationItemCreateBulk) SaveX(ctx context.Context) []*ConversationItem {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *ConversationItemCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *ConversationItemCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
