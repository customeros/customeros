// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversation"
	"github.com/openline-ai/openline-customer-os/packages/server/message-store/gen/conversationitem"
)

// ConversationItem is the model entity for the ConversationItem schema.
type ConversationItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type conversationitem.Type `json:"type,omitempty"`
	// SenderId holds the value of the "senderId" field.
	SenderId string `json:"senderId,omitempty"`
	// SenderType holds the value of the "senderType" field.
	SenderType conversationitem.SenderType `json:"senderType,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel conversationitem.Channel `json:"channel,omitempty"`
	// Direction holds the value of the "direction" field.
	Direction conversationitem.Direction `json:"direction,omitempty"`
	// Time holds the value of the "time" field.
	Time time.Time `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConversationItemQuery when eager-loading is set.
	Edges                          ConversationItemEdges `json:"edges"`
	conversation_conversation_item *int
}

// ConversationItemEdges holds the relations/edges for other nodes in the graph.
type ConversationItemEdges struct {
	// Conversation holds the value of the conversation edge.
	Conversation *Conversation `json:"conversation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ConversationOrErr returns the Conversation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConversationItemEdges) ConversationOrErr() (*Conversation, error) {
	if e.loadedTypes[0] {
		if e.Conversation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: conversation.Label}
		}
		return e.Conversation, nil
	}
	return nil, &NotLoadedError{edge: "conversation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConversationItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case conversationitem.FieldID:
			values[i] = new(sql.NullInt64)
		case conversationitem.FieldType, conversationitem.FieldSenderId, conversationitem.FieldSenderType, conversationitem.FieldMessage, conversationitem.FieldChannel, conversationitem.FieldDirection:
			values[i] = new(sql.NullString)
		case conversationitem.FieldTime:
			values[i] = new(sql.NullTime)
		case conversationitem.ForeignKeys[0]: // conversation_conversation_item
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ConversationItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConversationItem fields.
func (ci *ConversationItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conversationitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case conversationitem.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ci.Type = conversationitem.Type(value.String)
			}
		case conversationitem.FieldSenderId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field senderId", values[i])
			} else if value.Valid {
				ci.SenderId = value.String
			}
		case conversationitem.FieldSenderType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field senderType", values[i])
			} else if value.Valid {
				ci.SenderType = conversationitem.SenderType(value.String)
			}
		case conversationitem.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				ci.Message = value.String
			}
		case conversationitem.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				ci.Channel = conversationitem.Channel(value.String)
			}
		case conversationitem.FieldDirection:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field direction", values[i])
			} else if value.Valid {
				ci.Direction = conversationitem.Direction(value.String)
			}
		case conversationitem.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				ci.Time = value.Time
			}
		case conversationitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field conversation_conversation_item", value)
			} else if value.Valid {
				ci.conversation_conversation_item = new(int)
				*ci.conversation_conversation_item = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryConversation queries the "conversation" edge of the ConversationItem entity.
func (ci *ConversationItem) QueryConversation() *ConversationQuery {
	return (&ConversationItemClient{config: ci.config}).QueryConversation(ci)
}

// Update returns a builder for updating this ConversationItem.
// Note that you need to call ConversationItem.Unwrap() before calling this method if this ConversationItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *ConversationItem) Update() *ConversationItemUpdateOne {
	return (&ConversationItemClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the ConversationItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *ConversationItem) Unwrap() *ConversationItem {
	_tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("gen: ConversationItem is not a transactional entity")
	}
	ci.config.driver = _tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *ConversationItem) String() string {
	var builder strings.Builder
	builder.WriteString("ConversationItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ci.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ci.Type))
	builder.WriteString(", ")
	builder.WriteString("senderId=")
	builder.WriteString(ci.SenderId)
	builder.WriteString(", ")
	builder.WriteString("senderType=")
	builder.WriteString(fmt.Sprintf("%v", ci.SenderType))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(ci.Message)
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(fmt.Sprintf("%v", ci.Channel))
	builder.WriteString(", ")
	builder.WriteString("direction=")
	builder.WriteString(fmt.Sprintf("%v", ci.Direction))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(ci.Time.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConversationItems is a parsable slice of ConversationItem.
type ConversationItems []*ConversationItem

func (ci ConversationItems) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
