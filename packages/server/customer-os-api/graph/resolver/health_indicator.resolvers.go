package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
)

// HealthIndicators is the resolver for the healthIndicators field.
func (r *queryResolver) HealthIndicators(ctx context.Context) ([]*model.HealthIndicator, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.HealthIndicators", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	tags, err := r.Services.HealthIndicatorService.GetAll(ctx)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch health indicators")
		return nil, nil
	}
	return mapper.MapEntitiesToHealthIndicators(tags), err
}
