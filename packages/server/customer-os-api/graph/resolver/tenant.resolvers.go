package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
	"github.com/opentracing/opentracing-go/log"
)

// TenantAddBillingProfile is the resolver for the tenant_AddBillingProfile field.
func (r *mutationResolver) TenantAddBillingProfile(ctx context.Context, input model.TenantBillingProfileInput) (*model.TenantBillingProfile, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TenantAddBillingProfile", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	profileId, err := r.Services.TenantService.CreateTenantBillingProfile(ctx, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create tenant billing profile")
		return &model.TenantBillingProfile{ID: profileId}, err
	}

	createdTenantBillingProfileEntity, err := r.Services.CommonServices.TenantService.GetTenantBillingProfile(ctx, profileId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Tenant billing profile not yet available.")
		return &model.TenantBillingProfile{ID: profileId}, nil
	}
	span.LogFields(log.String("response.tenantBillingProfileId", profileId))
	return mapper.MapEntityToTenantBillingProfile(createdTenantBillingProfileEntity), nil
}

// TenantUpdateBillingProfile is the resolver for the tenant_UpdateBillingProfile field.
func (r *mutationResolver) TenantUpdateBillingProfile(ctx context.Context, input model.TenantBillingProfileUpdateInput) (*model.TenantBillingProfile, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TenantUpdateBillingProfile", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	if input.ID == "" {
		err := errors.New("missing tenant billing profile id")
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Missing tenant billing profile id")
		return nil, nil
	}

	err := r.Services.TenantService.UpdateTenantBillingProfile(ctx, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update billing profile")
		return nil, err
	}

	updatedTenantBillingProfileEntity, err := r.Services.CommonServices.TenantService.GetTenantBillingProfile(ctx, input.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch tenant billing profile details")
		return nil, nil
	}
	return mapper.MapEntityToTenantBillingProfile(updatedTenantBillingProfileEntity), nil
}

// TenantUpdateSettings is the resolver for the tenant_UpdateSettings field.
func (r *mutationResolver) TenantUpdateSettings(ctx context.Context, input *model.TenantSettingsInput) (*model.TenantSettings, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TenantUpdateSettings", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.TenantService.UpdateTenantSettings(ctx, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update tenant settings")
		return nil, err
	}

	updatedTenantSettingsEntity, err := r.Services.CommonServices.TenantService.GetTenantSettings(ctx)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch tenant settings")
		return nil, nil
	}
	return mapper.MapEntityToTenantSettings(updatedTenantSettingsEntity), nil
}

// TenantUpdateSettingsOpportunityStage is the resolver for the tenant_UpdateSettingsOpportunityStage field.
func (r *mutationResolver) TenantUpdateSettingsOpportunityStage(ctx context.Context, input model.TenantSettingsOpportunityStageConfigurationInput) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TenantUpdateSettingsOpportunityStage", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	tenant := common.GetTenantFromContext(ctx)

	updatedEntity, err := r.Services.Repositories.PostgresRepositories.TenantSettingsOpportunityStageRepository.Update(ctx, tenant, input.ID, input.Label, input.LikelihoodRate, input.Visible)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update tenant settings opportunity stage")
		return &model.ActionResponse{Accepted: false}, err
	}
	if updatedEntity == nil {
		return &model.ActionResponse{Accepted: false}, nil
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// TenantHardDelete is the resolver for the tenant_hardDelete field.
func (r *mutationResolver) TenantHardDelete(ctx context.Context, tenant string, confirmTenant string) (bool, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TenantHardDelete", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.tenant", tenant), log.String("request.confirmTenant", confirmTenant))

	if tenant != confirmTenant {
		err := errors.New("tenant name does not match the confirmation tenant name")
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Tenant name does not match the confirmation tenant name")
		return false, nil
	}

	err := r.Services.CommonServices.TenantService.HardDelete(ctx, tenant)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Tenant is the resolver for the tenant field.
func (r *queryResolver) Tenant(ctx context.Context) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Tenant", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	return common.GetTenantFromContext(ctx), nil
}

// TenantBillingProfiles is the resolver for the tenantBillingProfiles field.
func (r *queryResolver) TenantBillingProfiles(ctx context.Context) ([]*model.TenantBillingProfile, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.TenantBillingProfiles", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	tenantBillingProfileEntities, err := r.Services.CommonServices.TenantService.GetTenantBillingProfiles(ctx)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch billing profiles")
		return nil, nil
	}
	return mapper.MapEntitiesToTenantBillingProfiles(tenantBillingProfileEntities), nil
}

// TenantBillingProfile is the resolver for the tenantBillingProfile field.
func (r *queryResolver) TenantBillingProfile(ctx context.Context, id string) (*model.TenantBillingProfile, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.TenantBillingProfile", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.tenantBillingProfileId", id))

	tenantBillingProfileEntity, err := r.Services.CommonServices.TenantService.GetTenantBillingProfile(ctx, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch tenant billing profile details")
		return nil, nil
	}
	return mapper.MapEntityToTenantBillingProfile(tenantBillingProfileEntity), nil
}

// TenantSettings is the resolver for the tenantSettings field.
func (r *queryResolver) TenantSettings(ctx context.Context) (*model.TenantSettings, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.TenantSettings", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	tenantSettingsEntity, err := r.Services.CommonServices.TenantService.GetTenantSettings(ctx)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch tenant settings")
		return nil, nil
	}
	tenantSettings := mapper.MapEntityToTenantSettings(tenantSettingsEntity)

	opportunityStages, err := r.Services.CommonServices.PostgresRepositories.TenantSettingsOpportunityStageRepository.GetOrInitialize(ctx, common.GetTenantFromContext(ctx))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch tenant settings opportunity stages")
		return nil, nil
	}

	tenantSettings.OpportunityStages = mapper.MapEntitiesToTenantSettingsOpportunityStages(opportunityStages)

	return tenantSettings, nil
}
