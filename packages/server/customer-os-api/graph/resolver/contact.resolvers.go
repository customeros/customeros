package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/constants"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/entity"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/service"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
	commonmodel "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/model"
	commonService "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/service"
	commonTracing "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	neo4jentity "github.com/openline-ai/openline-customer-os/packages/server/customer-os-neo4j-repository/entity"
	neo4jmodel "github.com/openline-ai/openline-customer-os/packages/server/customer-os-neo4j-repository/model"
	neo4jrepository "github.com/openline-ai/openline-customer-os/packages/server/customer-os-neo4j-repository/repository"
	postgresentity "github.com/openline-ai/openline-customer-os/packages/server/customer-os-postgres-repository/entity"
	contactpb "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/contact"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/log"
	pkgerrors "github.com/pkg/errors"
)

// Tags is the resolver for the tags field.
func (r *contactResolver) Tags(ctx context.Context, obj *model.Contact) ([]*model.Tag, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	tagEntities, err := dataloader.For(ctx).GetTagsForContact(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get tags for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get tags for contact %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToTags(tagEntities), nil
}

// JobRoles is the resolver for the jobRoles field.
func (r *contactResolver) JobRoles(ctx context.Context, obj *model.Contact) ([]*model.JobRole, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	jobRoleEntities, err := dataloader.For(ctx).GetJobRolesForContact(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get job roles for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get job roles for contact %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToJobRoles(jobRoleEntities), err
}

// Organizations is the resolver for the organizations field.
func (r *contactResolver) Organizations(ctx context.Context, obj *model.Contact, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.OrganizationPage, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "ContactResolver.Organizations", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", obj.ID))

	if pagination == nil {
		pagination = &model.Pagination{Page: 0, Limit: 0}
	}
	span.LogFields(log.Int("request.page", pagination.Page), log.Int("request.limit", pagination.Limit))
	paginatedResult, err := r.Services.OrganizationService.GetOrganizationsForContact(ctx, obj.ID, pagination.Page, pagination.Limit, where, sort)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not fetch organizations for contact %s", obj.ID)
		return nil, err
	}
	return &model.OrganizationPage{
		Content:       mapper.MapEntitiesToOrganizations(paginatedResult.Rows.(*neo4jentity.OrganizationEntities)),
		TotalPages:    paginatedResult.TotalPages,
		TotalElements: paginatedResult.TotalRows,
	}, err
}

// PhoneNumbers is the resolver for the phoneNumbers field.
func (r *contactResolver) PhoneNumbers(ctx context.Context, obj *model.Contact) ([]*model.PhoneNumber, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	phoneNumberEntities, err := dataloader.For(ctx).GetPhoneNumbersForContact(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get phone numbers for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get phone numbers for contact %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToPhoneNumbers(phoneNumberEntities), nil
}

// Emails is the resolver for the emails field.
func (r *contactResolver) Emails(ctx context.Context, obj *model.Contact) ([]*model.Email, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	emailEntities, err := dataloader.For(ctx).GetEmailsForContact(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get emails for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get emails for contact %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToEmails(emailEntities), nil
}

// PrimaryEmail is the resolver for the primaryEmail field.
func (r *contactResolver) PrimaryEmail(ctx context.Context, obj *model.Contact) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "ContactResolver.PrimaryEmail", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogKV("request.contactID", obj.Metadata.ID)

	emailEntityNillable, err := dataloader.For(ctx).GetPrimaryEmailForContact(ctx, obj.Metadata.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("error fetching primary email for contact %s: %s", obj.Metadata.ID, err.Error())
		graphql.AddErrorf(ctx, "error fetching email for contact %s", obj.Metadata.ID)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntityNillable), nil
}

// Locations is the resolver for the locations field.
func (r *contactResolver) Locations(ctx context.Context, obj *model.Contact) ([]*model.Location, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	locationEntities, err := dataloader.For(ctx).GetLocationsForContact(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get locations for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get locations for contact %s", obj.ID)
		return nil, err
	}
	return mapper.MapEntitiesToLocations(locationEntities), err
}

// Socials is the resolver for the socials field.
func (r *contactResolver) Socials(ctx context.Context, obj *model.Contact) ([]*model.Social, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	socialEntities, err := dataloader.For(ctx).GetSocialsForContact(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get socials for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get socials for contact %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToSocials(socialEntities), err
}

// ConnectedUsers is the resolver for the connectedUsers field.
func (r *contactResolver) ConnectedUsers(ctx context.Context, obj *model.Contact) ([]*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntities, err := dataloader.For(ctx).GetUsersConnectedForContact(ctx, obj.Metadata.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get socials for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get socials for contact %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToUsers(userEntities), err
}

// CustomFields is the resolver for the customFields field.
func (r *contactResolver) CustomFields(ctx context.Context, obj *model.Contact) ([]*model.CustomField, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "ContactResolver.CustomFields", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", obj.ID))

	var customFields []*model.CustomField
	entityType := &model.CustomFieldEntityType{
		ID:         obj.ID,
		EntityType: model.CustomEntityTypeContact,
	}
	customFieldEntities, err := r.Services.CustomFieldService.GetCustomFields(ctx, entityType)

	for _, v := range mapper.MapEntitiesToCustomFields(customFieldEntities) {
		customFields = append(customFields, v)
	}
	return customFields, err
}

// Owner is the resolver for the owner field.
func (r *contactResolver) Owner(ctx context.Context, obj *model.Contact) (*model.User, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "ContactResolver.Owner", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", obj.ID))

	owner, err := r.Services.UserService.GetContactOwner(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get owner for contact %s", obj.ID)
		return nil, err
	}
	if owner == nil {
		return nil, nil
	}
	return mapper.MapEntityToUser(owner), err
}

// Flows is the resolver for the flows field.
func (r *contactResolver) Flows(ctx context.Context, obj *model.Contact) ([]*model.Flow, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	entities, err := dataloader.For(ctx).GetFlowsWithContact(ctx, obj.Metadata.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get flow  for contact %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get flows for contact %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToFlows(entities), err
}

// TimelineEvents is the resolver for the timelineEvents field.
func (r *contactResolver) TimelineEvents(ctx context.Context, obj *model.Contact, from *time.Time, size int, timelineEventTypes []model.TimelineEventType) ([]model.TimelineEvent, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "ContactResolver.TimelineEvents", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", obj.ID), log.Int("request.size", size), log.Object("request.types", timelineEventTypes))
	if from != nil {
		span.LogFields(log.Object("request.from", *from))
	}

	timelineEvents, err := r.Services.TimelineEventService.GetTimelineEventsForContact(ctx, obj.ID, from, size, timelineEventTypes)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "failed to get timeline events for contact %s", obj.ID)
		return nil, err
	}
	return mapper.MapEntitiesToTimelineEvents(timelineEvents), nil
}

// TimelineEventsTotalCount is the resolver for the timelineEventsTotalCount field.
func (r *contactResolver) TimelineEventsTotalCount(ctx context.Context, obj *model.Contact, timelineEventTypes []model.TimelineEventType) (int64, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "ContactResolver.TimelineEventsTotalCount", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", obj.ID), log.Object("request.types", timelineEventTypes))

	count, err := r.Services.TimelineEventService.GetTimelineEventsTotalCountForContact(ctx, obj.ID, timelineEventTypes)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "failed to get timeline events total count for contact %s", obj.ID)
		return int64(0), err
	}
	return count, nil
}

// ContactCreate is the resolver for the contact_Create field.
func (r *mutationResolver) ContactCreate(ctx context.Context, input model.ContactInput) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactCreate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	contactId, err := r.Services.ContactService.Create(ctx, &service.ContactCreateData{
		ContactEntity:     mapper.MapContactInputToEntity(input),
		PhoneNumberEntity: mapper.MapPhoneNumberInputToEntity(input.PhoneNumber),
		EmailEntity:       mapper.MapEmailInputToEntity(input.Email),
		ExternalReference: mapper.MapExternalSystemReferenceInputToRelationship(input.ExternalReference),
		SocialUrl:         utils.IfNotNilString(input.SocialURL),
		Source:            neo4jentity.DataSourceOpenline,
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create contact %s %s", *input.FirstName, *input.LastName)
		return contactId, err
	}
	span.LogFields(log.String("response.contactID", contactId))
	return contactId, nil
}

// ContactCreateForOrganization is the resolver for the contact_CreateForOrganization field.
func (r *mutationResolver) ContactCreateForOrganization(ctx context.Context, input model.ContactInput, organizationID string) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactCreateForOrganization", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)
	span.LogKV("request.organizationID", organizationID)

	tenant := common.GetTenantFromContext(ctx)

	// Check organization exists
	_, err := r.Services.CommonServices.OrganizationService.GetById(ctx, tenant, organizationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Organization with id %s not found", organizationID)
		return nil, err
	}

	// Create contact
	contactId, err := r.ContactCreate(ctx, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create contact")
		return nil, err
	}

	// Link contact to organization
	if contactId != "" {
		neo4jrepository.WaitForNodeCreatedInNeo4j(ctx, r.Services.Repositories.Neo4jRepositories, contactId, commonmodel.NodeLabelContact, span)

		err = r.Services.ContactService.LinkToOrganization(ctx, contactId, organizationID, constants.AppSourceCustomerOsApi)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to add organization %s to contact %s", organizationID, contactId)
			return nil, err
		}
	}

	return &model.Contact{
		Metadata: &model.Metadata{
			ID: contactId,
		},
		ID: contactId,
	}, err
}

// CustomerContactCreate is the resolver for the customer_contact_Create field.
func (r *mutationResolver) CustomerContactCreate(ctx context.Context, input model.CustomerContactInput) (*model.CustomerContact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactCreate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	return r.Services.ContactService.CustomerContactCreate(ctx, &service.CustomerContactCreateData{
		ContactEntity: mapper.MapCustomerContactInputToEntity(input),
		EmailEntity:   mapper.MapEmailInputToLocalEntity(input.Email),
	})
}

// ContactUpdate is the resolver for the contact_Update field.
func (r *mutationResolver) ContactUpdate(ctx context.Context, input model.ContactUpdateInput) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	contactId, err := r.Services.CommonServices.ContactService.SaveContact(ctx, utils.StringPtr(input.ID), mapper.MapContactUpdateInputToContactFields(input), "", neo4jmodel.ExternalSystem{})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update contact %s", input.ID)
		return nil, nil
	}

	updatedContactEntity, err := r.Services.ContactService.GetById(ctx, contactId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Contact details not yet available. Contact id: %s", contactId)
		return &model.Contact{ID: contactId}, nil
	}
	span.LogFields(log.String("response.contactID", contactId))
	return mapper.MapEntityToContact(updatedContactEntity), nil
}

// ContactHardDelete is the resolver for the contact_HardDelete field.
func (r *mutationResolver) ContactHardDelete(ctx context.Context, contactID string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactHardDelete", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID))

	result, err := r.Services.ContactService.PermanentDelete(ctx, contactID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not hard delete contact %s", contactID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// ContactArchive is the resolver for the contact_Archive field.
func (r *mutationResolver) ContactArchive(ctx context.Context, contactID string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactArchive", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID))

	result, err := r.Services.ContactService.Archive(ctx, contactID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to archive contact %s", contactID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// ContactRestoreFromArchive is the resolver for the contact_RestoreFromArchive field.
func (r *mutationResolver) ContactRestoreFromArchive(ctx context.Context, contactID string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactRestoreFromArchive", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID))

	result, err := r.Services.ContactService.RestoreFromArchive(ctx, contactID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to restore from archive contact %s", contactID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// ContactMerge is the resolver for the contact_Merge field.
func (r *mutationResolver) ContactMerge(ctx context.Context, primaryContactID string, mergedContactIds []string) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactMerge", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.primaryContactID", primaryContactID), log.Object("request.mergedContactIds", mergedContactIds))

	for _, mergedContactID := range mergedContactIds {
		err := r.Services.ContactService.Merge(ctx, primaryContactID, mergedContactID)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to merge contact %s into contact %s", mergedContactID, primaryContactID)
			return nil, err
		}
	}

	contactEntityPtr, err := r.Services.ContactService.GetById(ctx, primaryContactID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get contact by id %s", primaryContactID)
		return nil, err
	}
	return mapper.MapEntityToContact(contactEntityPtr), nil
}

// ContactHide is the resolver for the contact_Hide field.
func (r *mutationResolver) ContactHide(ctx context.Context, contactID string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactHide", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogKV(log.String("request.contactID", contactID))

	contactEntity, err := r.Services.ContactService.GetById(ctx, contactID)
	if err != nil || contactEntity == nil {
		if err == nil {
			err = fmt.Errorf("contact %s not found", contactID)
		}
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Contact %s not found", contactID)
		return &model.ActionResponse{Accepted: false}, nil
	}

	ctx = commonTracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err = utils.CallEventsPlatformGRPCWithRetry[*contactpb.ContactIdGrpcResponse](func() (*contactpb.ContactIdGrpcResponse, error) {
		return r.Clients.ContactClient.HideContact(ctx, &contactpb.ContactIdGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			LoggedInUserId: common.GetUserIdFromContext(ctx),
			ContactId:      contactID,
			AppSource:      constants.AppSourceCustomerOsApi,
		})
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error while hiding contact")
		return &model.ActionResponse{Accepted: false}, nil
	}
	return &model.ActionResponse{Accepted: true}, nil
}

// ContactAddOrganizationByID is the resolver for the contact_AddOrganizationById field.
func (r *mutationResolver) ContactAddOrganizationByID(ctx context.Context, input model.ContactOrganizationInput) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactAddOrganizationByID", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", input.ContactID), log.String("request.organizationID", input.OrganizationID))
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.ContactService.LinkToOrganization(ctx, input.ContactID, input.OrganizationID, constants.AppSourceCustomerOsApi)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to add organization %s to contact %s", input.OrganizationID, input.ContactID)
		return nil, err
	}
	contactEntity, err := r.Services.ContactService.GetById(ctx, input.ContactID)
	if err != nil || contactEntity == nil {
		if err == nil {
			err = fmt.Errorf("contact %s not found", input.ContactID)
		}
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Contact %s not found", input.ContactID)
		return nil, nil
	}
	return mapper.MapEntityToContact(contactEntity), nil
}

// ContactRemoveOrganizationByID is the resolver for the contact_RemoveOrganizationById field.
func (r *mutationResolver) ContactRemoveOrganizationByID(ctx context.Context, input model.ContactOrganizationInput) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactRemoveOrganizationByID", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", input.ContactID), log.String("request.organizationID", input.OrganizationID))
	tracing.LogObjectAsJson(span, "request.input", input)

	updatedContact, err := r.Services.ContactService.RemoveOrganization(ctx, input.ContactID, input.OrganizationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove organization %s from contact %s", input.OrganizationID, input.ContactID)
		return nil, err
	}
	return mapper.MapEntityToContact(updatedContact), nil
}

// ContactAddNewLocation is the resolver for the contact_AddNewLocation field.
func (r *mutationResolver) ContactAddNewLocation(ctx context.Context, contactID string) (*model.Location, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactAddNewLocation", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID))

	locationEntity, err := r.Services.LocationService.CreateLocationForEntity(ctx, commonmodel.CONTACT, contactID, entity.SourceFields{
		Source:        neo4jentity.DataSourceOpenline,
		SourceOfTruth: neo4jentity.DataSourceOpenline,
		AppSource:     constants.AppSourceCustomerOsApi,
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error creating location for contact %s", contactID)
		return nil, err
	}
	return mapper.MapEntityToLocation(locationEntity), nil
}

// ContactRemoveLocation is the resolver for the contact_RemoveLocation field.
func (r *mutationResolver) ContactRemoveLocation(ctx context.Context, contactID string, locationID string) (*model.Contact, error) {
	r.log.Error("ContactRemoveLocation is Not Ready Yet")
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactRemoveLocation", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID), log.String("request.locationID", locationID))

	err := r.Services.ContactService.RemoveLocation(ctx, contactID, locationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove location %s from user %s", locationID, contactID)
		return nil, nil
	}
	contactEntity, err := r.Services.ContactService.GetById(ctx, contactID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get contact %s", contactID)
		return nil, nil
	}
	return mapper.MapEntityToContact(contactEntity), nil
}

// ContactAddSocial is the resolver for the contact_AddSocial field.
func (r *mutationResolver) ContactAddSocial(ctx context.Context, contactID string, input model.SocialInput) (*model.Social, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactAddSocial", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogKV("request.contactID", contactID)
	tracing.LogObjectAsJson(span, "request.input", input)

	socialId, err := r.Services.CommonServices.SocialService.MergeSocialWithEntity(ctx, common.GetTenantFromContext(ctx), contactID, commonmodel.CONTACT,
		neo4jentity.SocialEntity{
			Url:       input.URL,
			Source:    neo4jentity.DataSourceOpenline,
			AppSource: utils.StringPtrFirstNonEmpty(input.AppSource, utils.StringPtr(constants.AppSourceCustomerOsApi)),
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to add social %s from contact %s", input.URL, contactID)
		return nil, nil
	}

	return &model.Social{
		ID: socialId,
	}, nil
}

// ContactRemoveSocial is the resolver for the contact_RemoveSocial field.
func (r *mutationResolver) ContactRemoveSocial(ctx context.Context, contactID string, socialID string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactRemoveSocial", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID), log.String("request.socialID", socialID))

	ctx = commonTracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err := utils.CallEventsPlatformGRPCWithRetry[*contactpb.ContactIdGrpcResponse](func() (*contactpb.ContactIdGrpcResponse, error) {
		return r.Clients.ContactClient.RemoveSocial(ctx, &contactpb.ContactRemoveSocialGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			LoggedInUserId: common.GetUserIdFromContext(ctx),
			ContactId:      contactID,
			SocialId:       socialID,
			AppSource:      constants.AppSourceCustomerOsApi,
		})
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove social %s from contact %s", socialID, contactID)
		return &model.ActionResponse{
			Accepted: false,
		}, nil
	}

	return &model.ActionResponse{
		Accepted: true,
	}, nil
}

// ContactFindWorkEmail is the resolver for the contact_FindWorkEmail field.
func (r *mutationResolver) ContactFindWorkEmail(ctx context.Context, contactID string, organizationID *string, domain *string, findMobileNumber *bool) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.ContactFindWorkEmail", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogKV("request.contactID", contactID)

	tenant := common.GetTenantFromContext(ctx)

	if organizationID != nil {
		span.LogKV("request.organizationID", *organizationID)
	}
	if domain != nil {
		span.LogKV("request.domain", *domain)
	}
	if findMobileNumber != nil {
		span.LogFields(log.Bool("request.findMobileNumber", *findMobileNumber))
	}

	contactEntity, err := r.Services.ContactService.GetById(ctx, contactID)
	if err != nil || contactEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Contact with id %s not found", contactID)
		return &model.ActionResponse{Accepted: false}, nil
	}

	// if organizationID is provided, check contact is linked to the organization
	var organizationEntity *neo4jentity.OrganizationEntity
	orgDomain := ""
	orgName := ""
	if organizationID != nil {
		_, err := r.Services.Repositories.Neo4jRepositories.JobRoleReadRepository.ExistsForContactAndOrganization(ctx, common.GetTenantFromContext(ctx), contactID, *organizationID)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Contact %s does not belong to organization %s", contactID, *organizationID)
			return &model.ActionResponse{Accepted: false}, nil
		}
		organizationEntity, err = r.Services.CommonServices.OrganizationService.GetById(ctx, tenant, *organizationID)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Organization with id %s not found", *organizationID)
			return &model.ActionResponse{Accepted: false}, nil
		}
		domains, err := r.Services.CommonServices.DomainService.GetDomainsForOrganizations(ctx, []string{organizationEntity.ID})
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to get domains for organization %s", *organizationID)
			return &model.ActionResponse{Accepted: false}, nil
		}
		if len(*domains) > 0 {
			orgName = organizationEntity.Name
			orgDomain = (*domains)[0].Domain
		}
	}

	if orgDomain == "" && organizationEntity == nil {
		paginatedResult, err := r.Services.OrganizationService.GetOrganizationsForContact(ctx, contactID, 1, 1000, nil, nil)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to get organizations for contact %s", contactID)
			return &model.ActionResponse{Accepted: false}, nil
		}
		if len(*paginatedResult.Rows.(*neo4jentity.OrganizationEntities)) > 0 {
			for _, orgEntity := range *paginatedResult.Rows.(*neo4jentity.OrganizationEntities) {
				domains, err := r.Services.CommonServices.DomainService.GetDomainsForOrganizations(ctx, []string{orgEntity.ID})
				if err != nil {
					tracing.TraceErr(span, err)
					graphql.AddErrorf(ctx, "Failed to get domains for organization %s", orgEntity.ID)
					return &model.ActionResponse{Accepted: false}, nil
				}
				if len(*domains) > 0 {
					orgName = orgEntity.Name
					orgDomain = (*domains)[0].Domain
					break
				}
			}
		}
	}

	if orgDomain == "" && domain != nil {
		orgDomain = *domain
	}

	socials, err := r.Services.CommonServices.SocialService.GetAllForEntities(ctx, common.GetTenantFromContext(ctx), commonmodel.CONTACT, []string{contactID})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get socials for contact %s", contactID)
		return &model.ActionResponse{Accepted: false}, nil
	}
	linkedInUrl := ""
	for _, social := range *socials {
		if strings.Contains(social.Url, "linkedin.com") {
			linkedInUrl = social.Url
			break
		}
	}

	// Call events platform to find work email
	firstName, lastName := contactEntity.DeriveFirstAndLastNames()

	enrichmentResponse, err := r.Services.EnrichmentService.CallApiFindWorkEmail(ctx, firstName, lastName, orgName, orgDomain, linkedInUrl, findMobileNumber != nil && *findMobileNumber)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to find work email for contact %s", contactID)
		return &model.ActionResponse{Accepted: false}, nil
	}
	if enrichmentResponse == nil {
		tracing.TraceErr(span, errors.New("enrichment response is nil"))
		graphql.AddErrorf(ctx, "Failed to find work email for contact %s", contactID)
		return &model.ActionResponse{Accepted: false}, nil
	}

	var emailsToCreateAndLinkWithContact []string
	phoneNumbers := []string{}
	if enrichmentResponse.Data != nil {
		for _, item := range enrichmentResponse.Data.Data {
			if item.ContactEmailAddress != "" {
				emailsToCreateAndLinkWithContact = append(emailsToCreateAndLinkWithContact, item.ContactEmailAddress)
			}
			if item.ContactPhoneNumber != nil && fmt.Sprintf("%v", item.ContactPhoneNumber) != "" {
				phoneNumbers = append(phoneNumbers, fmt.Sprintf("%v", item.ContactPhoneNumber))
			}
		}
	} else {
		// mark contact as requested data from better contact
		err = r.Services.Repositories.Neo4jRepositories.ContactWriteRepository.UpdateAnyProperty(ctx, common.GetTenantFromContext(ctx), contactID, neo4jentity.ContactPropertyFindWorkEmailWithBetterContactRequestedId, enrichmentResponse.BetterContactRequestId)
		if err != nil {
			tracing.TraceErr(span, err)
		}
		err = r.Services.Repositories.Neo4jRepositories.CommonWriteRepository.UpdateTimeProperty(ctx, common.GetTenantFromContext(ctx), commonmodel.NodeLabelContact, contactID, string(neo4jentity.ContactPropertyFindWorkEmailWithBetterContactRequestedAt), utils.NowPtr())
		if err != nil {
			tracing.TraceErr(span, err)
		}
		err = r.Services.Repositories.Neo4jRepositories.CommonWriteRepository.RemoveProperty(ctx, common.GetTenantFromContext(ctx), commonmodel.NodeLabelContact, contactID, string(neo4jentity.ContactPropertyFindWorkEmailWithBetterContactCompletedAt))
		if err != nil {
			tracing.TraceErr(span, err)
		}
		return &model.ActionResponse{Accepted: true}, nil
	}

	phoneNumberEntities, err := r.Services.PhoneNumberService.GetAllForEntityTypeByIds(ctx, commonmodel.CONTACT, []string{contactID})
	if err != nil {
		tracing.TraceErr(span, err)
	}
	currentPhoneNumbers := []string{}
	for _, phoneNumberEntity := range *phoneNumberEntities {
		currentPhoneNumbers = append(currentPhoneNumbers, phoneNumberEntity.RawPhoneNumber)
		currentPhoneNumbers = append(currentPhoneNumbers, phoneNumberEntity.E164)
	}

	emailEntities, err := r.Services.EmailService.GetAllForEntityTypeByIds(ctx, commonmodel.CONTACT, []string{contactID})
	if err != nil {
		tracing.TraceErr(span, err)
	}
	var currentEmails []string
	for _, emailEntity := range *emailEntities {
		currentEmails = append(currentEmails, emailEntity.RawEmail)
		currentEmails = append(currentEmails, emailEntity.Email)
	}

	// create emails that are not yet linked to contact
	emailLinked := false
	for _, email := range emailsToCreateAndLinkWithContact {
		if !utils.Contains(currentEmails, email) {
			_, err = r.Services.CommonServices.EmailService.Merge(ctx, common.GetTenantFromContext(ctx),
				commonService.EmailFields{
					Email:     email,
					AppSource: constants.AppSourceCustomerOsApi,
				},
				&commonService.LinkWith{
					Type: commonmodel.CONTACT,
					Id:   contactID,
				})
			if err != nil {
				tracing.TraceErr(span, err)
			} else {
				emailLinked = true
			}
		}
	}

	// create phone numbers that are not already linked to contact
	phoneLinked := false
	for _, phoneNumber := range phoneNumbers {
		if !utils.Contains(currentPhoneNumbers, phoneNumber) {
			_, err = r.PhoneNumberMergeToContact(ctx, contactID, model.PhoneNumberInput{
				PhoneNumber: phoneNumber,
			})
			if err != nil {
				tracing.TraceErr(span, err)
			} else {
				phoneLinked = true
			}
		}
	}

	if emailLinked {
		_, err = r.Services.CommonServices.PostgresRepositories.ApiBillableEventRepository.RegisterEvent(ctx, common.GetTenantFromContext(ctx), postgresentity.BillableEventEnrichPersonEmailFound, enrichmentResponse.Data.Id,
			fmt.Sprintf("Email: %s, LinkedIn: %s, FirstName: %s, LastName: %s", emailsToCreateAndLinkWithContact[0], linkedInUrl, firstName, lastName))
		if err != nil {
			tracing.TraceErr(span, pkgerrors.Wrap(err, "failed to store billable event"))
		}
	}
	if phoneLinked {
		_, err = r.Services.CommonServices.PostgresRepositories.ApiBillableEventRepository.RegisterEvent(ctx, common.GetTenantFromContext(ctx), postgresentity.BillableEventEnrichPersonPhoneFound, enrichmentResponse.Data.Id,
			fmt.Sprintf("Phone: %s, LinkedIn: %s, FirstName: %s, LastName: %s", phoneNumbers[0], linkedInUrl, firstName, lastName))
		if err != nil {
			tracing.TraceErr(span, pkgerrors.Wrap(err, "failed to store billable event"))
		}
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// ContactAddTag is the resolver for the contact_AddTag field.
func (r *mutationResolver) ContactAddTag(ctx context.Context, input model.ContactTagInput) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationAddTag", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("request", input))

	tenant := common.GetTenantFromContext(ctx)

	_, err := r.Services.CommonServices.TagService.AddTag(ctx, nil, tenant, input.ContactID, commonmodel.CONTACT, utils.StringOrEmpty(input.Tag.ID), utils.StringOrEmpty(input.Tag.Name), constants.AppSourceCustomerOsApi)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error adding tag to organization")
		return nil, nil
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// ContactRemoveTag is the resolver for the contact_RemoveTag field.
func (r *mutationResolver) ContactRemoveTag(ctx context.Context, input model.ContactTagInput) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationAddTag", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("request", input))

	tenant := common.GetTenantFromContext(ctx)

	err := r.Services.CommonServices.TagService.RemoveTag(ctx, nil, tenant, input.ContactID, commonmodel.CONTACT, utils.StringOrEmpty(input.Tag.ID), constants.AppSourceCustomerOsApi)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error removing tag from organization")
		return nil, nil
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// Contact is the resolver for the contact field.
func (r *queryResolver) Contact(ctx context.Context, id string) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Contact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", id))

	if id == "" {
		tracing.TraceErr(span, errors.New("Missing contact input id"))
		graphql.AddErrorf(ctx, "Missing contact input id")
		return nil, nil
	}

	contactEntity, err := r.Services.ContactService.GetById(ctx, id)
	if err != nil || contactEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Contact with id %s not found", id)
		return nil, err
	}
	return mapper.MapEntityToContact(contactEntity), nil
}

// Contacts is the resolver for the contacts field.
func (r *queryResolver) Contacts(ctx context.Context, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.ContactsPage, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Contacts", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	if pagination == nil {
		pagination = &model.Pagination{Page: 0, Limit: 0}
	}
	span.LogFields(log.Int("request.page", pagination.Page), log.Int("request.limit", pagination.Limit))
	paginatedResult, err := r.Services.ContactService.FindAll(ctx, pagination.Page, pagination.Limit, where, sort)
	return &model.ContactsPage{
		Content:       mapper.MapEntitiesToContacts(paginatedResult.Rows.(*neo4jentity.ContactEntities)),
		TotalPages:    paginatedResult.TotalPages,
		TotalElements: paginatedResult.TotalRows,
	}, err
}

// ContactByEmail is the resolver for the contactByEmail field.
func (r *queryResolver) ContactByEmail(ctx context.Context, email string) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.ContactByEmail", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.email", email))

	contactEntity, err := r.Services.ContactService.GetFirstContactByEmail(ctx, email)
	if err != nil || contactEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Contact with email %s not identified", email)
		return nil, err
	}
	return mapper.MapEntityToContact(contactEntity), nil
}

// ContactByPhone is the resolver for the contactByPhone field.
func (r *queryResolver) ContactByPhone(ctx context.Context, e164 string) (*model.Contact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.ContactByPhone", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.email", e164))

	contactEntity, err := r.Services.ContactService.GetFirstContactByPhoneNumber(ctx, e164)
	if err != nil || contactEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Contact with phone number %s not identified", e164)
		return nil, err
	}
	return mapper.MapEntityToContact(contactEntity), nil
}

// Contact returns generated.ContactResolver implementation.
func (r *Resolver) Contact() generated.ContactResolver { return &contactResolver{r} }

type contactResolver struct{ *Resolver }
