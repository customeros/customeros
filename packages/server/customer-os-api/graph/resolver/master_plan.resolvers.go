package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	"github.com/opentracing/opentracing-go/log"
)

// MasterPlanCreate is the resolver for the masterPlan_Create field.
func (r *mutationResolver) MasterPlanCreate(ctx context.Context, input model.MasterPlanInput) (*model.MasterPlan, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.MasterPlanCreate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "input", input)

	masterPlanId, err := r.Services.MasterPlanService.CreateMasterPlan(ctx, utils.IfNotNilString(input.Name))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create master plan")
		return &model.MasterPlan{ID: masterPlanId}, err
	}

	createdMasterPlanEntity, err := r.Services.MasterPlanService.GetMasterPlanById(ctx, masterPlanId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Master plan details not yet available. Master plan id: %s", masterPlanId)
		return &model.MasterPlan{ID: masterPlanId}, nil
	}
	span.LogFields(log.String("response.masterPlanId", masterPlanId))
	return mapper.MapEntityToMasterPlan(createdMasterPlanEntity), nil
}

// MasterPlanMilestoneCreate is the resolver for the masterPlanMilestone_Create field.
func (r *mutationResolver) MasterPlanMilestoneCreate(ctx context.Context, input model.MasterPlanMilestoneInput) (*model.MasterPlanMilestone, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.MasterPlanMilestoneCreate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "input", input)

	masterPlanMilestoneId, err := r.Services.MasterPlanService.CreateMasterPlanMilestone(ctx, input.MasterPlanID, utils.IfNotNilString(input.Name),
		input.Order, input.DurationHours, input.Optional, input.Items)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create master plan milestone")
		return &model.MasterPlanMilestone{ID: masterPlanMilestoneId}, err
	}

	createdMasterPlanMilestoneEntity, err := r.Services.MasterPlanService.GetMasterPlanMilestoneById(ctx, masterPlanMilestoneId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Master plan milestone details not yet available. Master plan milestone id: %s", masterPlanMilestoneId)
		return &model.MasterPlanMilestone{ID: masterPlanMilestoneId}, nil
	}
	span.LogFields(log.String("response.masterPlanMilestoneId", masterPlanMilestoneId))
	return mapper.MapEntityToMasterPlanMilestone(createdMasterPlanMilestoneEntity), nil
}

// MasterPlan is the resolver for the masterPlan field.
func (r *queryResolver) MasterPlan(ctx context.Context, id string) (*model.MasterPlan, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.MasterPlan", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.SetTag(tracing.SpanTagEntityId, id)

	masterPlanEntity, err := r.Services.MasterPlanService.GetMasterPlanById(ctx, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get Master plan with id %s", id)
		return nil, nil
	}
	if masterPlanEntity == nil {
		graphql.AddErrorf(ctx, "Master plan with id %s not found", id)
		return nil, nil
	}
	return mapper.MapEntityToMasterPlan(masterPlanEntity), nil
}

// MasterPlans is the resolver for the masterPlans field.
func (r *queryResolver) MasterPlans(ctx context.Context) ([]*model.MasterPlan, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.MasterPlans", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	masterPlanEntities, err := r.Services.MasterPlanService.GetAllMasterPlans(ctx)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get Master plans")
		return nil, nil
	}
	return mapper.MapEntitiesToMasterPlans(masterPlanEntities), nil
}
