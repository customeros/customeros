package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
)

// Place is the resolver for the place field.
func (r *locationResolver) Place(ctx context.Context, obj *model.Location) (*model.Place, error) {
	placeEntity, err := r.Services.PlaceService.GetForLocation(ctx, obj.ID)
	if err != nil {
		graphql.AddErrorf(ctx, "Failed to get place for location %s", obj.ID)
		return nil, err
	}
	if placeEntity == nil {
		return nil, nil
	}
	return mapper.MapEntityToPlace(placeEntity), err
}

// Location returns generated.LocationResolver implementation.
func (r *Resolver) Location() generated.LocationResolver { return &locationResolver{r} }

type locationResolver struct{ *Resolver }
