package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"encoding/json"
	"errors"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/constants"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
	commonmodel "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/model"
	commontracing "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	neo4jentity "github.com/openline-ai/openline-customer-os/packages/server/customer-os-neo4j-repository/entity"
	neo4jenum "github.com/openline-ai/openline-customer-os/packages/server/customer-os-neo4j-repository/enum"
	eventstorepb "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/event_store"
	"github.com/openline-ai/openline-customer-os/packages/server/events/event"
	opportunityevent "github.com/openline-ai/openline-customer-os/packages/server/events/event/opportunity"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/log"
)

// OpportunityCreate is the resolver for the opportunity_Create field.
func (r *mutationResolver) OpportunityCreate(ctx context.Context, input model.OpportunityCreateInput) (*model.Opportunity, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityCreate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	opportunityId, err := r.Services.OpportunityService.Create(ctx, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create opportunity")
		return nil, nil
	}
	opportunityEntity, err := r.Services.OpportunityService.GetById(ctx, opportunityId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed fetching opportunity details. Opportunity id: %s", opportunityId)
		return &model.Opportunity{Metadata: &model.Metadata{ID: opportunityId}}, nil
	}

	return mapper.MapEntityToOpportunity(opportunityEntity), nil
}

// OpportunityUpdate is the resolver for the opportunityUpdate field.
func (r *mutationResolver) OpportunityUpdate(ctx context.Context, input model.OpportunityUpdateInput) (*model.Opportunity, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.OpportunityService.Update(ctx, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update opportunity %s", input.OpportunityID)
		return &model.Opportunity{Metadata: &model.Metadata{ID: input.OpportunityID}}, nil
	}

	opportunityEntity, err := r.Services.OpportunityService.GetById(ctx, input.OpportunityID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed fetching opportunity details. Opportunity id: %s", input.OpportunityID)
		return &model.Opportunity{Metadata: &model.Metadata{ID: input.OpportunityID}}, nil
	}

	return mapper.MapEntityToOpportunity(opportunityEntity), nil
}

// OpportunityArchive is the resolver for the opportunity_Archive field.
func (r *mutationResolver) OpportunityArchive(ctx context.Context, id string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityArchive", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.id", id))

	// Check opportunity is not RENEWAL
	opportunity, err := r.Services.OpportunityService.GetById(ctx, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "opportunity not found")
		return &model.ActionResponse{Accepted: false}, nil
	}

	if opportunity.InternalType == neo4jenum.OpportunityInternalTypeRenewal {
		err = errors.New("Renewal opportunity cannot be archived")
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "renewal opportunity cannot be archived")
		return &model.ActionResponse{Accepted: false}, nil
	}

	evt, err := json.Marshal(opportunityevent.OpportunityArchiveEvent{
		BaseEvent: event.BaseEvent{
			Tenant:     common.GetTenantFromContext(ctx),
			EventName:  opportunityevent.OpportunityArchiveV1,
			CreatedAt:  utils.Now(),
			AppSource:  constants.AppSourceCustomerOsApi,
			Source:     neo4jentity.DataSourceOpenline.String(),
			EntityType: commonmodel.OPPORTUNITY,
			EntityId:   id,
		},
	})

	ctx = commontracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err = utils.CallEventsPlatformGRPCWithRetry[*eventstorepb.StoreEventGrpcResponse](func() (*eventstorepb.StoreEventGrpcResponse, error) {
		return r.Clients.EventStoreClient.StoreEvent(ctx, &eventstorepb.StoreEventGrpcRequest{
			EventDataBytes: evt,
		})
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to archive opportunity")
		r.log.Errorf("Error from events processing %s", err.Error())
		return &model.ActionResponse{Accepted: false}, nil
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// OpportunityCloseWon is the resolver for the opportunity_CloseWon field.
func (r *mutationResolver) OpportunityCloseWon(ctx context.Context, opportunityID string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityCloseWon", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.opportunityID", opportunityID))

	err := r.Services.OpportunityService.CloseWon(ctx, opportunityID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to close opportunity %s", opportunityID)
		return &model.ActionResponse{Accepted: false}, err
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// OpportunityCloseLost is the resolver for the opportunity_CloseLost field.
func (r *mutationResolver) OpportunityCloseLost(ctx context.Context, opportunityID string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityCloseLost", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.opportunityID", opportunityID))

	err := r.Services.OpportunityService.CloseLost(ctx, opportunityID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to close opportunity %s", opportunityID)
		return &model.ActionResponse{Accepted: false}, err
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// OpportunitySetOwner is the resolver for the opportunity_SetOwner field.
func (r *mutationResolver) OpportunitySetOwner(ctx context.Context, opportunityID string, userID string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunitySetOwner", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.opportunityID", opportunityID), log.String("request.userID", userID))

	err := r.Services.OpportunityService.ReplaceOwner(ctx, opportunityID, userID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to set owner %s for opportunity %s", userID, opportunityID)
		return &model.ActionResponse{Accepted: false}, nil
	}
	return &model.ActionResponse{Accepted: false}, nil
}

// OpportunityRemoveOwner is the resolver for the opportunity_RemoveOwner field.
func (r *mutationResolver) OpportunityRemoveOwner(ctx context.Context, opportunityID string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityRemoveOwner", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.opportunityID", opportunityID))

	err := r.Services.OpportunityService.RemoveOwner(ctx, opportunityID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove owner for opportunity %s", opportunityID)
		return &model.ActionResponse{Accepted: false}, nil
	}
	return &model.ActionResponse{Accepted: false}, nil
}

// OpportunityRenewalUpdate is the resolver for the opportunityRenewalUpdate field.
func (r *mutationResolver) OpportunityRenewalUpdate(ctx context.Context, input model.OpportunityRenewalUpdateInput, ownerUserID *string) (*model.Opportunity, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityRenewalUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.OpportunityService.UpdateRenewal(ctx, input.OpportunityID, mapper.MapOpportunityRenewalLikelihoodFromModel(input.RenewalLikelihood), input.Amount, input.Comments, input.OwnerUserID, input.RenewalAdjustedRate, utils.IfNotNilStringWithDefault(input.AppSource, constants.AppSourceCustomerOsApi))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update opportunity renewal %s", input.OpportunityID)
		return &model.Opportunity{ID: input.OpportunityID}, nil
	}
	opportunityEntity, err := r.Services.OpportunityService.GetById(ctx, input.OpportunityID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed fetching opportunity details. Opportunity id: %s", input.OpportunityID)
		return &model.Opportunity{ID: input.OpportunityID}, nil
	}

	return mapper.MapEntityToOpportunity(opportunityEntity), nil
}

// OpportunityRenewalUpdateAllForOrganization is the resolver for the opportunityRenewal_UpdateAllForOrganization field.
func (r *mutationResolver) OpportunityRenewalUpdateAllForOrganization(ctx context.Context, input model.OpportunityRenewalUpdateAllForOrganizationInput) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityRenewalUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	if input.RenewalLikelihood != nil {
		err := r.Services.OpportunityService.UpdateRenewalsForOrganization(ctx, input.OrganizationID, mapper.MapOpportunityRenewalLikelihoodFromModel(input.RenewalLikelihood), input.RenewalAdjustedRate)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to update renewal opportunities for organization %s", input.OrganizationID)
			return nil, nil
		}
	}
	organizationEntity, err := r.Services.OrganizationService.GetById(ctx, input.OrganizationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed fetching organization details. Organization id: %s", input.OrganizationID)
		return nil, nil
	}

	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// Organization is the resolver for the organization field.
func (r *opportunityResolver) Organization(ctx context.Context, obj *model.Opportunity) (*model.Organization, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	organizationEntityNillable, err := dataloader.For(ctx).GetOrganizationForOpportunityOptional(ctx, obj.Metadata.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("error fetching organization for opportunity %s: %s", obj.Metadata.ID, err.Error())
		graphql.AddErrorf(ctx, "error fetching organization for opportunity %s", obj.Metadata.ID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntityNillable), nil
}

// CreatedBy is the resolver for the createdBy field.
func (r *opportunityResolver) CreatedBy(ctx context.Context, obj *model.Opportunity) (*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntityNillable, err := dataloader.For(ctx).GetUserCreatorForOpportunity(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("error fetching user creator for opportunity %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "error fetching user creator for opportunity %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntityToUser(userEntityNillable), nil
}

// Owner is the resolver for the owner field.
func (r *opportunityResolver) Owner(ctx context.Context, obj *model.Opportunity) (*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntityNillable, err := dataloader.For(ctx).GetUserOwnerForOpportunity(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("error fetching user owner for opportunity %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "error fetching user owner for opportunity %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntityToUser(userEntityNillable), nil
}

// ExternalLinks is the resolver for the externalLinks field.
func (r *opportunityResolver) ExternalLinks(ctx context.Context, obj *model.Opportunity) ([]*model.ExternalSystem, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	entities, err := dataloader.For(ctx).GetExternalSystemsForOpportunity(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get external system for opportunity %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get external system for opportunity %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToExternalSystems(entities), nil
}

// Opportunity is the resolver for the opportunity field.
func (r *queryResolver) Opportunity(ctx context.Context, id string) (*model.Opportunity, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Opportunity", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.issueID", id))

	opportunityEntity, err := r.Services.OpportunityService.GetById(ctx, id)
	if err != nil || opportunityEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Opportunity with id %s not found", id)
		return nil, err
	}
	return mapper.MapEntityToOpportunity(opportunityEntity), nil
}

// OpportunitiesLinkedToOrganizations is the resolver for the opportunities_LinkedToOrganizations field.
func (r *queryResolver) OpportunitiesLinkedToOrganizations(ctx context.Context, pagination *model.Pagination) (*model.OpportunityPage, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.OpportunitiesLinkedToOrganizations", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.pagination", pagination)

	if pagination == nil {
		pagination = &model.Pagination{Page: 0, Limit: 0}
	}
	paginatedResult, err := r.Services.OpportunityService.GetPaginatedOrganizationOpportunities(ctx, pagination.Page, pagination.Limit)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error while fetching opportunities")
		return nil, err
	}
	return &model.OpportunityPage{
		Content:       mapper.MapEntitiesToOpportunities(paginatedResult.Rows.(*neo4jentity.OpportunityEntities)),
		TotalPages:    paginatedResult.TotalPages,
		TotalElements: paginatedResult.TotalRows,
	}, err
}

// Opportunity returns generated.OpportunityResolver implementation.
func (r *Resolver) Opportunity() generated.OpportunityResolver { return &opportunityResolver{r} }

type opportunityResolver struct{ *Resolver }
