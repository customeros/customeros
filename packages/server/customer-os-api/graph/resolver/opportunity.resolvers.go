package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/constants"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	"github.com/opentracing/opentracing-go/log"
)

// OpportunityUpdate is the resolver for the opportunityUpdate field.
func (r *mutationResolver) OpportunityUpdate(ctx context.Context, input model.OpportunityUpdateInput) (*model.Opportunity, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.opportunityId", input.OpportunityID))

	err := r.Services.OpportunityService.Update(ctx, mapper.MapOpportunityUpdateInputToEntity(input))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update opportunity %s", input.OpportunityID)
		return &model.Opportunity{ID: input.OpportunityID}, nil
	}
	opportunityEntity, err := r.Services.OpportunityService.GetById(ctx, input.OpportunityID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed fetching opportunity details. Opportunity id: %s", input.OpportunityID)
		return &model.Opportunity{ID: input.OpportunityID}, nil
	}

	return mapper.MapEntityToOpportunity(opportunityEntity), nil
}

// OpportunityRenewalUpdate is the resolver for the opportunityRenewalUpdate field.
func (r *mutationResolver) OpportunityRenewalUpdate(ctx context.Context, input model.OpportunityRenewalUpdateInput) (*model.Opportunity, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OpportunityRenewalUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.opportunityId", input.OpportunityID))

	err := r.Services.OpportunityService.UpdateRenewal(ctx, input.OpportunityID, mapper.MapOpportunityRenewalLikelihoodFromModel(input.RenewalLikelihood), input.Amount, input.Comments, utils.IfNotNilStringWithDefault(input.AppSource, constants.AppSourceCustomerOsApi))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update opportunity renewal %s", input.OpportunityID)
		return &model.Opportunity{ID: input.OpportunityID}, nil
	}
	opportunityEntity, err := r.Services.OpportunityService.GetById(ctx, input.OpportunityID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed fetching opportunity details. Opportunity id: %s", input.OpportunityID)
		return &model.Opportunity{ID: input.OpportunityID}, nil
	}

	return mapper.MapEntityToOpportunity(opportunityEntity), nil
}

// CreatedBy is the resolver for the createdBy field.
func (r *opportunityResolver) CreatedBy(ctx context.Context, obj *model.Opportunity) (*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntityNillable, err := dataloader.For(ctx).GetUserCreatorForOpportunity(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("error fetching user creator for opportunity %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "error fetching user creator for opportunity %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntityToUser(userEntityNillable), nil
}

// Owner is the resolver for the owner field.
func (r *opportunityResolver) Owner(ctx context.Context, obj *model.Opportunity) (*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntityNillable, err := dataloader.For(ctx).GetUserOwnerForOpportunity(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("error fetching user owner for opportunity %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "error fetching user owner for opportunity %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntityToUser(userEntityNillable), nil
}

// ExternalLinks is the resolver for the externalLinks field.
func (r *opportunityResolver) ExternalLinks(ctx context.Context, obj *model.Opportunity) ([]*model.ExternalSystem, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	entities, err := dataloader.For(ctx).GetExternalSystemsForOpportunity(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get external system for opportunity %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get external system for opportunity %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToExternalSystems(entities), nil
}

// Opportunity is the resolver for the opportunity field.
func (r *queryResolver) Opportunity(ctx context.Context, id string) (*model.Opportunity, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Opportunity", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.issueID", id))

	opportunityEntity, err := r.Services.OpportunityService.GetById(ctx, id)
	if err != nil || opportunityEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Opportunity with id %s not found", id)
		return nil, err
	}
	return mapper.MapEntityToOpportunity(opportunityEntity), nil
}

// Opportunity returns generated.OpportunityResolver implementation.
func (r *Resolver) Opportunity() generated.OpportunityResolver { return &opportunityResolver{r} }

type opportunityResolver struct{ *Resolver }
