package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
	postgresEntity "github.com/openline-ai/openline-customer-os/packages/server/customer-os-postgres-repository/entity"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/log"
)

// SlackChannels is the resolver for the slack_Channels field.
func (r *queryResolver) SlackChannels(ctx context.Context, pagination *model.Pagination) (*model.SlackChannelPage, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "SlackResolver.SlackChannels", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	if pagination != nil {
		tracing.LogObjectAsJson(span, "request.pagination", pagination)
	}

	if pagination == nil {
		pagination = &model.Pagination{Page: 0, Limit: 0}
	}
	span.LogFields(log.Int("request.pagination.page", pagination.Page), log.Int("request.pagination.limit", pagination.Limit))

	paginatedResult, err := r.Services.SlackService.GetPaginatedSlackChannels(ctx, common.GetTenantFromContext(ctx), pagination.Page, pagination.Limit)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get invoices")
		return nil, err
	}
	return &model.SlackChannelPage{
		Content:       mapper.MapEntitiesToSlackChannels(paginatedResult.Rows.([]*postgresEntity.SlackChannel)),
		TotalPages:    paginatedResult.TotalPages,
		TotalElements: paginatedResult.TotalRows,
	}, err
}

// Organization is the resolver for the organization field.
func (r *slackChannelResolver) Organization(ctx context.Context, obj *model.SlackChannel) (*model.Organization, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	organizationEntity, err := dataloader.For(ctx).GetOrganizationForSlackChannel(ctx, obj.ChannelID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("error fetching organization with slack channel %s: %s", obj.Metadata.ID, err.Error())
		graphql.AddErrorf(ctx, "Error fetching organization with slack channel %s", obj.Metadata.ID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// SlackChannel returns generated.SlackChannelResolver implementation.
func (r *Resolver) SlackChannel() generated.SlackChannelResolver { return &slackChannelResolver{r} }

type slackChannelResolver struct{ *Resolver }
