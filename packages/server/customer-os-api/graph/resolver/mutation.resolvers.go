package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	"github.com/sirupsen/logrus"
)

// PhoneNumberUpsertInEventStore is the resolver for the phoneNumberUpsertInEventStore field.
func (r *mutationResolver) PhoneNumberUpsertInEventStore(ctx context.Context, size int) (int, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	result, err := r.Services.PhoneNumberService.UpsertInEventStore(ctx, size)
	if err != nil {
		logrus.Errorf("Failed to call method: %v", err)
		graphql.AddErrorf(ctx, "Failed to upsert phone numbers to event store")
	}

	return result, nil
}

// ContactUpsertInEventStore is the resolver for the contactUpsertInEventStore field.
func (r *mutationResolver) ContactUpsertInEventStore(ctx context.Context, size int) (int, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	result, err := r.Services.ContactService.UpsertInEventStore(ctx, size)
	if err != nil {
		logrus.Errorf("Failed to call method: %v", err)
		graphql.AddErrorf(ctx, "Failed to upsert contacts to event store")
	}

	return result, nil
}

// ContactPhoneNumberRelationUpsertInEventStore is the resolver for the contactPhoneNumberRelationUpsertInEventStore field.
func (r *mutationResolver) ContactPhoneNumberRelationUpsertInEventStore(ctx context.Context, size int) (int, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	result, err := r.Services.ContactService.UpsertPhoneNumberRelationInEventStore(ctx, size)
	if err != nil {
		logrus.Errorf("Failed to call method: %v", err)
		graphql.AddErrorf(ctx, "Failed: {%s}", err)
	}

	return result, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
