package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/common"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/constants"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/entity"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	commongrpc "github.com/openline-ai/openline-customer-os/packages/server/events-processing-common/gen/proto/go/api/grpc/v1/common"
	orggrpc "github.com/openline-ai/openline-customer-os/packages/server/events-processing-common/gen/proto/go/api/grpc/v1/organization"
	"github.com/opentracing/opentracing-go/log"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// OrganizationCreate is the resolver for the organization_Create field.
func (r *mutationResolver) OrganizationCreate(ctx context.Context, input model.OrganizationInput) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationCreate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	// Check and prepare custom fields
	for _, field := range input.CustomFields {
		if utils.IsEmptyString(field.TemplateID) && utils.IsEmptyString(field.Name) {
			graphql.AddErrorf(ctx, "Custom field template id or name is required")
			return nil, nil
		}
		if utils.IsEmptyString(field.TemplateID) && field.Datatype == nil {
			graphql.AddErrorf(ctx, "Custom field template id or data type is required")
			return nil, nil
		}
		if !utils.IsEmptyString(field.TemplateID) {
			customFieldTemplate, err := r.Services.CustomFieldTemplateService.GetById(ctx, *field.TemplateID)
			if err != nil {
				tracing.TraceErr(span, err)
				graphql.AddErrorf(ctx, "Custom field template %s not found", *field.TemplateID)
				return nil, nil
			}
			if utils.IsEmptyString(field.Name) {
				field.Name = &customFieldTemplate.Name
			}
			if field.Datatype == nil {
				field.Datatype = mapper.MapTemplateTypeToFieldDataType(customFieldTemplate.Type)
			}
		}
	}

	var err error
	response, err := r.Clients.OrganizationClient.UpsertOrganization(ctx, &orggrpc.UpsertOrganizationGrpcRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		LoggedInUserId: common.GetUserIdFromContext(ctx),
		Name:           input.Name,
		ReferenceId:    utils.IfNotNilString(input.ReferenceID),
		Description:    utils.IfNotNilString(input.Description),
		Website:        utils.IfNotNilString(input.Website),
		Industry:       utils.IfNotNilString(input.Industry),
		SubIndustry:    utils.IfNotNilString(input.SubIndustry),
		IndustryGroup:  utils.IfNotNilString(input.IndustryGroup),
		IsPublic:       utils.IfNotNilBool(input.IsPublic),
		IsCustomer:     utils.IfNotNilBool(input.IsCustomer),
		Market:         mapper.MapMarketFromModel(input.Market),
		Employees:      utils.IfNotNilInt64(input.Employees),
		SourceFields: &commongrpc.SourceFields{
			Source:    string(entity.DataSourceOpenline),
			AppSource: utils.IfNotNilString(input.AppSource),
		},
		Note: utils.IfNotNilString(input.Note),
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create organization")
		r.log.Errorf("Error from events processing %s", err.Error())
		return nil, nil
	}

	if len(input.CustomFields) > 0 || len(input.Domains) > 0 {
		maxRetry := 10 // 5 seconds
		var findOrgErr error
		var organizationEntity *entity.OrganizationEntity
		for i := 0; i < maxRetry; i++ {
			organizationEntity, findOrgErr = r.Services.OrganizationService.GetById(ctx, response.Id)
			if organizationEntity != nil && findOrgErr == nil {
				break
			}
			time.Sleep(500 * time.Millisecond)
		}
	}

	if len(input.Domains) > 0 {
		for _, domain := range input.Domains {
			if domain != "" {
				_, err = r.Clients.OrganizationClient.LinkDomainToOrganization(ctx, &orggrpc.LinkDomainToOrganizationGrpcRequest{
					Tenant:         common.GetTenantFromContext(ctx),
					LoggedInUserId: common.GetUserIdFromContext(ctx),
					OrganizationId: response.Id,
					Domain:         domain,
				})
				if err != nil {
					tracing.TraceErr(span, err)
					r.log.Errorf("Failed to link domain %s to organization %s", domain, response.Id)
				}
			}
		}
	}
	if len(input.CustomFields) > 0 {
		for _, field := range input.CustomFields {
			customFieldEntity := mapper.MapCustomFieldInputToEntity(field)
			var customFieldValue orggrpc.CustomFieldValue
			customFieldValue.StringValue = customFieldEntity.Value.Str
			customFieldValue.BoolValue = customFieldEntity.Value.Bool
			if customFieldEntity.Value.Time != nil {
				timestamppb.New(*customFieldEntity.Value.Time)
			}
			customFieldValue.IntegerValue = customFieldEntity.Value.Int
			customFieldValue.DecimalValue = customFieldEntity.Value.Float

			var customFieldDataType = orggrpc.CustomFieldDataType_TEXT
			if field.Datatype != nil {
				switch *field.Datatype {
				case model.CustomFieldDataTypeText:
					customFieldDataType = orggrpc.CustomFieldDataType_TEXT
				case model.CustomFieldDataTypeBool:
					customFieldDataType = orggrpc.CustomFieldDataType_BOOL
				case model.CustomFieldDataTypeDatetime:
					customFieldDataType = orggrpc.CustomFieldDataType_DATETIME
				case model.CustomFieldDataTypeInteger:
					customFieldDataType = orggrpc.CustomFieldDataType_INTEGER
				case model.CustomFieldDataTypeDecimal:
					customFieldDataType = orggrpc.CustomFieldDataType_DECIMAL
				}
			}
			_, err = r.Clients.OrganizationClient.UpsertCustomFieldToOrganization(ctx, &orggrpc.CustomFieldForOrganizationGrpcRequest{
				Tenant:                common.GetTenantFromContext(ctx),
				OrganizationId:        response.Id,
				UserId:                common.GetUserIdFromContext(ctx),
				CustomFieldName:       customFieldEntity.Name,
				CustomFieldDataType:   customFieldDataType,
				CustomFieldTemplateId: customFieldEntity.TemplateId,
				CustomFieldValue:      &customFieldValue,
				SourceFields: &commongrpc.SourceFields{
					Source:        string(entity.DataSourceOpenline),
					SourceOfTruth: string(entity.DataSourceOpenline),
					AppSource:     utils.IfNotNilStringWithDefault(input.AppSource, constants.AppSourceCustomerOsApi),
				},
			})
			if err != nil {
				tracing.TraceErr(span, err)
				r.log.Errorf("Failed to upsert custom field %s to organization %s", *field.Name, response.Id)
			}
		}
	}

	return &model.Organization{
		ID: response.Id,
	}, nil
}

// OrganizationUpdate is the resolver for the organization_Update field.
func (r *mutationResolver) OrganizationUpdate(ctx context.Context, input model.OrganizationUpdateInput) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	_, err := r.Services.OrganizationService.GetById(ctx, input.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Organization not found")
		return &model.Organization{
			ID: input.ID,
		}, nil
	}

	response, err := r.Clients.OrganizationClient.UpsertOrganization(ctx, &orggrpc.UpsertOrganizationGrpcRequest{
		Tenant:            common.GetTenantFromContext(ctx),
		LoggedInUserId:    common.GetUserIdFromContext(ctx),
		Id:                input.ID,
		IgnoreEmptyFields: utils.IfNotNilBool(input.Patch),
		Name:              input.Name,
		ReferenceId:       utils.IfNotNilString(input.ReferenceID),
		Description:       utils.IfNotNilString(input.Description),
		Website:           utils.IfNotNilString(input.Website),
		Industry:          utils.IfNotNilString(input.Industry),
		SubIndustry:       utils.IfNotNilString(input.SubIndustry),
		IndustryGroup:     utils.IfNotNilString(input.IndustryGroup),
		IsPublic:          utils.IfNotNilBool(input.IsPublic),
		IsCustomer:        utils.IfNotNilBool(input.IsCustomer),
		Market:            mapper.MapMarketFromModel(input.Market),
		Employees:         utils.IfNotNilInt64(input.Employees),
		TargetAudience:    utils.IfNotNilString(input.TargetAudience),
		ValueProposition:  utils.IfNotNilString(input.ValueProposition),
		LastFundingAmount: utils.IfNotNilString(input.LastFundingAmount),
		LastFundingRound:  mapper.MapFundingRoundFromModel(input.LastFundingRound),
		Note:              utils.IfNotNilString(input.Note),
		SourceFields: &commongrpc.SourceFields{
			Source: string(entity.DataSourceOpenline),
		},
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update organization")
		r.log.Errorf("Error from events processing %s", err.Error())
		return nil, nil
	}
	time.Sleep(100 * time.Millisecond)

	organizationEntity, err := r.Services.OrganizationService.GetById(ctx, response.Id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch organization details")
		return &model.Organization{
			ID: response.Id,
		}, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationUpdateRenewalLikelihood is the resolver for the organization_UpdateRenewalLikelihood field.
func (r *mutationResolver) OrganizationUpdateRenewalLikelihood(ctx context.Context, input model.RenewalLikelihoodInput) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUpdateRenewalLikelihood", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("input", input))

	var likelihood = orggrpc.Likelihood_NONE_LIKELIHOOD
	if input.Probability != nil {
		switch *input.Probability {
		case model.RenewalLikelihoodProbabilityHigh:
			likelihood = orggrpc.Likelihood_HIGH
		case model.RenewalLikelihoodProbabilityMedium:
			likelihood = orggrpc.Likelihood_MEDIUM
		case model.RenewalLikelihoodProbabilityLow:
			likelihood = orggrpc.Likelihood_LOW
		case model.RenewalLikelihoodProbabilityZero:
			likelihood = orggrpc.Likelihood_ZERO
		}
	}
	response, err := r.Clients.OrganizationClient.UpdateOrganizationRenewalLikelihood(ctx, &orggrpc.OrganizationRenewalLikelihoodRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: input.ID,
		Comment:        input.Comment,
		UserId:         common.GetUserIdFromContext(ctx),
		Likelihood:     likelihood,
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update organization' renewal likelihood %s", input.ID)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationUpdateRenewalForecast is the resolver for the organization_UpdateRenewalForecast field.
func (r *mutationResolver) OrganizationUpdateRenewalForecast(ctx context.Context, input model.RenewalForecastInput) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUpdateRenewalForecast", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("input", input))

	response, err := r.Clients.OrganizationClient.UpdateOrganizationRenewalForecast(ctx, &orggrpc.OrganizationRenewalForecastRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: input.ID,
		Comment:        input.Comment,
		UserId:         common.GetUserIdFromContext(ctx),
		Amount:         input.Amount,
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update organization' renewal forecast %s", input.ID)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationUpdateBillingDetails is the resolver for the organization_UpdateBillingDetails field.
func (r *mutationResolver) OrganizationUpdateBillingDetails(ctx context.Context, input model.BillingDetailsInput) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUpdateBillingDetails", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("input", input))

	requestObj := orggrpc.OrganizationBillingDetailsRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: input.ID,
		UserId:         common.GetUserIdFromContext(ctx),
		Amount:         input.Amount,
		Frequency:      mapper.MapFrequencyFromModelToGrpc(input.Frequency),
		RenewalCycle:   mapper.MapFrequencyFromModelToGrpc(input.RenewalCycle),
		CycleStart:     utils.ConvertTimeToTimestampPtr(input.RenewalCycleStart),
	}

	response, err := r.Clients.OrganizationClient.UpdateOrganizationBillingDetails(ctx, &requestObj)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update organization' billing details %s", input.ID)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationUpdateRenewalLikelihoodAsync is the resolver for the organization_UpdateRenewalLikelihoodAsync field.
func (r *mutationResolver) OrganizationUpdateRenewalLikelihoodAsync(ctx context.Context, input model.RenewalLikelihoodInput) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUpdateRenewalLikelihoodAsync", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("input", input))

	var likelihood = orggrpc.Likelihood_NONE_LIKELIHOOD
	if input.Probability != nil {
		switch *input.Probability {
		case model.RenewalLikelihoodProbabilityHigh:
			likelihood = orggrpc.Likelihood_HIGH
		case model.RenewalLikelihoodProbabilityMedium:
			likelihood = orggrpc.Likelihood_MEDIUM
		case model.RenewalLikelihoodProbabilityLow:
			likelihood = orggrpc.Likelihood_LOW
		case model.RenewalLikelihoodProbabilityZero:
			likelihood = orggrpc.Likelihood_ZERO
		}
	}
	response, err := r.Clients.OrganizationClient.UpdateOrganizationRenewalLikelihood(ctx, &orggrpc.OrganizationRenewalLikelihoodRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: input.ID,
		Comment:        input.Comment,
		UserId:         common.GetUserIdFromContext(ctx),
		Likelihood:     likelihood,
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update organization' renewal likelihood %s", input.ID)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationUpdateRenewalForecastAsync is the resolver for the organization_UpdateRenewalForecastAsync field.
func (r *mutationResolver) OrganizationUpdateRenewalForecastAsync(ctx context.Context, input model.RenewalForecastInput) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUpdateRenewalForecastAsync", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("input", input))

	response, err := r.Clients.OrganizationClient.UpdateOrganizationRenewalForecast(ctx, &orggrpc.OrganizationRenewalForecastRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: input.ID,
		Comment:        input.Comment,
		UserId:         common.GetUserIdFromContext(ctx),
		Amount:         input.Amount,
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update organization' renewal forecast %s", input.ID)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationUpdateBillingDetailsAsync is the resolver for the organization_UpdateBillingDetailsAsync field.
func (r *mutationResolver) OrganizationUpdateBillingDetailsAsync(ctx context.Context, input model.BillingDetailsInput) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUpdateBillingDetailsAsync", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("input", input))

	requestObj := orggrpc.OrganizationBillingDetailsRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: input.ID,
		UserId:         common.GetUserIdFromContext(ctx),
		Amount:         input.Amount,
		Frequency:      mapper.MapFrequencyFromModelToGrpc(input.Frequency),
		RenewalCycle:   mapper.MapFrequencyFromModelToGrpc(input.RenewalCycle),
		CycleStart:     utils.ConvertTimeToTimestampPtr(input.RenewalCycleStart),
	}

	response, err := r.Clients.OrganizationClient.UpdateOrganizationBillingDetails(ctx, &requestObj)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update organization' billing details %s", input.ID)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationArchive is the resolver for the organization_Archive field.
func (r *mutationResolver) OrganizationArchive(ctx context.Context, id string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationArchive", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", id))

	err := r.Services.OrganizationService.Archive(ctx, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to archive organization %s", id)
		return &model.Result{
			Result: false,
		}, err
	}
	return &model.Result{
		Result: true,
	}, nil
}

// OrganizationArchiveAll is the resolver for the organization_ArchiveAll field.
func (r *mutationResolver) OrganizationArchiveAll(ctx context.Context, ids []string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationArchiveAll", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("request.organizationIDs", ids))

	for _, id := range ids {
		err := r.Services.OrganizationService.Archive(ctx, id)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to archive organization %s", id)
			return &model.Result{
				Result: false,
			}, err
		}
	}
	return &model.Result{
		Result: true,
	}, nil
}

// OrganizationHide is the resolver for the organization_Hide field.
func (r *mutationResolver) OrganizationHide(ctx context.Context, id string) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationHide", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("organizationId", id))

	response, err := r.Clients.OrganizationClient.HideOrganization(ctx, &orggrpc.OrganizationIdGrpcRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: id,
		UserId:         common.GetUserIdFromContext(ctx),
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to hide organization %s", id)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationHideAll is the resolver for the organization_HideAll field.
func (r *mutationResolver) OrganizationHideAll(ctx context.Context, ids []string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationHideAll", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("organizationIds", ids))

	for _, orgId := range ids {
		_, err := r.Clients.OrganizationClient.HideOrganization(ctx, &orggrpc.OrganizationIdGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			OrganizationId: orgId,
			UserId:         common.GetUserIdFromContext(ctx),
		})
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to hide organization %s", orgId)
		}
	}

	return &model.Result{
		Result: true,
	}, nil
}

// OrganizationShow is the resolver for the organization_Show field.
func (r *mutationResolver) OrganizationShow(ctx context.Context, id string) (string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationShow", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("organizationId", id))

	response, err := r.Clients.OrganizationClient.ShowOrganization(ctx, &orggrpc.OrganizationIdGrpcRequest{
		Tenant:         common.GetTenantFromContext(ctx),
		OrganizationId: id,
		UserId:         common.GetUserIdFromContext(ctx),
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to hide organization %s", id)
		return response.Id, nil
	}

	return response.Id, nil
}

// OrganizationShowAll is the resolver for the organization_ShowAll field.
func (r *mutationResolver) OrganizationShowAll(ctx context.Context, ids []string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationShowAll", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.Object("organizationIds", ids))

	for _, orgId := range ids {
		_, err := r.Clients.OrganizationClient.ShowOrganization(ctx, &orggrpc.OrganizationIdGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			OrganizationId: orgId,
			UserId:         common.GetUserIdFromContext(ctx),
		})
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to show organization %s", orgId)
		}
	}

	return &model.Result{
		Result: true,
	}, nil
}

// OrganizationMerge is the resolver for the organization_Merge field.
func (r *mutationResolver) OrganizationMerge(ctx context.Context, primaryOrganizationID string, mergedOrganizationIds []string) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationMerge", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.primaryOrganizationID", primaryOrganizationID), log.Object("request.mergedOrganizationIds", mergedOrganizationIds))

	for _, mergedOrganizationID := range mergedOrganizationIds {
		err := r.Services.OrganizationService.Merge(ctx, primaryOrganizationID, mergedOrganizationID)
		if err != nil {
			tracing.TraceErr(span, err)
			graphql.AddErrorf(ctx, "Failed to merge organization %s into organization %s", mergedOrganizationID, primaryOrganizationID)
			return nil, err
		}
	}

	organizationEntityPtr, err := r.Services.OrganizationService.GetById(ctx, primaryOrganizationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get organization by id %s", primaryOrganizationID)
		return nil, err
	}
	return mapper.MapEntityToOrganization(organizationEntityPtr), nil
}

// OrganizationAddSubsidiary is the resolver for the organization_AddSubsidiary field.
func (r *mutationResolver) OrganizationAddSubsidiary(ctx context.Context, input model.LinkOrganizationsInput) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationAddSubsidiary", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", input.OrganizationID), log.String("request.subOrganizationID", input.SubOrganizationID), log.String("request.type", utils.IfNotNilString(input.Type)))

	err := r.Services.OrganizationService.AddSubsidiary(ctx, input.OrganizationID, input.SubOrganizationID, utils.IfNotNilString(input.Type))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to add subsidiary %s to organization %s", input.SubOrganizationID, input.OrganizationID)
		return nil, err
	}
	organizationEntity, err := r.Services.OrganizationService.GetById(ctx, input.OrganizationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch organization %s", input.OrganizationID)
		return nil, err
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationRemoveSubsidiary is the resolver for the organization_RemoveSubsidiary field.
func (r *mutationResolver) OrganizationRemoveSubsidiary(ctx context.Context, organizationID string, subsidiaryID string) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationRemoveSubsidiary", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.subsidiaryID", subsidiaryID))

	err := r.Services.OrganizationService.RemoveSubsidiary(ctx, organizationID, subsidiaryID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove subsidiary %s from organization %s", subsidiaryID, organizationID)
		return nil, err
	}
	organizationEntity, err := r.Services.OrganizationService.GetById(ctx, organizationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch organization %s", organizationID)
		return nil, err
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationAddNewLocation is the resolver for the organization_AddNewLocation field.
func (r *mutationResolver) OrganizationAddNewLocation(ctx context.Context, organizationID string) (*model.Location, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationAddNewLocation", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID))

	locationEntity, err := r.Services.LocationService.CreateLocationForEntity(ctx, entity.ORGANIZATION, organizationID, entity.SourceFields{
		Source:        entity.DataSourceOpenline,
		SourceOfTruth: entity.DataSourceOpenline,
		AppSource:     constants.AppSourceCustomerOsApi,
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error creating location for organization %s", organizationID)
		return nil, err
	}
	return mapper.MapEntityToLocation(locationEntity), nil
}

// OrganizationAddSocial is the resolver for the organization_AddSocial field.
func (r *mutationResolver) OrganizationAddSocial(ctx context.Context, organizationID string, input model.SocialInput) (*model.Social, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationAddSocial", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID))

	socialEntity, err := r.Services.SocialService.CreateSocialForEntity(ctx, entity.ORGANIZATION, organizationID, *mapper.MapSocialInputToEntity(&input))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error creating social for organization %s", organizationID)
		return nil, err
	}
	return mapper.MapEntityToSocial(socialEntity), nil
}

// OrganizationSetOwner is the resolver for the organization_SetOwner field.
func (r *mutationResolver) OrganizationSetOwner(ctx context.Context, organizationID string, userID string) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationSetOwner", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.userID", userID))

	organizationEntity, err := r.Services.OrganizationService.ReplaceOwner(ctx, organizationID, userID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to set owner %s for organization %s", userID, organizationID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationUnsetOwner is the resolver for the organization_UnsetOwner field.
func (r *mutationResolver) OrganizationUnsetOwner(ctx context.Context, organizationID string) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationUnsetOwner", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID))

	organizationEntity, err := r.Services.OrganizationService.RemoveOwner(ctx, organizationID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove owner for organization %s", organizationID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationAddRelationship is the resolver for the organization_AddRelationship field.
func (r *mutationResolver) OrganizationAddRelationship(ctx context.Context, organizationID string, relationship model.OrganizationRelationship) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationAddRelationship", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.relationship", relationship.String()))

	organizationEntity, err := r.Services.OrganizationService.AddRelationship(ctx, organizationID, mapper.MapOrgRelationshipFromModel(relationship))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to add relationship %s for organization %s", relationship.String(), organizationID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationRemoveRelationship is the resolver for the organization_RemoveRelationship field.
func (r *mutationResolver) OrganizationRemoveRelationship(ctx context.Context, organizationID string, relationship model.OrganizationRelationship) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationRemoveRelationship", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.relationship", relationship.String()))

	organizationEntity, err := r.Services.OrganizationService.RemoveRelationship(ctx, organizationID, mapper.MapOrgRelationshipFromModel(relationship))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove relationship %s from organization %s", relationship.String(), organizationID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationSetRelationshipStage is the resolver for the organization_SetRelationshipStage field.
func (r *mutationResolver) OrganizationSetRelationshipStage(ctx context.Context, organizationID string, relationship model.OrganizationRelationship, stage string) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationSetRelationshipStage", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.relationship", relationship.String()), log.String("request.stage", stage))

	organizationEntity, err := r.Services.OrganizationService.SetRelationshipStage(ctx, organizationID, mapper.MapOrgRelationshipFromModel(relationship), stage)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to set relationship' %s stage %s for organization %s", relationship.String(), stage, organizationID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// OrganizationRemoveRelationshipStage is the resolver for the organization_RemoveRelationshipStage field.
func (r *mutationResolver) OrganizationRemoveRelationshipStage(ctx context.Context, organizationID string, relationship model.OrganizationRelationship) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.OrganizationRemoveRelationshipStage", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.relationship", relationship.String()))

	organizationEntity, err := r.Services.OrganizationService.RemoveRelationshipStage(ctx, organizationID, mapper.MapOrgRelationshipFromModel(relationship))
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to remove relationship' %s stage from organization %s", relationship.String(), organizationID)
		return nil, nil
	}
	return mapper.MapEntityToOrganization(organizationEntity), nil
}

// Domains is the resolver for the domains field.
func (r *organizationResolver) Domains(ctx context.Context, obj *model.Organization) ([]string, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	domainEntities, err := dataloader.For(ctx).GetDomainsForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get domains for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get domains for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToDomainNames(domainEntities), nil
}

// Locations is the resolver for the locations field.
func (r *organizationResolver) Locations(ctx context.Context, obj *model.Organization) ([]*model.Location, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	locationEntities, err := dataloader.For(ctx).GetLocationsForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get locations for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get locations for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToLocations(locationEntities), err
}

// Socials is the resolver for the socials field.
func (r *organizationResolver) Socials(ctx context.Context, obj *model.Organization) ([]*model.Social, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	socialEntities, err := dataloader.For(ctx).GetSocialsForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get socials for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get socials for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToSocials(socialEntities), err
}

// Contacts is the resolver for the contacts field.
func (r *organizationResolver) Contacts(ctx context.Context, obj *model.Organization, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.ContactsPage, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.Contacts", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID))

	if pagination == nil {
		pagination = &model.Pagination{Page: 0, Limit: 0}
	}
	paginatedResult, err := r.Services.ContactService.GetContactsForOrganization(ctx, obj.ID, pagination.Page, pagination.Limit, where, sort)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not fetch contacts for organization %s", obj.ID)
		return nil, err
	}
	return &model.ContactsPage{
		Content:       mapper.MapEntitiesToContacts(paginatedResult.Rows.(*entity.ContactEntities)),
		TotalPages:    paginatedResult.TotalPages,
		TotalElements: paginatedResult.TotalRows,
	}, err
}

// JobRoles is the resolver for the jobRoles field.
func (r *organizationResolver) JobRoles(ctx context.Context, obj *model.Organization) ([]*model.JobRole, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	jobRoleEntities, err := dataloader.For(ctx).GetJobRolesForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get job roles for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get job roles for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToJobRoles(jobRoleEntities), err
}

// Notes is the resolver for the notes field.
func (r *organizationResolver) Notes(ctx context.Context, obj *model.Organization, pagination *model.Pagination) (*model.NotePage, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.Notes", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID))

	if pagination == nil {
		pagination = &model.Pagination{Page: 0, Limit: 0}
	}
	paginatedResult, err := r.Services.NoteService.GetNotesForOrganization(ctx, obj.ID, pagination.Page, pagination.Limit)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get organization %s notes", obj.ID)
		return nil, err
	}
	return &model.NotePage{
		Content:       mapper.MapEntitiesToNotes(paginatedResult.Rows.(*entity.NoteEntities)),
		TotalPages:    paginatedResult.TotalPages,
		TotalElements: paginatedResult.TotalRows,
	}, err
}

// Tags is the resolver for the tags field.
func (r *organizationResolver) Tags(ctx context.Context, obj *model.Organization) ([]*model.Tag, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	tagEntities, err := dataloader.For(ctx).GetTagsForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get tags for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get tags for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToTags(tagEntities), nil
}

// Emails is the resolver for the emails field.
func (r *organizationResolver) Emails(ctx context.Context, obj *model.Organization) ([]*model.Email, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	emailEntities, err := dataloader.For(ctx).GetEmailsForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get emails for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get emails for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToEmails(emailEntities), nil
}

// PhoneNumbers is the resolver for the phoneNumbers field.
func (r *organizationResolver) PhoneNumbers(ctx context.Context, obj *model.Organization) ([]*model.PhoneNumber, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	phoneNumberEntities, err := dataloader.For(ctx).GetPhoneNumbersForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get phone numbers for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get phone numbers for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToPhoneNumbers(phoneNumberEntities), nil
}

// Subsidiaries is the resolver for the subsidiaries field.
func (r *organizationResolver) Subsidiaries(ctx context.Context, obj *model.Organization) ([]*model.LinkedOrganization, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	organizationEntities, err := dataloader.For(ctx).GetSubsidiariesForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to fetch subsidiary organizations for orgnization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to fetch subsidiary organizations for orgnization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToLinkedOrganizations(organizationEntities), nil
}

// SubsidiaryOf is the resolver for the subsidiaryOf field.
func (r *organizationResolver) SubsidiaryOf(ctx context.Context, obj *model.Organization) ([]*model.LinkedOrganization, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	organizationEntities, err := dataloader.For(ctx).GetSubsidiariesOfForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to fetch parent organizations for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to fetch parent organizations for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToLinkedOrganizations(organizationEntities), nil
}

// SuggestedMergeTo is the resolver for the suggestedMergeTo field.
func (r *organizationResolver) SuggestedMergeTo(ctx context.Context, obj *model.Organization) ([]*model.SuggestedMergeOrganization, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	organizationEntities, err := dataloader.For(ctx).GetSuggestedMergeToForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to fetch suggested merge to organizations for input org id %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to fetch suggested merge to organizations for input org id %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToSuggestedMergeOrganizations(organizationEntities), nil
}

// CustomFields is the resolver for the customFields field.
func (r *organizationResolver) CustomFields(ctx context.Context, obj *model.Organization) ([]*model.CustomField, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.CustomFields", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID))

	var customFields []*model.CustomField
	entityType := &model.CustomFieldEntityType{
		ID:         obj.ID,
		EntityType: model.EntityTypeOrganization,
	}
	customFieldEntities, err := r.Services.CustomFieldService.GetCustomFields(ctx, entityType)
	for _, v := range mapper.MapEntitiesToCustomFields(customFieldEntities) {
		customFields = append(customFields, v)
	}
	return customFields, err
}

// FieldSets is the resolver for the fieldSets field.
func (r *organizationResolver) FieldSets(ctx context.Context, obj *model.Organization) ([]*model.FieldSet, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.FieldSets", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID))

	entityType := &model.CustomFieldEntityType{ID: obj.ID, EntityType: model.EntityTypeOrganization}
	fieldSetEntities, err := r.Services.FieldSetService.FindAll(ctx, entityType)
	return mapper.MapEntitiesToFieldSets(fieldSetEntities), err
}

// EntityTemplate is the resolver for the entityTemplate field.
func (r *organizationResolver) EntityTemplate(ctx context.Context, obj *model.Organization) (*model.EntityTemplate, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.EntityTemplate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID))

	entityType := &model.CustomFieldEntityType{ID: obj.ID, EntityType: model.EntityTypeOrganization}
	templateEntity, err := r.Services.EntityTemplateService.FindLinked(ctx, entityType)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get contact template for contact %s", obj.ID)
		return nil, err
	}
	if templateEntity == nil {
		return nil, nil
	}
	return mapper.MapEntityToEntityTemplate(templateEntity), err
}

// TimelineEvents is the resolver for the timelineEvents field.
func (r *organizationResolver) TimelineEvents(ctx context.Context, obj *model.Organization, from *time.Time, size int, timelineEventTypes []model.TimelineEventType) ([]model.TimelineEvent, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.TimelineEvents", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID), log.Int("request.size", size), log.Object("request.timelineEventTypes", timelineEventTypes))
	if from != nil {
		span.LogFields(log.Object("request.from", *from))
	}

	timelineEvents, err := r.Services.TimelineEventService.GetTimelineEventsForOrganization(ctx, obj.ID, from, size, timelineEventTypes)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "failed to get timeline events for organization %s", obj.ID)
		return nil, err
	}
	return mapper.MapEntitiesToTimelineEvents(timelineEvents), nil
}

// TimelineEventsTotalCount is the resolver for the timelineEventsTotalCount field.
func (r *organizationResolver) TimelineEventsTotalCount(ctx context.Context, obj *model.Organization, timelineEventTypes []model.TimelineEventType) (int64, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.TimelineEventsTotalCount", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID), log.Object("request.timelineEventTypes", timelineEventTypes))

	count, err := r.Services.TimelineEventService.GetTimelineEventsTotalCountForOrganization(ctx, obj.ID, timelineEventTypes)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "failed to get timeline events total count for organization %s", obj.ID)
		return int64(0), err
	}
	return count, nil
}

// Owner is the resolver for the owner field.
func (r *organizationResolver) Owner(ctx context.Context, obj *model.Organization) (*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntityNillable, err := dataloader.For(ctx).GetUserOwnerForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Error fetching user owner for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Error fetching user owner for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntityToUser(userEntityNillable), nil
}

// Relationships is the resolver for the relationships field.
func (r *organizationResolver) Relationships(ctx context.Context, obj *model.Organization) ([]model.OrganizationRelationship, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	orgRelationships, err := dataloader.For(ctx).GetRelationshipsForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Error fetching relationships for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Error fetching relationships for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapOrgRelationshipsToModel(orgRelationships), nil
}

// RelationshipStages is the resolver for the relationshipStages field.
func (r *organizationResolver) RelationshipStages(ctx context.Context, obj *model.Organization) ([]*model.OrganizationRelationshipStage, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	serviceResult, err := dataloader.For(ctx).GetRelationshipStagesForOrganization(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Error fetching relationship stages for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Error fetching relationship stages for organization %s", obj.ID)
		return nil, nil
	}

	var output []*model.OrganizationRelationshipStage
	for _, v := range *serviceResult {
		item := model.OrganizationRelationshipStage{}
		item.Relationship = mapper.MapOrgRelationshipToModel(v.Relationship)
		if v.Stage != nil {
			item.Stage = utils.StringPtr(v.Stage.Name)
		}
		output = append(output, &item)
	}
	return output, nil
}

// ExternalLinks is the resolver for the externalLinks field.
func (r *organizationResolver) ExternalLinks(ctx context.Context, obj *model.Organization) ([]*model.ExternalSystem, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	entities, err := dataloader.For(ctx).GetExternalSystemsForEntity(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get external system for organization %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get external system for organization %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToExternalSystems(entities), nil
}

// LastTouchPointTimelineEvent is the resolver for the lastTouchPointTimelineEvent field.
func (r *organizationResolver) LastTouchPointTimelineEvent(ctx context.Context, obj *model.Organization) (model.TimelineEvent, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	if obj.LastTouchPointTimelineEventID == nil {
		return nil, nil
	}

	timelineEventNillable, err := dataloader.For(ctx).GetTimelineEventForTimelineEventId(ctx, *obj.LastTouchPointTimelineEventID)
	if err != nil {
		r.log.Errorf("Error fetching last touchpoint timeline event for organization %s: %s", *obj.LastTouchPointTimelineEventID, err.Error())
		graphql.AddErrorf(ctx, "Error fetching last touchpoint timeline event for organization %s", *obj.LastTouchPointTimelineEventID)
		return nil, err
	}
	return mapper.MapEntityToTimelineEvent(timelineEventNillable), nil
}

// IssueSummaryByStatus is the resolver for the issueSummaryByStatus field.
func (r *organizationResolver) IssueSummaryByStatus(ctx context.Context, obj *model.Organization) ([]*model.IssueSummaryByStatus, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "OrganizationResolver.IssueSummaryByStatus", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", obj.ID))

	issueCountByStatus, err := r.Services.IssueService.GetIssueSummaryByStatusForOrganization(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get issue summary by status for organization %s", obj.ID)
		return nil, err
	}
	issueSummaryByStatus := make([]*model.IssueSummaryByStatus, 0)
	for key, value := range issueCountByStatus {
		issueSummaryByStatus = append(issueSummaryByStatus, &model.IssueSummaryByStatus{
			Status: key,
			Count:  value,
		})
	}
	return issueSummaryByStatus, nil
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, pagination *model.Pagination, where *model.Filter, sort []*model.SortBy) (*model.OrganizationPage, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Organizations", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	if pagination == nil {
		pagination = &model.Pagination{Page: 0, Limit: 0}
	}
	span.LogFields(log.Int("request.pagination.page", pagination.Page), log.Int("request.pagination.limit", pagination.Limit))

	paginatedResult, err := r.Services.OrganizationService.FindAll(ctx, pagination.Page, pagination.Limit, where, sort)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not fetch organizations")
		return nil, err
	}
	return &model.OrganizationPage{
		Content:       mapper.MapEntitiesToOrganizations(paginatedResult.Rows.(*entity.OrganizationEntities)),
		TotalPages:    paginatedResult.TotalPages,
		TotalElements: paginatedResult.TotalRows,
	}, err
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id string) (*model.Organization, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Organization", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", id))

	if id == "" {
		graphql.AddErrorf(ctx, "Missing organization input id")
		return nil, nil
	}

	organizationEntityPtr, err := r.Services.OrganizationService.GetById(ctx, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get organization by id %s", id)
		return nil, err
	}
	return mapper.MapEntityToOrganization(organizationEntityPtr), nil
}

// OrganizationDistinctOwners is the resolver for the organization_DistinctOwners field.
func (r *queryResolver) OrganizationDistinctOwners(ctx context.Context) ([]*model.User, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.OrganizationDistinctOwners", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	userEntities, err := r.Services.UserService.GetDistinctOrganizationOwners(ctx)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Error fetching organization owners")
		return nil, nil
	}
	return mapper.MapEntitiesToUsers(userEntities), nil
}

// UpdatedBy is the resolver for the updatedBy field.
func (r *renewalForecastResolver) UpdatedBy(ctx context.Context, obj *model.RenewalForecast) (*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	if obj.UpdatedByID == nil || *obj.UpdatedByID == "" {
		return nil, nil
	}
	userEntityNillable, err := dataloader.For(ctx).GetUser(ctx, *obj.UpdatedByID)
	if err != nil {
		r.log.Errorf("Error fetching user %s: %s", obj.UpdatedBy, err.Error())
		return nil, nil
	}
	return mapper.MapEntityToUser(userEntityNillable), nil
}

// UpdatedBy is the resolver for the updatedBy field.
func (r *renewalLikelihoodResolver) UpdatedBy(ctx context.Context, obj *model.RenewalLikelihood) (*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	if obj.UpdatedByID == nil || *obj.UpdatedByID == "" {
		return nil, nil
	}
	userEntityNillable, err := dataloader.For(ctx).GetUser(ctx, *obj.UpdatedByID)
	if err != nil {
		r.log.Errorf("Error fetching user %s: %s", obj.UpdatedBy, err.Error())
		return nil, nil
	}
	return mapper.MapEntityToUser(userEntityNillable), nil
}

// Organization returns generated.OrganizationResolver implementation.
func (r *Resolver) Organization() generated.OrganizationResolver { return &organizationResolver{r} }

// RenewalForecast returns generated.RenewalForecastResolver implementation.
func (r *Resolver) RenewalForecast() generated.RenewalForecastResolver {
	return &renewalForecastResolver{r}
}

// RenewalLikelihood returns generated.RenewalLikelihoodResolver implementation.
func (r *Resolver) RenewalLikelihood() generated.RenewalLikelihoodResolver {
	return &renewalLikelihoodResolver{r}
}

type organizationResolver struct{ *Resolver }
type renewalForecastResolver struct{ *Resolver }
type renewalLikelihoodResolver struct{ *Resolver }
