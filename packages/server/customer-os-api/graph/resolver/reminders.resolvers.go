package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
)

// ReminderCreate is the resolver for the reminder_Create field.
func (r *mutationResolver) ReminderCreate(ctx context.Context, input model.ReminderInput) (*string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.CreateReminder", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	id, err := r.Services.ReminderService.CreateReminder(ctx, common.GetTenantFromContext(ctx), input.UserID, input.OrganizationID, input.Content, input.DueDate)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create reminder")
		return nil, nil
	}

	return &id, nil
}

// ReminderUpdate is the resolver for the reminder_Update field.
func (r *mutationResolver) ReminderUpdate(ctx context.Context, input model.ReminderUpdateInput) (*string, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.UpdateReminder", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.ReminderService.UpdateReminder(ctx, common.GetTenantFromContext(ctx), input.ID, input.Content, input.DueDate, input.Dismissed)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update reminder")
		return nil, nil
	}

	return &input.ID, nil
}

// Reminder is the resolver for the reminder field.
func (r *queryResolver) Reminder(ctx context.Context, id string) (*model.Reminder, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Reminder", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.SetTag(tracing.SpanTagEntityId, id)

	reminderEntity, err := r.Services.ReminderService.GetReminderById(ctx, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch reminder with id %s", id)
		return nil, nil
	}
	if reminderEntity == nil {
		graphql.AddErrorf(ctx, "GetReminderById with id %s not found", id)
		return nil, nil
	}

	return mapper.MapEntityToReminder(reminderEntity), nil
}

// RemindersForOrganization is the resolver for the remindersForOrganization field.
func (r *queryResolver) RemindersForOrganization(ctx context.Context, organizationID string, dismissed *bool) ([]*model.Reminder, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.RemindersForOrganization", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.SetTag(tracing.SpanTagEntityId, organizationID)

	reminderEntities, err := r.Services.ReminderService.RemindersForOrganization(ctx, organizationID, dismissed)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch reminders for organization with id %s", organizationID)
		return nil, nil
	}

	reminders := make([]*model.Reminder, 0, len(reminderEntities))
	for _, reminderEntity := range reminderEntities {
		reminders = append(reminders, mapper.MapEntityToReminder(reminderEntity))
	}

	return reminders, nil
}

// Owner is the resolver for the owner field.
func (r *reminderResolver) Owner(ctx context.Context, obj *model.Reminder) (*model.User, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "ReminderResolver.Owner", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	ownerEntity, err := r.Services.UserService.GetReminderOwner(ctx, obj.Metadata.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch user with id %s", obj.Metadata.ID)
		return nil, nil
	}
	if ownerEntity == nil {
		graphql.AddErrorf(ctx, "User with id %s not found", obj.Metadata.ID)
		return nil, nil
	}

	return mapper.MapEntityToUser(ownerEntity), nil
}

// Reminder returns generated.ReminderResolver implementation.
func (r *Resolver) Reminder() generated.ReminderResolver { return &reminderResolver{r} }

type reminderResolver struct{ *Resolver }
