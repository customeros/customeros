package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
)

// Company is the resolver for the company field.
func (r *contactRoleResolver) Company(ctx context.Context, obj *model.ContactRole) (*model.Company, error) {
	companyEntity, err := r.Services.CompanyService.GetCompanyForRole(ctx, obj.ID)
	if err != nil {
		graphql.AddErrorf(ctx, "Failed to get company for role %s", obj.ID)
		return nil, err
	}
	if companyEntity == nil {
		return nil, nil
	}
	return mapper.MapEntityToCompany(companyEntity), nil
}

// ContactRoleDelete is the resolver for the contactRole_Delete field.
func (r *mutationResolver) ContactRoleDelete(ctx context.Context, contactID string, roleID string) (*model.Result, error) {
	result, err := r.Services.ContactRoleService.DeleteContactRole(ctx, contactID, roleID)
	if err != nil {
		graphql.AddErrorf(ctx, "Failed remove contact role %s from contact %s", roleID, contactID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// ContactRoleCreate is the resolver for the contactRole_Create field.
func (r *mutationResolver) ContactRoleCreate(ctx context.Context, contactID string, input model.ContactRoleInput) (*model.ContactRole, error) {
	result, err := r.Services.ContactRoleService.CreateContactRole(ctx, contactID, input.CompanyID, mapper.MapContactRoleInputToEntity(&input))
	if err != nil {
		graphql.AddErrorf(ctx, "Failed add role to contact %s", contactID)
		return nil, err
	}
	return mapper.MapEntityToContactRole(result), nil
}

// ContactRoleUpdate is the resolver for the contactRole_Update field.
func (r *mutationResolver) ContactRoleUpdate(ctx context.Context, contactID string, roleID string, input model.ContactRoleInput) (*model.ContactRole, error) {
	result, err := r.Services.ContactRoleService.UpdateContactRole(ctx, contactID, roleID, input.CompanyID, mapper.MapContactRoleInputToEntity(&input))
	if err != nil {
		graphql.AddErrorf(ctx, "Failed update role %s", roleID)
		return nil, err
	}
	return mapper.MapEntityToContactRole(result), nil
}

// ContactRole returns generated.ContactRoleResolver implementation.
func (r *Resolver) ContactRole() generated.ContactRoleResolver { return &contactRoleResolver{r} }

type contactRoleResolver struct{ *Resolver }
