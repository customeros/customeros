package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
	postgresEntity "github.com/openline-ai/openline-customer-os/packages/server/customer-os-postgres-repository/entity"
	"github.com/opentracing/opentracing-go/log"
	pkgerrors "github.com/pkg/errors"
)

// TableViewDefCreate is the resolver for the tableViewDef_Create field.
func (r *mutationResolver) TableViewDefCreate(ctx context.Context, input model.TableViewDefCreateInput) (*model.TableViewDef, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TableViewDefCreate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	tenant := common.GetTenantFromContext(ctx)
	userId := common.GetUserIdFromContext(ctx)

	var columns []postgresEntity.ColumnView
	for _, column := range input.Columns {
		columns = append(columns, postgresEntity.ColumnView{
			ColumnId:   column.ColumnID,
			ColumnType: column.ColumnType.String(),
			Width:      column.Width,
			Visible:    column.Visible,
			Name:       column.Name,
			Filter:     column.Filter,
		})
	}
	columnsStruct := postgresEntity.Columns{
		Columns: columns,
	}
	columnsJsonData, err := json.Marshal(columnsStruct)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create table view definition")
		return nil, nil
	}

	viewDefinition := postgresEntity.TableViewDefinition{
		TableType:   input.TableType.String(),
		TableId:     input.TableID.String(),
		Name:        input.Name,
		ColumnsJson: string(columnsJsonData),
		Order:       input.Order,
		Icon:        input.Icon,
		Filters:     input.Filters,
		Sorting:     input.Sorting,
		IsPreset:    input.IsPreset,
		IsShared:    input.IsShared,
		Tenant:      tenant,
		UserId:      userId,
	}

	result := r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, viewDefinition)
	if result.Error != nil {
		tracing.TraceErr(span, result.Error)
		graphql.AddErrorf(ctx, "Failed to create table view definition")
		return nil, nil
	}
	viewDefinition, ok := result.Result.(postgresEntity.TableViewDefinition)
	if !ok {
		graphql.AddErrorf(ctx, "Failed to create table view definition")
		return nil, nil
	}
	return mapper.MapTableViewDefinitionToModel(viewDefinition, nil), nil
}

// TableViewDefUpdate is the resolver for the tableViewDef_Update field.
func (r *mutationResolver) TableViewDefUpdate(ctx context.Context, input model.TableViewDefUpdateInput) (*model.TableViewDef, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TableViewDefUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	tenant := common.GetTenantFromContext(ctx)
	userId := common.GetUserIdFromContext(ctx)

	id, err := strconv.ParseUint(input.ID, 10, 64)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update table view definition")
		return nil, nil
	}

	var columns []postgresEntity.ColumnView
	for _, column := range input.Columns {
		columns = append(columns, postgresEntity.ColumnView{
			ColumnId:   column.ColumnID,
			ColumnType: column.ColumnType.String(),
			Width:      column.Width,
			Visible:    column.Visible,
			Name:       column.Name,
			Filter:     column.Filter,
		})
	}
	columnsStruct := postgresEntity.Columns{
		Columns: columns,
	}
	columnsJsonData, err := json.Marshal(columnsStruct)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create table view definition")
		return nil, nil
	}

	viewDefinition := postgresEntity.TableViewDefinition{
		ID:          id,
		Name:        input.Name,
		ColumnsJson: string(columnsJsonData),
		Order:       input.Order,
		Icon:        input.Icon,
		Filters:     input.Filters,
		Sorting:     input.Sorting,
		IsPreset:    true,
		Tenant:      tenant,
		UserId:      userId,
	}

	result := r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.UpdateTableViewDefinition(ctx, viewDefinition)
	if result.Error != nil {
		tracing.TraceErr(span, result.Error)
		graphql.AddErrorf(ctx, "Failed to update table view definition")
		graphql.AddError(ctx, result.Error)
		return nil, nil
	}

	viewDefinition, ok := result.Result.(postgresEntity.TableViewDefinition)
	if !ok {
		graphql.AddErrorf(ctx, "Failed to update table view definition")
		return nil, nil
	}

	return mapper.MapTableViewDefinitionToModel(viewDefinition, nil), nil
}

// TableViewDefUpdateShared is the resolver for the tableViewDef_UpdateShared field.
func (r *mutationResolver) TableViewDefUpdateShared(ctx context.Context, input model.TableViewDefUpdateInput) (*model.TableViewDef, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TableViewDefSharedUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	tenant := common.GetTenantFromContext(ctx)

	id, err := strconv.ParseUint(input.ID, 10, 64)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update table view shared definition")
		return nil, nil
	}

	var columns []postgresEntity.ColumnView
	for _, column := range input.Columns {
		columns = append(columns, postgresEntity.ColumnView{
			ColumnId:   column.ColumnID,
			ColumnType: column.ColumnType.String(),
			Width:      column.Width,
			Visible:    column.Visible,
			Name:       column.Name,
			Filter:     column.Filter,
		})
	}
	columnsStruct := postgresEntity.Columns{
		Columns: columns,
	}
	columnsJsonData, err := json.Marshal(columnsStruct)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create table view shared definition")
		return nil, nil
	}

	viewDefinition := postgresEntity.TableViewDefinition{
		ID:          id,
		Name:        input.Name,
		ColumnsJson: string(columnsJsonData),
		Order:       input.Order,
		Icon:        input.Icon,
		Filters:     input.Filters,
		Sorting:     input.Sorting,
		Tenant:      tenant,
		IsPreset:    true,
		IsShared:    true,
		UserId:      "",
	}

	result := r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.UpdateTableViewSharedDefinition(ctx, viewDefinition)
	if result.Error != nil {
		tracing.TraceErr(span, result.Error)
		graphql.AddErrorf(ctx, "Failed to update table view shared definition")
		graphql.AddError(ctx, result.Error)
		return nil, nil
	}

	viewDefinition, ok := result.Result.(postgresEntity.TableViewDefinition)
	if !ok {
		graphql.AddErrorf(ctx, "Failed to update table view shared definition")
		return nil, nil
	}

	return mapper.MapTableViewDefinitionToModel(viewDefinition, nil), nil
}

// TableViewDefArchive is the resolver for the tableViewDef_Archive field.
func (r *mutationResolver) TableViewDefArchive(ctx context.Context, id string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.TableViewDefArchive", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	err := r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.ArchiveTableViewDefinition(ctx, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, err.Error())
		return &model.ActionResponse{Accepted: false}, nil
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// TableViewDefs is the resolver for the tableViewDefs field.
func (r *queryResolver) TableViewDefs(ctx context.Context) ([]*model.TableViewDef, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.TableViewDefs", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	tenant := common.GetTenantFromContext(ctx)
	userId := common.GetUserIdFromContext(ctx)

	result := r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.GetTableViewDefinitions(ctx, tenant, userId)
	if result.Error != nil {
		tracing.TraceErr(span, pkgerrors.Wrap(result.Error, "Failed to get table view definitions"))
		graphql.AddErrorf(ctx, "Failed to get table view definitions")
		return nil, nil
	}
	tableViewDefinitions, ok := result.Result.([]postgresEntity.TableViewDefinition)
	if ok && len(tableViewDefinitions) <= 1 {
		for _, def := range DefaultTableViewDefinitions(userId, span) {
			def.Tenant = tenant
			def.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, def)
		}
		result := r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.GetTableViewDefinitions(ctx, tenant, userId)
		if result.Error != nil {
			tracing.TraceErr(span, pkgerrors.Wrap(result.Error, "Failed to get table view definitions"))
			graphql.AddErrorf(ctx, "Failed to get table view definitions")
			return nil, nil
		}
		tableViewDefinitions, _ = result.Result.([]postgresEntity.TableViewDefinition)
	}

	// check all organization table view definitions are created
	organizationFound, customersFound, myPortfolioFound, leadsFound, nurtureFound, churnFound := false, false, false, false, false, false
	contactsFound, contactsForTargetOrganizationsFound := false, false
	opportunitiesFound := false
	for _, def := range tableViewDefinitions {
		if def.TableType == model.TableViewTypeOrganizations.String() && def.TableId == model.TableIDTypeMyPortfolio.String() {
			myPortfolioFound = true
		}
		if def.TableType == model.TableViewTypeOrganizations.String() && def.TableId == model.TableIDTypeCustomers.String() {
			customersFound = true
		}
		if def.TableType == model.TableViewTypeOrganizations.String() && def.TableId == model.TableIDTypeOrganizations.String() {
			organizationFound = true
		}
		if def.TableType == model.TableViewTypeOrganizations.String() && def.TableId == model.TableIDTypeLeads.String() {
			leadsFound = true
		}
		if def.TableType == model.TableViewTypeOrganizations.String() && def.TableId == model.TableIDTypeNurture.String() {
			nurtureFound = true
		}
		if def.TableType == model.TableViewTypeOrganizations.String() && def.TableId == model.TableIDTypeChurn.String() {
			churnFound = true
		}
		if def.TableType == model.TableViewTypeContacts.String() && def.TableId == model.TableIDTypeContacts.String() {
			contactsFound = true
		}
		if def.TableType == model.TableViewTypeContacts.String() && def.TableId == model.TableIDTypeContactsForTargetOrganizations.String() {
			contactsForTargetOrganizationsFound = true
		}
		if def.TableType == model.TableViewTypeOpportunities.String() && def.TableId == model.TableIDTypeOpportunities.String() {
			opportunitiesFound = true
		}
	}
	viewsUpdated := false
	if !organizationFound {
		tvDef, err := DefaultTableViewDefinitionOrganization(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !customersFound {
		tvDef, err := DefaultTableViewDefinitionCustomers(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !myPortfolioFound {
		tvDef, err := DefaultTableViewDefinitionMyPortfolio(userId, span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !leadsFound {
		tvDef, err := DefaultTableViewDefinitionLeads(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !nurtureFound {
		tvDef, err := DefaultTableViewDefinitionNurture(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !churnFound {
		tvDef, err := DefaultTableViewDefinitionChurn(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !contactsFound {
		tvDef, err := DefaultTableViewDefinitionContacts(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !contactsForTargetOrganizationsFound {
		tvDef, err := DefaultTableViewDefinitionTargetOrganizationsContacts(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}
	if !opportunitiesFound {
		tvDef, err := DefaultTableViewDefinitionOpportunities(span)
		if err == nil {
			viewsUpdated = true
			tvDef.Tenant = tenant
			tvDef.UserId = userId
			r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.CreateTableViewDefinition(ctx, tvDef)
		}
	}

	if viewsUpdated {
		updatedResult := r.Services.Repositories.PostgresRepositories.TableViewDefinitionRepository.GetTableViewDefinitions(ctx, tenant, userId)
		if result.Error != nil {
			tracing.TraceErr(span, pkgerrors.Wrap(result.Error, "Failed to get table view definitions"))
			graphql.AddErrorf(ctx, "Failed to get table view definitions")
			return nil, nil
		}
		tableViewDefinitions, _ = updatedResult.Result.([]postgresEntity.TableViewDefinition)
	}

	// add default columns if not present
	for i := range tableViewDefinitions {
		def := &tableViewDefinitions[i]
		defaultColumns := DefaultColumns(def.TableId)

		var currentColumns postgresEntity.Columns
		if def.ColumnsJson != "" {
			err := json.Unmarshal([]byte(def.ColumnsJson), &currentColumns)
			if err != nil {
				span.LogFields(log.String("columnsJson", def.ColumnsJson))
				tracing.TraceErr(span, pkgerrors.Wrapf(err, "Failed to unmarshal columnsJson for table view definition with ID: %d", def.ID))
			}
		}

		// check if default columns are present
		missingColumnsFound := false
		for _, defaultColumn := range defaultColumns.Columns {
			found := false
			for _, currentColumn := range currentColumns.Columns {
				if defaultColumn.ColumnId == currentColumn.ColumnId {
					found = true
					break
				}
			}
			if !found {
				missingColumnsFound = true
				currentColumns.Columns = append(currentColumns.Columns, defaultColumn)
			}
		}

		if missingColumnsFound {
			columnsJsonData, err := json.Marshal(currentColumns)
			if err != nil {
				tracing.TraceErr(span, pkgerrors.Wrapf(err, "Failed to marshal columnsJson for table view definition with ID: %d", def.ID))
				graphql.AddErrorf(ctx, "Failed to get table view definition")
			}
			def.ColumnsJson = string(columnsJsonData)
		}
	}

	return mapper.MapTableViewDefinitionsToModel(tableViewDefinitions, span), nil
}
