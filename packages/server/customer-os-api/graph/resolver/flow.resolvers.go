package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
)

// Sequences is the resolver for the sequences field.
func (r *flowResolver) Sequences(ctx context.Context, obj *model.Flow) ([]*model.FlowSequence, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Sequences", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	return make([]*model.FlowSequence, 0), nil
}

// Flow is the resolver for the flow field.
func (r *flowSequenceResolver) Flow(ctx context.Context, obj *model.FlowSequence) (*model.Flow, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Flow", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.GetFlowBySequenceId(ctx, obj.Metadata.ID)
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get flow")
		return nil, err
	}
	return mapper.MapEntityToFlow(entity), nil
}

// Steps is the resolver for the steps field.
func (r *flowSequenceResolver) Steps(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceStep, error) {
	return make([]*model.FlowSequenceStep, 0), nil
}

// Contacts is the resolver for the contacts field.
func (r *flowSequenceResolver) Contacts(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceContact, error) {
	return make([]*model.FlowSequenceContact, 0), nil
}

// Mailboxes is the resolver for the mailboxes field.
func (r *flowSequenceResolver) Mailboxes(ctx context.Context, obj *model.FlowSequence) ([]*model.Mailbox, error) {
	return make([]*model.Mailbox, 0), nil
}

// Contact is the resolver for the contact field.
func (r *flowSequenceContactResolver) Contact(ctx context.Context, obj *model.FlowSequenceContact) (*model.Contact, error) {
	return &model.Contact{}, nil
}

// Email is the resolver for the email field.
func (r *flowSequenceContactResolver) Email(ctx context.Context, obj *model.FlowSequenceContact) (*model.Email, error) {
	return &model.Email{}, nil
}

// Email is the resolver for the email field.
func (r *flowSequenceStepResolver) Email(ctx context.Context, obj *model.FlowSequenceStep) (*model.Email, error) {
	return &model.Email{}, nil
}

// Flows is the resolver for the flows field.
func (r *queryResolver) Flows(ctx context.Context) ([]*model.Flow, error) {
	return make([]*model.Flow, 0), nil
}

// Sequences is the resolver for the sequences field.
func (r *queryResolver) Sequences(ctx context.Context) ([]*model.FlowSequence, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Sequences.Query", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entities, err := r.Services.CommonServices.FlowService.GetFlowSequencesList(ctx)
	if err != nil || entities == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get flow sequences")
		return nil, err
	}
	return mapper.MapEntitiesToFlowSequence(entities), nil
}

// Flow returns generated.FlowResolver implementation.
func (r *Resolver) Flow() generated.FlowResolver { return &flowResolver{r} }

// FlowSequence returns generated.FlowSequenceResolver implementation.
func (r *Resolver) FlowSequence() generated.FlowSequenceResolver { return &flowSequenceResolver{r} }

// FlowSequenceContact returns generated.FlowSequenceContactResolver implementation.
func (r *Resolver) FlowSequenceContact() generated.FlowSequenceContactResolver {
	return &flowSequenceContactResolver{r}
}

// FlowSequenceStep returns generated.FlowSequenceStepResolver implementation.
func (r *Resolver) FlowSequenceStep() generated.FlowSequenceStepResolver {
	return &flowSequenceStepResolver{r}
}

type flowResolver struct{ *Resolver }
type flowSequenceResolver struct{ *Resolver }
type flowSequenceContactResolver struct{ *Resolver }
type flowSequenceStepResolver struct{ *Resolver }
