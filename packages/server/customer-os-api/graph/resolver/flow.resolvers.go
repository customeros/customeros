package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
)

// Sequences is the resolver for the sequences field.
func (r *flowResolver) Sequences(ctx context.Context, obj *model.Flow) ([]*model.FlowSequence, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Sequences", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	return make([]*model.FlowSequence, 0), nil
}

// Flow is the resolver for the flow field.
func (r *flowSequenceResolver) Flow(ctx context.Context, obj *model.FlowSequence) (*model.Flow, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Flow", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.FlowGetBySequenceId(ctx, obj.Metadata.ID)
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get flow")
		return nil, err
	}
	return mapper.MapEntityToFlow(entity), nil
}

// Steps is the resolver for the steps field.
func (r *flowSequenceResolver) Steps(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceStep, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Steps", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.FlowSequenceStepGetList(ctx, obj.Metadata.ID)
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get flow sequence steps")
		return nil, err
	}
	return mapper.MapEntitiesToFlowSequenceSteps(entity), nil
}

// Contacts is the resolver for the contacts field.
func (r *flowSequenceResolver) Contacts(ctx context.Context, obj *model.FlowSequence) ([]*model.FlowSequenceContact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Contacts", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entities, err := r.Services.CommonServices.FlowService.FlowSequenceContactGetList(ctx, &obj.Metadata.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get flow sequence contacts")
		return nil, err
	}

	return mapper.MapEntitiesToFlowSequenceContacts(entities), nil
}

// Mailboxes is the resolver for the mailboxes field.
func (r *flowSequenceResolver) Mailboxes(ctx context.Context, obj *model.FlowSequence) ([]*model.Mailbox, error) {
	return make([]*model.Mailbox, 0), nil
}

// Contact is the resolver for the contact field.
func (r *flowSequenceContactResolver) Contact(ctx context.Context, obj *model.FlowSequenceContact) (*model.Contact, error) {
	return &model.Contact{}, nil
}

// Email is the resolver for the email field.
func (r *flowSequenceContactResolver) Email(ctx context.Context, obj *model.FlowSequenceContact) (*model.Email, error) {
	return &model.Email{}, nil
}

// FlowSequenceStore is the resolver for the flow_sequence_store field.
func (r *mutationResolver) FlowSequenceStore(ctx context.Context, input model.FlowSequenceStoreInput) (*model.FlowSequence, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.FlowSequenceStore", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.FlowSequenceStore(ctx, mapper.MapFlowSequenceStoreInputToEntity(input))
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "")
		return nil, err
	}
	return mapper.MapEntityToFlowSequence(entity), nil
}

// FlowSequenceLinkContact is the resolver for the flow_sequence_LinkContact field.
func (r *mutationResolver) FlowSequenceLinkContact(ctx context.Context, sequenceID string, contactID string, emailID string) (*model.FlowSequenceContact, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.FlowSequenceLinkContact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.FlowSequenceContactLink(ctx, sequenceID, contactID, emailID)
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "")
		return nil, err
	}
	return mapper.MapEntityToFlowSequenceContact(entity), nil
}

// FlowSequenceUnlinkContact is the resolver for the flow_sequence_UnlinkContact field.
func (r *mutationResolver) FlowSequenceUnlinkContact(ctx context.Context, sequenceID string, contactID string, emailID string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.FlowSequenceLinkContact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	err := r.Services.CommonServices.FlowService.FlowSequenceContactUnlink(ctx, sequenceID, contactID, emailID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "")
		return &model.Result{Result: false}, err
	}
	return &model.Result{Result: true}, nil
}

// FlowChangeStatus is the resolver for the flow_changeStatus field.
func (r *mutationResolver) FlowChangeStatus(ctx context.Context, id string, status model.FlowStatus) (*model.Flow, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.FlowChangeStatus", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.FlowChangeStatus(ctx, id, mapper.MapFlowStatusToEntity(status))
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "")
		return nil, err
	}
	return mapper.MapEntityToFlow(entity), nil
}

// FlowSequenceChangeStatus is the resolver for the flow_sequence_changeStatus field.
func (r *mutationResolver) FlowSequenceChangeStatus(ctx context.Context, id string, status model.FlowSequenceStatus) (*model.FlowSequence, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.FlowSequenceChangeStatus", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.FlowSequenceChangeStatus(ctx, id, mapper.MapFlowSequenceStatusToEntity(status))
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "")
		return nil, err
	}
	return mapper.MapEntityToFlowSequence(entity), nil
}

// FlowSequenceStepChangeStatus is the resolver for the flow_sequence_step_changeStatus field.
func (r *mutationResolver) FlowSequenceStepChangeStatus(ctx context.Context, id string, status model.FlowSequenceStepStatus) (*model.FlowSequenceStep, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.FlowSequenceStepChangeStatus", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entity, err := r.Services.CommonServices.FlowService.FlowSequenceStepChangeStatus(ctx, id, mapper.MapFlowSequenceStepStatusToEntity(status))
	if err != nil || entity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "")
		return nil, err
	}
	return mapper.MapEntityToFlowSequenceStep(entity), nil
}

// Flows is the resolver for the flows field.
func (r *queryResolver) Flows(ctx context.Context) ([]*model.Flow, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Flows", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entities, err := r.Services.CommonServices.FlowService.FlowGetList(ctx)
	if err != nil || entities == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get flow sequences")
		return nil, err
	}
	return mapper.MapEntitiesToFlows(entities), nil
}

// Sequences is the resolver for the sequences field.
func (r *queryResolver) Sequences(ctx context.Context) ([]*model.FlowSequence, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "FlowResolver.Sequences.Query", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)

	entities, err := r.Services.CommonServices.FlowService.FlowSequenceGetList(ctx, nil)
	if err != nil || entities == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get flow sequences")
		return nil, err
	}
	return mapper.MapEntitiesToFlowSequence(entities), nil
}

// Flow returns generated.FlowResolver implementation.
func (r *Resolver) Flow() generated.FlowResolver { return &flowResolver{r} }

// FlowSequence returns generated.FlowSequenceResolver implementation.
func (r *Resolver) FlowSequence() generated.FlowSequenceResolver { return &flowSequenceResolver{r} }

// FlowSequenceContact returns generated.FlowSequenceContactResolver implementation.
func (r *Resolver) FlowSequenceContact() generated.FlowSequenceContactResolver {
	return &flowSequenceContactResolver{r}
}

type flowResolver struct{ *Resolver }
type flowSequenceResolver struct{ *Resolver }
type flowSequenceContactResolver struct{ *Resolver }
