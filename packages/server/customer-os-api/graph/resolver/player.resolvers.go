package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
)

// PlayerMerge is the resolver for the player_Merge field.
func (r *mutationResolver) PlayerMerge(ctx context.Context, input model.PlayerInput) (*model.Player, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	playerEntity, error := r.Services.PlayerService.Merge(ctx, mapper.MapPlayerInputToEntity(&input))
	if error != nil {
		graphql.AddErrorf(ctx, "Failed to merge player")
		return nil, error
	}
	return mapper.MapEntityToPlayer(playerEntity), nil
}

// PlayerUpdate is the resolver for the player_Update field.
func (r *mutationResolver) PlayerUpdate(ctx context.Context, id string, update model.PlayerUpdate) (*model.Player, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	playerEntity, error := r.Services.PlayerService.Update(ctx, mapper.MapPlayerUpdateToEntity(id, &update))
	if error != nil {
		graphql.AddErrorf(ctx, "Failed to update player %s", id)
		return nil, error
	}
	return mapper.MapEntityToPlayer(playerEntity), nil
}

// PlayerSetDefaultUser is the resolver for the player_SetDefaultUser field.
func (r *mutationResolver) PlayerSetDefaultUser(ctx context.Context, id string, userID string) (*model.Player, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	playerEntity, error := r.Services.PlayerService.SetDefaultUser(ctx, id, userID)
	if error != nil {
		graphql.AddErrorf(ctx, "Failed to set default user for player %s", id)
		return nil, error
	}
	return mapper.MapEntityToPlayer(playerEntity), nil
}

// Users is the resolver for the users field.
func (r *playerResolver) Users(ctx context.Context, obj *model.Player) ([]*model.PlayerUser, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	userEntities, err := dataloader.For(ctx).GetUsersForPlayer(ctx, obj.ID)
	if err != nil {
		graphql.AddErrorf(ctx, "Failed to get users for player %s", obj.ID)
		return nil, err
	}
	return mapper.MapEntitiesToPlayerUsers(userEntities), nil
}

// PlayerByAuthIDProvider is the resolver for the player_ByAuthIdProvider field.
func (r *queryResolver) PlayerByAuthIDProvider(ctx context.Context, authID string, provider string) (*model.Player, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	playerEntity, err := r.Services.PlayerService.GetPlayerByAuthIdProvider(ctx, authID, provider)
	if err != nil {
		graphql.AddErrorf(ctx, "Failed to get player by authId and provider")
		return nil, err
	}
	return mapper.MapEntityToPlayer(playerEntity), nil
}

// PlayerGetUsers is the resolver for the player_GetUsers field.
func (r *queryResolver) PlayerGetUsers(ctx context.Context) ([]*model.PlayerUser, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	dbUsers, err := r.Services.PlayerService.GetUsers(ctx)
	if err != nil {
		graphql.AddErrorf(ctx, "Failed to get users")
		return nil, err
	}
	return mapper.MapEntitiesToPlayerUsers(dbUsers), nil
}

// Player returns generated.PlayerResolver implementation.
func (r *Resolver) Player() generated.PlayerResolver { return &playerResolver{r} }

type playerResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) PlayerByEmailProvider(ctx context.Context, email string, provider string) (*model.Player, error) {
	defer func(start time.Time) {
		utils.LogMethodExecution(start, utils.GetFunctionName())
	}(time.Now())

	playerEntity, err := r.Services.PlayerService.GetPlayerByAuthIdProvider(ctx, email, provider)
	if err != nil {
		graphql.AddErrorf(ctx, "Failed to get player by email and provider")
		return nil, err
	}
	return mapper.MapEntityToPlayer(playerEntity), nil
}
