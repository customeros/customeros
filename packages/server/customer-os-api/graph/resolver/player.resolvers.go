package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/common"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/constants"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	neo4jentity "github.com/openline-ai/openline-customer-os/packages/server/customer-os-neo4j-repository/entity"
	commongrpc "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	usergrpc "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/user"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/log"
)

// PlayerMerge is the resolver for the player_Merge field.
func (r *mutationResolver) PlayerMerge(ctx context.Context, userID string, input model.PlayerInput) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PlayerMerge", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.userID", userID), log.String("IdentityID", utils.IfNotNilString(input.IdentityID)), log.String("AuthID", input.AuthID), log.String("Provider", input.Provider))

	ctx = tracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err := r.Clients.UserClient.AddPlayerInfo(ctx, &usergrpc.AddPlayerInfoGrpcRequest{
		UserId:         userID,
		Tenant:         common.GetTenantFromContext(ctx),
		LoggedInUserId: common.GetUserIdFromContext(ctx),
		AuthId:         input.AuthID,
		Provider:       input.Provider,
		IdentityId:     utils.IfNotNilString(input.IdentityID),
		SourceFields: &commongrpc.SourceFields{
			Source:    string(neo4jentity.DataSourceOpenline),
			AppSource: utils.IfNotNilStringWithDefault(input.AppSource, constants.AppSourceCustomerOsApi),
		},
	})
	if err != nil {
		tracing.TraceErr(span, err)
		r.log.Errorf("Failed to add player info for user %s: %s", userID, err.Error())
	}

	return &model.Result{Result: true}, nil
}

// Users is the resolver for the users field.
func (r *playerResolver) Users(ctx context.Context, obj *model.Player) ([]*model.PlayerUser, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntities, err := dataloader.For(ctx).GetUsersForPlayer(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get users for player %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get users for player %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToPlayerUsers(userEntities), nil
}

// PlayerByAuthIDProvider is the resolver for the player_ByAuthIdProvider field.
func (r *queryResolver) PlayerByAuthIDProvider(ctx context.Context, authID string, provider string) (*model.Player, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "PlayerResolver.PlayerByAuthIDProvider", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.authID", authID), log.String("request.provider", provider))

	playerEntity, err := r.Services.PlayerService.GetPlayerByAuthIdProvider(ctx, authID, provider)
	if err != nil || playerEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to get player by authId and provider")
		return nil, err
	}
	return mapper.MapEntityToPlayer(playerEntity), nil
}

// Player returns generated.PlayerResolver implementation.
func (r *Resolver) Player() generated.PlayerResolver { return &playerResolver{r} }

type playerResolver struct{ *Resolver }
