package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/constants"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
	commonModel "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/model"
	commonTracing "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	contactpb "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/contact"
	organizationpb "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/organization"
	userpb "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/user"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/log"
)

// PhoneNumberMergeToContact is the resolver for the phoneNumberMergeToContact field.
func (r *mutationResolver) PhoneNumberMergeToContact(ctx context.Context, contactID string, input model.PhoneNumberInput) (*model.PhoneNumber, error) {
	spanCtx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberMergeToContact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(spanCtx, span)
	span.LogFields(log.String("request.contactID", contactID))
	tracing.LogObjectAsJson(span, "request.input", input)

	inputPhoneNumber := strings.TrimSpace(input.PhoneNumber)

	phoneNumberId, err := r.Services.PhoneNumberService.CreatePhoneNumberViaEvents(ctx, inputPhoneNumber, constants.AppSourceCustomerOsApi)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create phone number %s", inputPhoneNumber)
		return nil, err
	}

	ctx = commonTracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err = utils.CallEventsPlatformGRPCWithRetry[*contactpb.ContactIdGrpcResponse](func() (*contactpb.ContactIdGrpcResponse, error) {
		return r.Clients.ContactClient.LinkPhoneNumberToContact(ctx, &contactpb.LinkPhoneNumberToContactGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			ContactId:      contactID,
			PhoneNumberId:  phoneNumberId,
			Primary:        utils.IfNotNilBool(input.Primary),
			Label:          utils.IfNotNilString(input.Label, func() string { return input.Label.String() }),
			LoggedInUserId: common.GetUserIdFromContext(ctx),
			AppSource:      constants.AppSourceCustomerOsApi,
		})
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to add phone number %s to contact %s", phoneNumberId, contactID)
		return nil, err
	}

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, phoneNumberId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch phone number details %s", inputPhoneNumber)
		return nil, nil
	}

	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// PhoneNumberUpdateInContact is the resolver for the phoneNumberUpdateInContact field.
func (r *mutationResolver) PhoneNumberUpdateInContact(ctx context.Context, contactID string, input model.PhoneNumberRelationUpdateInput) (*model.PhoneNumber, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberUpdateInContact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID))
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.PhoneNumberService.UpdatePhoneNumberFor(ctx, commonModel.CONTACT, contactID, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not update phone number %s for contact %s", input.ID, contactID)
		return nil, err
	}

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, input.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch phone number details details %s", input.ID)
		return nil, nil
	}

	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// PhoneNumberRemoveFromContactByE164 is the resolver for the phoneNumberRemoveFromContactByE164 field.
func (r *mutationResolver) PhoneNumberRemoveFromContactByE164(ctx context.Context, contactID string, e164 string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberRemoveFromContactByE164", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID), log.String("request.e164", e164))

	result, err := r.Services.PhoneNumberService.DetachFromEntityByPhoneNumber(ctx, commonModel.CONTACT, contactID, e164)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove phone number by e164 %s from contact with id %s", e164, contactID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// PhoneNumberRemoveFromContactByID is the resolver for the phoneNumberRemoveFromContactById field.
func (r *mutationResolver) PhoneNumberRemoveFromContactByID(ctx context.Context, contactID string, id string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberRemoveFromContactByID", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID), log.String("request.phoneNumberID", id))

	result, err := r.Services.PhoneNumberService.DetachFromEntityById(ctx, commonModel.CONTACT, contactID, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove phone number by id %s from contact with id %s", id, contactID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// PhoneNumberMergeToOrganization is the resolver for the phoneNumberMergeToOrganization field.
func (r *mutationResolver) PhoneNumberMergeToOrganization(ctx context.Context, organizationID string, input model.PhoneNumberInput) (*model.PhoneNumber, error) {
	spanCtx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberMergeToOrganization", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(spanCtx, span)
	span.LogFields(log.String("request.organizationID", organizationID))
	tracing.LogObjectAsJson(span, "request.phoneNumberInput", input)

	inputPhoneNumber := strings.TrimSpace(input.PhoneNumber)

	phoneNumberId, err := r.Services.PhoneNumberService.CreatePhoneNumberViaEvents(ctx, inputPhoneNumber, constants.AppSourceCustomerOsApi)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create phone number %s", inputPhoneNumber)
		return nil, err
	}

	ctx = commonTracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err = utils.CallEventsPlatformGRPCWithRetry[*organizationpb.OrganizationIdGrpcResponse](func() (*organizationpb.OrganizationIdGrpcResponse, error) {
		return r.Clients.OrganizationClient.LinkPhoneNumberToOrganization(ctx, &organizationpb.LinkPhoneNumberToOrganizationGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			OrganizationId: organizationID,
			PhoneNumberId:  phoneNumberId,
			Primary:        utils.IfNotNilBool(input.Primary),
			Label:          utils.IfNotNilString(input.Label, func() string { return input.Label.String() }),
			LoggedInUserId: common.GetUserIdFromContext(ctx),
			AppSource:      constants.AppSourceCustomerOsApi,
		})
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to add phone number %s to organization %s", phoneNumberId, organizationID)
		return nil, err
	}

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, phoneNumberId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch phone number details %s", phoneNumberId)
		return nil, nil
	}

	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// PhoneNumberUpdateInOrganization is the resolver for the phoneNumberUpdateInOrganization field.
func (r *mutationResolver) PhoneNumberUpdateInOrganization(ctx context.Context, organizationID string, input model.PhoneNumberRelationUpdateInput) (*model.PhoneNumber, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberUpdateInOrganization", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID))
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.PhoneNumberService.UpdatePhoneNumberFor(ctx, commonModel.ORGANIZATION, organizationID, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not update phone number %s for organization %s", input.ID, organizationID)
		return nil, err
	}

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, input.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch phone number details details %s", input.ID)
		return nil, nil
	}

	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// PhoneNumberRemoveFromOrganizationByE164 is the resolver for the phoneNumberRemoveFromOrganizationByE164 field.
func (r *mutationResolver) PhoneNumberRemoveFromOrganizationByE164(ctx context.Context, organizationID string, e164 string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberRemoveFromOrganizationByE164", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.e164", e164))

	result, err := r.Services.PhoneNumberService.DetachFromEntityByPhoneNumber(ctx, commonModel.ORGANIZATION, organizationID, e164)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove phone number by e164 %s from user with id %s", e164, organizationID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// PhoneNumberRemoveFromOrganizationByID is the resolver for the phoneNumberRemoveFromOrganizationById field.
func (r *mutationResolver) PhoneNumberRemoveFromOrganizationByID(ctx context.Context, organizationID string, id string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberRemoveFromOrganizationByID", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.phoneNumberID", id))

	result, err := r.Services.PhoneNumberService.DetachFromEntityById(ctx, commonModel.ORGANIZATION, organizationID, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove phone number by id %s from organization with id %s", id, organizationID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// PhoneNumberMergeToUser is the resolver for the phoneNumberMergeToUser field.
func (r *mutationResolver) PhoneNumberMergeToUser(ctx context.Context, userID string, input model.PhoneNumberInput) (*model.PhoneNumber, error) {
	spanCtx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberMergeToUser", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(spanCtx, span)
	span.LogFields(log.String("request.userID", userID))
	tracing.LogObjectAsJson(span, "request.input", input)

	inputPhoneNumber := strings.TrimSpace(input.PhoneNumber)

	phoneNumberId, err := r.Services.PhoneNumberService.CreatePhoneNumberViaEvents(ctx, inputPhoneNumber, constants.AppSourceCustomerOsApi)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to create phone number %s", inputPhoneNumber)
		return nil, err
	}

	ctx = commonTracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err = utils.CallEventsPlatformGRPCWithRetry[*userpb.UserIdGrpcResponse](func() (*userpb.UserIdGrpcResponse, error) {
		return r.Clients.UserClient.LinkPhoneNumberToUser(ctx, &userpb.LinkPhoneNumberToUserGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			UserId:         userID,
			PhoneNumberId:  phoneNumberId,
			Primary:        utils.IfNotNilBool(input.Primary),
			Label:          utils.IfNotNilString(input.Label, func() string { return input.Label.String() }),
			LoggedInUserId: common.GetUserIdFromContext(ctx),
			AppSource:      constants.AppSourceCustomerOsApi,
		})
	})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to add phone number %s to user %s", phoneNumberId, userID)
		return nil, err
	}

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, phoneNumberId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch phone number details %s", phoneNumberId)
		return nil, nil
	}

	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// PhoneNumberUpdateInUser is the resolver for the phoneNumberUpdateInUser field.
func (r *mutationResolver) PhoneNumberUpdateInUser(ctx context.Context, userID string, input model.PhoneNumberRelationUpdateInput) (*model.PhoneNumber, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberUpdateInUser", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.userID", userID))
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.PhoneNumberService.UpdatePhoneNumberFor(ctx, commonModel.USER, userID, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not update phone number %s for user %s", input.ID, userID)
		return nil, err
	}

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, input.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch phone number details details %s", input.ID)
		return nil, nil
	}

	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// PhoneNumberRemoveFromUserByE164 is the resolver for the phoneNumberRemoveFromUserByE164 field.
func (r *mutationResolver) PhoneNumberRemoveFromUserByE164(ctx context.Context, userID string, e164 string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberRemoveFromUserByE164", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.userID", userID), log.String("request.e164", e164))

	result, err := r.Services.PhoneNumberService.DetachFromEntityByPhoneNumber(ctx, commonModel.USER, userID, e164)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove phone number by e164 %s from user with id %s", e164, userID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// PhoneNumberRemoveFromUserByID is the resolver for the phoneNumberRemoveFromUserById field.
func (r *mutationResolver) PhoneNumberRemoveFromUserByID(ctx context.Context, userID string, id string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberRemoveFromUserByID", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.userID", userID), log.String("request.phoneNumberID", id))

	result, err := r.Services.PhoneNumberService.DetachFromEntityById(ctx, commonModel.USER, userID, id)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove phone number by id %s from user with id %s", id, userID)
		return nil, err
	}
	return &model.Result{
		Result: result,
	}, nil
}

// PhoneNumberUpdate is the resolver for the phoneNumber_Update field.
func (r *mutationResolver) PhoneNumberUpdate(ctx context.Context, input model.PhoneNumberUpdateInput) (*model.PhoneNumber, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.PhoneNumberUpdate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	tracing.LogObjectAsJson(span, "request.input", input)

	err := r.Services.PhoneNumberService.Update(ctx, input)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to update phone number %s", input.ID)
		return nil, err
	}

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, input.ID)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch phone number details %s", input.PhoneNumber)
		return nil, nil
	}

	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// Country is the resolver for the country field.
func (r *phoneNumberResolver) Country(ctx context.Context, obj *model.PhoneNumber) (*model.Country, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	countryEntityNillable, err := dataloader.For(ctx).GetCountryForPhoneNumber(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get country for phone number %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get country for phone number with id %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntityToCountry(countryEntityNillable), nil
}

// Users is the resolver for the users field.
func (r *phoneNumberResolver) Users(ctx context.Context, obj *model.PhoneNumber) ([]*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntities, err := dataloader.For(ctx).GetUsersForPhoneNumber(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get users for phone number %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get users for phone number %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToUsers(userEntities), nil
}

// Contacts is the resolver for the contacts field.
func (r *phoneNumberResolver) Contacts(ctx context.Context, obj *model.PhoneNumber) ([]*model.Contact, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	contactEntities, err := dataloader.For(ctx).GetContactsForPhoneNumber(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get contacts for phone number %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get contacts for phone number %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToContacts(contactEntities), nil
}

// Organizations is the resolver for the organizations field.
func (r *phoneNumberResolver) Organizations(ctx context.Context, obj *model.PhoneNumber) ([]*model.Organization, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	organizationEntities, err := dataloader.For(ctx).GetOrganizationsForPhoneNumber(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get organizations for phone number %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get organizations for phone number %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToOrganizations(organizationEntities), nil
}

// PhoneNumber is the resolver for the phoneNumber field.
func (r *queryResolver) PhoneNumber(ctx context.Context, id string) (*model.PhoneNumber, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.PhoneNumber", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.phoneNumberID", id))

	phoneNumberEntity, err := r.Services.PhoneNumberService.GetById(ctx, id)
	if err != nil || phoneNumberEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Filed getting phone number with id %s", id)
		return nil, nil
	}
	return mapper.MapEntityToPhoneNumber(phoneNumberEntity), nil
}

// PhoneNumber returns generated.PhoneNumberResolver implementation.
func (r *Resolver) PhoneNumber() generated.PhoneNumberResolver { return &phoneNumberResolver{r} }

type phoneNumberResolver struct{ *Resolver }
