package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/opentracing/opentracing-go/log"
)

// Tags is the resolver for the tags field.
func (r *issueResolver) Tags(ctx context.Context, obj *model.Issue) ([]*model.Tag, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	tagEntities, err := dataloader.For(ctx).GetTagsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get tags for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get tags for issue %s", obj.ID)
		return nil, err
	}
	return mapper.MapEntitiesToTags(tagEntities), nil
}

// InteractionEvents is the resolver for the interactionEvents field.
func (r *issueResolver) InteractionEvents(ctx context.Context, obj *model.Issue) ([]*model.InteractionEvent, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	interactionEventEntities, err := dataloader.For(ctx).GetInteractionEventsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("failed to get interaction events for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "failed to get interaction events for issue %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToInteractionEvents(interactionEventEntities), nil
}

// Comments is the resolver for the comments field.
func (r *issueResolver) Comments(ctx context.Context, obj *model.Issue) ([]*model.Comment, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	commentEntities, err := dataloader.For(ctx).GetCommentsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("failed to get comments for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "failed to get comments for issue %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToComments(commentEntities), nil
}

// ExternalLinks is the resolver for the externalLinks field.
func (r *issueResolver) ExternalLinks(ctx context.Context, obj *model.Issue) ([]*model.ExternalSystem, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	entities, err := dataloader.For(ctx).GetExternalSystemsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get external system for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get external system for issue %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToExternalSystems(entities), nil
}

// SubmittedBy is the resolver for the submittedBy field.
func (r *issueResolver) SubmittedBy(ctx context.Context, obj *model.Issue) (model.IssueParticipant, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	issueParticipants, err := dataloader.For(ctx).GetSubmitterParticipantsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get submitter for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get submitter for issue %s", obj.ID)
		return nil, nil
	}
	if len(*issueParticipants) == 0 {
		return nil, nil
	}
	return mapper.MapEntitiesToIssueParticipants(issueParticipants)[0], nil
}

// ReportedBy is the resolver for the reportedBy field.
func (r *issueResolver) ReportedBy(ctx context.Context, obj *model.Issue) (model.IssueParticipant, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	issueParticipants, err := dataloader.For(ctx).GetReporterParticipantsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get reporter for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get reporter for issue %s", obj.ID)
		return nil, nil
	}
	if len(*issueParticipants) == 0 {
		return nil, nil
	}
	return mapper.MapEntitiesToIssueParticipants(issueParticipants)[0], nil
}

// AssignedTo is the resolver for the assignedTo field.
func (r *issueResolver) AssignedTo(ctx context.Context, obj *model.Issue) ([]model.IssueParticipant, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	issueParticipants, err := dataloader.For(ctx).GetAssigneeParticipantsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get assignees for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get assignees for issue %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToIssueParticipants(issueParticipants), nil
}

// FollowedBy is the resolver for the followedBy field.
func (r *issueResolver) FollowedBy(ctx context.Context, obj *model.Issue) ([]model.IssueParticipant, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	issueParticipants, err := dataloader.For(ctx).GetFollowerParticipantsForIssue(ctx, obj.ID)
	if err != nil {
		r.log.Errorf("Failed to get followers for issue %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get followers for issue %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToIssueParticipants(issueParticipants), nil
}

// Issue is the resolver for the issue field.
func (r *queryResolver) Issue(ctx context.Context, id string) (*model.Issue, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Issue", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.issueID", id))

	issueEntity, err := r.Services.IssueService.GetById(ctx, id)
	if err != nil || issueEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Issue with id %s not found", id)
		return nil, err
	}
	return mapper.MapEntityToIssue(issueEntity), nil
}

// Issue returns generated.IssueResolver implementation.
func (r *Resolver) Issue() generated.IssueResolver { return &issueResolver{r} }

type issueResolver struct{ *Resolver }
