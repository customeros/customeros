package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/constants"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/dataloader"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/generated"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/graph/model"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/mapper"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-api/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/common"
	commonModel "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/model"
	commonservice "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/service"
	commonTracing "github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/tracing"
	"github.com/openline-ai/openline-customer-os/packages/server/customer-os-common-module/utils"
	neo4jentity "github.com/openline-ai/openline-customer-os/packages/server/customer-os-neo4j-repository/entity"
	emailpb "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/email"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/log"
	pkgerrors "github.com/pkg/errors"
)

// Users is the resolver for the users field.
func (r *emailResolver) Users(ctx context.Context, obj *model.Email) ([]*model.User, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	userEntities, err := dataloader.For(ctx).GetUsersForEmail(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get users for email %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get users for email %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToUsers(userEntities), nil
}

// Contacts is the resolver for the contacts field.
func (r *emailResolver) Contacts(ctx context.Context, obj *model.Email) ([]*model.Contact, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	contactEntities, err := dataloader.For(ctx).GetContactsForEmail(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get contacts for email %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get contacts for email %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToContacts(contactEntities), nil
}

// Organizations is the resolver for the organizations field.
func (r *emailResolver) Organizations(ctx context.Context, obj *model.Email) ([]*model.Organization, error) {
	ctx = tracing.EnrichCtxWithSpanCtxForGraphQL(ctx, graphql.GetOperationContext(ctx))

	organizationEntities, err := dataloader.For(ctx).GetOrganizationsForEmail(ctx, obj.ID)
	if err != nil {
		tracing.TraceErr(opentracing.SpanFromContext(ctx), err)
		r.log.Errorf("Failed to get organizations for email %s: %s", obj.ID, err.Error())
		graphql.AddErrorf(ctx, "Failed to get organizations for email %s", obj.ID)
		return nil, nil
	}
	return mapper.MapEntitiesToOrganizations(organizationEntities), nil
}

// EmailMergeToContact is the resolver for the emailMergeToContact field.
func (r *mutationResolver) EmailMergeToContact(ctx context.Context, contactID string, input model.EmailInput) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailMergeToContact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID))
	tracing.LogObjectAsJson(span, "request.emailInput", input)

	emailId, err := r.Services.CommonServices.EmailService.Merge(ctx, common.GetTenantFromContext(ctx),
		commonservice.EmailFields{
			Email:     strings.TrimSpace(input.Email),
			Primary:   utils.IfNotNilBool(input.Primary),
			Source:    neo4jentity.DataSourceOpenline,
			AppSource: constants.AppSourceCustomerOsApi,
		}, &commonservice.LinkWith{
			Type: commonModel.CONTACT,
			Id:   contactID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, err
	}

	if utils.IfNotNilString(emailId) == "" {
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, nil
	}

	emailEntity, err := r.Services.EmailService.GetById(ctx, *emailId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch email details %s", input.Email)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntity), nil
}

// EmailRemoveFromContact is the resolver for the EmailRemoveFromContact field.
func (r *mutationResolver) EmailRemoveFromContact(ctx context.Context, contactID string, email string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailRemoveFromContact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID), log.String("request.email", email))

	err := r.Services.CommonServices.EmailService.UnlinkEmail(ctx, common.GetTenantFromContext(ctx), email, constants.AppSourceCustomerOsApi,
		commonservice.LinkWith{
			Type: commonModel.CONTACT,
			Id:   contactID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove email %s from contact %s", email, contactID)
		return &model.Result{
			Result: false,
		}, nil
	}

	return &model.Result{
		Result: true,
	}, nil
}

// EmailReplaceForContact is the resolver for the emailReplaceForContact field.
func (r *mutationResolver) EmailReplaceForContact(ctx context.Context, contactID string, previousEmail *string, input model.EmailInput) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailReplaceForContact", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.contactID", contactID), log.String("request.previousEmail", utils.IfNotNilString(previousEmail)))
	tracing.LogObjectAsJson(span, "request.input", input)

	emailId, err := r.Services.CommonServices.EmailService.ReplaceEmail(ctx, common.GetTenantFromContext(ctx),
		utils.IfNotNilString(previousEmail),
		commonservice.EmailFields{
			Email:     input.Email,
			Primary:   utils.IfNotNilBool(input.Primary),
			Source:    neo4jentity.DataSourceOpenline,
			AppSource: constants.AppSourceCustomerOsApi,
		}, commonservice.LinkWith{
			Type: commonModel.CONTACT,
			Id:   contactID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, err
	}

	if utils.IfNotNilString(emailId) == "" {
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, nil
	}

	emailEntity, err := r.Services.EmailService.GetById(ctx, *emailId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch email details %s", input.Email)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntity), nil
}

// EmailMergeToUser is the resolver for the emailMergeToUser field.
func (r *mutationResolver) EmailMergeToUser(ctx context.Context, userID string, input model.EmailInput) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailMergeToUser", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.userID", userID))
	tracing.LogObjectAsJson(span, "request.input", input)

	emailId, err := r.Services.CommonServices.EmailService.Merge(ctx, common.GetTenantFromContext(ctx),
		commonservice.EmailFields{
			Email:     strings.TrimSpace(input.Email),
			Primary:   utils.IfNotNilBool(input.Primary),
			Source:    neo4jentity.DataSourceOpenline,
			AppSource: constants.AppSourceCustomerOsApi,
		}, &commonservice.LinkWith{
			Type: commonModel.USER,
			Id:   userID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, err
	}

	if utils.IfNotNilString(emailId) == "" {
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, nil
	}

	emailEntity, err := r.Services.EmailService.GetById(ctx, *emailId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch email details %s", input.Email)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntity), nil
}

// EmailRemoveFromUser is the resolver for the emailRemoveFromUser field.
func (r *mutationResolver) EmailRemoveFromUser(ctx context.Context, userID string, email string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailRemoveFromUser", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.userID", userID), log.String("request.email", email))

	err := r.Services.CommonServices.EmailService.UnlinkEmail(ctx, common.GetTenantFromContext(ctx), email, constants.AppSourceCustomerOsApi,
		commonservice.LinkWith{
			Type: commonModel.USER,
			Id:   userID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove email %s from user %s", email, userID)
		return &model.Result{
			Result: false,
		}, nil
	}
	return &model.Result{
		Result: true,
	}, nil
}

// EmailReplaceForUser is the resolver for the emailReplaceForUser field.
func (r *mutationResolver) EmailReplaceForUser(ctx context.Context, userID string, previousEmail *string, input model.EmailInput) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailReplaceForUser", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.userID", userID), log.String("request.previousEmail", utils.IfNotNilString(previousEmail)))
	tracing.LogObjectAsJson(span, "request.input", input)

	emailId, err := r.Services.CommonServices.EmailService.ReplaceEmail(ctx, common.GetTenantFromContext(ctx),
		utils.IfNotNilString(previousEmail),
		commonservice.EmailFields{
			Email:     input.Email,
			Primary:   utils.IfNotNilBool(input.Primary),
			Source:    neo4jentity.DataSourceOpenline,
			AppSource: constants.AppSourceCustomerOsApi,
		}, commonservice.LinkWith{
			Type: commonModel.USER,
			Id:   userID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, err
	}

	if utils.IfNotNilString(emailId) == "" {
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, nil
	}

	emailEntity, err := r.Services.EmailService.GetById(ctx, *emailId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch email details %s", input.Email)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntity), nil
}

// EmailMergeToOrganization is the resolver for the emailMergeToOrganization field.
func (r *mutationResolver) EmailMergeToOrganization(ctx context.Context, organizationID string, input model.EmailInput) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailMergeToOrganization", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID))
	tracing.LogObjectAsJson(span, "request.input", input)

	emailId, err := r.Services.CommonServices.EmailService.Merge(ctx, common.GetTenantFromContext(ctx),
		commonservice.EmailFields{
			Email:     strings.TrimSpace(input.Email),
			Primary:   utils.IfNotNilBool(input.Primary),
			Source:    neo4jentity.DataSourceOpenline,
			AppSource: constants.AppSourceCustomerOsApi,
		}, &commonservice.LinkWith{
			Type: commonModel.ORGANIZATION,
			Id:   organizationID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, err
	}

	if utils.IfNotNilString(emailId) == "" {
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, nil
	}

	emailEntity, err := r.Services.EmailService.GetById(ctx, *emailId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch email details %s", input.Email)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntity), nil
}

// EmailRemoveFromOrganization is the resolver for the emailRemoveFromOrganization field.
func (r *mutationResolver) EmailRemoveFromOrganization(ctx context.Context, organizationID string, email string) (*model.Result, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailRemoveFromOrganization", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.email", email))

	err := r.Services.CommonServices.EmailService.UnlinkEmail(ctx, common.GetTenantFromContext(ctx), email, constants.AppSourceCustomerOsApi,
		commonservice.LinkWith{
			Type: commonModel.ORGANIZATION,
			Id:   organizationID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Could not remove email %s from organization %s", email, organizationID)
		return &model.Result{
			Result: false,
		}, nil
	}

	return &model.Result{
		Result: true,
	}, nil
}

// EmailReplaceForOrganization is the resolver for the emailReplaceForOrganization field.
func (r *mutationResolver) EmailReplaceForOrganization(ctx context.Context, organizationID string, previousEmail *string, input model.EmailInput) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailReplaceForUser", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.organizationID", organizationID), log.String("request.previousEmail", utils.IfNotNilString(previousEmail)))
	tracing.LogObjectAsJson(span, "request.input", input)

	emailId, err := r.Services.CommonServices.EmailService.ReplaceEmail(ctx, common.GetTenantFromContext(ctx),
		utils.IfNotNilString(previousEmail),
		commonservice.EmailFields{
			Email:     input.Email,
			Primary:   utils.IfNotNilBool(input.Primary),
			Source:    neo4jentity.DataSourceOpenline,
			AppSource: constants.AppSourceCustomerOsApi,
		}, commonservice.LinkWith{
			Type: commonModel.ORGANIZATION,
			Id:   organizationID,
		})
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, err
	}

	if utils.IfNotNilString(emailId) == "" {
		graphql.AddErrorf(ctx, "Failed to merge email %s", input.Email)
		return nil, nil
	}

	emailEntity, err := r.Services.EmailService.GetById(ctx, *emailId)
	if err != nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed to fetch email details %s", input.Email)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntity), nil
}

// EmailValidate is the resolver for the email_Validate field.
func (r *mutationResolver) EmailValidate(ctx context.Context, id string) (*model.ActionResponse, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "MutationResolver.EmailValidate", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.emailID", id))

	emailNode, err := r.Services.EmailService.GetById(ctx, id)
	if err != nil {
		tracing.TraceErr(span, pkgerrors.Wrap(err, "Failed to get email by id"))
		graphql.AddErrorf(ctx, "Email not found by id: %s", id)
		return &model.ActionResponse{Accepted: false}, nil
	}
	if emailNode == nil || emailNode.RawEmail == "" {
		graphql.AddErrorf(ctx, "Email address is empty")
		return &model.ActionResponse{Accepted: false}, nil
	}

	ctx = commonTracing.InjectSpanContextIntoGrpcMetadata(ctx, span)
	_, err = utils.CallEventsPlatformGRPCWithRetry[*emailpb.EmailIdGrpcResponse](func() (*emailpb.EmailIdGrpcResponse, error) {
		return r.Clients.EmailClient.RequestEmailValidation(ctx, &emailpb.RequestEmailValidationGrpcRequest{
			Tenant:         common.GetTenantFromContext(ctx),
			Id:             id,
			LoggedInUserId: common.GetUserIdFromContext(ctx),
			AppSource:      constants.AppSourceCustomerOsApi,
		})
	})
	if err != nil {
		tracing.TraceErr(span, pkgerrors.Wrap(err, "Error requesting email validation"))
		r.log.Errorf("Error requesting email validation for %s: %s", id, err.Error())
		graphql.AddErrorf(ctx, "Error requesting email validation for %s", id)
		return &model.ActionResponse{Accepted: false}, nil
	}

	return &model.ActionResponse{Accepted: true}, nil
}

// Email is the resolver for the email field.
func (r *queryResolver) Email(ctx context.Context, id string) (*model.Email, error) {
	ctx, span := tracing.StartGraphQLTracerSpan(ctx, "QueryResolver.Email", graphql.GetOperationContext(ctx))
	defer span.Finish()
	tracing.SetDefaultResolverSpanTags(ctx, span)
	span.LogFields(log.String("request.emailID", id))

	emailEntity, err := r.Services.EmailService.GetById(ctx, id)
	if err != nil || emailEntity == nil {
		tracing.TraceErr(span, err)
		graphql.AddErrorf(ctx, "Failed getting email with id %s", id)
		return nil, nil
	}
	return mapper.MapEntityToEmail(emailEntity), nil
}

// Email returns generated.EmailResolver implementation.
func (r *Resolver) Email() generated.EmailResolver { return &emailResolver{r} }

type emailResolver struct{ *Resolver }
