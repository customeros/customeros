extend type Query {
    flows: [Flow!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_mailboxes: [String!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_emailVariables: [EmailVariableEntity!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    flow_Merge(input: FlowMergeInput!): Flow! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_ChangeStatus(id: ID!, status: FlowStatus!): Flow! @hasRole(roles: [ADMIN, USER]) @hasTenant

    flowContact_Add(flowId: ID!, contactId: ID!): FlowContact! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flowContact_AddBulk(flowId: ID!, contactId: [ID!]!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flowContact_Delete(id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flowContact_DeleteBulk(id: [ID!]!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    #low priority to implement
    flowSender_Merge(flowActionId: ID!, input: FlowActionSenderMergeInput!): FlowActionSender! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flowSender_Delete(id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

#Flow
type Flow implements MetadataInterface {
    metadata:           Metadata!
    name:               String!
    description:        String!

    nodes: String!
    edges: String!

    actions: [FlowAction!]! @goField(forceResolver: true)

    status: FlowStatus!
    contacts: [FlowContact!]! @goField(forceResolver: true)

    statistics: FlowStatistics!
}

type FlowStatistics {
    total: Int64!
    pending: Int64!
    completed: Int64!
    goalAchieved: Int64!
}

input FlowMergeInput {
    id: ID
    name: String!

    nodes: String!
    edges: String!
}

enum FlowStatus {
    INACTIVE
    ACTIVE
    PAUSED
    ARCHIVED
}

type FlowAction implements MetadataInterface {
    metadata:               Metadata!

    json: String!

    senders: [FlowActionSender!]! @goField(forceResolver: true)
}

type FlowContact implements MetadataInterface {
    metadata:               Metadata!

    contact: Contact! @goField(forceResolver: true)

    status: FlowParticipantStatus!

    scheduledAction: String
    scheduledAt: Time
}

type FlowActionSender implements MetadataInterface {
    metadata: Metadata!

    mailbox:    String
    user: User @goField(forceResolver: true)
}

input FlowActionSenderMergeInput {
    id: ID

    #email action type
    mailbox: String

    #linkedin action type
    userId: ID
}

input FlowActionInputData {
    wait: FlowActionInputDataWait

    email_new: FlowActionInputDataEmail
    email_reply: FlowActionInputDataEmail

    linkedin_connection_request: FlowActionInputDataLinkedinConnectionRequest
    linkedin_message: FlowActionInputDataLinkedinMessage
}
input FlowActionInputDataWait {
    minutes: Int64!
}

input FlowActionInputDataEmail {
    replyToId: String
    subject: String!
    bodyTemplate: String!
}

input FlowActionInputDataLinkedinConnectionRequest {
    messageTemplate: String!
}

input FlowActionInputDataLinkedinMessage {
    messageTemplate: String!
}

enum FlowActionStatus {
    INACTIVE
    ACTIVE
    PAUSED
    ARCHIVED
}

enum FlowParticipantStatus {
    PENDING
    SCHEDULED
    IN_PROGRESS
    PAUSED
    COMPLETED
    GOAL_ACHIEVED
}

type EmailVariableEntity {
    type: EmailVariableEntityType!
    variables: [EmailVariableName!]!
}

enum EmailVariableEntityType {
    CONTACT
}

enum EmailVariableName {
    CONTACT_FIRST_NAME
    CONTACT_LAST_NAME
    CONTACT_FULL_NAME
    CONTACT_EMAIL
    ORGANIZATION_NAME
}
