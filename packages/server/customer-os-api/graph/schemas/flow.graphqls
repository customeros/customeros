extend type Query {
    flows: [Flow!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
    sequences: [FlowSequence!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
    mailboxes: [Mailbox!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    flow_ChangeStatus(id: ID!, status: FlowStatus!): Flow! @hasRole(roles: [ADMIN, USER]) @hasTenant

    flow_sequence_Create(input: FlowSequenceCreateInput!): FlowSequence! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_sequence_Update(input: FlowSequenceUpdateInput!): FlowSequence! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_sequence_ChangeStatus(id: ID!, status: FlowSequenceStatus!): FlowSequence! @hasRole(roles: [ADMIN, USER]) @hasTenant

    flow_sequence_step_Merge(sequenceId: ID!, input: FlowSequenceStepMergeInput!): FlowSequenceStep! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_sequence_step_ChangeStatus(id: ID!, status: FlowSequenceStepStatus!): FlowSequenceStep! @hasRole(roles: [ADMIN, USER]) @hasTenant

    flow_sequence_LinkContact(sequenceId: ID!, contactId: ID!, emailId: ID!): FlowSequenceContact! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_sequence_UnlinkContact(sequenceId: ID!, contactId: ID!, emailId: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    flow_sequence_LinkSender(sequenceId: ID!, mailbox: String!): FlowSequenceSender! @hasRole(roles: [ADMIN, USER]) @hasTenant
    flow_sequence_UnlinkSender(sequenceId: ID!, mailbox: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

#Flow
type Flow implements MetadataInterface {
    metadata:           Metadata!
    name:               String!
    description:        String!
    status: FlowStatus!
    sequences: [FlowSequence!]! @goField(forceResolver: true)
}

enum FlowStatus {
    INACTIVE
    ACTIVE
    PAUSED
    ARCHIVED
}

#FlowSequence
type FlowSequence implements MetadataInterface {
    metadata:           Metadata!
    name:               String!
    description:        String!
    status: FlowSequenceStatus!
    flow: Flow! @goField(forceResolver: true)
    steps: [FlowSequenceStep!]! @goField(forceResolver: true)
    contacts: [FlowSequenceContact!]! @goField(forceResolver: true)
    senders: [FlowSequenceSender!]! @goField(forceResolver: true)
}

enum FlowSequenceStatus {
    INACTIVE
    ACTIVE
    PAUSED
    ARCHIVED
}

input FlowSequenceCreateInput {
    name: String!
    description: String!
    flowId: ID
    flowName: String
}

input FlowSequenceUpdateInput {
    id: ID!
    name: String!
    description: String!
}

#FlowSequenceContact
type FlowSequenceContact implements MetadataInterface {
    metadata:               Metadata!

    contact: Contact! @goField(forceResolver: true)
    email: Email! @goField(forceResolver: true)
}

#FlowSequenceSender
type FlowSequenceSender implements MetadataInterface {
    metadata: Metadata!
    mailbox:    String!
}

type Mailbox {
    mailbox:    String!
}


#FlowSequenceStep
type FlowSequenceStep implements MetadataInterface {
    metadata: Metadata!

    name: String!
    description: String!
    status: FlowSequenceStepStatus!

    action: FlowSequenceStepAction!
    #actionData: FlowSequenceStepActionData!
}

enum FlowSequenceStepAction {
    WAIT

    EMAIL_NEW
    EMAIL_REPLY

    LINKEDIN_CONNECTION_REQUEST
    LINKEDIN_MESSAGE
}

union FlowSequenceStepActionData = FlowSequenceStepActionDataWait | FlowSequenceStepActionDataEmail | FlowSequenceStepActionLinkedinConnectionRequest | FlowSequenceStepActionLinkedinMessage

type FlowSequenceStepActionDataWait {
    minutes: Int!
}

type FlowSequenceStepActionDataEmail {
    replayTo: String
    subject: String!
    bodyTemplate: String!
}

type FlowSequenceStepActionLinkedinConnectionRequest {
    messageTemplate: String!
}

type FlowSequenceStepActionLinkedinMessage {
    messageTemplate: String!
}

input FlowSequenceStepMergeInput {
    id: ID
    name: String!
    action: FlowSequenceStepAction!
    actionData: FlowSequenceStepInputActionData!
}

input FlowSequenceStepInputActionData {
    wait: FlowSequenceStepInputActionDataWait

    email_new: FlowSequenceStepInputActionDataEmail
    email_reply: FlowSequenceStepInputActionDataEmail

    linkedin_connection_request: FlowSequenceStepInputActionDataLinkedinConnectionRequest
    linkedin_message: FlowSequenceStepInputActionDataLinkedinMessage
}
input FlowSequenceStepInputActionDataWait {
    minutes: Int!
}

input FlowSequenceStepInputActionDataEmail {
    stepId: String
    subject: String!
    bodyTemplate: String!
}

input FlowSequenceStepInputActionDataLinkedinConnectionRequest {
    messageTemplate: String!
}

input FlowSequenceStepInputActionDataLinkedinMessage {
    messageTemplate: String!
}


enum FlowSequenceStepStatus {
    INACTIVE
    ACTIVE
    PAUSED
    ARCHIVED
}