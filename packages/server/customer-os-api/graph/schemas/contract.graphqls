extend type Query {
    contract(id: ID!): Contract! @hasRole(roles: [ADMIN, USER]) @hasTenant
}
extend type Mutation {
    contract_Create(input: ContractInput!): Contract!  @hasRole(roles: [ADMIN, OWNER]) @hasTenant
}

type Contract implements Node {
    id: ID!
    referenceId:   String
    customerOsId: String!
    organizationId: String!
    createdAt:   Time!
    updatedAt:   Time!

    serviceStartedAt:   Time!
    serviceStartedAtTimelineEventId: ID #we need this in order to use the dataloader for the serviceStartedAtTimelineEvent if asked
    serviceStartedAtTimelineEvent: TimelineEvent @goField(forceResolver: true)

    signedAt:   Time!
    name:        String!
    sourceFields: SourceFields!
    renewalCycle: ContractRenewalCycle!
    status: ContractStatus!
    owner: User @goField(forceResolver: true)
    source: DataSource!
    appSource: String!
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)
}

input ContractInput {
    referenceId:   String
    name:          String!
    organizationId: String!
    renewalCycle: ContractRenewalCycle!
    status: ContractStatus!
    appSource:     String
}

enum ContractRenewalCycle {
    NONE
    MONTHLY_RENEWAL
    ANNUAL_RENEWAL
}
enum ContractStatus {
    UNDEFINED
    DRAFT
    LIVE
    ENDED
}