extend type Query {
    contract(id: ID!): Contract! @hasRole(roles: [ADMIN, USER]) @hasTenant
}
extend type Mutation {
    contract_Create(input: ContractInput!): Contract!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    contract_Update(input: ContractUpdateInput!): Contract!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type Contract implements Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    serviceStartedAt:   Time
    signedAt:           Time
    endedAt:            Time
    name:               String!
    renewalCycle:       ContractRenewalCycle!
    renewalPeriods:     Int64
    status:             ContractStatus!
    serviceLineItems:   [ServiceLineItem!] @goField(forceResolver: true)
    opportunities:      [Opportunity!] @goField(forceResolver: true)
    owner:              User @goField(forceResolver: true)
    createdBy:          User @goField(forceResolver: true)
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!
    externalLinks:      [ExternalSystem!]! @goField(forceResolver: true)
    contractUrl:        String
}

input ContractInput {
    organizationId:     ID!
    name:               String
    renewalCycle:       ContractRenewalCycle
    renewalPeriods:     Int64
    appSource:          String
    contractUrl:        String
    serviceStartedAt:   Time
    signedAt:           Time
    externalReference:  ExternalSystemReferenceInput
}

input ContractUpdateInput {
    contractId:         ID!
    name:               String
    contractUrl:        String
    renewalCycle:       ContractRenewalCycle
    renewalPeriods:     Int64
    serviceStartedAt:   Time
    signedAt:           Time
    endedAt:            Time
    appSource:          String
}

enum ContractRenewalCycle {
    NONE
    MONTHLY_RENEWAL
    QUARTERLY_RENEWAL
    ANNUAL_RENEWAL
}

enum ContractStatus {
    UNDEFINED
    DRAFT
    LIVE
    ENDED
}