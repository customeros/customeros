extend type Query {
    """
    Fetch a single contact from customerOS by contact ID.
    """
    contact(

        """
        The unique ID associated with the contact in customerOS.
        **Required.**
        """
        id: ID!) :Contact


    """
    Fetch paginated list of contacts
    Possible values for sort:
    - PREFIX
    - FIRST_NAME
    - LAST_NAME
    - NAME
    - DESCRIPTION
    - CREATED_AT
    """
    contacts(pagination: Pagination, where: Filter, sort: [SortBy!]): ContactsPage!
    contact_ByEmail(email: String!) :Contact!
    contact_ByPhone(e164: String!) :Contact!
}

extend type Mutation {
    contact_Create(input: ContactInput!): Contact!
    contact_CreateForOrganization(input: ContactInput!, organizationId: ID!): Contact!
    customer_contact_Create(input: CustomerContactInput!): CustomerContact!

    contact_Update(input: ContactUpdateInput!): Contact!
    contact_HardDelete(contactId: ID!): Result!
    contact_Archive(contactId: ID!): Result!
    contact_RestoreFromArchive(contactId: ID!): Result!
    contact_Merge(primaryContactId: ID!, mergedContactIds: [ID!]!): Contact!

    contact_AddTag(input: ContactTagInput!): ActionResponse! @hasRole(roles: [ADMIN, USER]) @hasTenant
    contact_RemoveTag(input: ContactTagInput!): ActionResponse! @hasRole(roles: [ADMIN, USER]) @hasTenant

    contact_AddOrganizationById(input: ContactOrganizationInput!): Contact!
    contact_RemoveOrganizationById(input: ContactOrganizationInput!): Contact!

    contact_AddNewLocation(contactId: ID!): Location!
    contact_RemoveLocation(contactId: ID!, locationId: ID!): Contact!

    contact_AddSocial(contactId: ID!, input: SocialInput!): Social! @hasTenant
    contact_RemoveSocial(contactId: ID!, socialId: ID!): ActionResponse! @hasTenant

    contact_FindEmail(contactId: ID!, organizationId: ID!): String!
}

type CustomerContact {
    id: ID!
    email: CustomerEmail!
}

"""
A contact represents an individual in customerOS.
**A `response` object.**
"""
type Contact implements ExtensibleEntity & MetadataInterface & Node {
    metadata: Metadata!
    """
    Deprecated, use metadata instead
    """
    id: ID! @deprecated(reason: "Use `metadata.id` instead")

    """
    Deprecated
    """
    title: String @deprecated(reason: "Use `prefix` instead")

    prefix: String

    """
    The name of the contact in customerOS, alternative for firstName + lastName.
    """
    name: String

    """
    The first name of the contact in customerOS.
    """
    firstName: String

    """
    The last name of the contact in customerOS.
    """
    lastName: String
    description: String
    timezone: String
    profilePhotoUrl: String

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    **Required**
    """
    createdAt: Time!
    updatedAt: Time!

    """
    Deprecated
    """
    label: String @deprecated(reason: "Use `tags` instead")

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String

    tags: [Tag!] @goField(forceResolver: true)

    """
    `organizationName` and `jobTitle` of the contact if it has been associated with an organization.
    **Required.  If no values it returns an empty array.**
    """
    jobRoles: [JobRole!]! @goField(forceResolver: true)

    organizations(pagination: Pagination, where: Filter, sort: [SortBy!]): OrganizationPage! @goField(forceResolver: true)

    """
    All phone numbers associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)

    """
    All email addresses associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    emails: [Email!]! @goField(forceResolver: true)

    """
    All locations associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    locations: [Location!]! @goField(forceResolver: true)
    socials: [Social!]! @goField(forceResolver: true)

    """
    User defined metadata appended to the contact record in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    customFields: [CustomField!]! @goField(forceResolver: true)

    fieldSets: [FieldSet!]! @goField(forceResolver: true)

    """
    Template of the contact in customerOS.
    """
    template: EntityTemplate @goField(forceResolver: true)

    "Contact owner (user)"
    owner: User @goField(forceResolver: true)

    timelineEvents(from: Time, size: Int!, timelineEventTypes: [TimelineEventType!]): [TimelineEvent!]! @goField(forceResolver: true)
    timelineEventsTotalCount(timelineEventTypes: [TimelineEventType!]): Int64! @goField(forceResolver: true)
}

"""
Specifies how many pages of contact information has been returned in the query response.
**A `response` object.**
"""
type ContactsPage implements Pages {

    """
    A contact entity in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    content: [Contact!]!

    """
    Total number of pages in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    Total number of elements in the query response.
    **Required.**
    """
    totalElements: Int64!
}

"""
Create an individual in customerOS.
**A `create` object.**
"""
input ContactInput {

    """
    Deprecated
    """
    templateId: ID  @deprecated(reason: "Not supported")

    "The prefix of the contact."
    prefix: String

    """
    The first name of the contact.
    """
    firstName: String

    """
    The last name of the contact.
    """
    lastName: String
    name: String
    description: String
    timezone: String
    profilePhotoUrl: String

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    """
    createdAt: Time

    """
    Deprecated
    """
    customFields: [CustomFieldInput!] @deprecated(reason: "Not supported in create flow yet")

    """
    Deprecated
    """
    fieldSets: [FieldSetInput!] @deprecated(reason: "Not supported in create flow yet")

    "An email addresses associated with the contact."
    email: EmailInput

    "A phone number associated with the contact."
    phoneNumber: PhoneNumberInput

    """
    Deprecated
    """
    ownerId: ID @deprecated(reason: "Not supported in create flow yet")

    externalReference: ExternalSystemReferenceInput

    appSource: String
    socialUrl: String
}

input CustomerContactInput {

    "The prefix of the contact."
    prefix: String

    """
    The first name of the contact.
    """
    firstName: String

    """
    The last name of the contact.
    """
    lastName: String
    name: String
    description: String
    timezone: String

    "An email addresses associted with the contact."
    email: EmailInput

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    """
    createdAt: Time

    appSource: String
}

"""
Updates data fields associated with an existing customer record in customerOS.
**An `update` object.**
"""
input ContactUpdateInput {
    id:                 ID!
    patch:              Boolean
    firstName:          String
    lastName:           String
    name:               String
    prefix:             String
    description:        String
    timezone:           String
    profilePhotoUrl:    String
}

input ContactOrganizationInput {
    contactId: ID!
    organizationId: ID!
}

input ContactTagInput {
    contactId: ID!
    tag: TagIdOrNameInput!
}

"""
The honorific title of an individual.
**A `response` object.**
"""
# Deprecated, This is a list of titles that are not enforced by the system. Client can use any title they want.
enum PersonTitle {

    "For men, regardless of marital status."
    MR

    "For married women."
    MRS

    "For girls, unmarried women, and married women who continue to use their maiden name."
    MISS

    "For women, regardless of marital status, or when marital status is unknown."
    MS

    "For the holder of a doctoral degree."
    DR
}