extend type Query {
    """
    Fetch a single contact from customerOS by contact ID.
    """
    contact(

        """
        The unique ID associated with the contact in customerOS.
        **Required.**
        """
        id: ID!) :Contact


    """
    Fetch paginated list of contacts
    Possible values for sort:
    - TITLE
    - FIRST_NAME
    - LAST_NAME
    - LABEL
    - CREATED_AT
    """
    contacts(pagination: Pagination, where: Filter, sort: [SortBy!]): ContactsPage!
    contact_ByEmail(email: String!) :Contact!
    contact_ByPhone(e164: String!) :Contact!
}

extend type Mutation {
    contact_Create(input: ContactInput!): Contact!
    contact_Update(input: ContactUpdateInput!): Contact!
    contact_HardDelete(contactId: ID!): Result!
    contact_SoftDelete(contactId: ID!): Result!

    contact_AddTagById(input: ContactTagInput): Contact!
    contact_RemoveTagById(input: ContactTagInput): Contact!
}

"""
A contact represents an individual in customerOS.
**A `response` object.**
"""
type Contact implements ExtensibleEntity & Node {
    """
    The unique ID associated with the contact in customerOS.
    **Required**
    """
    id: ID!

    "The title associate with the contact in customerOS."
    title: PersonTitle

    """
    The first name of the contact in customerOS.
    """
    firstName: String

    """
    The last name of the contact in customerOS.
    """
    lastName: String

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    **Required**
    """
    createdAt: Time!

    "A user-defined label applied against a contact in customerOS."
    label: String

    source: DataSource!

    tags: [Tag!] @goField(forceResolver: true)

    """
    `organizationName` and `jobTitle` of the contact if it has been associated with an organization.
    **Required.  If no values it returns an empty array.**
    """
    jobRoles: [JobRole!]! @goField(forceResolver: true)

    organizations(pagination: Pagination, where: Filter, sort: [SortBy!]): OrganizationPage! @goField(forceResolver: true)

    """
    Identifies any contact groups the contact is associated with.
    **Required.  If no values it returns an empty array.**
    """
    groups: [ContactGroup!]! @goField(forceResolver: true)

    """
    All phone numbers associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)

    """
    All email addresses associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    emails: [Email!]! @goField(forceResolver: true)

    """
    All locations associated with a contact in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    locations: [Location!]! @goField(forceResolver: true)

    """
    User defined metadata appended to the contact record in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    customFields: [CustomField!]! @goField(forceResolver: true)

    fieldSets: [FieldSet!]! @goField(forceResolver: true)

    """
    Template of the contact in customerOS.
    """
    template: EntityTemplate @goField(forceResolver: true)

    "Contact owner (user)"
    owner: User @goField(forceResolver: true)

    "Contact notes"
    notes(pagination: Pagination): NotePage! @goField(forceResolver: true)

    conversations(pagination: Pagination, sort: [SortBy!]): ConversationPage! @goField(forceResolver: true)

    actions(from: Time!, to: Time!, actionTypes: [ActionType!]): [Action!]! @goField(forceResolver: true)
}

"""
Specifies how many pages of contact information has been returned in the query response.
**A `response` object.**
"""
type ContactsPage implements Pages {

    """
    A contact entity in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    content: [Contact!]!

    """
    Total number of pages in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    Total number of elements in the query response.
    **Required.**
    """
    totalElements: Int64!
}

"""
Create an individual in customerOS.
**A `create` object.**
"""
input ContactInput {

    "The unique ID associated with the template of the contact in customerOS."
    templateId: ID

    "The title of the contact."
    title: PersonTitle

    """
    The first name of the contact.
    """
    firstName: String

    """
    The last name of the contact.
    """
    lastName: String

    "A user-defined label attached to contact."
    label: String

    """
    An ISO8601 timestamp recording when the contact was created in customerOS.
    """
    createdAt: Time

    """
    User defined metadata appended to contact.
    **Required.**
    """
    customFields: [CustomFieldInput!]

    fieldSets: [FieldSetInput!]

    "An email addresses associted with the contact."
    email: EmailInput

    "A phone number associated with the contact."
    phoneNumber: PhoneNumberInput

    "Id of the contact owner (user)"
    ownerId: ID

    externalReference: ExternalSystemReferenceInput
}

"""
Updates data fields associated with an existing customer record in customerOS.
**An `update` object.**
"""
input ContactUpdateInput {

    """
    The unique ID associated with the contact in customerOS.
    **Required.**
    """
    id: ID!

    "The title associate with the contact in customerOS."
    title: PersonTitle

    """
    The first name of the contact in customerOS.
    """
    firstName: String

    """
    The last name of the contact in customerOS.
    """
    lastName: String

    "A user-defined label applied against a contact in customerOS."
    label: String

    "Id of the contact owner (user)"
    ownerId: ID
}

input ContactTagInput {
    contactId: ID!
    tagId: ID!
}

"""
The honorific title of an individual.
**A `response` object.**
"""
enum PersonTitle {

    "For men, regardless of marital status."
    MR

    "For married women."
    MRS

    "For girls, unmarried women, and married women who continue to use their maiden name."
    MISS

    "For women, regardless of marital status, or when marital status is unknown."
    MS

    "For the holder of a doctoral degree."
    DR
}