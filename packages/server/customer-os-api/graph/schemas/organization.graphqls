extend type Query {
    organizations(pagination: Pagination, where: Filter, sort: [SortBy!]): OrganizationPage! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization(id: ID!): Organization @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_DistinctOwners: [User!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    organization_Create(input: OrganizationInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Update(input: OrganizationUpdateInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Delete(id: ID!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Merge(primaryOrganizationId: ID!, mergedOrganizationIds: [ID!]!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddSubsidiary(input: LinkOrganizationsInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_RemoveSubsidiary(organizationId: ID!, subsidiaryId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddNewLocation(organizationId: ID!): Location! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddSocial(organizationId: ID!, input: SocialInput!): Social! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_SetOwner(organizationId: ID!, userId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_UnsetOwner(organizationId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddRelationship(organizationId: ID!, relationship: OrganizationRelationship!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_RemoveRelationship(organizationId: ID!, relationship: OrganizationRelationship!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_SetRelationshipStage(organizationId: ID!, relationship: OrganizationRelationship!, stage: String!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_RemoveRelationshipStage(organizationId: ID!, relationship: OrganizationRelationship!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type LinkedOrganization {
    organization: Organization!
    type: String
}

type Organization implements Node {
    id: ID!
    createdAt:   Time!
    updatedAt:   Time!
    name:        String!
    description: String
    domain:      String @deprecated(reason: "Deprecated in favor of domains")
    domains:     [String!]! @goField(forceResolver: true)
    website:     String
    industry:    String
    isPublic:    Boolean
    market:      Market
    employees:   Int64
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
    locations: [Location!]! @goField(forceResolver: true)
    socials: [Social!]! @goField(forceResolver: true)
    contacts(pagination: Pagination, where: Filter, sort: [SortBy!]): ContactsPage! @goField(forceResolver: true)
    jobRoles: [JobRole!]! @goField(forceResolver: true)
    notes(pagination: Pagination): NotePage! @goField(forceResolver: true)
    tags: [Tag!] @goField(forceResolver: true)
    emails: [Email!]! @goField(forceResolver: true)
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)
    subsidiaries: [LinkedOrganization!]! @goField(forceResolver: true)
    subsidiaryOf: [LinkedOrganization!]! @goField(forceResolver: true)
    customFields: [CustomField!]! @goField(forceResolver: true)
    fieldSets: [FieldSet!]! @goField(forceResolver: true)
    entityTemplate: EntityTemplate @goField(forceResolver: true)
    timelineEvents(from: Time, size: Int!, timelineEventTypes: [TimelineEventType!]): [TimelineEvent!]! @goField(forceResolver: true)
    timelineEventsTotalCount(timelineEventTypes: [TimelineEventType!]): Int64! @goField(forceResolver: true)
    owner: User @goField(forceResolver: true)
    relationships: [OrganizationRelationship!]! @goField(forceResolver: true)
    relationshipStages: [OrganizationRelationshipStage!]! @goField(forceResolver: true)
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)

    lastTouchPointAt: Time
    lastTouchPointTimelineEventId: ID #we need this in order to use the dataloader for the lastTouchPointTimelineEvent if asked
    lastTouchPointTimelineEvent: TimelineEvent @goField(forceResolver: true)

    issueSummaryByStatus: [IssueSummaryByStatus!]! @goField(forceResolver: true)
}

type OrganizationPage implements Pages {
    content: [Organization!]!
    totalPages: Int!
    totalElements: Int64!
}

input OrganizationInput {
    """
    The name of the organization.
    **Required.**
    """
    name: String!
    description: String
    domain:      String @deprecated(reason: "Deprecated in favor of domains")
    domains:     [String!]
    website:     String
    industry:    String
    isPublic:    Boolean
    customFields: [CustomFieldInput!]
    fieldSets: [FieldSetInput!]
    templateId: ID
    market:      Market
    employees:   Int64
    appSource: String
}

input OrganizationUpdateInput {
    id: ID!
    name: String!
    description: String
    domain:      String @deprecated(reason: "Deprecated in favor of domains")
    domains:     [String!]
    website:     String
    industry:    String
    isPublic:    Boolean
    market:      Market
    employees:   Int64
}

input LinkOrganizationsInput {
    organizationId: ID!
    subOrganizationId: ID!
    type: String
}

enum Market {
    B2B
    B2C
    B2B2C
}

enum OrganizationRelationship {
    CUSTOMER
    DISTRIBUTOR
    PARTNER
    LICENSING_PARTNER
    FRANCHISEE
    FRANCHISOR
    AFFILIATE
    RESELLER
    INFLUENCER_OR_CONTENT_CREATOR
    MEDIA_PARTNER

    INVESTOR
    MERGER_OR_ACQUISITION_TARGET
    PARENT_COMPANY
    SUBSIDIARY
    JOINT_VENTURE
    SPONSOR

    SUPPLIER
    VENDOR
    CONTRACT_MANUFACTURER
    ORIGINAL_EQUIPMENT_MANUFACTURER
    ORIGINAL_DESIGN_MANUFACTURER
    PRIVATE_LABEL_MANUFACTURER
    LOGISTICS_PARTNER

    CONSULTANT
    SERVICE_PROVIDER
    OUTSOURCING_PROVIDER
    INSOURCING_PARTNER
    TECHNOLOGY_PROVIDER
    DATA_PROVIDER
    CERTIFICATION_BODY
    STANDARDS_ORGANIZATION
    INDUSTRY_ANALYST
    REAL_ESTATE_PARTNER
    TALENT_ACQUISITION_PARTNER
    PROFESSIONAL_EMPLOYER_ORGANIZATION

    RESEARCH_COLLABORATOR
    REGULATORY_BODY
    TRADE_ASSOCIATION_MEMBER

    COMPETITOR
}

type OrganizationRelationshipStage {
    relationship: OrganizationRelationship!
    stage: String
}