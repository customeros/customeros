extend type Query {
    organizations(pagination: Pagination, where: Filter, sort: [SortBy!]): OrganizationPage! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization(id: ID!): Organization @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_DistinctOwners: [User!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    organization_Create(input: OrganizationInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Update(input: OrganizationUpdateInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Archive(id: ID!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_ArchiveAll(ids: [ID!]!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Hide(id: ID!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_HideAll(ids: [ID!]!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Show(id: ID!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_ShowAll(ids: [ID!]!): Result @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_Merge(primaryOrganizationId: ID!, mergedOrganizationIds: [ID!]!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddSubsidiary(input: LinkOrganizationsInput!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_RemoveSubsidiary(organizationId: ID!, subsidiaryId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddNewLocation(organizationId: ID!): Location! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_AddSocial(organizationId: ID!, input: SocialInput!): Social! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_SetOwner(organizationId: ID!, userId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
    organization_UnsetOwner(organizationId: ID!): Organization! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type LinkedOrganization {
    organization: Organization!
    type: String
}

type Organization implements Node {
    id: ID!
    customerOsId: String!
    referenceId: String
    createdAt:   Time!
    updatedAt:   Time!
    name:        String!
    description: String
    note:        String
    domains:     [String!]! @goField(forceResolver: true)
    website:     String
    industry:    String
    subIndustry: String
    industryGroup: String
    targetAudience: String
    valueProposition: String
    isPublic:    Boolean
    isCustomer:  Boolean
    market:      Market
    employees:   Int64
    yearFounded: Int64
    headquarters: String
    employeeGrowthRate: String
    logoUrl:      String
    lastFundingRound: FundingRound
    lastFundingAmount: String
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
    locations: [Location!]! @goField(forceResolver: true)
    socials: [Social!]! @goField(forceResolver: true)
    contacts(pagination: Pagination, where: Filter, sort: [SortBy!]): ContactsPage! @goField(forceResolver: true)
    jobRoles: [JobRole!]! @goField(forceResolver: true)
    notes(pagination: Pagination): NotePage! @goField(forceResolver: true)
    tags: [Tag!] @goField(forceResolver: true)
    contracts: [Contract!] @goField(forceResolver: true)
    emails: [Email!]! @goField(forceResolver: true)
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)
    subsidiaries: [LinkedOrganization!]! @goField(forceResolver: true)
    subsidiaryOf: [LinkedOrganization!]! @goField(forceResolver: true)
    suggestedMergeTo: [SuggestedMergeOrganization!]! @goField(forceResolver: true)
    customFields: [CustomField!]! @goField(forceResolver: true)
    fieldSets: [FieldSet!]! @goField(forceResolver: true)
    entityTemplate: EntityTemplate @goField(forceResolver: true)
    timelineEvents(from: Time, size: Int!, timelineEventTypes: [TimelineEventType!]): [TimelineEvent!]! @goField(forceResolver: true)
    timelineEventsTotalCount(timelineEventTypes: [TimelineEventType!]): Int64! @goField(forceResolver: true)
    owner: User @goField(forceResolver: true)
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)

    lastTouchPointAt: Time
    lastTouchPointType: LastTouchpointType
    lastTouchPointTimelineEventId: ID #we need this in order to use the dataloader for the lastTouchPointTimelineEvent if asked
    lastTouchPointTimelineEvent: TimelineEvent @goField(forceResolver: true)

    issueSummaryByStatus: [IssueSummaryByStatus!]! @goField(forceResolver: true)

    accountDetails: OrgAccountDetails
}

type OrgAccountDetails {
    renewalSummary: RenewalSummary
    onboarding: OnboardingDetails
}

type RenewalSummary {
    arrForecast:       Float
    maxArrForecast:    Float
    renewalLikelihood: OpportunityRenewalLikelihood
    nextRenewalDate:   Time
}

type OnboardingDetails {
    status: OnboardingStatus!
    comments: String
    updatedAt: Time
}

type OrganizationPage implements Pages {
    content: [Organization!]!
    totalPages: Int!
    totalElements: Int64!
    totalAvailable: Int64!
}

input OrganizationInput {
    """
    The name of the organization.
    **Required.**
    """
    referenceId:   String
    name:          String
    description:   String
    note:          String
    domains:       [String!]
    website:       String
    industry:      String
    subIndustry:   String
    industryGroup: String
    isPublic:      Boolean
    isCustomer:    Boolean
    customFields:  [CustomFieldInput!]
    fieldSets:     [FieldSetInput!] @deprecated
    templateId:    ID @deprecated
    market:        Market
    logoUrl:            String
    employeeGrowthRate: String
    headquarters:       String
    yearFounded:        Int64
    employees:     Int64
    appSource:     String
}

input OrganizationUpdateInput {
    id: ID!
    referenceId: String
    """
    Set to true when partial update is needed. Empty or missing fields will not be ignored.
    """
    patch:              Boolean
    name:               String
    description:        String
    note:               String
    domains:            [String!] @deprecated(reason: "to be implemented in separate mutation, add and remove by domain")
    website:            String
    industry:           String
    subIndustry:        String
    industryGroup:      String
    isPublic:           Boolean
    isCustomer:         Boolean
    market:             Market
    employees:          Int64
    targetAudience:     String
    valueProposition:   String
    lastFundingRound:   FundingRound
    lastFundingAmount:  String
    logoUrl:            String
    employeeGrowthRate: String
    headquarters:       String
    yearFounded:        Int64
}

input LinkOrganizationsInput {
    organizationId: ID!
    subOrganizationId: ID!
    type: String
}

type SuggestedMergeOrganization {
    organization: Organization!
    confidence: Float
    suggestedAt: Time
    suggestedBy: String
}

enum Market {
    B2B
    B2C
    MARKETPLACE
}

enum FundingRound {
    PRE_SEED
    SEED
    SERIES_A
    SERIES_B
    SERIES_C
    SERIES_D
    SERIES_E
    SERIES_F
    IPO
    FRIENDS_AND_FAMILY
    ANGEL
    BRIDGE
}

enum OnboardingStatus {
    NOT_APPLICABLE
    NOT_STARTED
    ON_TRACK
    LATE
    STUCK
    DONE
    SUCCESSFUL
}

enum LastTouchpointType {
    PAGE_VIEW
    INTERACTION_SESSION
    NOTE
    INTERACTION_EVENT_EMAIL_SENT
    INTERACTION_EVENT_PHONE_CALL
    INTERACTION_EVENT_CHAT
    MEETING
    ANALYSIS
    ACTION_CREATED
    ACTION
    LOG_ENTRY
    ISSUE_CREATED
    ISSUE_UPDATED
}