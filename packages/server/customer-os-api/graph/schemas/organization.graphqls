extend type Query {
    organizations(pagination: Pagination, where: Filter, sort: [SortBy!]): OrganizationPage!
    organization(id: ID!): Organization
}

extend type Mutation {
    organization_Create(input: OrganizationInput!): Organization!
    organization_Update(id: ID!, input: OrganizationInput!): Organization!
    organization_Delete(id: ID!): Result
}

type Organization implements Node {
    id: ID!
    name: String!
    description: String
    domain:      String
    website:     String
    industry:    String
    isPublic:    Boolean
    createdAt:   Time!
    readonly:    Boolean

    """
    All addresses associated with an organization in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    addresses: [Address!]! @goField(forceResolver: true)
}

type OrganizationPage implements Pages {
    content: [Organization!]!
    totalPages: Int!
    totalElements: Int64!
}

input OrganizationInput {
    """
    The name of the organization associated with a Contact.
    **Required.**
    """
    name: String!
    description: String
    domain:      String
    website:     String
    industry:    String
    isPublic:    Boolean
}