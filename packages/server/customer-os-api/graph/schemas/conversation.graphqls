extend type Mutation {
    conversation_Create(input: ConversationInput!): Conversation!
    conversation_Update(input: ConversationUpdateInput!): Conversation!
    conversation_Close(conversationId: ID!): Conversation!
    conversationAddMessage(input: MessageInput!): Message!
}

type Conversation implements Node {
    id: ID!
    startedAt: Time!
    endedAt: Time
    status: ConversationStatus!
    channel: String
    messageCount: Int64!
    contacts: [Contact!] @goField(forceResolver: true)
    users: [User!] @goField(forceResolver: true)
}

input ConversationInput {
    id: ID
    startedAt: Time
    contactIds: [ID!]
    userIds: [ID!]
    status: ConversationStatus! = ACTIVE
    channel: String
}

input ConversationUpdateInput {
    id: ID!
    contactIds: [ID!]
    userIds: [ID!]
    status: ConversationStatus
    channel: String
    skipMessageCountIncrement: Boolean! = false
}

type ConversationPage implements Pages {
    content: [Conversation!]!
    totalPages: Int!
    totalElements: Int64!
}

enum ConversationStatus {
    ACTIVE
    CLOSED
}

type Message implements Node {
    id: ID!
    channel: MessageChannel!
    startedAt: Time!
    conversationId: ID!
}

input MessageInput {
    id: ID!
    conversationId: ID!
    channel: MessageChannel!
    startedAt: Time
}

enum MessageChannel {
    VOICE
    MAIL
    CHAT
    WHATSAPP
    FACEBOOK
    TWITTER
}