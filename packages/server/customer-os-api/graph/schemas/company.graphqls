extend type Query {
    companies(pagination: Pagination, where: Filter, sort: [SortBy!]): CompanyPage!
    company(id: ID!): Company
}

extend type Mutation {
    company_Create(input: CompanyInput!): Company!
    company_Update(id: ID!, input: CompanyInput!): Company!
    company_Delete(id: ID!): Result
}

type Company implements Node {
    id: ID!
    name: String!
    description: String
    domain:      String
    website:     String
    industry:    String
    isPublic:    Boolean
    createdAt:   Time!
    readonly:    Boolean

    """
    All addresses associated with a company in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    addresses: [Address!]! @goField(forceResolver: true)
}

type CompanyPage implements Pages {
    content: [Company!]!
    totalPages: Int!
    totalElements: Int64!
}

input CompanyInput {
    """
    The name of the company associated with a Contact.
    **Required.**
    """
    name: String!
    description: String
    domain:      String
    website:     String
    industry:    String
    isPublic:    Boolean
}