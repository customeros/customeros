extend type Query {
    logEntry(id : ID!): LogEntry! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    logEntry_CreateForOrganization(organizationId : ID!, input: LogEntryInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_Update(id: ID!, input: LogEntryUpdateInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_AddTag(id: ID!, input: TagIdOrNameInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_RemoveTag(id: ID!, input: TagIdOrNameInput!): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
    logEntry_ResetTags(id: ID!, input: [TagIdOrNameInput!]): ID! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type LogEntry {
    id: ID!
    content: String
    contentType: String
    createdAt: Time!
    updatedAt: Time!
    startedAt: Time!
    createdBy: User @goField(forceResolver: true)
    tags: [Tag!]! @goField(forceResolver: true)
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
    externalLinks: [ExternalSystem!]! @goField(forceResolver: true)
}

input LogEntryInput {
    content: String
    contentType: String
    tags: [TagIdOrNameInput!]
    startedAt: Time
    appSource: String
}

input LogEntryUpdateInput {
    content: String
    contentType: String
    startedAt: Time
}