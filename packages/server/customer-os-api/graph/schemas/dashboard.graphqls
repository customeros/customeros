extend type Query {
    """
    sort.By available options: ORGANIZATION, IS_CUSTOMER, DOMAIN, LOCATION, OWNER, LAST_TOUCHPOINT, RENEWAL_LIKELIHOOD, FORECAST_ARR, RENEWAL_DATE, ONBOARDING_STATUS
    """
    dashboardView_Organizations(pagination: Pagination!, where: Filter, sort: SortBy): OrganizationPage

    dashboard_CustomerMap: [DashboardCustomerMap!]
    dashboard_MRRPerCustomer(period: DashboardPeriodInput): DashboardMRRPerCustomer
    dashboard_GrossRevenueRetention(period: DashboardPeriodInput): DashboardGrossRevenueRetention
    dashboard_ARRBreakdown(period: DashboardPeriodInput): DashboardARRBreakdown
    dashboard_RevenueAtRisk(period: DashboardPeriodInput): DashboardRevenueAtRisk
    dashboard_RetentionRate(period: DashboardPeriodInput): DashboardRetentionRate
    dashboard_NewCustomers(period: DashboardPeriodInput): DashboardNewCustomers
    dashboard_TimeToOnboard(period: DashboardPeriodInput): DashboardTimeToOnboard
}

input DashboardPeriodInput {
    start: Time!
    end: Time!
}

type DashboardCustomerMap {
    organizationId: ID!
    organization: Organization! @goField(forceResolver: true)
    state: DashboardCustomerMapState!
    arr: Float!
    contractSignedDate: Time!
}

type DashboardMRRPerCustomer {
    mrrPerCustomer: Float!
    increasePercentage: String!
    perMonth: [DashboardMRRPerCustomerPerMonth]!
}

type DashboardMRRPerCustomerPerMonth {
    year: Int!
    month: Int!
    value: Float!
}

type DashboardGrossRevenueRetention {
    grossRevenueRetention: Float!
    increasePercentage: String!
    perMonth: [DashboardGrossRevenueRetentionPerMonth]!
}
type DashboardGrossRevenueRetentionPerMonth {
    month: Int!
    percentage: Float!
}

type DashboardARRBreakdown {
    arrBreakdown: Float!
    increasePercentage: String!
    perMonth: [DashboardARRBreakdownPerMonth]!
}
type DashboardARRBreakdownPerMonth {
    year: Int!
    month: Int!
    newlyContracted: Float!
    renewals: Float!
    upsells: Float!
    downgrades: Float!
    cancellations: Float!
    churned: Float!
}

type DashboardRevenueAtRisk {
    highConfidence: Float!
    atRisk: Float!
}

type DashboardRetentionRate {
    retentionRate: Float!
    increasePercentage: String!
    perMonth: [DashboardRetentionRatePerMonth]!
}
type DashboardRetentionRatePerMonth {
    year: Int!
    month: Int!
    renewCount: Int!
    churnCount: Int!
}

type DashboardNewCustomers {
    thisMonthCount: Int!
    thisMonthIncreasePercentage: String!
    perMonth: [DashboardNewCustomersPerMonth]!
}
type DashboardNewCustomersPerMonth {
    year: Int!
    month: Int!
    count: Int!
}

enum DashboardCustomerMapState {
    OK
    AT_RISK
    CHURNED
}

type DashboardTimeToOnboard {
    timeToOnboard: Float
    increasePercentage: Float
    perMonth: [DashboardTimeToOnboardPerMonth!]!
}

type DashboardTimeToOnboardPerMonth {
    year: Int!
    month: Int!
    value: Float!
}