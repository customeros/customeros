extend type Query {
    invoice(id: ID!): Invoice!
    invoices(pagination: Pagination, where: Filter, sort: [SortBy!], organizationId: ID): InvoicesPage!
}

extend type Mutation {
    invoice_NextDryRunForContract(contractId: ID!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
    invoice_Simulate(input: InvoiceSimulateInput!): ID!  @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type InvoicesPage implements Pages {
    content: [Invoice!]!
    totalPages: Int!
    totalElements: Int64!
}

type Invoice implements SourceFields & Node {
    id:                 ID!
    createdAt:          Time!
    updatedAt:          Time!
    source:             DataSource!
    sourceOfTruth:      DataSource!
    appSource:          String!

    dryRun:             Boolean!
    number:             String!
    periodStartDate:    Time!
    periodEndDate:      Time!
    dueDate:            Time!
    amount:             Float!
    vat:                Float!
    totalAmount:        Float!
    currency:           String!
    repositoryFileId:   String!
    invoiceLines:       [InvoiceLine!]! @goField(forceResolver: true)
    status:             InvoiceStatus
    note:               String
}

type InvoiceLine implements Node {
    id:                 ID!
    createdAt:          Time!

    name:               String!
    price:              Float!
    quantity:           Int!

    amount:             Float!
    vat:                Float!
    totalAmount:        Float!
}

input InvoiceSimulateInput {
    contractId:         ID!
    periodStartDate:    Time
    periodEndDate:      Time
    invoiceLines:       [InvoiceLineInput!]!
}
input InvoiceLineInput {
    serviceLineItemId:  ID
    name:               String!
    billed:             BilledType!
    price:              Float!
    quantity:           Int!
}

enum InvoiceStatus {
    DRAFT
    DUE
    PAID
}