input PersonInput {
    identityId: String
    email: String!
    provider: String!
    appSource: String
}

input PersonUpdate {
    identityId: String
    appSource: String
}

type PersonUser {
    user: User!
    default: Boolean!
    tenant: String!
}

type Person {
    id: ID!
    identityId: String
    email: String!
    users: [PersonUser!]! @goField(forceResolver: true)
    provider: String!
    createdAt: Time!
    updatedAt: Time!
    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

extend type Query {
    person_ByEmailProvider(email: String!, provider: String!) :Person! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER, OWNER, USER])
    person_GetUsers:[PersonUser!]! @hasRole(roles: [USER])
}

extend type Mutation {
    person_Merge(input: PersonInput!): Person! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER, OWNER])
    person_Update(id: ID!, update: PersonUpdate!): Person! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER, OWNER])
    person_SetDefaultUser(id: ID!, userId: ID!): Person! @hasRole(roles: [ADMIN, CUSTOMER_OS_PLATFORM_OWNER, OWNER, USER])
}