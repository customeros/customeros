extend type Query {
    email(id: ID!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    emailMergeToContact(contactId : ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailUpdateInContact(contactId : ID!, input: EmailUpdateInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromContact(contactId : ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromContactById(contactId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailMergeToUser(userId : ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailUpdateInUser(userId : ID!, input: EmailUpdateInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromUser(userId : ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromUserById(userId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailMergeToOrganization(organizationId : ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailUpdateInOrganization(organizationId : ID!, input: EmailUpdateInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromOrganization(organizationId : ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromOrganizationById(organizationId : ID!, id: ID!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailDelete(id: ID!): Result!
}

type CustomerEmail {
    id: ID!
}

"""
Describes an email address associated with a `Contact` in customerOS.
**A `return` object.**
"""
type Email {

    """
    The unique ID associated with the contact in customerOS.
    **Required**
    """
    id: ID!

    """
    An email address assocaited with the contact in customerOS.
    """
    email: String
    rawEmail: String
    emailValidationDetails: EmailValidationDetails!

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean!

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!

    createdAt: Time!
    updatedAt: Time!

    users: [User!]! @goField(forceResolver: true)
    contacts: [Contact!]! @goField(forceResolver: true)
    organizations: [Organization!]! @goField(forceResolver: true)
}

type EmailValidationDetails {
    validated: Boolean
    isReachable: String
    isValidSyntax: Boolean
    canConnectSmtp: Boolean
    acceptsMail: Boolean
    hasFullInbox: Boolean
    isCatchAll: Boolean
    isDeliverable: Boolean
    isDisabled: Boolean
    error: String
}

"""
Describes an email address associated with a `Contact` in customerOS.
**A `create` object.**
"""
input EmailInput {

    """
    An email address associated with the contact in customerOS.
    **Required.**
    """
    email: String!

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean

    appSource: String
}

"""
Describes an email address associated with a `Contact` in customerOS.
**An `update` object.**
"""
input EmailUpdateInput {

    """
    An email address assocaited with the contact in customerOS.
    **Required.**
    """
    id: ID!

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean

    email: String
}


"""
Describes the type of email address (WORK, PERSONAL, etc).
**A `return` object.
"""
enum EmailLabel {
    MAIN
    WORK
    PERSONAL
    OTHER
}
