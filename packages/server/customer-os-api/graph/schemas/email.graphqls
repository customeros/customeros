extend type Query {
    email(id: ID!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    emailMergeToContact(contactId : ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromContact(contactId : ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailReplaceForContact(contactId : ID!, previousEmail: String, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailMergeToUser(userId: ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromUser(userId: ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailReplaceForUser(userId: ID!, previousEmail: String, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant

    emailMergeToOrganization(organizationId: ID!, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailRemoveFromOrganization(organizationId: ID!, email: String!): Result! @hasRole(roles: [ADMIN, USER]) @hasTenant
    emailReplaceForOrganization(organizationId: ID!, previousEmail: String, input: EmailInput!): Email! @hasRole(roles: [ADMIN, USER]) @hasTenant

    email_Validate(id: ID!): ActionResponse! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type CustomerEmail {
    id: ID!
}

"""
Describes an email address associated with a `Contact` in customerOS.
**A `return` object.**
"""
type Email {

    """
    The unique ID associated with the contact in customerOS.
    **Required**
    """
    id: ID!

    """
    An email address assocaited with the contact in customerOS.
    """
    email:      String
    rawEmail:   String
    emailValidationDetails: EmailValidationDetails!
    work:       Boolean

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel @deprecated

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean!

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!

    createdAt: Time!
    updatedAt: Time!

    users: [User!]! @goField(forceResolver: true)
    contacts: [Contact!]! @goField(forceResolver: true)
    organizations: [Organization!]! @goField(forceResolver: true)
}

type EmailValidationDetails {
    verified:           Boolean!
    verifyingCheckAll:  Boolean!
    isValidSyntax:      Boolean
    isRisky:            Boolean
    isFirewalled:       Boolean
    provider:           String
    firewall:           String
    isCatchAll:         Boolean
    canConnectSmtp:     Boolean
    isMailboxFull:      Boolean
    isRoleAccount:      Boolean
    isFreeAccount:      Boolean
    smtpSuccess:        Boolean
    deliverable:        EmailDeliverable
    isPrimaryDomain:    Boolean
    primaryDomain:      String
    alternateEmail:     String
    isDeliverable:  Boolean @deprecated
}

enum EmailDeliverable {
    UNKNOWN
    DELIVERABLE
    UNDELIVERABLE
}

"""
Describes an email address associated with a `Contact` in customerOS.
**A `create` object.**
"""
input EmailInput {

    """
    An email address associated with the contact in customerOS.
    **Required.**
    """
    email: String!

    label: EmailLabel @deprecated

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean

    appSource: String @deprecated
}

input EmailUpdateAddressInput {
    id: ID!
    email: String!
}

"""
Describes an email address associated with a `Contact` in customerOS.
**An `update` object.**
"""
input EmailRelationUpdateInput {

    """
    An email address assocaited with the contact in customerOS.
    **Required.**
    """
    id: ID!

    """
    Describes the type of email address (WORK, PERSONAL, etc).
    """
    label: EmailLabel @deprecated

    """
    Identifies whether the email address is primary or not.
    **Required.**
    """
    primary: Boolean

    """
    Deprecated
    """
    email: String @deprecated
}


"""
Describes the type of email address (WORK, PERSONAL, etc).
**A `return` object.
"""
enum EmailLabel {
    MAIN
    WORK
    PERSONAL
    OTHER
}
