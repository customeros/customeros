extend type Query {
    offerings: [Offering!]! @hasRole(roles: [ADMIN, USER]) @hasTenant
}

extend type Mutation {
    offering_Create(input: OfferingCreateInput): ID @hasRole(roles: [ADMIN, USER]) @hasTenant
    offering_Update(input: OfferingUpdateInput): ID @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type Offering implements MetadataInterface {
    metadata:               Metadata!
    name:                   String!
    active:                 Boolean!
    type:                   OfferingType
    pricingModel:           PricingModel
    pricingPeriodInMonths:  Int64!
    currency:               Currency
    price:                  Float!
    priceCalculated:        Boolean!
    taxable:                Boolean!
    priceCalculation:       PriceCalculation!

    conditional:            Boolean!
    conditionals:           Conditionals!
    externalLinks:          [ExternalSystem!]! @goField(forceResolver: true)
}

input OfferingCreateInput {
    name:                                   String
    active:                                 Boolean
    type:                                   OfferingType
    pricingModel:                           PricingModel
    pricingPeriodInMonths:                  Int64
    currency:                               Currency
    price:                                  Float
    priceCalculated:                        Boolean
    conditional:                            Boolean
    taxable:                                Boolean
    priceCalculationType:                   CalculationType
    priceCalculationRevenueSharePercentage: Float
    conditionalsMinimumChargePeriod:        ChargePeriod
    conditionalsMinimumChargeAmount:        Float
}

input OfferingUpdateInput {
    id:                                     ID!
    name:                                   String
    active:                                 Boolean
    type:                                   OfferingType
    pricingModel:                           PricingModel
    pricingPeriodInMonths:                  Int64
    currency:                               Currency
    price:                                  Float
    priceCalculated:                        Boolean
    conditional:                            Boolean
    taxable:                                Boolean
    priceCalculationType:                   CalculationType
    priceCalculationRevenueSharePercentage: Float
    conditionalsMinimumChargePeriod:        ChargePeriod
    conditionalsMinimumChargeAmount:        Float
}

type PriceCalculation {
    calculationType:        CalculationType
    revenueSharePercentage: Float!
}

type Conditionals {
    minimumChargePeriod:    ChargePeriod
    minimumChargeAmount:    Float!
}

enum OfferingType {
    PRODUCT
    SERVICE
}

enum PricingModel {
    SUBSCRIPTION
    ONE_TIME
    USAGE
}

enum CalculationType {
    REVENUE_SHARE
}

enum ChargePeriod {
    MONTHLY
    QUARTERLY
    ANNUALLY
}