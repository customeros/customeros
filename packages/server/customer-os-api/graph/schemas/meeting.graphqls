
"""
Specifies how many pages of meeting information has been returned in the query response.
**A `response` object.**
"""
type MeetingsPage implements Pages {

    """
    A contact entity in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    content: [Meeting!]!

    """
    Total number of pages in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    Total number of elements in the query response.
    **Required.**
    """
    totalElements: Int64!
}

extend type Query {
    meeting(id: ID!): Meeting!
    externalMeetings(externalSystemId: String!, externalId: ID, pagination: Pagination, where: Filter, sort: [SortBy!]): MeetingsPage!
}

extend type Mutation {
    meeting_Create(meeting: MeetingInput!): Meeting!
    meeting_Update(meetingId: ID!, meeting: MeetingUpdateInput!): Meeting!
    meeting_LinkAttendedBy(meetingId: ID!, participant: MeetingParticipantInput!): Meeting!
    meeting_UnlinkAttendedBy(meetingId: ID!, participant: MeetingParticipantInput!): Meeting!
    meeting_LinkAttachment(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_UnlinkAttachment(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_LinkRecording(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_UnlinkRecording(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_AddNewLocation(meetingId: ID!): Location!
}

input MeetingParticipantInput  {
    contactId: ID
    userId: ID
    organizationId: ID
}

input MeetingInput {
    name: String
    attendedBy: [MeetingParticipantInput!]
    createdBy: [MeetingParticipantInput!]
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    agenda: String
    agendaContentType: String
    note: NoteInput
    appSource: String!
    externalSystem: ExternalSystemReferenceInput
}

input MeetingUpdateInput {
    name: String
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    agenda: String
    agendaContentType: String
    note: NoteUpdateInput
    appSource: String!
}

union MeetingParticipant = ContactParticipant | UserParticipant | OrganizationParticipant

type Meeting implements Node {
    id: ID!
    name: String
    createdAt: Time!
    updatedAt: Time!
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    attendedBy: [MeetingParticipant!]! @goField(forceResolver: true)
    createdBy: [MeetingParticipant!]! @goField(forceResolver: true)
    includes: [Attachment!]! @goField(forceResolver: true)
    describedBy: [Analysis!]! @goField(forceResolver: true)
    note: [Note!]! @goField(forceResolver: true)
    events: [InteractionEvent!]! @goField(forceResolver: true)
    recording: Attachment @goField(forceResolver: true)
    appSource: String!
    source: DataSource!
    sourceOfTruth: DataSource!
    agenda: String
    agendaContentType: String
    externalSystem:  [ExternalSystem!]! @goField(forceResolver: true)
}