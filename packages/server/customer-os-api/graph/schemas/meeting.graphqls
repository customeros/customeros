extend type Query {
    meeting(id: ID!): Meeting!
}

extend type Mutation {
    meeting_Create(meeting: MeetingInput!): Meeting!
    meeting_Update(meetingId: ID!, meeting: MeetingInput!): Meeting!
    meeting_LinkAttendedBy(meetingId: ID!, participant: MeetingParticipantInput!): Meeting!
    meeting_UnlinkAttendedBy(meetingId: ID!, participant: MeetingParticipantInput!): Meeting!
    meeting_LinkAttachment(meetingId: ID!, attachmentId: ID!): Meeting!
    meeting_UnlinkAttachment(meetingId: ID!, attachmentId: ID!): Meeting!
}

input MeetingParticipantInput  {
    contactId: ID
    userId: ID
}

input MeetingInput {
    name: String
    attendedBy: [MeetingParticipantInput!]
    createdBy: [MeetingParticipantInput!]
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    agenda: String
    agendaContentType: String
    note: NoteInput
    appSource: String!
    recording: ID
}

union MeetingParticipant = ContactParticipant | UserParticipant

type Meeting implements Node {
    id: ID!
    name: String
    createdAt: Time!
    updatedAt: Time!
    startedAt: Time
    endedAt: Time
    conferenceUrl: String
    meetingExternalUrl: String
    attendedBy: [MeetingParticipant!]! @goField(forceResolver: true)
    createdBy: [MeetingParticipant!]! @goField(forceResolver: true)
    includes: [Attachment!]! @goField(forceResolver: true)
    describedBy: [Analysis!]! @goField(forceResolver: true)
    note: Note @goField(forceResolver: true)
    events: [InteractionEvent!]! @goField(forceResolver: true)
    recording: ID
    appSource: String!
    source: DataSource!
    sourceOfTruth: DataSource!
    agenda: String
    agendaContentType: String
}