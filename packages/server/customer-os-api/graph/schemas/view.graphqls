extend type Query {
    tableViewDefs(pagination: Pagination, where: Filter, sort: SortBy): TableViewDefPage! @hasTenant
}

type TableViewDef implements Node {
    id:                 ID!
    name:               String!
    order:              Int
    type:               ViewType
    icon:               String
    columns:            [ColumnDef]
    filters:            String
    sorting:            String
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type TableViewDefPage implements Pages {
    content: [TableViewDef!]!
    totalPages: Int!
    totalElements: Int64!
    totalAvailable: Int64!
}

type ViewType implements Node {
    id:                 ID!
    name:               String
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type ColumnDef implements Node {
    id:                 ID!
    type:               ViewType
    columnType:         ColumnType
    isFilterable:       Boolean
    isSortable:         Boolean
    isDefaultSort:      Boolean
    isVisible:          Boolean
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}

type ColumnType implements Node {
    id:                 ID!
    name:               String
    viewTypeId:         String
    createdAt:          Time!
    updatedAt:          Time!
    createdBy:          User @goField(forceResolver: true) @hasRole(roles: [ADMIN, USER]) @hasTenant
}