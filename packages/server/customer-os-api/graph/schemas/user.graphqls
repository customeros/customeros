extend type Query {
    users(pagination: Pagination, where: Filter, sort: [SortBy!]): UserPage!
    user(id: ID!): User!

    user_ByEmail(email: String!) :User! @hasRole(roles: [ADMIN, PLATFORM_OWNER, OWNER, USER]) @hasTenant
}

extend type Mutation {
    user_Create(input: UserInput!): User! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_Update(input: UserUpdateInput!): User! @hasTenant
    user_AddRole(id: ID!, role: Role!): User! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_RemoveRole(id: ID!, role: Role!): User! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_AddRoleInTenant(id: ID!, tenant: String!, role: Role!): User! @hasRole(roles: [ADMIN, PLATFORM_OWNER])
    user_RemoveRoleInTenant(id: ID!, tenant: String!, role: Role!): User! @hasRole(roles: [ADMIN, PLATFORM_OWNER])
    user_Delete(id: ID!): Result! @hasRole(roles: [ADMIN, OWNER]) @hasTenant
    user_DeleteInTenant(id: ID!, tenant: String!): Result! @hasRole(roles: [ADMIN, PLATFORM_OWNER])

    customer_user_AddJobRole(id: ID!, jobRoleInput: JobRoleInput!) : CustomerUser! @hasRole(roles: [ADMIN, OWNER, PLATFORM_OWNER]) @hasTenant
}

"""
Describes the User of customerOS.  A user is the person who logs into the Openline platform.
**A `return` object**
"""
type User {

    """
    The unique ID associated with the customerOS user.
    **Required**
    """
    id: ID!

    """
    The first name of the customerOS user.
    **Required**
    """
    firstName: String!

    """
    The last name of the customerOS user.
    **Required**
    """
    lastName: String!
    name: String
    internal: Boolean!
    bot: Boolean!
    timezone: String
    profilePhotoUrl: String

    roles: [Role!]! @goField(forceResolver: true)

    """
    All email addresses associated with a user in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    emails: [Email!] @goField(forceResolver: true)
    phoneNumbers: [PhoneNumber!]! @goField(forceResolver: true)

    """
    Timestamp of user creation.
    **Required**
    """
    createdAt: Time!
    updatedAt: Time!

    jobRoles: [JobRole!]! @goField(forceResolver: true)
    calendars: [Calendar!]! @goField(forceResolver: true)

    source: DataSource!
    sourceOfTruth: DataSource!
    appSource: String!
}

"""
Specifies how many pages of `User` information has been returned in the query response.
**A `return` object.**
"""
type UserPage implements Pages {

    """
    A `User` entity in customerOS.
    **Required.  If no values it returns an empty array.**
    """
    content: [User!]!

    """
    Total number of pages in the query response.
    **Required.**
    """
    totalPages: Int!

    """
    Total number of elements in the query response.
    **Required.**
    """
    totalElements: Int64!
}

"""
Describes the User of customerOS.  A user is the person who logs into the Openline platform.
**A `create` object.**
"""
input UserInput {

    """
    The first name of the customerOS user.
    **Required**
    """
    firstName: String!

    """
    The last name of the customerOS user.
    **Required**
    """
    lastName: String!
    name: String
    timezone: String
    profilePhotoUrl: String

    """
    The email address of the customerOS user.
    **Required**
    """
    email: EmailInput!

    """
    The name of the app performing the create.
    **Optional**
    """
    appSource: String

    """
    The Job Roles of the user.
    **Optional**
    """
    jobRoles: [JobRoleInput!]

}

input UserUpdateInput {

    id: ID!
    """
    The first name of the customerOS user.
    **Required**
    """
    firstName: String!

    """
    The last name of the customerOS user.
    **Required**
    """
    lastName: String!
    name: String
    timezone: String
    profilePhotoUrl: String
}

type CustomerUser {
    id: ID!
    jobRole: CustomerJobRole!
}
