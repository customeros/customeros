// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type DescriptionNode interface {
	IsDescriptionNode()
}

type ExtensibleEntity interface {
	IsNode()
	IsExtensibleEntity()
	GetID() string
	GetTemplate() *EntityTemplate
}

type InteractionEventParticipant interface {
	IsInteractionEventParticipant()
}

type InteractionSessionParticipant interface {
	IsInteractionSessionParticipant()
}

type IssueParticipant interface {
	IsIssueParticipant()
}

type MeetingParticipant interface {
	IsMeetingParticipant()
}

type Node interface {
	IsNode()
	GetID() string
}

type NotedEntity interface {
	IsNotedEntity()
}

// Describes the number of pages and total elements included in a query response.
// **A `response` object.**
type Pages interface {
	IsPages()
	// The total number of pages included in the query response.
	// **Required.**
	GetTotalPages() int
	// The total number of elements included in the query response.
	// **Required.**
	GetTotalElements() int64
}

type SourceFields interface {
	IsNode()
	IsSourceFields()
	GetID() string
	GetSource() DataSource
	GetSourceOfTruth() DataSource
	GetAppSource() string
}

type TimelineEvent interface {
	IsTimelineEvent()
}

type Action struct {
	ID         string     `json:"id"`
	CreatedAt  time.Time  `json:"createdAt"`
	Content    *string    `json:"content,omitempty"`
	Source     DataSource `json:"source"`
	AppSource  string     `json:"appSource"`
	CreatedBy  *User      `json:"createdBy,omitempty"`
	ActionType ActionType `json:"actionType"`
	Metadata   *string    `json:"metadata,omitempty"`
}

func (Action) IsTimelineEvent() {}

type ActionItem struct {
	ID        string     `json:"id"`
	CreatedAt time.Time  `json:"createdAt"`
	Content   string     `json:"content"`
	Source    DataSource `json:"source"`
	AppSource string     `json:"appSource"`
}

type Analysis struct {
	ID            string            `json:"id"`
	CreatedAt     time.Time         `json:"createdAt"`
	Content       *string           `json:"content,omitempty"`
	ContentType   *string           `json:"contentType,omitempty"`
	AnalysisType  *string           `json:"analysisType,omitempty"`
	Describes     []DescriptionNode `json:"describes"`
	Source        DataSource        `json:"source"`
	SourceOfTruth DataSource        `json:"sourceOfTruth"`
	AppSource     string            `json:"appSource"`
}

func (Analysis) IsNode()            {}
func (this Analysis) GetID() string { return this.ID }

func (Analysis) IsTimelineEvent() {}

type AnalysisDescriptionInput struct {
	InteractionEventID   *string `json:"interactionEventId,omitempty"`
	InteractionSessionID *string `json:"interactionSessionId,omitempty"`
	MeetingID            *string `json:"meetingId,omitempty"`
}

type AnalysisInput struct {
	Content      *string                     `json:"content,omitempty"`
	ContentType  *string                     `json:"contentType,omitempty"`
	AnalysisType *string                     `json:"analysisType,omitempty"`
	Describes    []*AnalysisDescriptionInput `json:"describes"`
	AppSource    string                      `json:"appSource"`
}

type Attachment struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	MimeType      string     `json:"mimeType"`
	Name          string     `json:"name"`
	Size          int64      `json:"size"`
	Extension     string     `json:"extension"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

func (Attachment) IsNode()            {}
func (this Attachment) GetID() string { return this.ID }

type AttachmentInput struct {
	MimeType  string `json:"mimeType"`
	Name      string `json:"name"`
	Size      int64  `json:"size"`
	Extension string `json:"extension"`
	AppSource string `json:"appSource"`
}

// Describes the relationship a Contact has with a Organization.
// **A `return` object**
type Calendar struct {
	ID            string       `json:"id"`
	CalType       CalendarType `json:"calType"`
	CreatedAt     time.Time    `json:"createdAt"`
	UpdatedAt     time.Time    `json:"updatedAt"`
	Link          *string      `json:"link,omitempty"`
	Primary       bool         `json:"primary"`
	Source        DataSource   `json:"source"`
	SourceOfTruth DataSource   `json:"sourceOfTruth"`
	AppSource     string       `json:"appSource"`
}

type ColumnDef struct {
	ID            string      `json:"id"`
	ViewTypeID    *string     `json:"viewTypeId,omitempty"`
	ColumnType    *ColumnType `json:"columnType,omitempty"`
	IsFilterable  *bool       `json:"isFilterable,omitempty"`
	IsSortable    *bool       `json:"isSortable,omitempty"`
	IsDefaultSort *bool       `json:"isDefaultSort,omitempty"`
	IsVisible     *bool       `json:"isVisible,omitempty"`
	CreatedAt     time.Time   `json:"createdAt"`
	UpdatedAt     time.Time   `json:"updatedAt"`
	CreatedBy     *User       `json:"createdBy,omitempty"`
}

func (ColumnDef) IsNode()            {}
func (this ColumnDef) GetID() string { return this.ID }

type ColumnType struct {
	ID         string    `json:"id"`
	Name       *string   `json:"name,omitempty"`
	ViewTypeID *string   `json:"viewTypeId,omitempty"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
	CreatedBy  *User     `json:"createdBy,omitempty"`
}

func (ColumnType) IsNode()            {}
func (this ColumnType) GetID() string { return this.ID }

type Comment struct {
	ID            string            `json:"id"`
	Content       *string           `json:"content,omitempty"`
	ContentType   *string           `json:"contentType,omitempty"`
	CreatedAt     time.Time         `json:"createdAt"`
	UpdatedAt     time.Time         `json:"updatedAt"`
	CreatedBy     *User             `json:"createdBy,omitempty"`
	Source        DataSource        `json:"source"`
	SourceOfTruth DataSource        `json:"sourceOfTruth"`
	AppSource     string            `json:"appSource"`
	ExternalLinks []*ExternalSystem `json:"externalLinks"`
}

// A contact represents an individual in customerOS.
// **A `response` object.**
type Contact struct {
	// The unique ID associated with the contact in customerOS.
	// **Required**
	ID string `json:"id"`
	// The title associate with the contact in customerOS.
	Title  *string `json:"title,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	// The name of the contact in customerOS, alternative for firstName + lastName.
	Name *string `json:"name,omitempty"`
	// The first name of the contact in customerOS.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact in customerOS.
	LastName        *string `json:"lastName,omitempty"`
	Description     *string `json:"description,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	// **Required**
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Label         *string    `json:"label,omitempty"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     *string    `json:"appSource,omitempty"`
	Tags          []*Tag     `json:"tags,omitempty"`
	// `organizationName` and `jobTitle` of the contact if it has been associated with an organization.
	// **Required.  If no values it returns an empty array.**
	JobRoles      []*JobRole        `json:"jobRoles"`
	Organizations *OrganizationPage `json:"organizations"`
	// All phone numbers associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	PhoneNumbers []*PhoneNumber `json:"phoneNumbers"`
	// All email addresses associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	Emails []*Email `json:"emails"`
	// All locations associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	Locations []*Location `json:"locations"`
	Socials   []*Social   `json:"socials"`
	// User defined metadata appended to the contact record in customerOS.
	// **Required.  If no values it returns an empty array.**
	CustomFields []*CustomField `json:"customFields"`
	FieldSets    []*FieldSet    `json:"fieldSets"`
	// Template of the contact in customerOS.
	Template *EntityTemplate `json:"template,omitempty"`
	// Contact owner (user)
	Owner *User `json:"owner,omitempty"`
	// Contact notes
	Notes                    *NotePage       `json:"notes"`
	NotesByTime              []*Note         `json:"notesByTime"`
	TimelineEvents           []TimelineEvent `json:"timelineEvents"`
	TimelineEventsTotalCount int64           `json:"timelineEventsTotalCount"`
}

func (Contact) IsExtensibleEntity()               {}
func (this Contact) GetID() string                { return this.ID }
func (this Contact) GetTemplate() *EntityTemplate { return this.Template }

func (Contact) IsNode() {}

func (Contact) IsNotedEntity() {}

// Create an individual in customerOS.
// **A `create` object.**
type ContactInput struct {
	// The unique ID associated with the template of the contact in customerOS.
	TemplateID *string `json:"templateId,omitempty"`
	// The prefix of the contact.
	Prefix *string `json:"prefix,omitempty"`
	// The first name of the contact.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact.
	LastName        *string `json:"lastName,omitempty"`
	Name            *string `json:"name,omitempty"`
	Description     *string `json:"description,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// User defined metadata appended to contact.
	// **Required.**
	CustomFields []*CustomFieldInput `json:"customFields,omitempty"`
	FieldSets    []*FieldSetInput    `json:"fieldSets,omitempty"`
	// An email addresses associated with the contact.
	Email *EmailInput `json:"email,omitempty"`
	// A phone number associated with the contact.
	PhoneNumber *PhoneNumberInput `json:"phoneNumber,omitempty"`
	// Id of the contact owner (user)
	OwnerID           *string                       `json:"ownerId,omitempty"`
	ExternalReference *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
	AppSource         *string                       `json:"appSource,omitempty"`
}

type ContactOrganizationInput struct {
	ContactID      string `json:"contactId"`
	OrganizationID string `json:"organizationId"`
}

type ContactParticipant struct {
	ContactParticipant *Contact `json:"contactParticipant"`
	Type               *string  `json:"type,omitempty"`
}

func (ContactParticipant) IsInteractionEventParticipant() {}

func (ContactParticipant) IsInteractionSessionParticipant() {}

func (ContactParticipant) IsIssueParticipant() {}

func (ContactParticipant) IsMeetingParticipant() {}

type ContactTagInput struct {
	ContactID string `json:"contactId"`
	TagID     string `json:"tagId"`
}

// Updates data fields associated with an existing customer record in customerOS.
// **An `update` object.**
type ContactUpdateInput struct {
	// The unique ID associated with the contact in customerOS.
	// **Required.**
	ID string `json:"id"`
	// The prefix associate with the contact in customerOS.
	Prefix *string `json:"prefix,omitempty"`
	// The first name of the contact in customerOS.
	FirstName       *string `json:"firstName,omitempty"`
	Name            *string `json:"name,omitempty"`
	Description     *string `json:"description,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	// The last name of the contact in customerOS.
	LastName *string `json:"lastName,omitempty"`
	Label    *string `json:"label,omitempty"`
	// Id of the contact owner (user)
	OwnerID *string `json:"ownerId,omitempty"`
}

// Specifies how many pages of contact information has been returned in the query response.
// **A `response` object.**
type ContactsPage struct {
	// A contact entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*Contact `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (ContactsPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this ContactsPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this ContactsPage) GetTotalElements() int64 { return this.TotalElements }

type Contract struct {
	ID               string               `json:"id"`
	CreatedAt        time.Time            `json:"createdAt"`
	UpdatedAt        time.Time            `json:"updatedAt"`
	ServiceStartedAt *time.Time           `json:"serviceStartedAt,omitempty"`
	SignedAt         *time.Time           `json:"signedAt,omitempty"`
	EndedAt          *time.Time           `json:"endedAt,omitempty"`
	Name             string               `json:"name"`
	RenewalCycle     ContractRenewalCycle `json:"renewalCycle"`
	RenewalPeriods   *int64               `json:"renewalPeriods,omitempty"`
	Status           ContractStatus       `json:"status"`
	ServiceLineItems []*ServiceLineItem   `json:"serviceLineItems,omitempty"`
	Opportunities    []*Opportunity       `json:"opportunities,omitempty"`
	Owner            *User                `json:"owner,omitempty"`
	CreatedBy        *User                `json:"createdBy,omitempty"`
	Source           DataSource           `json:"source"`
	SourceOfTruth    DataSource           `json:"sourceOfTruth"`
	AppSource        string               `json:"appSource"`
	ExternalLinks    []*ExternalSystem    `json:"externalLinks"`
	ContractURL      *string              `json:"contractUrl,omitempty"`
}

func (Contract) IsNode()            {}
func (this Contract) GetID() string { return this.ID }

type ContractInput struct {
	OrganizationID    string                        `json:"organizationId"`
	Name              *string                       `json:"name,omitempty"`
	RenewalCycle      *ContractRenewalCycle         `json:"renewalCycle,omitempty"`
	RenewalPeriods    *int64                        `json:"renewalPeriods,omitempty"`
	AppSource         *string                       `json:"appSource,omitempty"`
	ContractURL       *string                       `json:"contractUrl,omitempty"`
	ServiceStartedAt  *time.Time                    `json:"serviceStartedAt,omitempty"`
	SignedAt          *time.Time                    `json:"signedAt,omitempty"`
	ExternalReference *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
}

type ContractUpdateInput struct {
	ContractID       string                `json:"contractId"`
	Name             *string               `json:"name,omitempty"`
	ContractURL      *string               `json:"contractUrl,omitempty"`
	RenewalCycle     *ContractRenewalCycle `json:"renewalCycle,omitempty"`
	RenewalPeriods   *int64                `json:"renewalPeriods,omitempty"`
	ServiceStartedAt *time.Time            `json:"serviceStartedAt,omitempty"`
	SignedAt         *time.Time            `json:"signedAt,omitempty"`
	EndedAt          *time.Time            `json:"endedAt,omitempty"`
	AppSource        *string               `json:"appSource,omitempty"`
}

type Country struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CodeA2    string `json:"codeA2"`
	CodeA3    string `json:"codeA3"`
	PhoneCode string `json:"phoneCode"`
}

// Describes a custom, user-defined field associated with a `Contact`.
// **A `return` object.**
type CustomField struct {
	// The unique ID associated with the custom field.
	// **Required**
	ID string `json:"id"`
	// The name of the custom field.
	// **Required**
	Name string `json:"name"`
	// Datatype of the custom field.
	// **Required**
	Datatype CustomFieldDataType `json:"datatype"`
	// The value of the custom field.
	// **Required**
	Value AnyTypeValue `json:"value"`
	// The source of the custom field value
	Source    DataSource           `json:"source"`
	CreatedAt time.Time            `json:"createdAt"`
	UpdatedAt time.Time            `json:"updatedAt"`
	Template  *CustomFieldTemplate `json:"template,omitempty"`
}

func (CustomField) IsNode()            {}
func (this CustomField) GetID() string { return this.ID }

type CustomFieldEntityType struct {
	ID         string     `json:"id"`
	EntityType EntityType `json:"entityType"`
}

// Describes a custom, user-defined field associated with a `Contact` of type String.
// **A `create` object.**
type CustomFieldInput struct {
	ID *string `json:"id,omitempty"`
	// The name of the custom field.
	Name *string `json:"name,omitempty"`
	// Datatype of the custom field.
	Datatype *CustomFieldDataType `json:"datatype,omitempty"`
	// The value of the custom field.
	// **Required**
	Value      AnyTypeValue `json:"value"`
	TemplateID *string      `json:"templateId,omitempty"`
}

type CustomFieldTemplate struct {
	ID        string                  `json:"id"`
	CreatedAt time.Time               `json:"createdAt"`
	UpdatedAt time.Time               `json:"updatedAt"`
	Name      string                  `json:"name"`
	Type      CustomFieldTemplateType `json:"type"`
	Order     int                     `json:"order"`
	Mandatory bool                    `json:"mandatory"`
	Length    *int                    `json:"length,omitempty"`
	Min       *int                    `json:"min,omitempty"`
	Max       *int                    `json:"max,omitempty"`
}

func (CustomFieldTemplate) IsNode()            {}
func (this CustomFieldTemplate) GetID() string { return this.ID }

type CustomFieldTemplateInput struct {
	Name      string                  `json:"name"`
	Type      CustomFieldTemplateType `json:"type"`
	Order     int                     `json:"order"`
	Mandatory *bool                   `json:"mandatory,omitempty"`
	Length    *int                    `json:"length,omitempty"`
	Min       *int                    `json:"min,omitempty"`
	Max       *int                    `json:"max,omitempty"`
}

// Describes a custom, user-defined field associated with a `Contact`.
// **An `update` object.**
type CustomFieldUpdateInput struct {
	// The unique ID associated with the custom field.
	// **Required**
	ID string `json:"id"`
	// The name of the custom field.
	// **Required**
	Name string `json:"name"`
	// Datatype of the custom field.
	// **Required**
	Datatype CustomFieldDataType `json:"datatype"`
	// The value of the custom field.
	// **Required**
	Value AnyTypeValue `json:"value"`
}

type CustomerContact struct {
	ID    string         `json:"id"`
	Email *CustomerEmail `json:"email"`
}

type CustomerContactInput struct {
	// The prefix of the contact.
	Prefix *string `json:"prefix,omitempty"`
	// The first name of the contact.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact.
	LastName    *string `json:"lastName,omitempty"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Timezone    *string `json:"timezone,omitempty"`
	// An email addresses associted with the contact.
	Email *EmailInput `json:"email,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	AppSource *string    `json:"appSource,omitempty"`
}

type CustomerEmail struct {
	ID string `json:"id"`
}

type CustomerJobRole struct {
	ID string `json:"id"`
}

type CustomerUser struct {
	ID      string           `json:"id"`
	JobRole *CustomerJobRole `json:"jobRole"`
}

type DashboardARRBreakdown struct {
	ArrBreakdown       float64                          `json:"arrBreakdown"`
	IncreasePercentage string                           `json:"increasePercentage"`
	PerMonth           []*DashboardARRBreakdownPerMonth `json:"perMonth"`
}

type DashboardARRBreakdownPerMonth struct {
	Year            int     `json:"year"`
	Month           int     `json:"month"`
	NewlyContracted float64 `json:"newlyContracted"`
	Renewals        float64 `json:"renewals"`
	Upsells         float64 `json:"upsells"`
	Downgrades      float64 `json:"downgrades"`
	Cancellations   float64 `json:"cancellations"`
	Churned         float64 `json:"churned"`
}

type DashboardCustomerMap struct {
	OrganizationID     string                    `json:"organizationId"`
	Organization       *Organization             `json:"organization"`
	State              DashboardCustomerMapState `json:"state"`
	Arr                float64                   `json:"arr"`
	ContractSignedDate time.Time                 `json:"contractSignedDate"`
}

type DashboardGrossRevenueRetention struct {
	GrossRevenueRetention float64                                   `json:"grossRevenueRetention"`
	IncreasePercentage    string                                    `json:"increasePercentage"`
	PerMonth              []*DashboardGrossRevenueRetentionPerMonth `json:"perMonth"`
}

type DashboardGrossRevenueRetentionPerMonth struct {
	Year       int     `json:"year"`
	Month      int     `json:"month"`
	Percentage float64 `json:"percentage"`
}

type DashboardMRRPerCustomer struct {
	MrrPerCustomer     float64                            `json:"mrrPerCustomer"`
	IncreasePercentage string                             `json:"increasePercentage"`
	PerMonth           []*DashboardMRRPerCustomerPerMonth `json:"perMonth"`
}

type DashboardMRRPerCustomerPerMonth struct {
	Year  int     `json:"year"`
	Month int     `json:"month"`
	Value float64 `json:"value"`
}

type DashboardNewCustomers struct {
	ThisMonthCount              int                              `json:"thisMonthCount"`
	ThisMonthIncreasePercentage string                           `json:"thisMonthIncreasePercentage"`
	PerMonth                    []*DashboardNewCustomersPerMonth `json:"perMonth"`
}

type DashboardNewCustomersPerMonth struct {
	Year  int `json:"year"`
	Month int `json:"month"`
	Count int `json:"count"`
}

type DashboardOnboardingCompletion struct {
	CompletionPercentage float64                                  `json:"completionPercentage"`
	IncreasePercentage   float64                                  `json:"increasePercentage"`
	PerMonth             []*DashboardOnboardingCompletionPerMonth `json:"perMonth"`
}

type DashboardOnboardingCompletionPerMonth struct {
	Year  int     `json:"year"`
	Month int     `json:"month"`
	Value float64 `json:"value"`
}

type DashboardPeriodInput struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

type DashboardRetentionRate struct {
	RetentionRate      float64                           `json:"retentionRate"`
	IncreasePercentage string                            `json:"increasePercentage"`
	PerMonth           []*DashboardRetentionRatePerMonth `json:"perMonth"`
}

type DashboardRetentionRatePerMonth struct {
	Year       int `json:"year"`
	Month      int `json:"month"`
	RenewCount int `json:"renewCount"`
	ChurnCount int `json:"churnCount"`
}

type DashboardRevenueAtRisk struct {
	HighConfidence float64 `json:"highConfidence"`
	AtRisk         float64 `json:"atRisk"`
}

type DashboardTimeToOnboard struct {
	TimeToOnboard      *float64                          `json:"timeToOnboard,omitempty"`
	IncreasePercentage *float64                          `json:"increasePercentage,omitempty"`
	PerMonth           []*DashboardTimeToOnboardPerMonth `json:"perMonth"`
}

type DashboardTimeToOnboardPerMonth struct {
	Year  int     `json:"year"`
	Month int     `json:"month"`
	Value float64 `json:"value"`
}

type DeleteResponse struct {
	Accepted  bool `json:"accepted"`
	Completed bool `json:"completed"`
}

// Describes an email address associated with a `Contact` in customerOS.
// **A `return` object.**
type Email struct {
	// The unique ID associated with the contact in customerOS.
	// **Required**
	ID string `json:"id"`
	// An email address assocaited with the contact in customerOS.
	Email                  *string                 `json:"email,omitempty"`
	RawEmail               *string                 `json:"rawEmail,omitempty"`
	EmailValidationDetails *EmailValidationDetails `json:"emailValidationDetails"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary       bool            `json:"primary"`
	Source        DataSource      `json:"source"`
	SourceOfTruth DataSource      `json:"sourceOfTruth"`
	AppSource     string          `json:"appSource"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
	Users         []*User         `json:"users"`
	Contacts      []*Contact      `json:"contacts"`
	Organizations []*Organization `json:"organizations"`
}

// Describes an email address associated with a `Contact` in customerOS.
// **A `create` object.**
type EmailInput struct {
	// An email address associated with the contact in customerOS.
	// **Required.**
	Email string `json:"email"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary   *bool   `json:"primary,omitempty"`
	AppSource *string `json:"appSource,omitempty"`
}

type EmailParticipant struct {
	EmailParticipant *Email  `json:"emailParticipant"`
	Type             *string `json:"type,omitempty"`
}

func (EmailParticipant) IsInteractionEventParticipant() {}

func (EmailParticipant) IsInteractionSessionParticipant() {}

func (EmailParticipant) IsMeetingParticipant() {}

// Describes an email address associated with a `Contact` in customerOS.
// **An `update` object.**
type EmailUpdateInput struct {
	// An email address assocaited with the contact in customerOS.
	// **Required.**
	ID string `json:"id"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary *bool   `json:"primary,omitempty"`
	Email   *string `json:"email,omitempty"`
}

type EmailValidationDetails struct {
	Validated      *bool   `json:"validated,omitempty"`
	IsReachable    *string `json:"isReachable,omitempty"`
	IsValidSyntax  *bool   `json:"isValidSyntax,omitempty"`
	CanConnectSMTP *bool   `json:"canConnectSmtp,omitempty"`
	AcceptsMail    *bool   `json:"acceptsMail,omitempty"`
	HasFullInbox   *bool   `json:"hasFullInbox,omitempty"`
	IsCatchAll     *bool   `json:"isCatchAll,omitempty"`
	IsDeliverable  *bool   `json:"isDeliverable,omitempty"`
	IsDisabled     *bool   `json:"isDisabled,omitempty"`
	Error          *string `json:"error,omitempty"`
}

type EntityTemplate struct {
	ID                   string                   `json:"id"`
	Version              int                      `json:"version"`
	Name                 string                   `json:"name"`
	Extends              *EntityTemplateExtension `json:"extends,omitempty"`
	FieldSetTemplates    []*FieldSetTemplate      `json:"fieldSetTemplates"`
	CustomFieldTemplates []*CustomFieldTemplate   `json:"customFieldTemplates"`
	CreatedAt            time.Time                `json:"createdAt"`
	UpdatedAt            time.Time                `json:"updatedAt"`
}

func (EntityTemplate) IsNode()            {}
func (this EntityTemplate) GetID() string { return this.ID }

type EntityTemplateInput struct {
	Name                      string                      `json:"name"`
	Extends                   *EntityTemplateExtension    `json:"extends,omitempty"`
	FieldSetTemplateInputs    []*FieldSetTemplateInput    `json:"fieldSetTemplateInputs,omitempty"`
	CustomFieldTemplateInputs []*CustomFieldTemplateInput `json:"customFieldTemplateInputs,omitempty"`
}

type ExternalSystem struct {
	Type           ExternalSystemType `json:"type"`
	SyncDate       *time.Time         `json:"syncDate,omitempty"`
	ExternalID     *string            `json:"externalId,omitempty"`
	ExternalURL    *string            `json:"externalUrl,omitempty"`
	ExternalSource *string            `json:"externalSource,omitempty"`
}

type ExternalSystemReferenceInput struct {
	ExternalID     string             `json:"externalId"`
	SyncDate       *time.Time         `json:"syncDate,omitempty"`
	Type           ExternalSystemType `json:"type"`
	ExternalURL    *string            `json:"externalUrl,omitempty"`
	ExternalSource *string            `json:"externalSource,omitempty"`
}

type FieldSet struct {
	ID           string            `json:"id"`
	Name         string            `json:"name"`
	CreatedAt    time.Time         `json:"createdAt"`
	UpdatedAt    time.Time         `json:"updatedAt"`
	CustomFields []*CustomField    `json:"customFields"`
	Template     *FieldSetTemplate `json:"template,omitempty"`
	Source       DataSource        `json:"source"`
}

type FieldSetInput struct {
	ID           *string             `json:"id,omitempty"`
	Name         string              `json:"name"`
	CustomFields []*CustomFieldInput `json:"customFields,omitempty"`
	TemplateID   *string             `json:"templateId,omitempty"`
}

type FieldSetTemplate struct {
	ID                   string                 `json:"id"`
	CreatedAt            time.Time              `json:"createdAt"`
	UpdatedAt            time.Time              `json:"updatedAt"`
	Name                 string                 `json:"name"`
	Order                int                    `json:"order"`
	CustomFieldTemplates []*CustomFieldTemplate `json:"customFieldTemplates"`
}

func (FieldSetTemplate) IsNode()            {}
func (this FieldSetTemplate) GetID() string { return this.ID }

type FieldSetTemplateInput struct {
	Name                      string                      `json:"name"`
	Order                     int                         `json:"order"`
	CustomFieldTemplateInputs []*CustomFieldTemplateInput `json:"customFieldTemplateInputs,omitempty"`
}

type FieldSetUpdateInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Filter struct {
	Not    *Filter     `json:"NOT,omitempty"`
	And    []*Filter   `json:"AND,omitempty"`
	Or     []*Filter   `json:"OR,omitempty"`
	Filter *FilterItem `json:"filter,omitempty"`
}

type FilterItem struct {
	Property      string             `json:"property"`
	Operation     ComparisonOperator `json:"operation"`
	Value         AnyTypeValue       `json:"value"`
	CaseSensitive *bool              `json:"caseSensitive,omitempty"`
	IncludeEmpty  *bool              `json:"includeEmpty,omitempty"`
}

type GCliAttributeKeyValuePair struct {
	Key     string  `json:"key"`
	Value   string  `json:"value"`
	Display *string `json:"display,omitempty"`
}

type GCliItem struct {
	ID      string                       `json:"id"`
	Type    GCliSearchResultType         `json:"type"`
	Display string                       `json:"display"`
	Data    []*GCliAttributeKeyValuePair `json:"data,omitempty"`
}

type GlobalCache struct {
	User                 *User       `json:"user"`
	IsOwner              bool        `json:"isOwner"`
	IsGoogleActive       bool        `json:"isGoogleActive"`
	IsGoogleTokenExpired bool        `json:"isGoogleTokenExpired"`
	GCliCache            []*GCliItem `json:"gCliCache"`
	MinARRForecastValue  float64     `json:"minARRForecastValue"`
	MaxARRForecastValue  float64     `json:"maxARRForecastValue"`
	ContractsExist       bool        `json:"contractsExist"`
}

type InteractionEvent struct {
	ID                 string                        `json:"id"`
	CreatedAt          time.Time                     `json:"createdAt"`
	EventIdentifier    *string                       `json:"eventIdentifier,omitempty"`
	Content            *string                       `json:"content,omitempty"`
	ContentType        *string                       `json:"contentType,omitempty"`
	Channel            *string                       `json:"channel,omitempty"`
	ChannelData        *string                       `json:"channelData,omitempty"`
	InteractionSession *InteractionSession           `json:"interactionSession,omitempty"`
	Issue              *Issue                        `json:"issue,omitempty"`
	Meeting            *Meeting                      `json:"meeting,omitempty"`
	SentBy             []InteractionEventParticipant `json:"sentBy"`
	SentTo             []InteractionEventParticipant `json:"sentTo"`
	RepliesTo          *InteractionEvent             `json:"repliesTo,omitempty"`
	Includes           []*Attachment                 `json:"includes"`
	Summary            *Analysis                     `json:"summary,omitempty"`
	ActionItems        []*ActionItem                 `json:"actionItems,omitempty"`
	Source             DataSource                    `json:"source"`
	SourceOfTruth      DataSource                    `json:"sourceOfTruth"`
	AppSource          string                        `json:"appSource"`
	EventType          *string                       `json:"eventType,omitempty"`
	ExternalLinks      []*ExternalSystem             `json:"externalLinks"`
}

func (InteractionEvent) IsDescriptionNode() {}

func (InteractionEvent) IsNode()            {}
func (this InteractionEvent) GetID() string { return this.ID }

func (InteractionEvent) IsTimelineEvent() {}

type InteractionEventInput struct {
	EventIdentifier    *string                             `json:"eventIdentifier,omitempty"`
	ExternalID         *string                             `json:"externalId,omitempty"`
	ExternalSystemID   *string                             `json:"externalSystemId,omitempty"`
	Content            *string                             `json:"content,omitempty"`
	ContentType        *string                             `json:"contentType,omitempty"`
	Channel            *string                             `json:"channel,omitempty"`
	ChannelData        *string                             `json:"channelData,omitempty"`
	InteractionSession *string                             `json:"interactionSession,omitempty"`
	MeetingID          *string                             `json:"meetingId,omitempty"`
	SentBy             []*InteractionEventParticipantInput `json:"sentBy"`
	SentTo             []*InteractionEventParticipantInput `json:"sentTo"`
	RepliesTo          *string                             `json:"repliesTo,omitempty"`
	EventType          *string                             `json:"eventType,omitempty"`
	AppSource          string                              `json:"appSource"`
	CreatedAt          *time.Time                          `json:"createdAt,omitempty"`
}

type InteractionEventParticipantInput struct {
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	ContactID   *string `json:"contactID,omitempty"`
	UserID      *string `json:"userID,omitempty"`
	Type        *string `json:"type,omitempty"`
}

type InteractionSession struct {
	ID                string                          `json:"id"`
	StartedAt         time.Time                       `json:"startedAt"`
	EndedAt           *time.Time                      `json:"endedAt,omitempty"`
	CreatedAt         time.Time                       `json:"createdAt"`
	UpdatedAt         time.Time                       `json:"updatedAt"`
	SessionIdentifier *string                         `json:"sessionIdentifier,omitempty"`
	Name              string                          `json:"name"`
	Status            string                          `json:"status"`
	Type              *string                         `json:"type,omitempty"`
	Channel           *string                         `json:"channel,omitempty"`
	ChannelData       *string                         `json:"channelData,omitempty"`
	Source            DataSource                      `json:"source"`
	SourceOfTruth     DataSource                      `json:"sourceOfTruth"`
	AppSource         string                          `json:"appSource"`
	Events            []*InteractionEvent             `json:"events"`
	AttendedBy        []InteractionSessionParticipant `json:"attendedBy"`
	Includes          []*Attachment                   `json:"includes"`
	DescribedBy       []*Analysis                     `json:"describedBy"`
}

func (InteractionSession) IsDescriptionNode() {}

func (InteractionSession) IsNode()            {}
func (this InteractionSession) GetID() string { return this.ID }

func (InteractionSession) IsTimelineEvent() {}

type InteractionSessionInput struct {
	SessionIdentifier *string                               `json:"sessionIdentifier,omitempty"`
	Name              string                                `json:"name"`
	Status            string                                `json:"status"`
	Type              *string                               `json:"type,omitempty"`
	Channel           *string                               `json:"channel,omitempty"`
	ChannelData       *string                               `json:"channelData,omitempty"`
	AttendedBy        []*InteractionSessionParticipantInput `json:"attendedBy,omitempty"`
	AppSource         string                                `json:"appSource"`
}

type InteractionSessionParticipantInput struct {
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	ContactID   *string `json:"contactID,omitempty"`
	UserID      *string `json:"userID,omitempty"`
	Type        *string `json:"type,omitempty"`
}

type Issue struct {
	ID                string              `json:"id"`
	CreatedAt         time.Time           `json:"createdAt"`
	UpdatedAt         time.Time           `json:"updatedAt"`
	Subject           *string             `json:"subject,omitempty"`
	Status            string              `json:"status"`
	Priority          *string             `json:"priority,omitempty"`
	Description       *string             `json:"description,omitempty"`
	Tags              []*Tag              `json:"tags,omitempty"`
	InteractionEvents []*InteractionEvent `json:"interactionEvents"`
	Comments          []*Comment          `json:"comments"`
	ExternalLinks     []*ExternalSystem   `json:"externalLinks"`
	SubmittedBy       IssueParticipant    `json:"submittedBy,omitempty"`
	ReportedBy        IssueParticipant    `json:"reportedBy,omitempty"`
	AssignedTo        []IssueParticipant  `json:"assignedTo"`
	FollowedBy        []IssueParticipant  `json:"followedBy"`
	Source            DataSource          `json:"source"`
	SourceOfTruth     DataSource          `json:"sourceOfTruth"`
	AppSource         string              `json:"appSource"`
}

func (Issue) IsSourceFields()                   {}
func (this Issue) GetID() string                { return this.ID }
func (this Issue) GetSource() DataSource        { return this.Source }
func (this Issue) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this Issue) GetAppSource() string         { return this.AppSource }

func (Issue) IsNode() {}

func (Issue) IsTimelineEvent() {}

type IssueSummaryByStatus struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

// Describes the relationship a Contact has with a Organization.
// **A `return` object**
type JobRole struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	// Organization associated with a Contact.
	// **Required.**
	Organization *Organization `json:"organization,omitempty"`
	Contact      *Contact      `json:"contact,omitempty"`
	// The Contact's job title.
	JobTitle      *string    `json:"jobTitle,omitempty"`
	Primary       bool       `json:"primary"`
	Description   *string    `json:"description,omitempty"`
	Company       *string    `json:"company,omitempty"`
	StartedAt     *time.Time `json:"startedAt,omitempty"`
	EndedAt       *time.Time `json:"endedAt,omitempty"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

// Describes the relationship a Contact has with an Organization.
// **A `create` object**
type JobRoleInput struct {
	OrganizationID *string    `json:"organizationId,omitempty"`
	JobTitle       *string    `json:"jobTitle,omitempty"`
	Primary        *bool      `json:"primary,omitempty"`
	StartedAt      *time.Time `json:"startedAt,omitempty"`
	EndedAt        *time.Time `json:"endedAt,omitempty"`
	AppSource      *string    `json:"appSource,omitempty"`
	Description    *string    `json:"description,omitempty"`
	Company        *string    `json:"company,omitempty"`
}

type JobRoleParticipant struct {
	JobRoleParticipant *JobRole `json:"jobRoleParticipant"`
	Type               *string  `json:"type,omitempty"`
}

func (JobRoleParticipant) IsInteractionEventParticipant() {}

// Describes the relationship a Contact has with an Organization.
// **A `create` object**
type JobRoleUpdateInput struct {
	ID             string     `json:"id"`
	StartedAt      *time.Time `json:"startedAt,omitempty"`
	EndedAt        *time.Time `json:"endedAt,omitempty"`
	OrganizationID *string    `json:"organizationId,omitempty"`
	JobTitle       *string    `json:"jobTitle,omitempty"`
	Primary        *bool      `json:"primary,omitempty"`
	Description    *string    `json:"description,omitempty"`
	Company        *string    `json:"company,omitempty"`
}

type LinkOrganizationsInput struct {
	OrganizationID    string  `json:"organizationId"`
	SubOrganizationID string  `json:"subOrganizationId"`
	Type              *string `json:"type,omitempty"`
}

type LinkedOrganization struct {
	Organization *Organization `json:"organization"`
	Type         *string       `json:"type,omitempty"`
}

type Location struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
	Name          *string    `json:"name,omitempty"`
	RawAddress    *string    `json:"rawAddress,omitempty"`
	Country       *string    `json:"country,omitempty"`
	Region        *string    `json:"region,omitempty"`
	District      *string    `json:"district,omitempty"`
	Locality      *string    `json:"locality,omitempty"`
	Street        *string    `json:"street,omitempty"`
	Address       *string    `json:"address,omitempty"`
	Address2      *string    `json:"address2,omitempty"`
	Zip           *string    `json:"zip,omitempty"`
	AddressType   *string    `json:"addressType,omitempty"`
	HouseNumber   *string    `json:"houseNumber,omitempty"`
	PostalCode    *string    `json:"postalCode,omitempty"`
	PlusFour      *string    `json:"plusFour,omitempty"`
	Commercial    *bool      `json:"commercial,omitempty"`
	Predirection  *string    `json:"predirection,omitempty"`
	Latitude      *float64   `json:"latitude,omitempty"`
	Longitude     *float64   `json:"longitude,omitempty"`
	TimeZone      *string    `json:"timeZone,omitempty"`
	UtcOffset     *int64     `json:"utcOffset,omitempty"`
}

func (Location) IsSourceFields()                   {}
func (this Location) GetID() string                { return this.ID }
func (this Location) GetSource() DataSource        { return this.Source }
func (this Location) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this Location) GetAppSource() string         { return this.AppSource }

func (Location) IsNode() {}

type LocationUpdateInput struct {
	ID           string   `json:"id"`
	Name         *string  `json:"name,omitempty"`
	RawAddress   *string  `json:"rawAddress,omitempty"`
	Country      *string  `json:"country,omitempty"`
	Region       *string  `json:"region,omitempty"`
	District     *string  `json:"district,omitempty"`
	Locality     *string  `json:"locality,omitempty"`
	Street       *string  `json:"street,omitempty"`
	Address      *string  `json:"address,omitempty"`
	Address2     *string  `json:"address2,omitempty"`
	Zip          *string  `json:"zip,omitempty"`
	AddressType  *string  `json:"addressType,omitempty"`
	HouseNumber  *string  `json:"houseNumber,omitempty"`
	PostalCode   *string  `json:"postalCode,omitempty"`
	PlusFour     *string  `json:"plusFour,omitempty"`
	Commercial   *bool    `json:"commercial,omitempty"`
	Predirection *string  `json:"predirection,omitempty"`
	Latitude     *float64 `json:"latitude,omitempty"`
	Longitude    *float64 `json:"longitude,omitempty"`
	TimeZone     *string  `json:"timeZone,omitempty"`
	UtcOffset    *int64   `json:"utcOffset,omitempty"`
}

type LogEntry struct {
	ID            string            `json:"id"`
	Content       *string           `json:"content,omitempty"`
	ContentType   *string           `json:"contentType,omitempty"`
	CreatedAt     time.Time         `json:"createdAt"`
	UpdatedAt     time.Time         `json:"updatedAt"`
	StartedAt     time.Time         `json:"startedAt"`
	CreatedBy     *User             `json:"createdBy,omitempty"`
	Tags          []*Tag            `json:"tags"`
	Source        DataSource        `json:"source"`
	SourceOfTruth DataSource        `json:"sourceOfTruth"`
	AppSource     string            `json:"appSource"`
	ExternalLinks []*ExternalSystem `json:"externalLinks"`
}

func (LogEntry) IsTimelineEvent() {}

type LogEntryInput struct {
	Content     *string             `json:"content,omitempty"`
	ContentType *string             `json:"contentType,omitempty"`
	Tags        []*TagIDOrNameInput `json:"tags,omitempty"`
	StartedAt   *time.Time          `json:"startedAt,omitempty"`
	AppSource   *string             `json:"appSource,omitempty"`
}

type LogEntryUpdateInput struct {
	Content     *string    `json:"content,omitempty"`
	ContentType *string    `json:"contentType,omitempty"`
	StartedAt   *time.Time `json:"startedAt,omitempty"`
}

type MasterPlan struct {
	ID                string                 `json:"id"`
	CreatedAt         time.Time              `json:"createdAt"`
	UpdatedAt         time.Time              `json:"updatedAt"`
	Name              string                 `json:"name"`
	Source            DataSource             `json:"source"`
	SourceOfTruth     DataSource             `json:"sourceOfTruth"`
	AppSource         string                 `json:"appSource"`
	Retired           bool                   `json:"retired"`
	Milestones        []*MasterPlanMilestone `json:"milestones"`
	RetiredMilestones []*MasterPlanMilestone `json:"retiredMilestones"`
}

func (MasterPlan) IsSourceFields()                   {}
func (this MasterPlan) GetID() string                { return this.ID }
func (this MasterPlan) GetSource() DataSource        { return this.Source }
func (this MasterPlan) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this MasterPlan) GetAppSource() string         { return this.AppSource }

func (MasterPlan) IsNode() {}

type MasterPlanInput struct {
	Name *string `json:"name,omitempty"`
}

type MasterPlanMilestone struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Name          string     `json:"name"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
	Order         int64      `json:"order"`
	DurationHours int64      `json:"durationHours"`
	Optional      bool       `json:"optional"`
	Items         []string   `json:"items"`
	Retired       bool       `json:"retired"`
}

func (MasterPlanMilestone) IsSourceFields()                   {}
func (this MasterPlanMilestone) GetID() string                { return this.ID }
func (this MasterPlanMilestone) GetSource() DataSource        { return this.Source }
func (this MasterPlanMilestone) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this MasterPlanMilestone) GetAppSource() string         { return this.AppSource }

func (MasterPlanMilestone) IsNode() {}

type MasterPlanMilestoneInput struct {
	MasterPlanID  string   `json:"masterPlanId"`
	Name          *string  `json:"name,omitempty"`
	Order         int64    `json:"order"`
	DurationHours int64    `json:"durationHours"`
	Optional      bool     `json:"optional"`
	Items         []string `json:"items"`
}

type MasterPlanMilestoneUpdateInput struct {
	MasterPlanID  string   `json:"masterPlanId"`
	ID            string   `json:"id"`
	Name          *string  `json:"name,omitempty"`
	Order         *int64   `json:"order,omitempty"`
	DurationHours *int64   `json:"durationHours,omitempty"`
	Optional      *bool    `json:"optional,omitempty"`
	Retired       *bool    `json:"retired,omitempty"`
	Items         []string `json:"items,omitempty"`
}

type MasterPlanUpdateInput struct {
	ID      string  `json:"id"`
	Name    *string `json:"name,omitempty"`
	Retired *bool   `json:"retired,omitempty"`
}

type Meeting struct {
	ID                 string               `json:"id"`
	Name               *string              `json:"name,omitempty"`
	CreatedAt          time.Time            `json:"createdAt"`
	UpdatedAt          time.Time            `json:"updatedAt"`
	StartedAt          *time.Time           `json:"startedAt,omitempty"`
	EndedAt            *time.Time           `json:"endedAt,omitempty"`
	ConferenceURL      *string              `json:"conferenceUrl,omitempty"`
	MeetingExternalURL *string              `json:"meetingExternalUrl,omitempty"`
	AttendedBy         []MeetingParticipant `json:"attendedBy"`
	CreatedBy          []MeetingParticipant `json:"createdBy"`
	Includes           []*Attachment        `json:"includes"`
	DescribedBy        []*Analysis          `json:"describedBy"`
	Note               []*Note              `json:"note"`
	Events             []*InteractionEvent  `json:"events"`
	Recording          *Attachment          `json:"recording,omitempty"`
	AppSource          string               `json:"appSource"`
	Source             DataSource           `json:"source"`
	SourceOfTruth      DataSource           `json:"sourceOfTruth"`
	Agenda             *string              `json:"agenda,omitempty"`
	AgendaContentType  *string              `json:"agendaContentType,omitempty"`
	ExternalSystem     []*ExternalSystem    `json:"externalSystem"`
	Status             MeetingStatus        `json:"status"`
}

func (Meeting) IsDescriptionNode() {}

func (Meeting) IsNode()            {}
func (this Meeting) GetID() string { return this.ID }

func (Meeting) IsTimelineEvent() {}

type MeetingInput struct {
	Name               *string                       `json:"name,omitempty"`
	AttendedBy         []*MeetingParticipantInput    `json:"attendedBy,omitempty"`
	CreatedBy          []*MeetingParticipantInput    `json:"createdBy,omitempty"`
	CreatedAt          *time.Time                    `json:"createdAt,omitempty"`
	StartedAt          *time.Time                    `json:"startedAt,omitempty"`
	EndedAt            *time.Time                    `json:"endedAt,omitempty"`
	ConferenceURL      *string                       `json:"conferenceUrl,omitempty"`
	MeetingExternalURL *string                       `json:"meetingExternalUrl,omitempty"`
	Agenda             *string                       `json:"agenda,omitempty"`
	AgendaContentType  *string                       `json:"agendaContentType,omitempty"`
	Note               *NoteInput                    `json:"note,omitempty"`
	AppSource          *string                       `json:"appSource,omitempty"`
	ExternalSystem     *ExternalSystemReferenceInput `json:"externalSystem,omitempty"`
	Status             *MeetingStatus                `json:"status,omitempty"`
}

type MeetingParticipantInput struct {
	ContactID      *string `json:"contactId,omitempty"`
	UserID         *string `json:"userId,omitempty"`
	OrganizationID *string `json:"organizationId,omitempty"`
}

type MeetingUpdateInput struct {
	Name               *string                       `json:"name,omitempty"`
	StartedAt          *time.Time                    `json:"startedAt,omitempty"`
	EndedAt            *time.Time                    `json:"endedAt,omitempty"`
	ConferenceURL      *string                       `json:"conferenceUrl,omitempty"`
	MeetingExternalURL *string                       `json:"meetingExternalUrl,omitempty"`
	Agenda             *string                       `json:"agenda,omitempty"`
	AgendaContentType  *string                       `json:"agendaContentType,omitempty"`
	Note               *NoteUpdateInput              `json:"note,omitempty"`
	AppSource          *string                       `json:"appSource,omitempty"`
	Status             *MeetingStatus                `json:"status,omitempty"`
	ExternalSystem     *ExternalSystemReferenceInput `json:"externalSystem,omitempty"`
}

// Specifies how many pages of meeting information has been returned in the query response.
// **A `response` object.**
type MeetingsPage struct {
	// A contact entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*Meeting `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (MeetingsPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this MeetingsPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this MeetingsPage) GetTotalElements() int64 { return this.TotalElements }

type Mutation struct {
}

type NavigationDef struct {
	ID            string    `json:"id"`
	TenantViewIds []*string `json:"tenantViewIds,omitempty"`
	MyViewIds     []*string `json:"myViewIds,omitempty"`
	CreatedAt     time.Time `json:"createdAt"`
	UpdatedAt     time.Time `json:"updatedAt"`
	CreatedBy     *User     `json:"createdBy,omitempty"`
}

func (NavigationDef) IsNode()            {}
func (this NavigationDef) GetID() string { return this.ID }

type Note struct {
	ID            string        `json:"id"`
	Content       *string       `json:"content,omitempty"`
	ContentType   *string       `json:"contentType,omitempty"`
	CreatedAt     time.Time     `json:"createdAt"`
	UpdatedAt     time.Time     `json:"updatedAt"`
	CreatedBy     *User         `json:"createdBy,omitempty"`
	Noted         []NotedEntity `json:"noted"`
	Includes      []*Attachment `json:"includes"`
	Source        DataSource    `json:"source"`
	SourceOfTruth DataSource    `json:"sourceOfTruth"`
	AppSource     string        `json:"appSource"`
}

func (Note) IsTimelineEvent() {}

type NoteInput struct {
	Content     *string `json:"content,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
	AppSource   *string `json:"appSource,omitempty"`
}

type NotePage struct {
	Content       []*Note `json:"content"`
	TotalPages    int     `json:"totalPages"`
	TotalElements int64   `json:"totalElements"`
}

func (NotePage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this NotePage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this NotePage) GetTotalElements() int64 { return this.TotalElements }

type NoteUpdateInput struct {
	ID          string  `json:"id"`
	Content     *string `json:"content,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
}

type OnboardingDetails struct {
	Status    OnboardingStatus `json:"status"`
	Comments  *string          `json:"comments,omitempty"`
	UpdatedAt *time.Time       `json:"updatedAt,omitempty"`
}

type OnboardingStatusInput struct {
	OrganizationID string           `json:"organizationId"`
	Status         OnboardingStatus `json:"status"`
	Comments       *string          `json:"comments,omitempty"`
}

type Opportunity struct {
	ID                     string                       `json:"id"`
	CreatedAt              time.Time                    `json:"createdAt"`
	UpdatedAt              time.Time                    `json:"updatedAt"`
	Name                   string                       `json:"name"`
	Amount                 float64                      `json:"amount"`
	MaxAmount              float64                      `json:"maxAmount"`
	InternalType           InternalType                 `json:"internalType"`
	ExternalType           string                       `json:"externalType"`
	InternalStage          InternalStage                `json:"internalStage"`
	ExternalStage          string                       `json:"externalStage"`
	EstimatedClosedAt      *time.Time                   `json:"estimatedClosedAt,omitempty"`
	GeneralNotes           string                       `json:"generalNotes"`
	NextSteps              string                       `json:"nextSteps"`
	RenewedAt              time.Time                    `json:"renewedAt"`
	RenewalLikelihood      OpportunityRenewalLikelihood `json:"renewalLikelihood"`
	RenewalUpdatedByUserID string                       `json:"renewalUpdatedByUserId"`
	RenewalUpdatedByUserAt time.Time                    `json:"renewalUpdatedByUserAt"`
	Comments               string                       `json:"comments"`
	CreatedBy              *User                        `json:"createdBy,omitempty"`
	Owner                  *User                        `json:"owner,omitempty"`
	Source                 DataSource                   `json:"source"`
	SourceOfTruth          DataSource                   `json:"sourceOfTruth"`
	AppSource              string                       `json:"appSource"`
	ExternalLinks          []*ExternalSystem            `json:"externalLinks"`
}

func (Opportunity) IsNode()            {}
func (this Opportunity) GetID() string { return this.ID }

type OpportunityRenewalUpdateInput struct {
	OpportunityID     string                        `json:"opportunityId"`
	Name              *string                       `json:"name,omitempty"`
	Amount            *float64                      `json:"amount,omitempty"`
	RenewalLikelihood *OpportunityRenewalLikelihood `json:"renewalLikelihood,omitempty"`
	Comments          *string                       `json:"comments,omitempty"`
	AppSource         *string                       `json:"appSource,omitempty"`
	OwnerUserID       *string                       `json:"ownerUserId,omitempty"`
}

type OpportunityUpdateInput struct {
	OpportunityID       string                        `json:"opportunityId"`
	Name                *string                       `json:"name,omitempty"`
	Amount              *float64                      `json:"amount,omitempty"`
	ExternalType        *string                       `json:"externalType,omitempty"`
	ExternalStage       *string                       `json:"externalStage,omitempty"`
	EstimatedClosedDate *time.Time                    `json:"estimatedClosedDate,omitempty"`
	GeneralNotes        *string                       `json:"generalNotes,omitempty"`
	NextSteps           *string                       `json:"nextSteps,omitempty"`
	AppSource           *string                       `json:"appSource,omitempty"`
	ExternalReference   *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
}

type OrgAccountDetails struct {
	RenewalSummary *RenewalSummary    `json:"renewalSummary,omitempty"`
	Onboarding     *OnboardingDetails `json:"onboarding,omitempty"`
}

type Organization struct {
	ID                            string                        `json:"id"`
	CustomerOsID                  string                        `json:"customerOsId"`
	ReferenceID                   *string                       `json:"referenceId,omitempty"`
	CreatedAt                     time.Time                     `json:"createdAt"`
	UpdatedAt                     time.Time                     `json:"updatedAt"`
	Name                          string                        `json:"name"`
	Description                   *string                       `json:"description,omitempty"`
	Note                          *string                       `json:"note,omitempty"`
	Domains                       []string                      `json:"domains"`
	Website                       *string                       `json:"website,omitempty"`
	Industry                      *string                       `json:"industry,omitempty"`
	SubIndustry                   *string                       `json:"subIndustry,omitempty"`
	IndustryGroup                 *string                       `json:"industryGroup,omitempty"`
	TargetAudience                *string                       `json:"targetAudience,omitempty"`
	ValueProposition              *string                       `json:"valueProposition,omitempty"`
	IsPublic                      *bool                         `json:"isPublic,omitempty"`
	IsCustomer                    *bool                         `json:"isCustomer,omitempty"`
	Market                        *Market                       `json:"market,omitempty"`
	Employees                     *int64                        `json:"employees,omitempty"`
	YearFounded                   *int64                        `json:"yearFounded,omitempty"`
	Headquarters                  *string                       `json:"headquarters,omitempty"`
	EmployeeGrowthRate            *string                       `json:"employeeGrowthRate,omitempty"`
	LogoURL                       *string                       `json:"logoUrl,omitempty"`
	LastFundingRound              *FundingRound                 `json:"lastFundingRound,omitempty"`
	LastFundingAmount             *string                       `json:"lastFundingAmount,omitempty"`
	Source                        DataSource                    `json:"source"`
	SourceOfTruth                 DataSource                    `json:"sourceOfTruth"`
	AppSource                     string                        `json:"appSource"`
	Locations                     []*Location                   `json:"locations"`
	Socials                       []*Social                     `json:"socials"`
	Contacts                      *ContactsPage                 `json:"contacts"`
	JobRoles                      []*JobRole                    `json:"jobRoles"`
	Notes                         *NotePage                     `json:"notes"`
	Tags                          []*Tag                        `json:"tags,omitempty"`
	Contracts                     []*Contract                   `json:"contracts,omitempty"`
	Emails                        []*Email                      `json:"emails"`
	PhoneNumbers                  []*PhoneNumber                `json:"phoneNumbers"`
	Subsidiaries                  []*LinkedOrganization         `json:"subsidiaries"`
	SubsidiaryOf                  []*LinkedOrganization         `json:"subsidiaryOf"`
	SuggestedMergeTo              []*SuggestedMergeOrganization `json:"suggestedMergeTo"`
	CustomFields                  []*CustomField                `json:"customFields"`
	FieldSets                     []*FieldSet                   `json:"fieldSets"`
	EntityTemplate                *EntityTemplate               `json:"entityTemplate,omitempty"`
	TimelineEvents                []TimelineEvent               `json:"timelineEvents"`
	TimelineEventsTotalCount      int64                         `json:"timelineEventsTotalCount"`
	Owner                         *User                         `json:"owner,omitempty"`
	ExternalLinks                 []*ExternalSystem             `json:"externalLinks"`
	LastTouchPointAt              *time.Time                    `json:"lastTouchPointAt,omitempty"`
	LastTouchPointType            *LastTouchpointType           `json:"lastTouchPointType,omitempty"`
	LastTouchPointTimelineEventID *string                       `json:"lastTouchPointTimelineEventId,omitempty"`
	LastTouchPointTimelineEvent   TimelineEvent                 `json:"lastTouchPointTimelineEvent,omitempty"`
	IssueSummaryByStatus          []*IssueSummaryByStatus       `json:"issueSummaryByStatus"`
	AccountDetails                *OrgAccountDetails            `json:"accountDetails,omitempty"`
}

func (Organization) IsNotedEntity() {}

func (Organization) IsNode()            {}
func (this Organization) GetID() string { return this.ID }

type OrganizationInput struct {
	// The name of the organization.
	// **Required.**
	ReferenceID        *string             `json:"referenceId,omitempty"`
	Name               *string             `json:"name,omitempty"`
	Description        *string             `json:"description,omitempty"`
	Note               *string             `json:"note,omitempty"`
	Domains            []string            `json:"domains,omitempty"`
	Website            *string             `json:"website,omitempty"`
	Industry           *string             `json:"industry,omitempty"`
	SubIndustry        *string             `json:"subIndustry,omitempty"`
	IndustryGroup      *string             `json:"industryGroup,omitempty"`
	IsPublic           *bool               `json:"isPublic,omitempty"`
	IsCustomer         *bool               `json:"isCustomer,omitempty"`
	CustomFields       []*CustomFieldInput `json:"customFields,omitempty"`
	FieldSets          []*FieldSetInput    `json:"fieldSets,omitempty"`
	TemplateID         *string             `json:"templateId,omitempty"`
	Market             *Market             `json:"market,omitempty"`
	LogoURL            *string             `json:"logoUrl,omitempty"`
	EmployeeGrowthRate *string             `json:"employeeGrowthRate,omitempty"`
	Headquarters       *string             `json:"headquarters,omitempty"`
	YearFounded        *int64              `json:"yearFounded,omitempty"`
	Employees          *int64              `json:"employees,omitempty"`
	AppSource          *string             `json:"appSource,omitempty"`
}

type OrganizationPage struct {
	Content        []*Organization `json:"content"`
	TotalPages     int             `json:"totalPages"`
	TotalElements  int64           `json:"totalElements"`
	TotalAvailable int64           `json:"totalAvailable"`
}

func (OrganizationPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this OrganizationPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this OrganizationPage) GetTotalElements() int64 { return this.TotalElements }

type OrganizationParticipant struct {
	OrganizationParticipant *Organization `json:"organizationParticipant"`
	Type                    *string       `json:"type,omitempty"`
}

func (OrganizationParticipant) IsInteractionEventParticipant() {}

func (OrganizationParticipant) IsIssueParticipant() {}

func (OrganizationParticipant) IsMeetingParticipant() {}

type OrganizationUpdateInput struct {
	ID          string  `json:"id"`
	ReferenceID *string `json:"referenceId,omitempty"`
	// Set to true when partial update is needed. Empty or missing fields will not be ignored.
	Patch              *bool         `json:"patch,omitempty"`
	Name               *string       `json:"name,omitempty"`
	Description        *string       `json:"description,omitempty"`
	Note               *string       `json:"note,omitempty"`
	Domains            []string      `json:"domains,omitempty"`
	Website            *string       `json:"website,omitempty"`
	Industry           *string       `json:"industry,omitempty"`
	SubIndustry        *string       `json:"subIndustry,omitempty"`
	IndustryGroup      *string       `json:"industryGroup,omitempty"`
	IsPublic           *bool         `json:"isPublic,omitempty"`
	IsCustomer         *bool         `json:"isCustomer,omitempty"`
	Market             *Market       `json:"market,omitempty"`
	Employees          *int64        `json:"employees,omitempty"`
	TargetAudience     *string       `json:"targetAudience,omitempty"`
	ValueProposition   *string       `json:"valueProposition,omitempty"`
	LastFundingRound   *FundingRound `json:"lastFundingRound,omitempty"`
	LastFundingAmount  *string       `json:"lastFundingAmount,omitempty"`
	LogoURL            *string       `json:"logoUrl,omitempty"`
	EmployeeGrowthRate *string       `json:"employeeGrowthRate,omitempty"`
	Headquarters       *string       `json:"headquarters,omitempty"`
	YearFounded        *int64        `json:"yearFounded,omitempty"`
}

type PageView struct {
	ID             string     `json:"id"`
	StartedAt      time.Time  `json:"startedAt"`
	EndedAt        time.Time  `json:"endedAt"`
	PageTitle      string     `json:"pageTitle"`
	PageURL        string     `json:"pageUrl"`
	Application    string     `json:"application"`
	SessionID      string     `json:"sessionId"`
	OrderInSession int64      `json:"orderInSession"`
	EngagedTime    int64      `json:"engagedTime"`
	Source         DataSource `json:"source"`
	SourceOfTruth  DataSource `json:"sourceOfTruth"`
	AppSource      string     `json:"appSource"`
}

func (PageView) IsNode()            {}
func (this PageView) GetID() string { return this.ID }

func (PageView) IsSourceFields() {}

func (this PageView) GetSource() DataSource        { return this.Source }
func (this PageView) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this PageView) GetAppSource() string         { return this.AppSource }

func (PageView) IsTimelineEvent() {}

// If provided as part of the request, results will be filtered down to the `page` and `limit` specified.
type Pagination struct {
	// The results page to return in the response.
	// **Required.**
	Page int `json:"page"`
	// The maximum number of results in the response.
	// **Required.**
	Limit int `json:"limit"`
}

// Describes a phone number associated with a `Contact` in customerOS.
// **A `return` object.**
type PhoneNumber struct {
	// The unique ID associated with the phone number.
	// **Required**
	ID string `json:"id"`
	// The phone number in e164 format.
	E164           *string  `json:"e164,omitempty"`
	RawPhoneNumber *string  `json:"rawPhoneNumber,omitempty"`
	Validated      *bool    `json:"validated,omitempty"`
	Country        *Country `json:"country,omitempty"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary       bool            `json:"primary"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
	Source        DataSource      `json:"source"`
	AppSource     *string         `json:"appSource,omitempty"`
	Users         []*User         `json:"users"`
	Contacts      []*Contact      `json:"contacts"`
	Organizations []*Organization `json:"organizations"`
}

// Describes a phone number associated with a `Contact` in customerOS.
// **A `create` object.**
type PhoneNumberInput struct {
	// The phone number in e164 format.
	// **Required**
	PhoneNumber   string  `json:"phoneNumber"`
	CountryCodeA2 *string `json:"countryCodeA2,omitempty"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary *bool `json:"primary,omitempty"`
}

type PhoneNumberParticipant struct {
	PhoneNumberParticipant *PhoneNumber `json:"phoneNumberParticipant"`
	Type                   *string      `json:"type,omitempty"`
}

func (PhoneNumberParticipant) IsInteractionEventParticipant() {}

func (PhoneNumberParticipant) IsInteractionSessionParticipant() {}

// Describes a phone number associated with a `Contact` in customerOS.
// **An `update` object.**
type PhoneNumberUpdateInput struct {
	// The unique ID associated with the phone number.
	// **Required**
	ID string `json:"id"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary       *bool   `json:"primary,omitempty"`
	PhoneNumber   *string `json:"phoneNumber,omitempty"`
	CountryCodeA2 *string `json:"countryCodeA2,omitempty"`
}

type Player struct {
	ID            string        `json:"id"`
	IdentityID    *string       `json:"identityId,omitempty"`
	AuthID        string        `json:"authId"`
	Users         []*PlayerUser `json:"users"`
	Provider      string        `json:"provider"`
	CreatedAt     time.Time     `json:"createdAt"`
	UpdatedAt     time.Time     `json:"updatedAt"`
	Source        DataSource    `json:"source"`
	SourceOfTruth DataSource    `json:"sourceOfTruth"`
	AppSource     string        `json:"appSource"`
}

type PlayerInput struct {
	IdentityID *string `json:"identityId,omitempty"`
	AuthID     string  `json:"authId"`
	Provider   string  `json:"provider"`
	AppSource  *string `json:"appSource,omitempty"`
}

type PlayerUpdate struct {
	IdentityID *string `json:"identityId,omitempty"`
	AppSource  *string `json:"appSource,omitempty"`
}

type PlayerUser struct {
	User    *User  `json:"user"`
	Default bool   `json:"default"`
	Tenant  string `json:"tenant"`
}

type Query struct {
}

type RenewalSummary struct {
	ArrForecast       *float64                      `json:"arrForecast,omitempty"`
	MaxArrForecast    *float64                      `json:"maxArrForecast,omitempty"`
	RenewalLikelihood *OpportunityRenewalLikelihood `json:"renewalLikelihood,omitempty"`
	NextRenewalDate   *time.Time                    `json:"nextRenewalDate,omitempty"`
}

// Describes the success or failure of the GraphQL call.
// **A `return` object**
type Result struct {
	// The result of the GraphQL call.
	// **Required.**
	Result bool `json:"result"`
}

type ServiceLineItem struct {
	ID            string            `json:"id"`
	CreatedAt     time.Time         `json:"createdAt"`
	UpdatedAt     time.Time         `json:"updatedAt"`
	StartedAt     time.Time         `json:"startedAt"`
	EndedAt       *time.Time        `json:"endedAt,omitempty"`
	Name          string            `json:"name"`
	Billed        BilledType        `json:"billed"`
	Price         float64           `json:"price"`
	Quantity      int64             `json:"quantity"`
	Comments      string            `json:"comments"`
	CreatedBy     *User             `json:"createdBy,omitempty"`
	Source        DataSource        `json:"source"`
	SourceOfTruth DataSource        `json:"sourceOfTruth"`
	AppSource     string            `json:"appSource"`
	ExternalLinks []*ExternalSystem `json:"externalLinks"`
	ParentID      string            `json:"parentId"`
}

func (ServiceLineItem) IsNode()            {}
func (this ServiceLineItem) GetID() string { return this.ID }

type ServiceLineItemCloseInput struct {
	ID      string     `json:"id"`
	EndedAt *time.Time `json:"endedAt,omitempty"`
}

type ServiceLineItemInput struct {
	ContractID        string                        `json:"contractId"`
	Name              *string                       `json:"name,omitempty"`
	Billed            *BilledType                   `json:"billed,omitempty"`
	Price             *float64                      `json:"price,omitempty"`
	Quantity          *int64                        `json:"quantity,omitempty"`
	AppSource         *string                       `json:"appSource,omitempty"`
	ExternalReference *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
	StartedAt         *time.Time                    `json:"startedAt,omitempty"`
	EndedAt           *time.Time                    `json:"endedAt,omitempty"`
}

type ServiceLineItemUpdateInput struct {
	ServiceLineItemID       string                        `json:"serviceLineItemId"`
	Name                    *string                       `json:"name,omitempty"`
	Billed                  *BilledType                   `json:"billed,omitempty"`
	Price                   *float64                      `json:"price,omitempty"`
	Quantity                *int64                        `json:"quantity,omitempty"`
	Comments                *string                       `json:"comments,omitempty"`
	AppSource               *string                       `json:"appSource,omitempty"`
	ExternalReference       *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
	IsRetroactiveCorrection *bool                         `json:"isRetroactiveCorrection,omitempty"`
}

type Social struct {
	ID            string     `json:"id"`
	PlatformName  *string    `json:"platformName,omitempty"`
	URL           string     `json:"url"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

func (Social) IsSourceFields()                   {}
func (this Social) GetID() string                { return this.ID }
func (this Social) GetSource() DataSource        { return this.Source }
func (this Social) GetSourceOfTruth() DataSource { return this.SourceOfTruth }
func (this Social) GetAppSource() string         { return this.AppSource }

func (Social) IsNode() {}

type SocialInput struct {
	PlatformName *string `json:"platformName,omitempty"`
	URL          string  `json:"url"`
	AppSource    *string `json:"appSource,omitempty"`
}

type SocialUpdateInput struct {
	ID           string  `json:"id"`
	PlatformName *string `json:"platformName,omitempty"`
	URL          string  `json:"url"`
}

type SortBy struct {
	By            string           `json:"by"`
	Direction     SortingDirection `json:"direction"`
	CaseSensitive *bool            `json:"caseSensitive,omitempty"`
}

type State struct {
	ID      string   `json:"id"`
	Country *Country `json:"country"`
	Name    string   `json:"name"`
	Code    string   `json:"code"`
}

type SuggestedMergeOrganization struct {
	Organization *Organization `json:"organization"`
	Confidence   *float64      `json:"confidence,omitempty"`
	SuggestedAt  *time.Time    `json:"suggestedAt,omitempty"`
	SuggestedBy  *string       `json:"suggestedBy,omitempty"`
}

type TableViewDef struct {
	ID        string       `json:"id"`
	Name      string       `json:"name"`
	Order     *int         `json:"order,omitempty"`
	Type      *ViewType    `json:"type,omitempty"`
	Icon      *string      `json:"icon,omitempty"`
	Columns   []*ColumnDef `json:"columns,omitempty"`
	CreatedAt time.Time    `json:"createdAt"`
	UpdatedAt time.Time    `json:"updatedAt"`
	CreatedBy *User        `json:"createdBy,omitempty"`
}

func (TableViewDef) IsNode()            {}
func (this TableViewDef) GetID() string { return this.ID }

type TableViewDefPage struct {
	Content        []*TableViewDef `json:"content"`
	TotalPages     int             `json:"totalPages"`
	TotalElements  int64           `json:"totalElements"`
	TotalAvailable int64           `json:"totalAvailable"`
}

func (TableViewDefPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this TableViewDefPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this TableViewDefPage) GetTotalElements() int64 { return this.TotalElements }

type Tag struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	Source    DataSource `json:"source"`
	AppSource string     `json:"appSource"`
}

type TagIDOrNameInput struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type TagInput struct {
	Name      string  `json:"name"`
	AppSource *string `json:"appSource,omitempty"`
}

type TagUpdateInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type TenantBillableInfo struct {
	WhitelistedOrganizations int64 `json:"whitelistedOrganizations"`
	WhitelistedContacts      int64 `json:"whitelistedContacts"`
	GreylistedOrganizations  int64 `json:"greylistedOrganizations"`
	GreylistedContacts       int64 `json:"greylistedContacts"`
}

type TenantInput struct {
	Name      string  `json:"name"`
	AppSource *string `json:"appSource,omitempty"`
}

type TimeRange struct {
	// The start time of the time range.
	// **Required.**
	From time.Time `json:"from"`
	// The end time of the time range.
	// **Required.**
	To time.Time `json:"to"`
}

// Describes the User of customerOS.  A user is the person who logs into the Openline platform.
// **A `return` object**
type User struct {
	// The unique ID associated with the customerOS user.
	// **Required**
	ID string `json:"id"`
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName        string  `json:"lastName"`
	Name            *string `json:"name,omitempty"`
	Internal        bool    `json:"internal"`
	Bot             bool    `json:"bot"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	Player          *Player `json:"player"`
	Roles           []Role  `json:"roles"`
	// All email addresses associated with a user in customerOS.
	// **Required.  If no values it returns an empty array.**
	Emails       []*Email       `json:"emails,omitempty"`
	PhoneNumbers []*PhoneNumber `json:"phoneNumbers"`
	// Timestamp of user creation.
	// **Required**
	CreatedAt     time.Time   `json:"createdAt"`
	UpdatedAt     time.Time   `json:"updatedAt"`
	JobRoles      []*JobRole  `json:"jobRoles"`
	Calendars     []*Calendar `json:"calendars"`
	Source        DataSource  `json:"source"`
	SourceOfTruth DataSource  `json:"sourceOfTruth"`
	AppSource     string      `json:"appSource"`
}

// Describes the User of customerOS.  A user is the person who logs into the Openline platform.
// **A `create` object.**
type UserInput struct {
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName        string  `json:"lastName"`
	Name            *string `json:"name,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
	// The email address of the customerOS user.
	// **Required**
	Email *EmailInput `json:"email"`
	// Player to associate with the user with. If the person does not exist, it will be created.
	// **Required**
	Player *PlayerInput `json:"player"`
	// The name of the app performing the create.
	// **Optional**
	AppSource *string `json:"appSource,omitempty"`
	// The Job Roles of the user.
	// **Optional**
	JobRoles []*JobRoleInput `json:"jobRoles,omitempty"`
}

// Specifies how many pages of `User` information has been returned in the query response.
// **A `return` object.**
type UserPage struct {
	// A `User` entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*User `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (UserPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this UserPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this UserPage) GetTotalElements() int64 { return this.TotalElements }

type UserParticipant struct {
	UserParticipant *User   `json:"userParticipant"`
	Type            *string `json:"type,omitempty"`
}

func (UserParticipant) IsInteractionEventParticipant() {}

func (UserParticipant) IsInteractionSessionParticipant() {}

func (UserParticipant) IsIssueParticipant() {}

func (UserParticipant) IsMeetingParticipant() {}

type UserUpdateInput struct {
	ID string `json:"id"`
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName        string  `json:"lastName"`
	Name            *string `json:"name,omitempty"`
	Timezone        *string `json:"timezone,omitempty"`
	ProfilePhotoURL *string `json:"profilePhotoUrl,omitempty"`
}

type ViewType struct {
	ID        string    `json:"id"`
	Name      *string   `json:"name,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	CreatedBy *User     `json:"createdBy,omitempty"`
}

func (ViewType) IsNode()            {}
func (this ViewType) GetID() string { return this.ID }

type Workspace struct {
	ID            string     `json:"id"`
	Name          string     `json:"name"`
	Provider      string     `json:"provider"`
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

type WorkspaceInput struct {
	Name      string  `json:"name"`
	Provider  string  `json:"provider"`
	AppSource *string `json:"appSource,omitempty"`
}

type ActionType string

const (
	ActionTypeCreated                                   ActionType = "CREATED"
	ActionTypeRenewalLikelihoodUpdated                  ActionType = "RENEWAL_LIKELIHOOD_UPDATED"
	ActionTypeRenewalForecastUpdated                    ActionType = "RENEWAL_FORECAST_UPDATED"
	ActionTypeContractStatusUpdated                     ActionType = "CONTRACT_STATUS_UPDATED"
	ActionTypeServiceLineItemPriceUpdated               ActionType = "SERVICE_LINE_ITEM_PRICE_UPDATED"
	ActionTypeServiceLineItemQuantityUpdated            ActionType = "SERVICE_LINE_ITEM_QUANTITY_UPDATED"
	ActionTypeServiceLineItemBilledTypeUpdated          ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_UPDATED"
	ActionTypeServiceLineItemBilledTypeRecurringCreated ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_RECURRING_CREATED"
	ActionTypeServiceLineItemBilledTypeOnceCreated      ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_ONCE_CREATED"
	ActionTypeServiceLineItemBilledTypeUsageCreated     ActionType = "SERVICE_LINE_ITEM_BILLED_TYPE_USAGE_CREATED"
	ActionTypeContractRenewed                           ActionType = "CONTRACT_RENEWED"
	ActionTypeServiceLineItemRemoved                    ActionType = "SERVICE_LINE_ITEM_REMOVED"
	ActionTypeOnboardingStatusChanged                   ActionType = "ONBOARDING_STATUS_CHANGED"
)

var AllActionType = []ActionType{
	ActionTypeCreated,
	ActionTypeRenewalLikelihoodUpdated,
	ActionTypeRenewalForecastUpdated,
	ActionTypeContractStatusUpdated,
	ActionTypeServiceLineItemPriceUpdated,
	ActionTypeServiceLineItemQuantityUpdated,
	ActionTypeServiceLineItemBilledTypeUpdated,
	ActionTypeServiceLineItemBilledTypeRecurringCreated,
	ActionTypeServiceLineItemBilledTypeOnceCreated,
	ActionTypeServiceLineItemBilledTypeUsageCreated,
	ActionTypeContractRenewed,
	ActionTypeServiceLineItemRemoved,
	ActionTypeOnboardingStatusChanged,
}

func (e ActionType) IsValid() bool {
	switch e {
	case ActionTypeCreated, ActionTypeRenewalLikelihoodUpdated, ActionTypeRenewalForecastUpdated, ActionTypeContractStatusUpdated, ActionTypeServiceLineItemPriceUpdated, ActionTypeServiceLineItemQuantityUpdated, ActionTypeServiceLineItemBilledTypeUpdated, ActionTypeServiceLineItemBilledTypeRecurringCreated, ActionTypeServiceLineItemBilledTypeOnceCreated, ActionTypeServiceLineItemBilledTypeUsageCreated, ActionTypeContractRenewed, ActionTypeServiceLineItemRemoved, ActionTypeOnboardingStatusChanged:
		return true
	}
	return false
}

func (e ActionType) String() string {
	return string(e)
}

func (e *ActionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ActionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ActionType", str)
	}
	return nil
}

func (e ActionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BilledType string

const (
	BilledTypeNone      BilledType = "NONE"
	BilledTypeMonthly   BilledType = "MONTHLY"
	BilledTypeQuarterly BilledType = "QUARTERLY"
	BilledTypeAnnually  BilledType = "ANNUALLY"
	BilledTypeOnce      BilledType = "ONCE"
	BilledTypeUsage     BilledType = "USAGE"
)

var AllBilledType = []BilledType{
	BilledTypeNone,
	BilledTypeMonthly,
	BilledTypeQuarterly,
	BilledTypeAnnually,
	BilledTypeOnce,
	BilledTypeUsage,
}

func (e BilledType) IsValid() bool {
	switch e {
	case BilledTypeNone, BilledTypeMonthly, BilledTypeQuarterly, BilledTypeAnnually, BilledTypeOnce, BilledTypeUsage:
		return true
	}
	return false
}

func (e BilledType) String() string {
	return string(e)
}

func (e *BilledType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BilledType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BilledType", str)
	}
	return nil
}

func (e BilledType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CalendarType string

const (
	CalendarTypeCalcom CalendarType = "CALCOM"
	CalendarTypeGoogle CalendarType = "GOOGLE"
)

var AllCalendarType = []CalendarType{
	CalendarTypeCalcom,
	CalendarTypeGoogle,
}

func (e CalendarType) IsValid() bool {
	switch e {
	case CalendarTypeCalcom, CalendarTypeGoogle:
		return true
	}
	return false
}

func (e CalendarType) String() string {
	return string(e)
}

func (e *CalendarType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CalendarType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CalendarType", str)
	}
	return nil
}

func (e CalendarType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ComparisonOperator string

const (
	ComparisonOperatorEq         ComparisonOperator = "EQ"
	ComparisonOperatorContains   ComparisonOperator = "CONTAINS"
	ComparisonOperatorStartsWith ComparisonOperator = "STARTS_WITH"
	ComparisonOperatorLte        ComparisonOperator = "LTE"
	ComparisonOperatorGte        ComparisonOperator = "GTE"
	ComparisonOperatorIn         ComparisonOperator = "IN"
	ComparisonOperatorBetween    ComparisonOperator = "BETWEEN"
)

var AllComparisonOperator = []ComparisonOperator{
	ComparisonOperatorEq,
	ComparisonOperatorContains,
	ComparisonOperatorStartsWith,
	ComparisonOperatorLte,
	ComparisonOperatorGte,
	ComparisonOperatorIn,
	ComparisonOperatorBetween,
}

func (e ComparisonOperator) IsValid() bool {
	switch e {
	case ComparisonOperatorEq, ComparisonOperatorContains, ComparisonOperatorStartsWith, ComparisonOperatorLte, ComparisonOperatorGte, ComparisonOperatorIn, ComparisonOperatorBetween:
		return true
	}
	return false
}

func (e ComparisonOperator) String() string {
	return string(e)
}

func (e *ComparisonOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComparisonOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComparisonOperator", str)
	}
	return nil
}

func (e ComparisonOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContractRenewalCycle string

const (
	ContractRenewalCycleNone             ContractRenewalCycle = "NONE"
	ContractRenewalCycleMonthlyRenewal   ContractRenewalCycle = "MONTHLY_RENEWAL"
	ContractRenewalCycleQuarterlyRenewal ContractRenewalCycle = "QUARTERLY_RENEWAL"
	ContractRenewalCycleAnnualRenewal    ContractRenewalCycle = "ANNUAL_RENEWAL"
)

var AllContractRenewalCycle = []ContractRenewalCycle{
	ContractRenewalCycleNone,
	ContractRenewalCycleMonthlyRenewal,
	ContractRenewalCycleQuarterlyRenewal,
	ContractRenewalCycleAnnualRenewal,
}

func (e ContractRenewalCycle) IsValid() bool {
	switch e {
	case ContractRenewalCycleNone, ContractRenewalCycleMonthlyRenewal, ContractRenewalCycleQuarterlyRenewal, ContractRenewalCycleAnnualRenewal:
		return true
	}
	return false
}

func (e ContractRenewalCycle) String() string {
	return string(e)
}

func (e *ContractRenewalCycle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractRenewalCycle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractRenewalCycle", str)
	}
	return nil
}

func (e ContractRenewalCycle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ContractStatus string

const (
	ContractStatusUndefined ContractStatus = "UNDEFINED"
	ContractStatusDraft     ContractStatus = "DRAFT"
	ContractStatusLive      ContractStatus = "LIVE"
	ContractStatusEnded     ContractStatus = "ENDED"
)

var AllContractStatus = []ContractStatus{
	ContractStatusUndefined,
	ContractStatusDraft,
	ContractStatusLive,
	ContractStatusEnded,
}

func (e ContractStatus) IsValid() bool {
	switch e {
	case ContractStatusUndefined, ContractStatusDraft, ContractStatusLive, ContractStatusEnded:
		return true
	}
	return false
}

func (e ContractStatus) String() string {
	return string(e)
}

func (e *ContractStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContractStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContractStatus", str)
	}
	return nil
}

func (e ContractStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomFieldDataType string

const (
	CustomFieldDataTypeText     CustomFieldDataType = "TEXT"
	CustomFieldDataTypeBool     CustomFieldDataType = "BOOL"
	CustomFieldDataTypeDatetime CustomFieldDataType = "DATETIME"
	CustomFieldDataTypeInteger  CustomFieldDataType = "INTEGER"
	CustomFieldDataTypeDecimal  CustomFieldDataType = "DECIMAL"
)

var AllCustomFieldDataType = []CustomFieldDataType{
	CustomFieldDataTypeText,
	CustomFieldDataTypeBool,
	CustomFieldDataTypeDatetime,
	CustomFieldDataTypeInteger,
	CustomFieldDataTypeDecimal,
}

func (e CustomFieldDataType) IsValid() bool {
	switch e {
	case CustomFieldDataTypeText, CustomFieldDataTypeBool, CustomFieldDataTypeDatetime, CustomFieldDataTypeInteger, CustomFieldDataTypeDecimal:
		return true
	}
	return false
}

func (e CustomFieldDataType) String() string {
	return string(e)
}

func (e *CustomFieldDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomFieldDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomFieldDataType", str)
	}
	return nil
}

func (e CustomFieldDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomFieldTemplateType string

const (
	CustomFieldTemplateTypeText CustomFieldTemplateType = "TEXT"
	CustomFieldTemplateTypeLink CustomFieldTemplateType = "LINK"
)

var AllCustomFieldTemplateType = []CustomFieldTemplateType{
	CustomFieldTemplateTypeText,
	CustomFieldTemplateTypeLink,
}

func (e CustomFieldTemplateType) IsValid() bool {
	switch e {
	case CustomFieldTemplateTypeText, CustomFieldTemplateTypeLink:
		return true
	}
	return false
}

func (e CustomFieldTemplateType) String() string {
	return string(e)
}

func (e *CustomFieldTemplateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomFieldTemplateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomFieldTemplateType", str)
	}
	return nil
}

func (e CustomFieldTemplateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DashboardCustomerMapState string

const (
	DashboardCustomerMapStateOk      DashboardCustomerMapState = "OK"
	DashboardCustomerMapStateAtRisk  DashboardCustomerMapState = "AT_RISK"
	DashboardCustomerMapStateChurned DashboardCustomerMapState = "CHURNED"
)

var AllDashboardCustomerMapState = []DashboardCustomerMapState{
	DashboardCustomerMapStateOk,
	DashboardCustomerMapStateAtRisk,
	DashboardCustomerMapStateChurned,
}

func (e DashboardCustomerMapState) IsValid() bool {
	switch e {
	case DashboardCustomerMapStateOk, DashboardCustomerMapStateAtRisk, DashboardCustomerMapStateChurned:
		return true
	}
	return false
}

func (e DashboardCustomerMapState) String() string {
	return string(e)
}

func (e *DashboardCustomerMapState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DashboardCustomerMapState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DashboardCustomerMapState", str)
	}
	return nil
}

func (e DashboardCustomerMapState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataSource string

const (
	DataSourceNa             DataSource = "NA"
	DataSourceOpenline       DataSource = "OPENLINE"
	DataSourceWebscrape      DataSource = "WEBSCRAPE"
	DataSourceHubspot        DataSource = "HUBSPOT"
	DataSourceZendeskSupport DataSource = "ZENDESK_SUPPORT"
	DataSourcePipedrive      DataSource = "PIPEDRIVE"
	DataSourceSLACk          DataSource = "SLACK"
	DataSourceIntercom       DataSource = "INTERCOM"
	DataSourceSalesforce     DataSource = "SALESFORCE"
	DataSourceStripe         DataSource = "STRIPE"
	DataSourceMixpanel       DataSource = "MIXPANEL"
)

var AllDataSource = []DataSource{
	DataSourceNa,
	DataSourceOpenline,
	DataSourceWebscrape,
	DataSourceHubspot,
	DataSourceZendeskSupport,
	DataSourcePipedrive,
	DataSourceSLACk,
	DataSourceIntercom,
	DataSourceSalesforce,
	DataSourceStripe,
	DataSourceMixpanel,
}

func (e DataSource) IsValid() bool {
	switch e {
	case DataSourceNa, DataSourceOpenline, DataSourceWebscrape, DataSourceHubspot, DataSourceZendeskSupport, DataSourcePipedrive, DataSourceSLACk, DataSourceIntercom, DataSourceSalesforce, DataSourceStripe, DataSourceMixpanel:
		return true
	}
	return false
}

func (e DataSource) String() string {
	return string(e)
}

func (e *DataSource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataSource", str)
	}
	return nil
}

func (e DataSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Describes the type of email address (WORK, PERSONAL, etc).
// **A `return` object.
type EmailLabel string

const (
	EmailLabelMain     EmailLabel = "MAIN"
	EmailLabelWork     EmailLabel = "WORK"
	EmailLabelPersonal EmailLabel = "PERSONAL"
	EmailLabelOther    EmailLabel = "OTHER"
)

var AllEmailLabel = []EmailLabel{
	EmailLabelMain,
	EmailLabelWork,
	EmailLabelPersonal,
	EmailLabelOther,
}

func (e EmailLabel) IsValid() bool {
	switch e {
	case EmailLabelMain, EmailLabelWork, EmailLabelPersonal, EmailLabelOther:
		return true
	}
	return false
}

func (e EmailLabel) String() string {
	return string(e)
}

func (e *EmailLabel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailLabel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailLabel", str)
	}
	return nil
}

func (e EmailLabel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EntityTemplateExtension string

const (
	EntityTemplateExtensionContact      EntityTemplateExtension = "CONTACT"
	EntityTemplateExtensionOrganization EntityTemplateExtension = "ORGANIZATION"
)

var AllEntityTemplateExtension = []EntityTemplateExtension{
	EntityTemplateExtensionContact,
	EntityTemplateExtensionOrganization,
}

func (e EntityTemplateExtension) IsValid() bool {
	switch e {
	case EntityTemplateExtensionContact, EntityTemplateExtensionOrganization:
		return true
	}
	return false
}

func (e EntityTemplateExtension) String() string {
	return string(e)
}

func (e *EntityTemplateExtension) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntityTemplateExtension(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntityTemplateExtension", str)
	}
	return nil
}

func (e EntityTemplateExtension) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EntityType string

const (
	EntityTypeContact      EntityType = "Contact"
	EntityTypeOrganization EntityType = "Organization"
)

var AllEntityType = []EntityType{
	EntityTypeContact,
	EntityTypeOrganization,
}

func (e EntityType) IsValid() bool {
	switch e {
	case EntityTypeContact, EntityTypeOrganization:
		return true
	}
	return false
}

func (e EntityType) String() string {
	return string(e)
}

func (e *EntityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntityType", str)
	}
	return nil
}

func (e EntityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExternalSystemType string

const (
	ExternalSystemTypeHubspot        ExternalSystemType = "HUBSPOT"
	ExternalSystemTypeZendeskSupport ExternalSystemType = "ZENDESK_SUPPORT"
	ExternalSystemTypeCalcom         ExternalSystemType = "CALCOM"
	ExternalSystemTypePipedrive      ExternalSystemType = "PIPEDRIVE"
	ExternalSystemTypeSLACk          ExternalSystemType = "SLACK"
	ExternalSystemTypeIntercom       ExternalSystemType = "INTERCOM"
	ExternalSystemTypeSalesforce     ExternalSystemType = "SALESFORCE"
	ExternalSystemTypeStripe         ExternalSystemType = "STRIPE"
	ExternalSystemTypeMixpanel       ExternalSystemType = "MIXPANEL"
)

var AllExternalSystemType = []ExternalSystemType{
	ExternalSystemTypeHubspot,
	ExternalSystemTypeZendeskSupport,
	ExternalSystemTypeCalcom,
	ExternalSystemTypePipedrive,
	ExternalSystemTypeSLACk,
	ExternalSystemTypeIntercom,
	ExternalSystemTypeSalesforce,
	ExternalSystemTypeStripe,
	ExternalSystemTypeMixpanel,
}

func (e ExternalSystemType) IsValid() bool {
	switch e {
	case ExternalSystemTypeHubspot, ExternalSystemTypeZendeskSupport, ExternalSystemTypeCalcom, ExternalSystemTypePipedrive, ExternalSystemTypeSLACk, ExternalSystemTypeIntercom, ExternalSystemTypeSalesforce, ExternalSystemTypeStripe, ExternalSystemTypeMixpanel:
		return true
	}
	return false
}

func (e ExternalSystemType) String() string {
	return string(e)
}

func (e *ExternalSystemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExternalSystemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExternalSystemType", str)
	}
	return nil
}

func (e ExternalSystemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FundingRound string

const (
	FundingRoundPreSeed          FundingRound = "PRE_SEED"
	FundingRoundSeed             FundingRound = "SEED"
	FundingRoundSeriesA          FundingRound = "SERIES_A"
	FundingRoundSeriesB          FundingRound = "SERIES_B"
	FundingRoundSeriesC          FundingRound = "SERIES_C"
	FundingRoundSeriesD          FundingRound = "SERIES_D"
	FundingRoundSeriesE          FundingRound = "SERIES_E"
	FundingRoundSeriesF          FundingRound = "SERIES_F"
	FundingRoundIPO              FundingRound = "IPO"
	FundingRoundFriendsAndFamily FundingRound = "FRIENDS_AND_FAMILY"
	FundingRoundAngel            FundingRound = "ANGEL"
	FundingRoundBridge           FundingRound = "BRIDGE"
)

var AllFundingRound = []FundingRound{
	FundingRoundPreSeed,
	FundingRoundSeed,
	FundingRoundSeriesA,
	FundingRoundSeriesB,
	FundingRoundSeriesC,
	FundingRoundSeriesD,
	FundingRoundSeriesE,
	FundingRoundSeriesF,
	FundingRoundIPO,
	FundingRoundFriendsAndFamily,
	FundingRoundAngel,
	FundingRoundBridge,
}

func (e FundingRound) IsValid() bool {
	switch e {
	case FundingRoundPreSeed, FundingRoundSeed, FundingRoundSeriesA, FundingRoundSeriesB, FundingRoundSeriesC, FundingRoundSeriesD, FundingRoundSeriesE, FundingRoundSeriesF, FundingRoundIPO, FundingRoundFriendsAndFamily, FundingRoundAngel, FundingRoundBridge:
		return true
	}
	return false
}

func (e FundingRound) String() string {
	return string(e)
}

func (e *FundingRound) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FundingRound(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FundingRound", str)
	}
	return nil
}

func (e FundingRound) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GCliCacheItemType string

const (
	GCliCacheItemTypeState        GCliCacheItemType = "STATE"
	GCliCacheItemTypeContact      GCliCacheItemType = "CONTACT"
	GCliCacheItemTypeOrganization GCliCacheItemType = "ORGANIZATION"
)

var AllGCliCacheItemType = []GCliCacheItemType{
	GCliCacheItemTypeState,
	GCliCacheItemTypeContact,
	GCliCacheItemTypeOrganization,
}

func (e GCliCacheItemType) IsValid() bool {
	switch e {
	case GCliCacheItemTypeState, GCliCacheItemTypeContact, GCliCacheItemTypeOrganization:
		return true
	}
	return false
}

func (e GCliCacheItemType) String() string {
	return string(e)
}

func (e *GCliCacheItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GCliCacheItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GCliCacheItemType", str)
	}
	return nil
}

func (e GCliCacheItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GCliSearchResultType string

const (
	GCliSearchResultTypeEmail                    GCliSearchResultType = "EMAIL"
	GCliSearchResultTypeContact                  GCliSearchResultType = "CONTACT"
	GCliSearchResultTypeOrganization             GCliSearchResultType = "ORGANIZATION"
	GCliSearchResultTypeOrganizationRelationship GCliSearchResultType = "ORGANIZATION_RELATIONSHIP"
	GCliSearchResultTypeState                    GCliSearchResultType = "STATE"
)

var AllGCliSearchResultType = []GCliSearchResultType{
	GCliSearchResultTypeEmail,
	GCliSearchResultTypeContact,
	GCliSearchResultTypeOrganization,
	GCliSearchResultTypeOrganizationRelationship,
	GCliSearchResultTypeState,
}

func (e GCliSearchResultType) IsValid() bool {
	switch e {
	case GCliSearchResultTypeEmail, GCliSearchResultTypeContact, GCliSearchResultTypeOrganization, GCliSearchResultTypeOrganizationRelationship, GCliSearchResultTypeState:
		return true
	}
	return false
}

func (e GCliSearchResultType) String() string {
	return string(e)
}

func (e *GCliSearchResultType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GCliSearchResultType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GCliSearchResultType", str)
	}
	return nil
}

func (e GCliSearchResultType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InternalStage string

const (
	InternalStageOpen       InternalStage = "OPEN"
	InternalStageEvaluating InternalStage = "EVALUATING"
	InternalStageClosedWon  InternalStage = "CLOSED_WON"
	InternalStageClosedLost InternalStage = "CLOSED_LOST"
)

var AllInternalStage = []InternalStage{
	InternalStageOpen,
	InternalStageEvaluating,
	InternalStageClosedWon,
	InternalStageClosedLost,
}

func (e InternalStage) IsValid() bool {
	switch e {
	case InternalStageOpen, InternalStageEvaluating, InternalStageClosedWon, InternalStageClosedLost:
		return true
	}
	return false
}

func (e InternalStage) String() string {
	return string(e)
}

func (e *InternalStage) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InternalStage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InternalStage", str)
	}
	return nil
}

func (e InternalStage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InternalType string

const (
	InternalTypeNbo       InternalType = "NBO"
	InternalTypeUpsell    InternalType = "UPSELL"
	InternalTypeCrossSell InternalType = "CROSS_SELL"
	InternalTypeRenewal   InternalType = "RENEWAL"
)

var AllInternalType = []InternalType{
	InternalTypeNbo,
	InternalTypeUpsell,
	InternalTypeCrossSell,
	InternalTypeRenewal,
}

func (e InternalType) IsValid() bool {
	switch e {
	case InternalTypeNbo, InternalTypeUpsell, InternalTypeCrossSell, InternalTypeRenewal:
		return true
	}
	return false
}

func (e InternalType) String() string {
	return string(e)
}

func (e *InternalType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InternalType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InternalType", str)
	}
	return nil
}

func (e InternalType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LastTouchpointType string

const (
	LastTouchpointTypePageView                  LastTouchpointType = "PAGE_VIEW"
	LastTouchpointTypeInteractionSession        LastTouchpointType = "INTERACTION_SESSION"
	LastTouchpointTypeNote                      LastTouchpointType = "NOTE"
	LastTouchpointTypeInteractionEventEmailSent LastTouchpointType = "INTERACTION_EVENT_EMAIL_SENT"
	LastTouchpointTypeInteractionEventPhoneCall LastTouchpointType = "INTERACTION_EVENT_PHONE_CALL"
	LastTouchpointTypeInteractionEventChat      LastTouchpointType = "INTERACTION_EVENT_CHAT"
	LastTouchpointTypeMeeting                   LastTouchpointType = "MEETING"
	LastTouchpointTypeAnalysis                  LastTouchpointType = "ANALYSIS"
	LastTouchpointTypeActionCreated             LastTouchpointType = "ACTION_CREATED"
	LastTouchpointTypeAction                    LastTouchpointType = "ACTION"
	LastTouchpointTypeLogEntry                  LastTouchpointType = "LOG_ENTRY"
	LastTouchpointTypeIssueCreated              LastTouchpointType = "ISSUE_CREATED"
	LastTouchpointTypeIssueUpdated              LastTouchpointType = "ISSUE_UPDATED"
)

var AllLastTouchpointType = []LastTouchpointType{
	LastTouchpointTypePageView,
	LastTouchpointTypeInteractionSession,
	LastTouchpointTypeNote,
	LastTouchpointTypeInteractionEventEmailSent,
	LastTouchpointTypeInteractionEventPhoneCall,
	LastTouchpointTypeInteractionEventChat,
	LastTouchpointTypeMeeting,
	LastTouchpointTypeAnalysis,
	LastTouchpointTypeActionCreated,
	LastTouchpointTypeAction,
	LastTouchpointTypeLogEntry,
	LastTouchpointTypeIssueCreated,
	LastTouchpointTypeIssueUpdated,
}

func (e LastTouchpointType) IsValid() bool {
	switch e {
	case LastTouchpointTypePageView, LastTouchpointTypeInteractionSession, LastTouchpointTypeNote, LastTouchpointTypeInteractionEventEmailSent, LastTouchpointTypeInteractionEventPhoneCall, LastTouchpointTypeInteractionEventChat, LastTouchpointTypeMeeting, LastTouchpointTypeAnalysis, LastTouchpointTypeActionCreated, LastTouchpointTypeAction, LastTouchpointTypeLogEntry, LastTouchpointTypeIssueCreated, LastTouchpointTypeIssueUpdated:
		return true
	}
	return false
}

func (e LastTouchpointType) String() string {
	return string(e)
}

func (e *LastTouchpointType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LastTouchpointType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LastTouchpointType", str)
	}
	return nil
}

func (e LastTouchpointType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Market string

const (
	MarketB2b         Market = "B2B"
	MarketB2c         Market = "B2C"
	MarketMarketplace Market = "MARKETPLACE"
)

var AllMarket = []Market{
	MarketB2b,
	MarketB2c,
	MarketMarketplace,
}

func (e Market) IsValid() bool {
	switch e {
	case MarketB2b, MarketB2c, MarketMarketplace:
		return true
	}
	return false
}

func (e Market) String() string {
	return string(e)
}

func (e *Market) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Market(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Market", str)
	}
	return nil
}

func (e Market) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MeetingStatus string

const (
	MeetingStatusUndefined MeetingStatus = "UNDEFINED"
	MeetingStatusAccepted  MeetingStatus = "ACCEPTED"
	MeetingStatusCanceled  MeetingStatus = "CANCELED"
)

var AllMeetingStatus = []MeetingStatus{
	MeetingStatusUndefined,
	MeetingStatusAccepted,
	MeetingStatusCanceled,
}

func (e MeetingStatus) IsValid() bool {
	switch e {
	case MeetingStatusUndefined, MeetingStatusAccepted, MeetingStatusCanceled:
		return true
	}
	return false
}

func (e MeetingStatus) String() string {
	return string(e)
}

func (e *MeetingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeetingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeetingStatus", str)
	}
	return nil
}

func (e MeetingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OnboardingStatus string

const (
	OnboardingStatusNotApplicable OnboardingStatus = "NOT_APPLICABLE"
	OnboardingStatusNotStarted    OnboardingStatus = "NOT_STARTED"
	OnboardingStatusOnTrack       OnboardingStatus = "ON_TRACK"
	OnboardingStatusLate          OnboardingStatus = "LATE"
	OnboardingStatusStuck         OnboardingStatus = "STUCK"
	OnboardingStatusDone          OnboardingStatus = "DONE"
	OnboardingStatusSuccessful    OnboardingStatus = "SUCCESSFUL"
)

var AllOnboardingStatus = []OnboardingStatus{
	OnboardingStatusNotApplicable,
	OnboardingStatusNotStarted,
	OnboardingStatusOnTrack,
	OnboardingStatusLate,
	OnboardingStatusStuck,
	OnboardingStatusDone,
	OnboardingStatusSuccessful,
}

func (e OnboardingStatus) IsValid() bool {
	switch e {
	case OnboardingStatusNotApplicable, OnboardingStatusNotStarted, OnboardingStatusOnTrack, OnboardingStatusLate, OnboardingStatusStuck, OnboardingStatusDone, OnboardingStatusSuccessful:
		return true
	}
	return false
}

func (e OnboardingStatus) String() string {
	return string(e)
}

func (e *OnboardingStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OnboardingStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OnboardingStatus", str)
	}
	return nil
}

func (e OnboardingStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OpportunityRenewalLikelihood string

const (
	OpportunityRenewalLikelihoodHighRenewal   OpportunityRenewalLikelihood = "HIGH_RENEWAL"
	OpportunityRenewalLikelihoodMediumRenewal OpportunityRenewalLikelihood = "MEDIUM_RENEWAL"
	OpportunityRenewalLikelihoodLowRenewal    OpportunityRenewalLikelihood = "LOW_RENEWAL"
	OpportunityRenewalLikelihoodZeroRenewal   OpportunityRenewalLikelihood = "ZERO_RENEWAL"
)

var AllOpportunityRenewalLikelihood = []OpportunityRenewalLikelihood{
	OpportunityRenewalLikelihoodHighRenewal,
	OpportunityRenewalLikelihoodMediumRenewal,
	OpportunityRenewalLikelihoodLowRenewal,
	OpportunityRenewalLikelihoodZeroRenewal,
}

func (e OpportunityRenewalLikelihood) IsValid() bool {
	switch e {
	case OpportunityRenewalLikelihoodHighRenewal, OpportunityRenewalLikelihoodMediumRenewal, OpportunityRenewalLikelihoodLowRenewal, OpportunityRenewalLikelihoodZeroRenewal:
		return true
	}
	return false
}

func (e OpportunityRenewalLikelihood) String() string {
	return string(e)
}

func (e *OpportunityRenewalLikelihood) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OpportunityRenewalLikelihood(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OpportunityRenewalLikelihood", str)
	}
	return nil
}

func (e OpportunityRenewalLikelihood) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The honorific title of an individual.
// **A `response` object.**
type PersonTitle string

const (
	// For men, regardless of marital status.
	PersonTitleMr PersonTitle = "MR"
	// For married women.
	PersonTitleMrs PersonTitle = "MRS"
	// For girls, unmarried women, and married women who continue to use their maiden name.
	PersonTitleMiss PersonTitle = "MISS"
	// For women, regardless of marital status, or when marital status is unknown.
	PersonTitleMs PersonTitle = "MS"
	// For the holder of a doctoral degree.
	PersonTitleDr PersonTitle = "DR"
)

var AllPersonTitle = []PersonTitle{
	PersonTitleMr,
	PersonTitleMrs,
	PersonTitleMiss,
	PersonTitleMs,
	PersonTitleDr,
}

func (e PersonTitle) IsValid() bool {
	switch e {
	case PersonTitleMr, PersonTitleMrs, PersonTitleMiss, PersonTitleMs, PersonTitleDr:
		return true
	}
	return false
}

func (e PersonTitle) String() string {
	return string(e)
}

func (e *PersonTitle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PersonTitle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PersonTitle", str)
	}
	return nil
}

func (e PersonTitle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Defines the type of phone number.
// **A `response` object. **
type PhoneNumberLabel string

const (
	PhoneNumberLabelMain   PhoneNumberLabel = "MAIN"
	PhoneNumberLabelWork   PhoneNumberLabel = "WORK"
	PhoneNumberLabelHome   PhoneNumberLabel = "HOME"
	PhoneNumberLabelMobile PhoneNumberLabel = "MOBILE"
	PhoneNumberLabelOther  PhoneNumberLabel = "OTHER"
)

var AllPhoneNumberLabel = []PhoneNumberLabel{
	PhoneNumberLabelMain,
	PhoneNumberLabelWork,
	PhoneNumberLabelHome,
	PhoneNumberLabelMobile,
	PhoneNumberLabelOther,
}

func (e PhoneNumberLabel) IsValid() bool {
	switch e {
	case PhoneNumberLabelMain, PhoneNumberLabelWork, PhoneNumberLabelHome, PhoneNumberLabelMobile, PhoneNumberLabelOther:
		return true
	}
	return false
}

func (e PhoneNumberLabel) String() string {
	return string(e)
}

func (e *PhoneNumberLabel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhoneNumberLabel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhoneNumberLabel", str)
	}
	return nil
}

func (e PhoneNumberLabel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin                   Role = "ADMIN"
	RoleCustomerOsPlatformOwner Role = "CUSTOMER_OS_PLATFORM_OWNER"
	RoleOwner                   Role = "OWNER"
	RoleUser                    Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleCustomerOsPlatformOwner,
	RoleOwner,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleCustomerOsPlatformOwner, RoleOwner, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortingDirection string

const (
	SortingDirectionAsc  SortingDirection = "ASC"
	SortingDirectionDesc SortingDirection = "DESC"
)

var AllSortingDirection = []SortingDirection{
	SortingDirectionAsc,
	SortingDirectionDesc,
}

func (e SortingDirection) IsValid() bool {
	switch e {
	case SortingDirectionAsc, SortingDirectionDesc:
		return true
	}
	return false
}

func (e SortingDirection) String() string {
	return string(e)
}

func (e *SortingDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortingDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortingDirection", str)
	}
	return nil
}

func (e SortingDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimelineEventType string

const (
	TimelineEventTypePageView           TimelineEventType = "PAGE_VIEW"
	TimelineEventTypeInteractionSession TimelineEventType = "INTERACTION_SESSION"
	TimelineEventTypeNote               TimelineEventType = "NOTE"
	TimelineEventTypeInteractionEvent   TimelineEventType = "INTERACTION_EVENT"
	TimelineEventTypeAnalysis           TimelineEventType = "ANALYSIS"
	TimelineEventTypeIssue              TimelineEventType = "ISSUE"
	TimelineEventTypeMeeting            TimelineEventType = "MEETING"
	TimelineEventTypeAction             TimelineEventType = "ACTION"
	TimelineEventTypeLogEntry           TimelineEventType = "LOG_ENTRY"
)

var AllTimelineEventType = []TimelineEventType{
	TimelineEventTypePageView,
	TimelineEventTypeInteractionSession,
	TimelineEventTypeNote,
	TimelineEventTypeInteractionEvent,
	TimelineEventTypeAnalysis,
	TimelineEventTypeIssue,
	TimelineEventTypeMeeting,
	TimelineEventTypeAction,
	TimelineEventTypeLogEntry,
}

func (e TimelineEventType) IsValid() bool {
	switch e {
	case TimelineEventTypePageView, TimelineEventTypeInteractionSession, TimelineEventTypeNote, TimelineEventTypeInteractionEvent, TimelineEventTypeAnalysis, TimelineEventTypeIssue, TimelineEventTypeMeeting, TimelineEventTypeAction, TimelineEventTypeLogEntry:
		return true
	}
	return false
}

func (e TimelineEventType) String() string {
	return string(e)
}

func (e *TimelineEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimelineEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimelineEventType", str)
	}
	return nil
}

func (e TimelineEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
