// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type DescriptionNode interface {
	IsDescriptionNode()
}

type ExtensibleEntity interface {
	IsNode()
	IsExtensibleEntity()
	GetID() string
	GetTemplate() *EntityTemplate
}

type InteractionEventParticipant interface {
	IsInteractionEventParticipant()
}

type InteractionSessionParticipant interface {
	IsInteractionSessionParticipant()
}

type MeetingParticipant interface {
	IsMeetingParticipant()
}

type Node interface {
	IsNode()
	GetID() string
}

type NotedEntity interface {
	IsNotedEntity()
}

// Describes the number of pages and total elements included in a query response.
// **A `response` object.**
type Pages interface {
	IsPages()
	// The total number of pages included in the query response.
	// **Required.**
	GetTotalPages() int
	// The total number of elements included in the query response.
	// **Required.**
	GetTotalElements() int64
}

type SearchResult interface {
	IsSearchResult()
}

type TimelineEvent interface {
	IsTimelineEvent()
}

type Analysis struct {
	ID            string            `json:"id"`
	CreatedAt     time.Time         `json:"createdAt"`
	Content       *string           `json:"content,omitempty"`
	ContentType   *string           `json:"contentType,omitempty"`
	AnalysisType  *string           `json:"analysisType,omitempty"`
	Describes     []DescriptionNode `json:"describes"`
	Source        DataSource        `json:"source"`
	SourceOfTruth DataSource        `json:"sourceOfTruth"`
	AppSource     string            `json:"appSource"`
}

func (Analysis) IsNode()            {}
func (this Analysis) GetID() string { return this.ID }

func (Analysis) IsTimelineEvent() {}

type AnalysisDescriptionInput struct {
	InteractionEventID   *string `json:"interactionEventId,omitempty"`
	InteractionSessionID *string `json:"interactionSessionId,omitempty"`
}

type AnalysisInput struct {
	Content      *string                     `json:"content,omitempty"`
	ContentType  *string                     `json:"contentType,omitempty"`
	AnalysisType *string                     `json:"analysisType,omitempty"`
	Describes    []*AnalysisDescriptionInput `json:"describes"`
	AppSource    string                      `json:"appSource"`
}

type Attachment struct {
	ID            string     `json:"id"`
	CreatedAt     time.Time  `json:"createdAt"`
	MimeType      string     `json:"mimeType"`
	Name          string     `json:"name"`
	Size          int64      `json:"size"`
	Extension     string     `json:"extension"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     string     `json:"appSource"`
}

func (Attachment) IsNode()            {}
func (this Attachment) GetID() string { return this.ID }

type AttachmentInput struct {
	MimeType  string `json:"mimeType"`
	Name      string `json:"name"`
	Size      int64  `json:"size"`
	Extension string `json:"extension"`
	AppSource string `json:"appSource"`
}

// A contact represents an individual in customerOS.
// **A `response` object.**
type Contact struct {
	// The unique ID associated with the contact in customerOS.
	// **Required**
	ID string `json:"id"`
	// The title associate with the contact in customerOS.
	Title  *string `json:"title,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	// The name of the contact in customerOS, alternative for firstName + lastName.
	Name *string `json:"name,omitempty"`
	// The first name of the contact in customerOS.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact in customerOS.
	LastName *string `json:"lastName,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	// **Required**
	CreatedAt     time.Time  `json:"createdAt"`
	UpdatedAt     time.Time  `json:"updatedAt"`
	Label         *string    `json:"label,omitempty"`
	Source        DataSource `json:"source"`
	SourceOfTruth DataSource `json:"sourceOfTruth"`
	AppSource     *string    `json:"appSource,omitempty"`
	Tags          []*Tag     `json:"tags,omitempty"`
	// `organizationName` and `jobTitle` of the contact if it has been associated with an organization.
	// **Required.  If no values it returns an empty array.**
	JobRoles      []*JobRole        `json:"jobRoles"`
	Organizations *OrganizationPage `json:"organizations"`
	// Identifies any contact groups the contact is associated with.
	// **Required.  If no values it returns an empty array.**
	Groups []*ContactGroup `json:"groups"`
	// All phone numbers associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	PhoneNumbers []*PhoneNumber `json:"phoneNumbers"`
	// All email addresses associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	Emails []*Email `json:"emails"`
	// All locations associated with a contact in customerOS.
	// **Required.  If no values it returns an empty array.**
	Locations []*Location `json:"locations"`
	// User defined metadata appended to the contact record in customerOS.
	// **Required.  If no values it returns an empty array.**
	CustomFields []*CustomField `json:"customFields"`
	FieldSets    []*FieldSet    `json:"fieldSets"`
	// Template of the contact in customerOS.
	Template *EntityTemplate `json:"template,omitempty"`
	// Contact owner (user)
	Owner *User `json:"owner,omitempty"`
	// Contact notes
	Notes                    *NotePage         `json:"notes"`
	NotesByTime              []*Note           `json:"notesByTime"`
	Conversations            *ConversationPage `json:"conversations"`
	TimelineEvents           []TimelineEvent   `json:"timelineEvents"`
	TimelineEventsTotalCount int64             `json:"timelineEventsTotalCount"`
}

func (Contact) IsExtensibleEntity()               {}
func (this Contact) GetID() string                { return this.ID }
func (this Contact) GetTemplate() *EntityTemplate { return this.Template }

func (Contact) IsNode() {}

func (Contact) IsNotedEntity() {}

// A collection of groups that a Contact belongs to.  Groups are user-defined entities.
// **A `return` object.**
type ContactGroup struct {
	// The unique ID associated with the `ContactGroup` in customerOS.
	// **Required**
	ID string `json:"id"`
	// The name of the `ContactGroup`.
	// **Required**
	Name      string        `json:"name"`
	Source    DataSource    `json:"source"`
	CreatedAt time.Time     `json:"createdAt"`
	Contacts  *ContactsPage `json:"contacts"`
}

// Create a groups that can be associated with a `Contact` in customerOS.
// **A `create` object.**
type ContactGroupInput struct {
	// The name of the `ContactGroup`.
	// **Required**
	Name string `json:"name"`
}

// Specifies how many pages of `ContactGroup` information has been returned in the query response.
// **A `response` object.**
type ContactGroupPage struct {
	// A collection of groups that a Contact belongs to.  Groups are user-defined entities.
	// **Required.  If no values it returns an empty array.**
	Content []*ContactGroup `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (ContactGroupPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this ContactGroupPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this ContactGroupPage) GetTotalElements() int64 { return this.TotalElements }

// Update a group that can be associated with a `Contact` in customerOS.
// **A `update` object.**
type ContactGroupUpdateInput struct {
	// The unique ID associated with the `ContactGroup` in customerOS.
	// **Required**
	ID string `json:"id"`
	// The name of the `ContactGroup`.
	// **Required**
	Name string `json:"name"`
}

// Create an individual in customerOS.
// **A `create` object.**
type ContactInput struct {
	// The unique ID associated with the template of the contact in customerOS.
	TemplateID *string `json:"templateId,omitempty"`
	// The prefix of the contact.
	Prefix *string `json:"prefix,omitempty"`
	// The first name of the contact.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact.
	LastName *string `json:"lastName,omitempty"`
	Label    *string `json:"label,omitempty"`
	// An ISO8601 timestamp recording when the contact was created in customerOS.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// User defined metadata appended to contact.
	// **Required.**
	CustomFields []*CustomFieldInput `json:"customFields,omitempty"`
	FieldSets    []*FieldSetInput    `json:"fieldSets,omitempty"`
	// An email addresses associted with the contact.
	Email *EmailInput `json:"email,omitempty"`
	// A phone number associated with the contact.
	PhoneNumber *PhoneNumberInput `json:"phoneNumber,omitempty"`
	// Id of the contact owner (user)
	OwnerID           *string                       `json:"ownerId,omitempty"`
	ExternalReference *ExternalSystemReferenceInput `json:"externalReference,omitempty"`
	AppSource         *string                       `json:"appSource,omitempty"`
}

type ContactOrganizationInput struct {
	ContactID      string `json:"contactId"`
	OrganizationID string `json:"organizationId"`
}

type ContactParticipant struct {
	ContactParticipant *Contact `json:"contactParticipant"`
	Type               *string  `json:"type,omitempty"`
}

func (ContactParticipant) IsInteractionEventParticipant() {}

func (ContactParticipant) IsInteractionSessionParticipant() {}

func (ContactParticipant) IsMeetingParticipant() {}

type ContactTagInput struct {
	ContactID string `json:"contactId"`
	TagID     string `json:"tagId"`
}

// Updates data fields associated with an existing customer record in customerOS.
// **An `update` object.**
type ContactUpdateInput struct {
	// The unique ID associated with the contact in customerOS.
	// **Required.**
	ID string `json:"id"`
	// The prefix associate with the contact in customerOS.
	Prefix *string `json:"prefix,omitempty"`
	// The first name of the contact in customerOS.
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the contact in customerOS.
	LastName *string `json:"lastName,omitempty"`
	Label    *string `json:"label,omitempty"`
	// Id of the contact owner (user)
	OwnerID *string `json:"ownerId,omitempty"`
}

// Specifies how many pages of contact information has been returned in the query response.
// **A `response` object.**
type ContactsPage struct {
	// A contact entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*Contact `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (ContactsPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this ContactsPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this ContactsPage) GetTotalElements() int64 { return this.TotalElements }

type Conversation struct {
	ID                 string             `json:"id"`
	StartedAt          time.Time          `json:"startedAt"`
	UpdatedAt          time.Time          `json:"updatedAt"`
	EndedAt            *time.Time         `json:"endedAt,omitempty"`
	Status             ConversationStatus `json:"status"`
	Channel            *string            `json:"channel,omitempty"`
	Subject            *string            `json:"subject,omitempty"`
	MessageCount       int64              `json:"messageCount"`
	Contacts           []*Contact         `json:"contacts,omitempty"`
	Users              []*User            `json:"users,omitempty"`
	Source             DataSource         `json:"source"`
	SourceOfTruth      DataSource         `json:"sourceOfTruth"`
	AppSource          *string            `json:"appSource,omitempty"`
	InitiatorFirstName *string            `json:"initiatorFirstName,omitempty"`
	InitiatorLastName  *string            `json:"initiatorLastName,omitempty"`
	InitiatorUsername  *string            `json:"initiatorUsername,omitempty"`
	InitiatorType      *string            `json:"initiatorType,omitempty"`
	ThreadID           *string            `json:"threadId,omitempty"`
}

func (Conversation) IsNode()            {}
func (this Conversation) GetID() string { return this.ID }

func (Conversation) IsTimelineEvent() {}

type ConversationInput struct {
	ID         *string            `json:"id,omitempty"`
	StartedAt  *time.Time         `json:"startedAt,omitempty"`
	ContactIds []string           `json:"contactIds,omitempty"`
	UserIds    []string           `json:"userIds,omitempty"`
	Status     ConversationStatus `json:"status"`
	Channel    *string            `json:"channel,omitempty"`
	AppSource  *string            `json:"appSource,omitempty"`
}

type ConversationPage struct {
	Content       []*Conversation `json:"content"`
	TotalPages    int             `json:"totalPages"`
	TotalElements int64           `json:"totalElements"`
}

func (ConversationPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this ConversationPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this ConversationPage) GetTotalElements() int64 { return this.TotalElements }

type ConversationUpdateInput struct {
	ID                        string              `json:"id"`
	ContactIds                []string            `json:"contactIds,omitempty"`
	UserIds                   []string            `json:"userIds,omitempty"`
	Status                    *ConversationStatus `json:"status,omitempty"`
	Channel                   *string             `json:"channel,omitempty"`
	SkipMessageCountIncrement bool                `json:"skipMessageCountIncrement"`
}

type Country struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CodeA2    string `json:"codeA2"`
	CodeA3    string `json:"codeA3"`
	PhoneCode string `json:"phoneCode"`
}

// Describes a custom, user-defined field associated with a `Contact`.
// **A `return` object.**
type CustomField struct {
	// The unique ID associated with the custom field.
	// **Required**
	ID string `json:"id"`
	// The name of the custom field.
	// **Required**
	Name string `json:"name"`
	// Datatype of the custom field.
	// **Required**
	Datatype CustomFieldDataType `json:"datatype"`
	// The value of the custom field.
	// **Required**
	Value AnyTypeValue `json:"value"`
	// The source of the custom field value
	Source    DataSource           `json:"source"`
	CreatedAt time.Time            `json:"createdAt"`
	UpdatedAt time.Time            `json:"updatedAt"`
	Template  *CustomFieldTemplate `json:"template,omitempty"`
}

func (CustomField) IsNode()            {}
func (this CustomField) GetID() string { return this.ID }

// Describes a custom, user-defined field associated with a `Contact` of type String.
// **A `create` object.**
type CustomFieldInput struct {
	// The unique ID associated with the custom field.
	ID *string `json:"id,omitempty"`
	// The name of the custom field.
	// **Required**
	Name string `json:"name"`
	// Datatype of the custom field.
	// **Required**
	Datatype CustomFieldDataType `json:"datatype"`
	// The value of the custom field.
	// **Required**
	Value      AnyTypeValue `json:"value"`
	TemplateID *string      `json:"templateId,omitempty"`
}

type CustomFieldTemplate struct {
	ID        string                  `json:"id"`
	CreatedAt time.Time               `json:"createdAt"`
	UpdatedAt time.Time               `json:"updatedAt"`
	Name      string                  `json:"name"`
	Type      CustomFieldTemplateType `json:"type"`
	Order     int                     `json:"order"`
	Mandatory bool                    `json:"mandatory"`
	Length    *int                    `json:"length,omitempty"`
	Min       *int                    `json:"min,omitempty"`
	Max       *int                    `json:"max,omitempty"`
}

func (CustomFieldTemplate) IsNode()            {}
func (this CustomFieldTemplate) GetID() string { return this.ID }

type CustomFieldTemplateInput struct {
	Name      string                  `json:"name"`
	Type      CustomFieldTemplateType `json:"type"`
	Order     int                     `json:"order"`
	Mandatory bool                    `json:"mandatory"`
	Length    *int                    `json:"length,omitempty"`
	Min       *int                    `json:"min,omitempty"`
	Max       *int                    `json:"max,omitempty"`
}

// Describes a custom, user-defined field associated with a `Contact`.
// **An `update` object.**
type CustomFieldUpdateInput struct {
	// The unique ID associated with the custom field.
	// **Required**
	ID string `json:"id"`
	// The name of the custom field.
	// **Required**
	Name string `json:"name"`
	// Datatype of the custom field.
	// **Required**
	Datatype CustomFieldDataType `json:"datatype"`
	// The value of the custom field.
	// **Required**
	Value AnyTypeValue `json:"value"`
}

type DashboardViewItem struct {
	Contact      *Contact      `json:"contact,omitempty"`
	Organization *Organization `json:"organization,omitempty"`
}

type DashboardViewItemPage struct {
	Content       []*DashboardViewItem `json:"content"`
	TotalPages    int                  `json:"totalPages"`
	TotalElements int64                `json:"totalElements"`
}

func (DashboardViewItemPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this DashboardViewItemPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this DashboardViewItemPage) GetTotalElements() int64 { return this.TotalElements }

// Describes an email address associated with a `Contact` in customerOS.
// **A `return` object.**
type Email struct {
	// The unique ID associated with the contact in customerOS.
	// **Required**
	ID string `json:"id"`
	// An email address assocaited with the contact in customerOS.
	Email     *string `json:"email,omitempty"`
	RawEmail  *string `json:"rawEmail,omitempty"`
	Validated *bool   `json:"validated,omitempty"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary       bool            `json:"primary"`
	Source        DataSource      `json:"source"`
	SourceOfTruth DataSource      `json:"sourceOfTruth"`
	AppSource     string          `json:"appSource"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
	Users         []*User         `json:"users"`
	Contacts      []*Contact      `json:"contacts"`
	Organizations []*Organization `json:"organizations"`
}

// Describes an email address associated with a `Contact` in customerOS.
// **A `create` object.**
type EmailInput struct {
	// An email address associated with the contact in customerOS.
	// **Required.**
	Email string `json:"email"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary   *bool   `json:"primary,omitempty"`
	AppSource *string `json:"appSource,omitempty"`
}

type EmailParticipant struct {
	EmailParticipant *Email  `json:"emailParticipant"`
	Type             *string `json:"type,omitempty"`
}

func (EmailParticipant) IsInteractionEventParticipant() {}

func (EmailParticipant) IsInteractionSessionParticipant() {}

// Describes an email address associated with a `Contact` in customerOS.
// **An `update` object.**
type EmailUpdateInput struct {
	// An email address assocaited with the contact in customerOS.
	// **Required.**
	ID string `json:"id"`
	// Describes the type of email address (WORK, PERSONAL, etc).
	Label *EmailLabel `json:"label,omitempty"`
	// Identifies whether the email address is primary or not.
	// **Required.**
	Primary *bool   `json:"primary,omitempty"`
	Email   *string `json:"email,omitempty"`
}

type EntityTemplate struct {
	ID           string                   `json:"id"`
	Version      int                      `json:"version"`
	Name         string                   `json:"name"`
	Extends      *EntityTemplateExtension `json:"extends,omitempty"`
	FieldSets    []*FieldSetTemplate      `json:"fieldSets"`
	CustomFields []*CustomFieldTemplate   `json:"customFields"`
	CreatedAt    time.Time                `json:"createdAt"`
	UpdatedAt    time.Time                `json:"updatedAt"`
}

func (EntityTemplate) IsNode()            {}
func (this EntityTemplate) GetID() string { return this.ID }

type EntityTemplateInput struct {
	Name         string                      `json:"name"`
	Extends      *EntityTemplateExtension    `json:"extends,omitempty"`
	FieldSets    []*FieldSetTemplateInput    `json:"fieldSets,omitempty"`
	CustomFields []*CustomFieldTemplateInput `json:"customFields,omitempty"`
}

type ExternalSystemReferenceInput struct {
	ID       string             `json:"id"`
	SyncDate *time.Time         `json:"syncDate,omitempty"`
	Type     ExternalSystemType `json:"type"`
}

type FieldSet struct {
	ID           string            `json:"id"`
	Name         string            `json:"name"`
	CreatedAt    time.Time         `json:"createdAt"`
	UpdatedAt    time.Time         `json:"updatedAt"`
	CustomFields []*CustomField    `json:"customFields"`
	Template     *FieldSetTemplate `json:"template,omitempty"`
	Source       DataSource        `json:"source"`
}

type FieldSetInput struct {
	ID           *string             `json:"id,omitempty"`
	Name         string              `json:"name"`
	CustomFields []*CustomFieldInput `json:"customFields,omitempty"`
	TemplateID   *string             `json:"templateId,omitempty"`
}

type FieldSetTemplate struct {
	ID           string                 `json:"id"`
	CreatedAt    time.Time              `json:"createdAt"`
	UpdatedAt    time.Time              `json:"updatedAt"`
	Name         string                 `json:"name"`
	Order        int                    `json:"order"`
	CustomFields []*CustomFieldTemplate `json:"customFields"`
}

func (FieldSetTemplate) IsNode()            {}
func (this FieldSetTemplate) GetID() string { return this.ID }

type FieldSetTemplateInput struct {
	Name         string                      `json:"name"`
	Order        int                         `json:"order"`
	CustomFields []*CustomFieldTemplateInput `json:"customFields,omitempty"`
}

type FieldSetUpdateInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Filter struct {
	Not    *Filter     `json:"NOT,omitempty"`
	And    []*Filter   `json:"AND,omitempty"`
	Or     []*Filter   `json:"OR,omitempty"`
	Filter *FilterItem `json:"filter,omitempty"`
}

type FilterItem struct {
	Property      string             `json:"property"`
	Operation     ComparisonOperator `json:"operation"`
	Value         AnyTypeValue       `json:"value"`
	CaseSensitive *bool              `json:"caseSensitive,omitempty"`
}

type GCliSearchResultItem struct {
	Score  float64      `json:"score"`
	Result SearchResult `json:"result"`
}

type InteractionEvent struct {
	ID                 string                        `json:"id"`
	CreatedAt          time.Time                     `json:"createdAt"`
	EventIdentifier    *string                       `json:"eventIdentifier,omitempty"`
	Content            *string                       `json:"content,omitempty"`
	ContentType        *string                       `json:"contentType,omitempty"`
	Channel            *string                       `json:"channel,omitempty"`
	ChannelData        *string                       `json:"channelData,omitempty"`
	InteractionSession *InteractionSession           `json:"interactionSession,omitempty"`
	Meeting            *Meeting                      `json:"meeting,omitempty"`
	SentBy             []InteractionEventParticipant `json:"sentBy"`
	SentTo             []InteractionEventParticipant `json:"sentTo"`
	RepliesTo          *InteractionEvent             `json:"repliesTo,omitempty"`
	Source             DataSource                    `json:"source"`
	SourceOfTruth      DataSource                    `json:"sourceOfTruth"`
	AppSource          string                        `json:"appSource"`
	Includes           []*Attachment                 `json:"includes"`
}

func (InteractionEvent) IsDescriptionNode() {}

func (InteractionEvent) IsNode()            {}
func (this InteractionEvent) GetID() string { return this.ID }

func (InteractionEvent) IsTimelineEvent() {}

type InteractionEventInput struct {
	EventIdentifier    *string                             `json:"eventIdentifier,omitempty"`
	Content            *string                             `json:"content,omitempty"`
	ContentType        *string                             `json:"contentType,omitempty"`
	Channel            *string                             `json:"channel,omitempty"`
	ChannelData        *string                             `json:"channelData,omitempty"`
	InteractionSession *string                             `json:"interactionSession,omitempty"`
	MeetingID          *string                             `json:"meetingId,omitempty"`
	SentBy             []*InteractionEventParticipantInput `json:"sentBy"`
	SentTo             []*InteractionEventParticipantInput `json:"sentTo"`
	RepliesTo          *string                             `json:"repliesTo,omitempty"`
	AppSource          string                              `json:"appSource"`
}

type InteractionEventParticipantInput struct {
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	ContactID   *string `json:"contactID,omitempty"`
	UserID      *string `json:"userID,omitempty"`
	Type        *string `json:"type,omitempty"`
}

type InteractionSession struct {
	ID                string                          `json:"id"`
	StartedAt         time.Time                       `json:"startedAt"`
	EndedAt           *time.Time                      `json:"endedAt,omitempty"`
	CreatedAt         time.Time                       `json:"createdAt"`
	UpdatedAt         time.Time                       `json:"updatedAt"`
	SessionIdentifier *string                         `json:"sessionIdentifier,omitempty"`
	Name              string                          `json:"name"`
	Status            string                          `json:"status"`
	Type              *string                         `json:"type,omitempty"`
	Channel           *string                         `json:"channel,omitempty"`
	ChannelData       *string                         `json:"channelData,omitempty"`
	Source            DataSource                      `json:"source"`
	SourceOfTruth     DataSource                      `json:"sourceOfTruth"`
	AppSource         string                          `json:"appSource"`
	Events            []*InteractionEvent             `json:"events"`
	AttendedBy        []InteractionSessionParticipant `json:"attendedBy"`
	Includes          []*Attachment                   `json:"includes"`
}

func (InteractionSession) IsDescriptionNode() {}

func (InteractionSession) IsNode()            {}
func (this InteractionSession) GetID() string { return this.ID }

func (InteractionSession) IsTimelineEvent() {}

type InteractionSessionInput struct {
	SessionIdentifier *string                               `json:"sessionIdentifier,omitempty"`
	Name              string                                `json:"name"`
	Status            string                                `json:"status"`
	Type              *string                               `json:"type,omitempty"`
	Channel           *string                               `json:"channel,omitempty"`
	ChannelData       *string                               `json:"channelData,omitempty"`
	AttendedBy        []*InteractionSessionParticipantInput `json:"attendedBy,omitempty"`
	AppSource         string                                `json:"appSource"`
}

type InteractionSessionParticipantInput struct {
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	ContactID   *string `json:"contactID,omitempty"`
	UserID      *string `json:"userID,omitempty"`
	Type        *string `json:"type,omitempty"`
}

type Issue struct {
	ID          string    `json:"id"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	Subject     *string   `json:"subject,omitempty"`
	Status      string    `json:"status"`
	Priority    *string   `json:"priority,omitempty"`
	Description *string   `json:"description,omitempty"`
	Tags        []*Tag    `json:"tags,omitempty"`
}

func (Issue) IsNode()            {}
func (this Issue) GetID() string { return this.ID }

func (Issue) IsTimelineEvent() {}

type IssueSummaryByStatus struct {
	Status string `json:"status"`
	Count  int64  `json:"count"`
}

// Describes the relationship a Contact has with a Organization.
// **A `return` object**
type JobRole struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	// Organization associated with a Contact.
	// **Required.**
	Organization *Organization `json:"organization,omitempty"`
	Contact      *Contact      `json:"contact,omitempty"`
	// The Contact's job title.
	JobTitle            *string    `json:"jobTitle,omitempty"`
	Primary             bool       `json:"primary"`
	ResponsibilityLevel int64      `json:"responsibilityLevel"`
	Source              DataSource `json:"source"`
	SourceOfTruth       DataSource `json:"sourceOfTruth"`
	AppSource           string     `json:"appSource"`
}

// Describes the relationship a Contact has with an Organization.
// **A `create` object**
type JobRoleInput struct {
	OrganizationID *string `json:"organizationId,omitempty"`
	// The Contact's job title.
	JobTitle            *string `json:"jobTitle,omitempty"`
	Primary             *bool   `json:"primary,omitempty"`
	ResponsibilityLevel *int64  `json:"responsibilityLevel,omitempty"`
	AppSource           *string `json:"appSource,omitempty"`
}

// Describes the relationship a Contact has with an Organization.
// **A `create` object**
type JobRoleUpdateInput struct {
	ID             string  `json:"id"`
	OrganizationID *string `json:"organizationId,omitempty"`
	// The Contact's job title.
	JobTitle            *string `json:"jobTitle,omitempty"`
	Primary             *bool   `json:"primary,omitempty"`
	ResponsibilityLevel *int64  `json:"responsibilityLevel,omitempty"`
}

type LinkOrganizationsInput struct {
	OrganizationID    string  `json:"organizationId"`
	SubOrganizationID string  `json:"subOrganizationId"`
	Type              *string `json:"type,omitempty"`
}

type LinkedOrganization struct {
	Organization *Organization `json:"organization"`
	Type         *string       `json:"type,omitempty"`
}

type Location struct {
	ID           string      `json:"id"`
	Name         string      `json:"name"`
	CreatedAt    time.Time   `json:"createdAt"`
	UpdatedAt    time.Time   `json:"updatedAt"`
	Source       *DataSource `json:"source,omitempty"`
	AppSource    *string     `json:"appSource,omitempty"`
	Country      *string     `json:"country,omitempty"`
	Region       *string     `json:"region,omitempty"`
	Locality     *string     `json:"locality,omitempty"`
	Address      *string     `json:"address,omitempty"`
	Address2     *string     `json:"address2,omitempty"`
	Zip          *string     `json:"zip,omitempty"`
	AddressType  *string     `json:"addressType,omitempty"`
	HouseNumber  *string     `json:"houseNumber,omitempty"`
	PostalCode   *string     `json:"postalCode,omitempty"`
	PlusFour     *string     `json:"plusFour,omitempty"`
	Commercial   *bool       `json:"commercial,omitempty"`
	Predirection *string     `json:"predirection,omitempty"`
	District     *string     `json:"district,omitempty"`
	Street       *string     `json:"street,omitempty"`
	RawAddress   *string     `json:"rawAddress,omitempty"`
	Latitude     *float64    `json:"latitude,omitempty"`
	Longitude    *float64    `json:"longitude,omitempty"`
	Place        *Place      `json:"place,omitempty"`
}

type Meeting struct {
	ID                string               `json:"id"`
	Name              *string              `json:"name,omitempty"`
	CreatedAt         time.Time            `json:"createdAt"`
	UpdatedAt         time.Time            `json:"updatedAt"`
	Start             *time.Time           `json:"start,omitempty"`
	End               *time.Time           `json:"end,omitempty"`
	Location          *string              `json:"location,omitempty"`
	AttendedBy        []MeetingParticipant `json:"attendedBy,omitempty"`
	CreatedBy         []MeetingParticipant `json:"createdBy,omitempty"`
	Includes          []*Attachment        `json:"includes,omitempty"`
	Note              *Note                `json:"note,omitempty"`
	Events            []*InteractionEvent  `json:"events,omitempty"`
	Recording         *string              `json:"recording,omitempty"`
	AppSource         string               `json:"appSource"`
	Source            DataSource           `json:"source"`
	SourceOfTruth     DataSource           `json:"sourceOfTruth"`
	Agenda            *string              `json:"agenda,omitempty"`
	AgendaContentType *string              `json:"agendaContentType,omitempty"`
}

func (Meeting) IsNode()            {}
func (this Meeting) GetID() string { return this.ID }

func (Meeting) IsTimelineEvent() {}

type MeetingInput struct {
	Name              *string                    `json:"name,omitempty"`
	AttendedBy        []*MeetingParticipantInput `json:"attendedBy,omitempty"`
	CreatedBy         []*MeetingParticipantInput `json:"createdBy,omitempty"`
	Start             *time.Time                 `json:"start,omitempty"`
	End               *time.Time                 `json:"end,omitempty"`
	Location          *string                    `json:"location,omitempty"`
	Agenda            *string                    `json:"agenda,omitempty"`
	AgendaContentType *string                    `json:"agendaContentType,omitempty"`
	Note              *NoteInput                 `json:"note,omitempty"`
	AppSource         string                     `json:"appSource"`
	Recording         *string                    `json:"recording,omitempty"`
}

type MeetingParticipantInput struct {
	ContactID *string `json:"contactID,omitempty"`
	UserID    *string `json:"userID,omitempty"`
	Type      *string `json:"type,omitempty"`
}

type Note struct {
	ID            string        `json:"id"`
	HTML          string        `json:"html"`
	CreatedAt     time.Time     `json:"createdAt"`
	UpdatedAt     time.Time     `json:"updatedAt"`
	CreatedBy     *User         `json:"createdBy,omitempty"`
	Noted         []NotedEntity `json:"noted"`
	Includes      []*Attachment `json:"includes"`
	Source        DataSource    `json:"source"`
	SourceOfTruth DataSource    `json:"sourceOfTruth"`
	AppSource     string        `json:"appSource"`
}

func (Note) IsTimelineEvent() {}

type NoteInput struct {
	HTML      string  `json:"html"`
	AppSource *string `json:"appSource,omitempty"`
}

type NotePage struct {
	Content       []*Note `json:"content"`
	TotalPages    int     `json:"totalPages"`
	TotalElements int64   `json:"totalElements"`
}

func (NotePage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this NotePage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this NotePage) GetTotalElements() int64 { return this.TotalElements }

type NoteUpdateInput struct {
	ID   string `json:"id"`
	HTML string `json:"html"`
}

type Organization struct {
	ID               string            `json:"id"`
	CreatedAt        time.Time         `json:"createdAt"`
	UpdatedAt        time.Time         `json:"updatedAt"`
	Name             string            `json:"name"`
	Description      *string           `json:"description,omitempty"`
	Domain           *string           `json:"domain,omitempty"`
	Domains          []string          `json:"domains"`
	Website          *string           `json:"website,omitempty"`
	Industry         *string           `json:"industry,omitempty"`
	IsPublic         *bool             `json:"isPublic,omitempty"`
	OrganizationType *OrganizationType `json:"organizationType,omitempty"`
	Source           DataSource        `json:"source"`
	SourceOfTruth    DataSource        `json:"sourceOfTruth"`
	AppSource        string            `json:"appSource"`
	// All addresses associated with an organization in customerOS.
	// **Required.  If no values it returns an empty array.**
	Locations                []*Location             `json:"locations"`
	Contacts                 *ContactsPage           `json:"contacts"`
	JobRoles                 []*JobRole              `json:"jobRoles"`
	Notes                    *NotePage               `json:"notes"`
	Tags                     []*Tag                  `json:"tags,omitempty"`
	Emails                   []*Email                `json:"emails"`
	PhoneNumbers             []*PhoneNumber          `json:"phoneNumbers"`
	Subsidiaries             []*LinkedOrganization   `json:"subsidiaries"`
	SubsidiaryOf             []*LinkedOrganization   `json:"subsidiaryOf"`
	TimelineEvents           []TimelineEvent         `json:"timelineEvents"`
	TimelineEventsTotalCount int64                   `json:"timelineEventsTotalCount"`
	IssueSummaryByStatus     []*IssueSummaryByStatus `json:"issueSummaryByStatus"`
}

func (Organization) IsNotedEntity() {}

func (Organization) IsNode()            {}
func (this Organization) GetID() string { return this.ID }

type OrganizationInput struct {
	// The name of the organization.
	// **Required.**
	Name               string   `json:"name"`
	Description        *string  `json:"description,omitempty"`
	Domain             *string  `json:"domain,omitempty"`
	Domains            []string `json:"domains,omitempty"`
	Website            *string  `json:"website,omitempty"`
	Industry           *string  `json:"industry,omitempty"`
	IsPublic           *bool    `json:"isPublic,omitempty"`
	OrganizationTypeID *string  `json:"organizationTypeId,omitempty"`
	AppSource          *string  `json:"appSource,omitempty"`
}

type OrganizationPage struct {
	Content       []*Organization `json:"content"`
	TotalPages    int             `json:"totalPages"`
	TotalElements int64           `json:"totalElements"`
}

func (OrganizationPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this OrganizationPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this OrganizationPage) GetTotalElements() int64 { return this.TotalElements }

type OrganizationType struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type OrganizationTypeInput struct {
	Name string `json:"name"`
}

type OrganizationTypeUpdateInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type OrganizationUpdateInput struct {
	ID                 string   `json:"id"`
	Name               string   `json:"name"`
	Description        *string  `json:"description,omitempty"`
	Domain             *string  `json:"domain,omitempty"`
	Domains            []string `json:"domains,omitempty"`
	Website            *string  `json:"website,omitempty"`
	Industry           *string  `json:"industry,omitempty"`
	IsPublic           *bool    `json:"isPublic,omitempty"`
	OrganizationTypeID *string  `json:"organizationTypeId,omitempty"`
}

type PageView struct {
	ID             string    `json:"id"`
	StartedAt      time.Time `json:"startedAt"`
	EndedAt        time.Time `json:"endedAt"`
	PageTitle      string    `json:"pageTitle"`
	PageURL        string    `json:"pageUrl"`
	Application    string    `json:"application"`
	SessionID      string    `json:"sessionId"`
	OrderInSession int64     `json:"orderInSession"`
	EngagedTime    int64     `json:"engagedTime"`
}

func (PageView) IsNode()            {}
func (this PageView) GetID() string { return this.ID }

func (PageView) IsTimelineEvent() {}

// If provided as part of the request, results will be filtered down to the `page` and `limit` specified.
type Pagination struct {
	// The results page to return in the response.
	// **Required.**
	Page int `json:"page"`
	// The maximum number of results in the response.
	// **Required.**
	Limit int `json:"limit"`
}

// Describes a phone number associated with a `Contact` in customerOS.
// **A `return` object.**
type PhoneNumber struct {
	// The unique ID associated with the phone number.
	// **Required**
	ID string `json:"id"`
	// The phone number in e164 format.
	E164           *string `json:"e164,omitempty"`
	RawPhoneNumber *string `json:"rawPhoneNumber,omitempty"`
	Validated      *bool   `json:"validated,omitempty"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary       bool            `json:"primary"`
	CreatedAt     time.Time       `json:"createdAt"`
	UpdatedAt     time.Time       `json:"updatedAt"`
	Source        DataSource      `json:"source"`
	AppSource     *string         `json:"appSource,omitempty"`
	Users         []*User         `json:"users"`
	Contacts      []*Contact      `json:"contacts"`
	Organizations []*Organization `json:"organizations"`
}

// Describes a phone number associated with a `Contact` in customerOS.
// **A `create` object.**
type PhoneNumberInput struct {
	// The phone number in e164 format.
	// **Required**
	PhoneNumber string `json:"phoneNumber"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary *bool `json:"primary,omitempty"`
}

type PhoneNumberParticipant struct {
	PhoneNumberParticipant *PhoneNumber `json:"phoneNumberParticipant"`
	Type                   *string      `json:"type,omitempty"`
}

func (PhoneNumberParticipant) IsInteractionEventParticipant() {}

func (PhoneNumberParticipant) IsInteractionSessionParticipant() {}

// Describes a phone number associated with a `Contact` in customerOS.
// **An `update` object.**
type PhoneNumberUpdateInput struct {
	// The unique ID associated with the phone number.
	// **Required**
	ID string `json:"id"`
	// Defines the type of phone number.
	Label *PhoneNumberLabel `json:"label,omitempty"`
	// Determines if the phone number is primary or not.
	// **Required**
	Primary     *bool   `json:"primary,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

type Place struct {
	ID        string      `json:"id"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt time.Time   `json:"updatedAt"`
	Country   *string     `json:"country,omitempty"`
	State     *string     `json:"state,omitempty"`
	City      *string     `json:"city,omitempty"`
	Address   *string     `json:"address,omitempty"`
	Address2  *string     `json:"address2,omitempty"`
	Zip       *string     `json:"zip,omitempty"`
	Phone     *string     `json:"phone,omitempty"`
	Fax       *string     `json:"fax,omitempty"`
	Source    *DataSource `json:"source,omitempty"`
	AppSource *string     `json:"appSource,omitempty"`
}

// Describes the success or failure of the GraphQL call.
// **A `return` object**
type Result struct {
	// The result of the GraphQL call.
	// **Required.**
	Result bool `json:"result"`
}

type SortBy struct {
	By            string           `json:"by"`
	Direction     SortingDirection `json:"direction"`
	CaseSensitive *bool            `json:"caseSensitive,omitempty"`
}

type State struct {
	ID      string   `json:"id"`
	Country *Country `json:"country"`
	Name    string   `json:"name"`
	Code    string   `json:"code"`
}

func (State) IsSearchResult() {}

type Tag struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt time.Time  `json:"updatedAt"`
	Source    DataSource `json:"source"`
	AppSource string     `json:"appSource"`
}

type TagInput struct {
	Name      string  `json:"name"`
	AppSource *string `json:"appSource,omitempty"`
}

type TagUpdateInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type TimeRange struct {
	// The start time of the time range.
	// **Required.**
	From time.Time `json:"from"`
	// The end time of the time range.
	// **Required.**
	To time.Time `json:"to"`
}

type UpsertToEventStoreResult struct {
	PhoneNumberCount                           int `json:"phoneNumberCount"`
	PhoneNumberCountFailed                     int `json:"phoneNumberCountFailed"`
	EmailCount                                 int `json:"emailCount"`
	EmailCountFailed                           int `json:"emailCountFailed"`
	ContactCount                               int `json:"contactCount"`
	ContactCountFailed                         int `json:"contactCountFailed"`
	OrganizationCount                          int `json:"organizationCount"`
	OrganizationCountFailed                    int `json:"organizationCountFailed"`
	UserCount                                  int `json:"userCount"`
	UserCountFailed                            int `json:"userCountFailed"`
	ContactPhoneNumberRelationCount            int `json:"contactPhoneNumberRelationCount"`
	ContactPhoneNumberRelationCountFailed      int `json:"contactPhoneNumberRelationCountFailed"`
	ContactEmailRelationCount                  int `json:"contactEmailRelationCount"`
	ContactEmailRelationCountFailed            int `json:"contactEmailRelationCountFailed"`
	OrganizationPhoneNumberRelationCount       int `json:"organizationPhoneNumberRelationCount"`
	OrganizationPhoneNumberRelationCountFailed int `json:"organizationPhoneNumberRelationCountFailed"`
	OrganizationEmailRelationCount             int `json:"organizationEmailRelationCount"`
	OrganizationEmailRelationCountFailed       int `json:"organizationEmailRelationCountFailed"`
	UserPhoneNumberRelationCount               int `json:"userPhoneNumberRelationCount"`
	UserPhoneNumberRelationCountFailed         int `json:"userPhoneNumberRelationCountFailed"`
	UserEmailRelationCount                     int `json:"userEmailRelationCount"`
	UserEmailRelationCountFailed               int `json:"userEmailRelationCountFailed"`
}

// Describes the User of customerOS.  A user is the person who logs into the Openline platform.
// **A `return` object**
type User struct {
	// The unique ID associated with the customerOS user.
	// **Required**
	ID string `json:"id"`
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName string `json:"lastName"`
	// All email addresses associated with a user in customerOS.
	// **Required.  If no values it returns an empty array.**
	Emails       []*Email       `json:"emails,omitempty"`
	PhoneNumbers []*PhoneNumber `json:"phoneNumbers"`
	// Timestamp of user creation.
	// **Required**
	CreatedAt     time.Time         `json:"createdAt"`
	UpdatedAt     time.Time         `json:"updatedAt"`
	Source        DataSource        `json:"source"`
	Conversations *ConversationPage `json:"conversations"`
}

// Describes the User of customerOS.  A user is the person who logs into the Openline platform.
// **A `create` object.**
type UserInput struct {
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName string `json:"lastName"`
	// The email address of the customerOS user.
	// **Required**
	Email *EmailInput `json:"email"`
}

// Specifies how many pages of `User` information has been returned in the query response.
// **A `return` object.**
type UserPage struct {
	// A `User` entity in customerOS.
	// **Required.  If no values it returns an empty array.**
	Content []*User `json:"content"`
	// Total number of pages in the query response.
	// **Required.**
	TotalPages int `json:"totalPages"`
	// Total number of elements in the query response.
	// **Required.**
	TotalElements int64 `json:"totalElements"`
}

func (UserPage) IsPages() {}

// The total number of pages included in the query response.
// **Required.**
func (this UserPage) GetTotalPages() int { return this.TotalPages }

// The total number of elements included in the query response.
// **Required.**
func (this UserPage) GetTotalElements() int64 { return this.TotalElements }

type UserParticipant struct {
	UserParticipant *User   `json:"userParticipant"`
	Type            *string `json:"type,omitempty"`
}

func (UserParticipant) IsInteractionEventParticipant() {}

func (UserParticipant) IsInteractionSessionParticipant() {}

func (UserParticipant) IsMeetingParticipant() {}

type UserUpdateInput struct {
	ID string `json:"id"`
	// The first name of the customerOS user.
	// **Required**
	FirstName string `json:"firstName"`
	// The last name of the customerOS user.
	// **Required**
	LastName string `json:"lastName"`
}

type ComparisonOperator string

const (
	ComparisonOperatorEq       ComparisonOperator = "EQ"
	ComparisonOperatorContains ComparisonOperator = "CONTAINS"
)

var AllComparisonOperator = []ComparisonOperator{
	ComparisonOperatorEq,
	ComparisonOperatorContains,
}

func (e ComparisonOperator) IsValid() bool {
	switch e {
	case ComparisonOperatorEq, ComparisonOperatorContains:
		return true
	}
	return false
}

func (e ComparisonOperator) String() string {
	return string(e)
}

func (e *ComparisonOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComparisonOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComparisonOperator", str)
	}
	return nil
}

func (e ComparisonOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ConversationStatus string

const (
	ConversationStatusActive ConversationStatus = "ACTIVE"
	ConversationStatusClosed ConversationStatus = "CLOSED"
)

var AllConversationStatus = []ConversationStatus{
	ConversationStatusActive,
	ConversationStatusClosed,
}

func (e ConversationStatus) IsValid() bool {
	switch e {
	case ConversationStatusActive, ConversationStatusClosed:
		return true
	}
	return false
}

func (e ConversationStatus) String() string {
	return string(e)
}

func (e *ConversationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConversationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConversationStatus", str)
	}
	return nil
}

func (e ConversationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomFieldDataType string

const (
	CustomFieldDataTypeText     CustomFieldDataType = "TEXT"
	CustomFieldDataTypeBool     CustomFieldDataType = "BOOL"
	CustomFieldDataTypeDatetime CustomFieldDataType = "DATETIME"
	CustomFieldDataTypeInteger  CustomFieldDataType = "INTEGER"
	CustomFieldDataTypeDecimal  CustomFieldDataType = "DECIMAL"
)

var AllCustomFieldDataType = []CustomFieldDataType{
	CustomFieldDataTypeText,
	CustomFieldDataTypeBool,
	CustomFieldDataTypeDatetime,
	CustomFieldDataTypeInteger,
	CustomFieldDataTypeDecimal,
}

func (e CustomFieldDataType) IsValid() bool {
	switch e {
	case CustomFieldDataTypeText, CustomFieldDataTypeBool, CustomFieldDataTypeDatetime, CustomFieldDataTypeInteger, CustomFieldDataTypeDecimal:
		return true
	}
	return false
}

func (e CustomFieldDataType) String() string {
	return string(e)
}

func (e *CustomFieldDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomFieldDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomFieldDataType", str)
	}
	return nil
}

func (e CustomFieldDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomFieldTemplateType string

const (
	CustomFieldTemplateTypeText CustomFieldTemplateType = "TEXT"
)

var AllCustomFieldTemplateType = []CustomFieldTemplateType{
	CustomFieldTemplateTypeText,
}

func (e CustomFieldTemplateType) IsValid() bool {
	switch e {
	case CustomFieldTemplateTypeText:
		return true
	}
	return false
}

func (e CustomFieldTemplateType) String() string {
	return string(e)
}

func (e *CustomFieldTemplateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomFieldTemplateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomFieldTemplateType", str)
	}
	return nil
}

func (e CustomFieldTemplateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DataSource string

const (
	DataSourceNa             DataSource = "NA"
	DataSourceOpenline       DataSource = "OPENLINE"
	DataSourceHubspot        DataSource = "HUBSPOT"
	DataSourceZendeskSupport DataSource = "ZENDESK_SUPPORT"
)

var AllDataSource = []DataSource{
	DataSourceNa,
	DataSourceOpenline,
	DataSourceHubspot,
	DataSourceZendeskSupport,
}

func (e DataSource) IsValid() bool {
	switch e {
	case DataSourceNa, DataSourceOpenline, DataSourceHubspot, DataSourceZendeskSupport:
		return true
	}
	return false
}

func (e DataSource) String() string {
	return string(e)
}

func (e *DataSource) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DataSource(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DataSource", str)
	}
	return nil
}

func (e DataSource) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Describes the type of email address (WORK, PERSONAL, etc).
// **A `return` object.
type EmailLabel string

const (
	EmailLabelMain     EmailLabel = "MAIN"
	EmailLabelWork     EmailLabel = "WORK"
	EmailLabelPersonal EmailLabel = "PERSONAL"
	EmailLabelOther    EmailLabel = "OTHER"
)

var AllEmailLabel = []EmailLabel{
	EmailLabelMain,
	EmailLabelWork,
	EmailLabelPersonal,
	EmailLabelOther,
}

func (e EmailLabel) IsValid() bool {
	switch e {
	case EmailLabelMain, EmailLabelWork, EmailLabelPersonal, EmailLabelOther:
		return true
	}
	return false
}

func (e EmailLabel) String() string {
	return string(e)
}

func (e *EmailLabel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailLabel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailLabel", str)
	}
	return nil
}

func (e EmailLabel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EntityTemplateExtension string

const (
	EntityTemplateExtensionContact EntityTemplateExtension = "CONTACT"
)

var AllEntityTemplateExtension = []EntityTemplateExtension{
	EntityTemplateExtensionContact,
}

func (e EntityTemplateExtension) IsValid() bool {
	switch e {
	case EntityTemplateExtensionContact:
		return true
	}
	return false
}

func (e EntityTemplateExtension) String() string {
	return string(e)
}

func (e *EntityTemplateExtension) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EntityTemplateExtension(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EntityTemplateExtension", str)
	}
	return nil
}

func (e EntityTemplateExtension) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ExternalSystemType string

const (
	ExternalSystemTypeHubspot        ExternalSystemType = "HUBSPOT"
	ExternalSystemTypeZendeskSupport ExternalSystemType = "ZENDESK_SUPPORT"
)

var AllExternalSystemType = []ExternalSystemType{
	ExternalSystemTypeHubspot,
	ExternalSystemTypeZendeskSupport,
}

func (e ExternalSystemType) IsValid() bool {
	switch e {
	case ExternalSystemTypeHubspot, ExternalSystemTypeZendeskSupport:
		return true
	}
	return false
}

func (e ExternalSystemType) String() string {
	return string(e)
}

func (e *ExternalSystemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ExternalSystemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ExternalSystemType", str)
	}
	return nil
}

func (e ExternalSystemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The honorific title of an individual.
// **A `response` object.**
type PersonTitle string

const (
	// For men, regardless of marital status.
	PersonTitleMr PersonTitle = "MR"
	// For married women.
	PersonTitleMrs PersonTitle = "MRS"
	// For girls, unmarried women, and married women who continue to use their maiden name.
	PersonTitleMiss PersonTitle = "MISS"
	// For women, regardless of marital status, or when marital status is unknown.
	PersonTitleMs PersonTitle = "MS"
	// For the holder of a doctoral degree.
	PersonTitleDr PersonTitle = "DR"
)

var AllPersonTitle = []PersonTitle{
	PersonTitleMr,
	PersonTitleMrs,
	PersonTitleMiss,
	PersonTitleMs,
	PersonTitleDr,
}

func (e PersonTitle) IsValid() bool {
	switch e {
	case PersonTitleMr, PersonTitleMrs, PersonTitleMiss, PersonTitleMs, PersonTitleDr:
		return true
	}
	return false
}

func (e PersonTitle) String() string {
	return string(e)
}

func (e *PersonTitle) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PersonTitle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PersonTitle", str)
	}
	return nil
}

func (e PersonTitle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Defines the type of phone number.
// **A `response` object. **
type PhoneNumberLabel string

const (
	PhoneNumberLabelMain   PhoneNumberLabel = "MAIN"
	PhoneNumberLabelWork   PhoneNumberLabel = "WORK"
	PhoneNumberLabelHome   PhoneNumberLabel = "HOME"
	PhoneNumberLabelMobile PhoneNumberLabel = "MOBILE"
	PhoneNumberLabelOther  PhoneNumberLabel = "OTHER"
)

var AllPhoneNumberLabel = []PhoneNumberLabel{
	PhoneNumberLabelMain,
	PhoneNumberLabelWork,
	PhoneNumberLabelHome,
	PhoneNumberLabelMobile,
	PhoneNumberLabelOther,
}

func (e PhoneNumberLabel) IsValid() bool {
	switch e {
	case PhoneNumberLabelMain, PhoneNumberLabelWork, PhoneNumberLabelHome, PhoneNumberLabelMobile, PhoneNumberLabelOther:
		return true
	}
	return false
}

func (e PhoneNumberLabel) String() string {
	return string(e)
}

func (e *PhoneNumberLabel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhoneNumberLabel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhoneNumberLabel", str)
	}
	return nil
}

func (e PhoneNumberLabel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortingDirection string

const (
	SortingDirectionAsc  SortingDirection = "ASC"
	SortingDirectionDesc SortingDirection = "DESC"
)

var AllSortingDirection = []SortingDirection{
	SortingDirectionAsc,
	SortingDirectionDesc,
}

func (e SortingDirection) IsValid() bool {
	switch e {
	case SortingDirectionAsc, SortingDirectionDesc:
		return true
	}
	return false
}

func (e SortingDirection) String() string {
	return string(e)
}

func (e *SortingDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortingDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortingDirection", str)
	}
	return nil
}

func (e SortingDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimelineEventType string

const (
	TimelineEventTypePageView           TimelineEventType = "PAGE_VIEW"
	TimelineEventTypeInteractionSession TimelineEventType = "INTERACTION_SESSION"
	TimelineEventTypeConversation       TimelineEventType = "CONVERSATION"
	TimelineEventTypeNote               TimelineEventType = "NOTE"
	TimelineEventTypeInteractionEvent   TimelineEventType = "INTERACTION_EVENT"
	TimelineEventTypeAnalysis           TimelineEventType = "ANALYSIS"
	TimelineEventTypeIssue              TimelineEventType = "ISSUE"
	TimelineEventTypeMeeting            TimelineEventType = "MEETING"
)

var AllTimelineEventType = []TimelineEventType{
	TimelineEventTypePageView,
	TimelineEventTypeInteractionSession,
	TimelineEventTypeConversation,
	TimelineEventTypeNote,
	TimelineEventTypeInteractionEvent,
	TimelineEventTypeAnalysis,
	TimelineEventTypeIssue,
	TimelineEventTypeMeeting,
}

func (e TimelineEventType) IsValid() bool {
	switch e {
	case TimelineEventTypePageView, TimelineEventTypeInteractionSession, TimelineEventTypeConversation, TimelineEventTypeNote, TimelineEventTypeInteractionEvent, TimelineEventTypeAnalysis, TimelineEventTypeIssue, TimelineEventTypeMeeting:
		return true
	}
	return false
}

func (e TimelineEventType) String() string {
	return string(e)
}

func (e *TimelineEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimelineEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimelineEventType", str)
	}
	return nil
}

func (e TimelineEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
