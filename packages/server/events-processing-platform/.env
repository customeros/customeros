SERVICE_NAME: events-processing-platform

EVENT_STORE_CONNECTION_STRING: esdb://localhost:2113
EVENT_STORE_CONNECTION_TLS_DISABLED: true
EVENT_STORE_CONNECTION_TLS_VERIFY_CERT: false
EVENT_STORE_CONNECTION_KEEP_ALIVE_TIMEOUT: 10000
EVENT_STORE_CONNECTION_KEEP_ALIVE_INTERVAL: 10000
EVENT_STORE_CONNECTION_USERNAME:
EVENT_STORE_CONNECTION_PASSWORD:
EVENT_STORE_ADMIN_USERNAME:
EVENT_STORE_ADMIN_PASSWORD:
EVENT_STORE_OPS_USERNAME:
EVENT_STORE_OPS_PASSWORD:

EVENT_STORE_SUBSCRIPTIONS_GRAPH_ENABLED: true
EVENT_STORE_SUBSCRIPTIONS_GRAPH_POOL_SIZE: 4
EVENT_STORE_SUBSCRIPTIONS_EMAIL_VALIDATION_ENABLED: true
EVENT_STORE_SUBSCRIPTIONS_PHONE_NUMBER_VALIDATION_ENABLED: true
EVENT_STORE_SUBSCRIPTIONS_LOCATION_VALIDATION_ENABLED: true
EVENT_STORE_SUBSCRIPTIONS_ORGANIZATION_ENABLED: true

GRPC_PORT: :5001
GRPC_DEVELOPMENT: true
GRPC_API_KEY: 082c1193-a5a2-42fc-87fc-e960e692fffd

LOGGER_LEVEL: info
LOGGER_DEV_MODE: true
LOGGER_ENCODER: console

JAEGER_ENABLED: true
JAEGER_SERVICE_NAME: events-processing-platform
JAEGER_AGENT_HOST: localhost
JAEGER_AGENT_PORT: 6831
JAEGER_SAMPLER_TYPE: const
JAEGER_SAMPLER_PARAM: 1
JAEGER_REPORTER_LOG_SPANS: false

POSTGRES_USER: postgres
POSTGRES_PASSWORD: password
POSTGRES_DB: openline
POSTGRES_HOST: 127.0.0.1
POSTGRES_PORT: 5433
POSTGRES_MAX_CONN: 100
POSTGRES_MAX_IDLE_CONN: 10
POSTGRES_CONN_MAX_LIFETIME: 0
# valid log values (SILENT, ERROR, WARN, INFO)
POSTGRES_LOG_LEVEL: INFO

NEO4J_TARGET: neo4j://127.0.0.1:7687
NEO4J_AUTH_USER: neo4j
NEO4J_AUTH_PWD: StrongLocalPa$$
NEO4J_AUTH_REALM:
NEO4J_MAX_CONN_POOL_SIZE: 100
NEO4J_CONN_ACQUISITION_TIMEOUT_SEC: 60
# valid log values (ERROR, WARNING, INFO, DEBUG)
NEO4J_LOG_LEVEL: INFO

VALIDATION_API: http://localhost:10003
VALIDATION_API_KEY: d02520f5-7705-4b73-9510-a7c9507e695e
EVENTS_PROCESSING_PLATFORM_URL=localhost:5001
EVENTS_PROCESSING_PLATFORM_API_KEY=082c1193-a5a2-42fc-87fc-e960e692fffd

SCRAPING_BEE_API_KEY: SOME_API_KEY
SCRAPING_DOG_API_KEY: SOME_API_KEY
OPENAI_API_PATH: https://openai.openline.ai
OPENAI_API_KEY: SOME_API_KEY
PROMPT_JSON_SCHEMA: '{
		"$schema": "http://json-schema.org/draft-07/schema#",
		"type": "object",
		"properties": {
		  "companyName": {
			"type": "string",
			"description": "the name of the company"
		  },
		  "market": {
			"type": "string",
			"description": "One of the following options: [B2B, B2C, or Marketplace]"
		  },
		  "industry": {
			"type": "string",
			"description": "Industry category per the Global Industry Classification Standard (GISB)"
		  },
		  "industryGroup": {
			"type": "string",
			"description": "Industry Group per the Global Industry Classification Standard (GISB)"
		  },
		  "subIndustry": {
			"type": "string",
			"description": "Sub-industry category per the Global Industry Classification Standard (GISB)"
		  },
		  "targetAudience": {
			"type": "string",
			"description": "analysis of the company\'s target audience"
		  },
		  "valueProposition": {
			"type": "string",
			"description": "analysis of the company\'s core value proposition"
		  }
		},
		"required": ["companyName", "market", "valueProposition", "industry"],
		"additionalProperties": false
	  }"'
SCRAPE_COMPANY_PROMPT: "Analyze the text below and return the complete schema {{jsonschema}}\n\nTEXT\n{{text}}"
SCRAPE_DATA_PROMPT:' The following is data scraped from a website:  Please combine and format the data into a clean json response

                      {{ANALYSIS}}

                      website: {{DOMAIN_URL}}

                      {{SOCIALS}}

                      --------

                      Put the data above in the following JSON structure

                      {{JSON_STRUCTURE}}

                      If you do not have data for a given key, do not return it as part of the JSON object.

                      Ensure before you output that your response is valid JSON.  If it is not valid JSON, do your best to fix the formatting to align to valid JSON.'

ANTHROPIC_API: https://anthropic.openline.ai
ANTHROPIC_API_KEY: SOME_API_KEY
