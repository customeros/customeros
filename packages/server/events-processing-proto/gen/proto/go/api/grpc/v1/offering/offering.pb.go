// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: offering.proto

package offering_grpc_service

import (
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OfferingFieldMask int32

const (
	OfferingFieldMask_OFFERING_FIELD_NONE                                       OfferingFieldMask = 0 // No property, ignored by the server
	OfferingFieldMask_OFFERING_FIELD_NAME                                       OfferingFieldMask = 1
	OfferingFieldMask_OFFERING_FIELD_ACTIVE                                     OfferingFieldMask = 2
	OfferingFieldMask_OFFERING_FIELD_TYPE                                       OfferingFieldMask = 3
	OfferingFieldMask_OFFERING_FIELD_PRICING_MODEL                              OfferingFieldMask = 4
	OfferingFieldMask_OFFERING_FIELD_PRICING_PERIOD_IN_MONTHS                   OfferingFieldMask = 5
	OfferingFieldMask_OFFERING_FIELD_CURRENCY                                   OfferingFieldMask = 6
	OfferingFieldMask_OFFERING_FIELD_PRICE                                      OfferingFieldMask = 7
	OfferingFieldMask_OFFERING_FIELD_PRICE_CALCULATED                           OfferingFieldMask = 8
	OfferingFieldMask_OFFERING_FIELD_CONDITIONAL                                OfferingFieldMask = 9
	OfferingFieldMask_OFFERING_FIELD_TAXABLE                                    OfferingFieldMask = 10
	OfferingFieldMask_OFFERING_FIELD_PRICE_CALCULATION_TYPE                     OfferingFieldMask = 11
	OfferingFieldMask_OFFERING_FIELD_PRICE_CALCULATION_REVENUE_SHARE_PERCENTAGE OfferingFieldMask = 12
	OfferingFieldMask_OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_PERIOD         OfferingFieldMask = 13
	OfferingFieldMask_OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_AMOUNT         OfferingFieldMask = 14
)

// Enum value maps for OfferingFieldMask.
var (
	OfferingFieldMask_name = map[int32]string{
		0:  "OFFERING_FIELD_NONE",
		1:  "OFFERING_FIELD_NAME",
		2:  "OFFERING_FIELD_ACTIVE",
		3:  "OFFERING_FIELD_TYPE",
		4:  "OFFERING_FIELD_PRICING_MODEL",
		5:  "OFFERING_FIELD_PRICING_PERIOD_IN_MONTHS",
		6:  "OFFERING_FIELD_CURRENCY",
		7:  "OFFERING_FIELD_PRICE",
		8:  "OFFERING_FIELD_PRICE_CALCULATED",
		9:  "OFFERING_FIELD_CONDITIONAL",
		10: "OFFERING_FIELD_TAXABLE",
		11: "OFFERING_FIELD_PRICE_CALCULATION_TYPE",
		12: "OFFERING_FIELD_PRICE_CALCULATION_REVENUE_SHARE_PERCENTAGE",
		13: "OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_PERIOD",
		14: "OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_AMOUNT",
	}
	OfferingFieldMask_value = map[string]int32{
		"OFFERING_FIELD_NONE":                                       0,
		"OFFERING_FIELD_NAME":                                       1,
		"OFFERING_FIELD_ACTIVE":                                     2,
		"OFFERING_FIELD_TYPE":                                       3,
		"OFFERING_FIELD_PRICING_MODEL":                              4,
		"OFFERING_FIELD_PRICING_PERIOD_IN_MONTHS":                   5,
		"OFFERING_FIELD_CURRENCY":                                   6,
		"OFFERING_FIELD_PRICE":                                      7,
		"OFFERING_FIELD_PRICE_CALCULATED":                           8,
		"OFFERING_FIELD_CONDITIONAL":                                9,
		"OFFERING_FIELD_TAXABLE":                                    10,
		"OFFERING_FIELD_PRICE_CALCULATION_TYPE":                     11,
		"OFFERING_FIELD_PRICE_CALCULATION_REVENUE_SHARE_PERCENTAGE": 12,
		"OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_PERIOD":         13,
		"OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_AMOUNT":         14,
	}
)

func (x OfferingFieldMask) Enum() *OfferingFieldMask {
	p := new(OfferingFieldMask)
	*p = x
	return p
}

func (x OfferingFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OfferingFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_offering_proto_enumTypes[0].Descriptor()
}

func (OfferingFieldMask) Type() protoreflect.EnumType {
	return &file_offering_proto_enumTypes[0]
}

func (x OfferingFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OfferingFieldMask.Descriptor instead.
func (OfferingFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_offering_proto_rawDescGZIP(), []int{0}
}

type CreateOfferingGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant                                 string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId                         string                 `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	CreatedAt                              *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields                           *common.SourceFields   `protobuf:"bytes,4,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	Name                                   string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Active                                 bool                   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Type                                   string                 `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	PricingModel                           string                 `protobuf:"bytes,8,opt,name=pricingModel,proto3" json:"pricingModel,omitempty"`
	PricingPeriodInMonths                  int64                  `protobuf:"varint,9,opt,name=pricingPeriodInMonths,proto3" json:"pricingPeriodInMonths,omitempty"`
	Currency                               string                 `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	Price                                  float64                `protobuf:"fixed64,11,opt,name=price,proto3" json:"price,omitempty"`
	PriceCalculated                        bool                   `protobuf:"varint,12,opt,name=priceCalculated,proto3" json:"priceCalculated,omitempty"`
	Conditional                            bool                   `protobuf:"varint,13,opt,name=conditional,proto3" json:"conditional,omitempty"`
	Taxable                                bool                   `protobuf:"varint,14,opt,name=taxable,proto3" json:"taxable,omitempty"`
	PriceCalculationType                   string                 `protobuf:"bytes,15,opt,name=priceCalculationType,proto3" json:"priceCalculationType,omitempty"`
	PriceCalculationRevenueSharePercentage float64                `protobuf:"fixed64,16,opt,name=priceCalculationRevenueSharePercentage,proto3" json:"priceCalculationRevenueSharePercentage,omitempty"`
	ConditionalsMinimumChargePeriod        string                 `protobuf:"bytes,17,opt,name=conditionalsMinimumChargePeriod,proto3" json:"conditionalsMinimumChargePeriod,omitempty"`
	ConditionalsMinimumChargeAmount        float64                `protobuf:"fixed64,18,opt,name=conditionalsMinimumChargeAmount,proto3" json:"conditionalsMinimumChargeAmount,omitempty"`
}

func (x *CreateOfferingGrpcRequest) Reset() {
	*x = CreateOfferingGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offering_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOfferingGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOfferingGrpcRequest) ProtoMessage() {}

func (x *CreateOfferingGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offering_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOfferingGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateOfferingGrpcRequest) Descriptor() ([]byte, []int) {
	return file_offering_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOfferingGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOfferingGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateOfferingGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CreateOfferingGrpcRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetPricingModel() string {
	if x != nil {
		return x.PricingModel
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetPricingPeriodInMonths() int64 {
	if x != nil {
		return x.PricingPeriodInMonths
	}
	return 0
}

func (x *CreateOfferingGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateOfferingGrpcRequest) GetPriceCalculated() bool {
	if x != nil {
		return x.PriceCalculated
	}
	return false
}

func (x *CreateOfferingGrpcRequest) GetConditional() bool {
	if x != nil {
		return x.Conditional
	}
	return false
}

func (x *CreateOfferingGrpcRequest) GetTaxable() bool {
	if x != nil {
		return x.Taxable
	}
	return false
}

func (x *CreateOfferingGrpcRequest) GetPriceCalculationType() string {
	if x != nil {
		return x.PriceCalculationType
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetPriceCalculationRevenueSharePercentage() float64 {
	if x != nil {
		return x.PriceCalculationRevenueSharePercentage
	}
	return 0
}

func (x *CreateOfferingGrpcRequest) GetConditionalsMinimumChargePeriod() string {
	if x != nil {
		return x.ConditionalsMinimumChargePeriod
	}
	return ""
}

func (x *CreateOfferingGrpcRequest) GetConditionalsMinimumChargeAmount() float64 {
	if x != nil {
		return x.ConditionalsMinimumChargeAmount
	}
	return 0
}

type UpdateOfferingGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant                                 string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId                         string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	UpdatedAt                              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AppSource                              string                 `protobuf:"bytes,5,opt,name=appSource,proto3" json:"appSource,omitempty"`
	Name                                   string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Active                                 bool                   `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	Type                                   string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	PricingModel                           string                 `protobuf:"bytes,9,opt,name=pricingModel,proto3" json:"pricingModel,omitempty"`
	PricingPeriodInMonths                  int64                  `protobuf:"varint,10,opt,name=pricingPeriodInMonths,proto3" json:"pricingPeriodInMonths,omitempty"`
	Currency                               string                 `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	Price                                  float64                `protobuf:"fixed64,12,opt,name=price,proto3" json:"price,omitempty"`
	PriceCalculated                        bool                   `protobuf:"varint,13,opt,name=priceCalculated,proto3" json:"priceCalculated,omitempty"`
	Conditional                            bool                   `protobuf:"varint,14,opt,name=conditional,proto3" json:"conditional,omitempty"`
	Taxable                                bool                   `protobuf:"varint,15,opt,name=taxable,proto3" json:"taxable,omitempty"`
	PriceCalculationType                   string                 `protobuf:"bytes,16,opt,name=priceCalculationType,proto3" json:"priceCalculationType,omitempty"`
	PriceCalculationRevenueSharePercentage float64                `protobuf:"fixed64,17,opt,name=priceCalculationRevenueSharePercentage,proto3" json:"priceCalculationRevenueSharePercentage,omitempty"`
	ConditionalsMinimumChargePeriod        string                 `protobuf:"bytes,18,opt,name=conditionalsMinimumChargePeriod,proto3" json:"conditionalsMinimumChargePeriod,omitempty"`
	ConditionalsMinimumChargeAmount        float64                `protobuf:"fixed64,19,opt,name=conditionalsMinimumChargeAmount,proto3" json:"conditionalsMinimumChargeAmount,omitempty"`
	FieldsMask                             []OfferingFieldMask    `protobuf:"varint,20,rep,packed,name=fieldsMask,proto3,enum=OfferingFieldMask" json:"fieldsMask,omitempty"`
}

func (x *UpdateOfferingGrpcRequest) Reset() {
	*x = UpdateOfferingGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offering_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOfferingGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOfferingGrpcRequest) ProtoMessage() {}

func (x *UpdateOfferingGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_offering_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOfferingGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateOfferingGrpcRequest) Descriptor() ([]byte, []int) {
	return file_offering_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateOfferingGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOfferingGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *UpdateOfferingGrpcRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetPricingModel() string {
	if x != nil {
		return x.PricingModel
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetPricingPeriodInMonths() int64 {
	if x != nil {
		return x.PricingPeriodInMonths
	}
	return 0
}

func (x *UpdateOfferingGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdateOfferingGrpcRequest) GetPriceCalculated() bool {
	if x != nil {
		return x.PriceCalculated
	}
	return false
}

func (x *UpdateOfferingGrpcRequest) GetConditional() bool {
	if x != nil {
		return x.Conditional
	}
	return false
}

func (x *UpdateOfferingGrpcRequest) GetTaxable() bool {
	if x != nil {
		return x.Taxable
	}
	return false
}

func (x *UpdateOfferingGrpcRequest) GetPriceCalculationType() string {
	if x != nil {
		return x.PriceCalculationType
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetPriceCalculationRevenueSharePercentage() float64 {
	if x != nil {
		return x.PriceCalculationRevenueSharePercentage
	}
	return 0
}

func (x *UpdateOfferingGrpcRequest) GetConditionalsMinimumChargePeriod() string {
	if x != nil {
		return x.ConditionalsMinimumChargePeriod
	}
	return ""
}

func (x *UpdateOfferingGrpcRequest) GetConditionalsMinimumChargeAmount() float64 {
	if x != nil {
		return x.ConditionalsMinimumChargeAmount
	}
	return 0
}

func (x *UpdateOfferingGrpcRequest) GetFieldsMask() []OfferingFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

var File_offering_proto protoreflect.FileDescriptor

var file_offering_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x06, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x61,
	0x78, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x26, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc9, 0x06, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x34, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x61, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x56, 0x0a, 0x26, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x26, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73,
	0x6b, 0x2a, 0xb8, 0x04, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x46, 0x46,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x04, 0x12,
	0x2b, 0x0a, 0x27, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x46, 0x46,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x43,
	0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x0a, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12,
	0x3d, 0x0a, 0x39, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x12, 0x35,
	0x0a, 0x31, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x53, 0x5f, 0x4d, 0x49,
	0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x10, 0x0d, 0x12, 0x35, 0x0a, 0x31, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x43, 0x48, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0e, 0x32, 0x8b, 0x01, 0x0a,
	0x13, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x42, 0x0d, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x3b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_offering_proto_rawDescOnce sync.Once
	file_offering_proto_rawDescData = file_offering_proto_rawDesc
)

func file_offering_proto_rawDescGZIP() []byte {
	file_offering_proto_rawDescOnce.Do(func() {
		file_offering_proto_rawDescData = protoimpl.X.CompressGZIP(file_offering_proto_rawDescData)
	})
	return file_offering_proto_rawDescData
}

var file_offering_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_offering_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_offering_proto_goTypes = []interface{}{
	(OfferingFieldMask)(0),            // 0: OfferingFieldMask
	(*CreateOfferingGrpcRequest)(nil), // 1: CreateOfferingGrpcRequest
	(*UpdateOfferingGrpcRequest)(nil), // 2: UpdateOfferingGrpcRequest
	(*timestamppb.Timestamp)(nil),     // 3: google.protobuf.Timestamp
	(*common.SourceFields)(nil),       // 4: SourceFields
	(*common.IdResponse)(nil),         // 5: IdResponse
}
var file_offering_proto_depIdxs = []int32{
	3, // 0: CreateOfferingGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	4, // 1: CreateOfferingGrpcRequest.sourceFields:type_name -> SourceFields
	3, // 2: UpdateOfferingGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	0, // 3: UpdateOfferingGrpcRequest.fieldsMask:type_name -> OfferingFieldMask
	1, // 4: offeringGrpcService.CreateOffering:input_type -> CreateOfferingGrpcRequest
	2, // 5: offeringGrpcService.UpdateOffering:input_type -> UpdateOfferingGrpcRequest
	5, // 6: offeringGrpcService.CreateOffering:output_type -> IdResponse
	5, // 7: offeringGrpcService.UpdateOffering:output_type -> IdResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_offering_proto_init() }
func file_offering_proto_init() {
	if File_offering_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offering_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOfferingGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offering_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOfferingGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offering_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_offering_proto_goTypes,
		DependencyIndexes: file_offering_proto_depIdxs,
		EnumInfos:         file_offering_proto_enumTypes,
		MessageInfos:      file_offering_proto_msgTypes,
	}.Build()
	File_offering_proto = out.File
	file_offering_proto_rawDesc = nil
	file_offering_proto_goTypes = nil
	file_offering_proto_depIdxs = nil
}
