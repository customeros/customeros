// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: event_store.proto

package event_store_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStoreGrpcServiceClient is the client API for EventStoreGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStoreGrpcServiceClient interface {
	DeleteEventStoreStream(ctx context.Context, in *DeleteEventStoreStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StoreEvent(ctx context.Context, in *StoreEventGrpcRequest, opts ...grpc.CallOption) (*StoreEventGrpcResponse, error)
}

type eventStoreGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreGrpcServiceClient(cc grpc.ClientConnInterface) EventStoreGrpcServiceClient {
	return &eventStoreGrpcServiceClient{cc}
}

func (c *eventStoreGrpcServiceClient) DeleteEventStoreStream(ctx context.Context, in *DeleteEventStoreStreamRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/EventStoreGrpcService/DeleteEventStoreStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreGrpcServiceClient) StoreEvent(ctx context.Context, in *StoreEventGrpcRequest, opts ...grpc.CallOption) (*StoreEventGrpcResponse, error) {
	out := new(StoreEventGrpcResponse)
	err := c.cc.Invoke(ctx, "/EventStoreGrpcService/StoreEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStoreGrpcServiceServer is the server API for EventStoreGrpcService service.
// All implementations should embed UnimplementedEventStoreGrpcServiceServer
// for forward compatibility
type EventStoreGrpcServiceServer interface {
	DeleteEventStoreStream(context.Context, *DeleteEventStoreStreamRequest) (*emptypb.Empty, error)
	StoreEvent(context.Context, *StoreEventGrpcRequest) (*StoreEventGrpcResponse, error)
}

// UnimplementedEventStoreGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventStoreGrpcServiceServer struct {
}

func (UnimplementedEventStoreGrpcServiceServer) DeleteEventStoreStream(context.Context, *DeleteEventStoreStreamRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventStoreStream not implemented")
}
func (UnimplementedEventStoreGrpcServiceServer) StoreEvent(context.Context, *StoreEventGrpcRequest) (*StoreEventGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreEvent not implemented")
}

// UnsafeEventStoreGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreGrpcServiceServer will
// result in compilation errors.
type UnsafeEventStoreGrpcServiceServer interface {
	mustEmbedUnimplementedEventStoreGrpcServiceServer()
}

func RegisterEventStoreGrpcServiceServer(s grpc.ServiceRegistrar, srv EventStoreGrpcServiceServer) {
	s.RegisterService(&EventStoreGrpcService_ServiceDesc, srv)
}

func _EventStoreGrpcService_DeleteEventStoreStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventStoreStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreGrpcServiceServer).DeleteEventStoreStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventStoreGrpcService/DeleteEventStoreStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreGrpcServiceServer).DeleteEventStoreStream(ctx, req.(*DeleteEventStoreStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStoreGrpcService_StoreEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreEventGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreGrpcServiceServer).StoreEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventStoreGrpcService/StoreEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreGrpcServiceServer).StoreEvent(ctx, req.(*StoreEventGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStoreGrpcService_ServiceDesc is the grpc.ServiceDesc for EventStoreGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStoreGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EventStoreGrpcService",
	HandlerType: (*EventStoreGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteEventStoreStream",
			Handler:    _EventStoreGrpcService_DeleteEventStoreStream_Handler,
		},
		{
			MethodName: "StoreEvent",
			Handler:    _EventStoreGrpcService_StoreEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_store.proto",
}
