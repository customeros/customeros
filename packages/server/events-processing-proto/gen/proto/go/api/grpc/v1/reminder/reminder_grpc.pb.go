// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: reminder.proto

package reminder_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReminderGrpcServiceClient is the client API for ReminderGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminderGrpcServiceClient interface {
	CreateReminder(ctx context.Context, in *CreateReminderGrpcRequest, opts ...grpc.CallOption) (*ReminderGrpcResponse, error)
	UpdateReminder(ctx context.Context, in *UpdateReminderGrpcRequest, opts ...grpc.CallOption) (*ReminderGrpcResponse, error)
}

type reminderGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReminderGrpcServiceClient(cc grpc.ClientConnInterface) ReminderGrpcServiceClient {
	return &reminderGrpcServiceClient{cc}
}

func (c *reminderGrpcServiceClient) CreateReminder(ctx context.Context, in *CreateReminderGrpcRequest, opts ...grpc.CallOption) (*ReminderGrpcResponse, error) {
	out := new(ReminderGrpcResponse)
	err := c.cc.Invoke(ctx, "/ReminderGrpcService/CreateReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderGrpcServiceClient) UpdateReminder(ctx context.Context, in *UpdateReminderGrpcRequest, opts ...grpc.CallOption) (*ReminderGrpcResponse, error) {
	out := new(ReminderGrpcResponse)
	err := c.cc.Invoke(ctx, "/ReminderGrpcService/UpdateReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminderGrpcServiceServer is the server API for ReminderGrpcService service.
// All implementations should embed UnimplementedReminderGrpcServiceServer
// for forward compatibility
type ReminderGrpcServiceServer interface {
	CreateReminder(context.Context, *CreateReminderGrpcRequest) (*ReminderGrpcResponse, error)
	UpdateReminder(context.Context, *UpdateReminderGrpcRequest) (*ReminderGrpcResponse, error)
}

// UnimplementedReminderGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReminderGrpcServiceServer struct {
}

func (UnimplementedReminderGrpcServiceServer) CreateReminder(context.Context, *CreateReminderGrpcRequest) (*ReminderGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReminder not implemented")
}
func (UnimplementedReminderGrpcServiceServer) UpdateReminder(context.Context, *UpdateReminderGrpcRequest) (*ReminderGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReminder not implemented")
}

// UnsafeReminderGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminderGrpcServiceServer will
// result in compilation errors.
type UnsafeReminderGrpcServiceServer interface {
	mustEmbedUnimplementedReminderGrpcServiceServer()
}

func RegisterReminderGrpcServiceServer(s grpc.ServiceRegistrar, srv ReminderGrpcServiceServer) {
	s.RegisterService(&ReminderGrpcService_ServiceDesc, srv)
}

func _ReminderGrpcService_CreateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReminderGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderGrpcServiceServer).CreateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReminderGrpcService/CreateReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderGrpcServiceServer).CreateReminder(ctx, req.(*CreateReminderGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderGrpcService_UpdateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReminderGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderGrpcServiceServer).UpdateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReminderGrpcService/UpdateReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderGrpcServiceServer).UpdateReminder(ctx, req.(*UpdateReminderGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReminderGrpcService_ServiceDesc is the grpc.ServiceDesc for ReminderGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReminderGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReminderGrpcService",
	HandlerType: (*ReminderGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReminder",
			Handler:    _ReminderGrpcService_CreateReminder_Handler,
		},
		{
			MethodName: "UpdateReminder",
			Handler:    _ReminderGrpcService_UpdateReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reminder.proto",
}
