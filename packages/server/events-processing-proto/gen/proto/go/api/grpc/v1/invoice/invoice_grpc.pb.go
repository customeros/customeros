// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: invoice.proto

package invoice_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvoiceGrpcServiceClient is the client API for InvoiceGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceGrpcServiceClient interface {
	NewInvoiceForContract(ctx context.Context, in *NewInvoiceForContractRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error)
	FillInvoice(ctx context.Context, in *FillInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error)
	GenerateInvoicePdf(ctx context.Context, in *GenerateInvoicePdfRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error)
	PdfGeneratedInvoice(ctx context.Context, in *PdfGeneratedInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error)
	PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error)
	SimulateInvoice(ctx context.Context, in *SimulateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error)
}

type invoiceGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceGrpcServiceClient(cc grpc.ClientConnInterface) InvoiceGrpcServiceClient {
	return &invoiceGrpcServiceClient{cc}
}

func (c *invoiceGrpcServiceClient) NewInvoiceForContract(ctx context.Context, in *NewInvoiceForContractRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error) {
	out := new(InvoiceIdResponse)
	err := c.cc.Invoke(ctx, "/InvoiceGrpcService/NewInvoiceForContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceGrpcServiceClient) FillInvoice(ctx context.Context, in *FillInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error) {
	out := new(InvoiceIdResponse)
	err := c.cc.Invoke(ctx, "/InvoiceGrpcService/FillInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceGrpcServiceClient) GenerateInvoicePdf(ctx context.Context, in *GenerateInvoicePdfRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error) {
	out := new(InvoiceIdResponse)
	err := c.cc.Invoke(ctx, "/InvoiceGrpcService/GenerateInvoicePdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceGrpcServiceClient) PdfGeneratedInvoice(ctx context.Context, in *PdfGeneratedInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error) {
	out := new(InvoiceIdResponse)
	err := c.cc.Invoke(ctx, "/InvoiceGrpcService/PdfGeneratedInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceGrpcServiceClient) PayInvoice(ctx context.Context, in *PayInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error) {
	out := new(InvoiceIdResponse)
	err := c.cc.Invoke(ctx, "/InvoiceGrpcService/PayInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceGrpcServiceClient) SimulateInvoice(ctx context.Context, in *SimulateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceIdResponse, error) {
	out := new(InvoiceIdResponse)
	err := c.cc.Invoke(ctx, "/InvoiceGrpcService/SimulateInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceGrpcServiceServer is the server API for InvoiceGrpcService service.
// All implementations should embed UnimplementedInvoiceGrpcServiceServer
// for forward compatibility
type InvoiceGrpcServiceServer interface {
	NewInvoiceForContract(context.Context, *NewInvoiceForContractRequest) (*InvoiceIdResponse, error)
	FillInvoice(context.Context, *FillInvoiceRequest) (*InvoiceIdResponse, error)
	GenerateInvoicePdf(context.Context, *GenerateInvoicePdfRequest) (*InvoiceIdResponse, error)
	PdfGeneratedInvoice(context.Context, *PdfGeneratedInvoiceRequest) (*InvoiceIdResponse, error)
	PayInvoice(context.Context, *PayInvoiceRequest) (*InvoiceIdResponse, error)
	SimulateInvoice(context.Context, *SimulateInvoiceRequest) (*InvoiceIdResponse, error)
}

// UnimplementedInvoiceGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInvoiceGrpcServiceServer struct {
}

func (UnimplementedInvoiceGrpcServiceServer) NewInvoiceForContract(context.Context, *NewInvoiceForContractRequest) (*InvoiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewInvoiceForContract not implemented")
}
func (UnimplementedInvoiceGrpcServiceServer) FillInvoice(context.Context, *FillInvoiceRequest) (*InvoiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FillInvoice not implemented")
}
func (UnimplementedInvoiceGrpcServiceServer) GenerateInvoicePdf(context.Context, *GenerateInvoicePdfRequest) (*InvoiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoicePdf not implemented")
}
func (UnimplementedInvoiceGrpcServiceServer) PdfGeneratedInvoice(context.Context, *PdfGeneratedInvoiceRequest) (*InvoiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PdfGeneratedInvoice not implemented")
}
func (UnimplementedInvoiceGrpcServiceServer) PayInvoice(context.Context, *PayInvoiceRequest) (*InvoiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayInvoice not implemented")
}
func (UnimplementedInvoiceGrpcServiceServer) SimulateInvoice(context.Context, *SimulateInvoiceRequest) (*InvoiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateInvoice not implemented")
}

// UnsafeInvoiceGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceGrpcServiceServer will
// result in compilation errors.
type UnsafeInvoiceGrpcServiceServer interface {
	mustEmbedUnimplementedInvoiceGrpcServiceServer()
}

func RegisterInvoiceGrpcServiceServer(s grpc.ServiceRegistrar, srv InvoiceGrpcServiceServer) {
	s.RegisterService(&InvoiceGrpcService_ServiceDesc, srv)
}

func _InvoiceGrpcService_NewInvoiceForContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInvoiceForContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceGrpcServiceServer).NewInvoiceForContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoiceGrpcService/NewInvoiceForContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceGrpcServiceServer).NewInvoiceForContract(ctx, req.(*NewInvoiceForContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceGrpcService_FillInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FillInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceGrpcServiceServer).FillInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoiceGrpcService/FillInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceGrpcServiceServer).FillInvoice(ctx, req.(*FillInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceGrpcService_GenerateInvoicePdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvoicePdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceGrpcServiceServer).GenerateInvoicePdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoiceGrpcService/GenerateInvoicePdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceGrpcServiceServer).GenerateInvoicePdf(ctx, req.(*GenerateInvoicePdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceGrpcService_PdfGeneratedInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfGeneratedInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceGrpcServiceServer).PdfGeneratedInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoiceGrpcService/PdfGeneratedInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceGrpcServiceServer).PdfGeneratedInvoice(ctx, req.(*PdfGeneratedInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceGrpcService_PayInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceGrpcServiceServer).PayInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoiceGrpcService/PayInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceGrpcServiceServer).PayInvoice(ctx, req.(*PayInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceGrpcService_SimulateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceGrpcServiceServer).SimulateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoiceGrpcService/SimulateInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceGrpcServiceServer).SimulateInvoice(ctx, req.(*SimulateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceGrpcService_ServiceDesc is the grpc.ServiceDesc for InvoiceGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvoiceGrpcService",
	HandlerType: (*InvoiceGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewInvoiceForContract",
			Handler:    _InvoiceGrpcService_NewInvoiceForContract_Handler,
		},
		{
			MethodName: "FillInvoice",
			Handler:    _InvoiceGrpcService_FillInvoice_Handler,
		},
		{
			MethodName: "GenerateInvoicePdf",
			Handler:    _InvoiceGrpcService_GenerateInvoicePdf_Handler,
		},
		{
			MethodName: "PdfGeneratedInvoice",
			Handler:    _InvoiceGrpcService_PdfGeneratedInvoice_Handler,
		},
		{
			MethodName: "PayInvoice",
			Handler:    _InvoiceGrpcService_PayInvoice_Handler,
		},
		{
			MethodName: "SimulateInvoice",
			Handler:    _InvoiceGrpcService_SimulateInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoice.proto",
}
