// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: offering.proto

package offering_grpc_service

import (
	context "context"
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OfferingGrpcServiceClient is the client API for OfferingGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferingGrpcServiceClient interface {
	CreateOffering(ctx context.Context, in *CreateOfferingGrpcRequest, opts ...grpc.CallOption) (*common.IdResponse, error)
	UpdateOffering(ctx context.Context, in *UpdateOfferingGrpcRequest, opts ...grpc.CallOption) (*common.IdResponse, error)
}

type offeringGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferingGrpcServiceClient(cc grpc.ClientConnInterface) OfferingGrpcServiceClient {
	return &offeringGrpcServiceClient{cc}
}

func (c *offeringGrpcServiceClient) CreateOffering(ctx context.Context, in *CreateOfferingGrpcRequest, opts ...grpc.CallOption) (*common.IdResponse, error) {
	out := new(common.IdResponse)
	err := c.cc.Invoke(ctx, "/offeringGrpcService/CreateOffering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offeringGrpcServiceClient) UpdateOffering(ctx context.Context, in *UpdateOfferingGrpcRequest, opts ...grpc.CallOption) (*common.IdResponse, error) {
	out := new(common.IdResponse)
	err := c.cc.Invoke(ctx, "/offeringGrpcService/UpdateOffering", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferingGrpcServiceServer is the server API for OfferingGrpcService service.
// All implementations should embed UnimplementedOfferingGrpcServiceServer
// for forward compatibility
type OfferingGrpcServiceServer interface {
	CreateOffering(context.Context, *CreateOfferingGrpcRequest) (*common.IdResponse, error)
	UpdateOffering(context.Context, *UpdateOfferingGrpcRequest) (*common.IdResponse, error)
}

// UnimplementedOfferingGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOfferingGrpcServiceServer struct {
}

func (UnimplementedOfferingGrpcServiceServer) CreateOffering(context.Context, *CreateOfferingGrpcRequest) (*common.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOffering not implemented")
}
func (UnimplementedOfferingGrpcServiceServer) UpdateOffering(context.Context, *UpdateOfferingGrpcRequest) (*common.IdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffering not implemented")
}

// UnsafeOfferingGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferingGrpcServiceServer will
// result in compilation errors.
type UnsafeOfferingGrpcServiceServer interface {
	mustEmbedUnimplementedOfferingGrpcServiceServer()
}

func RegisterOfferingGrpcServiceServer(s grpc.ServiceRegistrar, srv OfferingGrpcServiceServer) {
	s.RegisterService(&OfferingGrpcService_ServiceDesc, srv)
}

func _OfferingGrpcService_CreateOffering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfferingGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingGrpcServiceServer).CreateOffering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offeringGrpcService/CreateOffering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingGrpcServiceServer).CreateOffering(ctx, req.(*CreateOfferingGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferingGrpcService_UpdateOffering_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfferingGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferingGrpcServiceServer).UpdateOffering(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/offeringGrpcService/UpdateOffering",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferingGrpcServiceServer).UpdateOffering(ctx, req.(*UpdateOfferingGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfferingGrpcService_ServiceDesc is the grpc.ServiceDesc for OfferingGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfferingGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "offeringGrpcService",
	HandlerType: (*OfferingGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOffering",
			Handler:    _OfferingGrpcService_CreateOffering_Handler,
		},
		{
			MethodName: "UpdateOffering",
			Handler:    _OfferingGrpcService_UpdateOffering_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offering.proto",
}
