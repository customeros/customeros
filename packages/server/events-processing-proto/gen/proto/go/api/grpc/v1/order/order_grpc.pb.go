// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: order.proto

package order_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderGrpcServiceClient is the client API for OrderGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderGrpcServiceClient interface {
	UpsertOrder(ctx context.Context, in *UpsertOrderGrpcRequest, opts ...grpc.CallOption) (*OrderIdGrpcResponse, error)
}

type orderGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderGrpcServiceClient(cc grpc.ClientConnInterface) OrderGrpcServiceClient {
	return &orderGrpcServiceClient{cc}
}

func (c *orderGrpcServiceClient) UpsertOrder(ctx context.Context, in *UpsertOrderGrpcRequest, opts ...grpc.CallOption) (*OrderIdGrpcResponse, error) {
	out := new(OrderIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/orderGrpcService/UpsertOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderGrpcServiceServer is the server API for OrderGrpcService service.
// All implementations should embed UnimplementedOrderGrpcServiceServer
// for forward compatibility
type OrderGrpcServiceServer interface {
	UpsertOrder(context.Context, *UpsertOrderGrpcRequest) (*OrderIdGrpcResponse, error)
}

// UnimplementedOrderGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrderGrpcServiceServer struct {
}

func (UnimplementedOrderGrpcServiceServer) UpsertOrder(context.Context, *UpsertOrderGrpcRequest) (*OrderIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertOrder not implemented")
}

// UnsafeOrderGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderGrpcServiceServer will
// result in compilation errors.
type UnsafeOrderGrpcServiceServer interface {
	mustEmbedUnimplementedOrderGrpcServiceServer()
}

func RegisterOrderGrpcServiceServer(s grpc.ServiceRegistrar, srv OrderGrpcServiceServer) {
	s.RegisterService(&OrderGrpcService_ServiceDesc, srv)
}

func _OrderGrpcService_UpsertOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertOrderGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderGrpcServiceServer).UpsertOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderGrpcService/UpsertOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderGrpcServiceServer).UpsertOrder(ctx, req.(*UpsertOrderGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderGrpcService_ServiceDesc is the grpc.ServiceDesc for OrderGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderGrpcService",
	HandlerType: (*OrderGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertOrder",
			Handler:    _OrderGrpcService_UpsertOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
