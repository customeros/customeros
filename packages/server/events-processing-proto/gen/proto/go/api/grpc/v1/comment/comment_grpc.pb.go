// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: comment.proto

package comment_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentGrpcServiceClient is the client API for CommentGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentGrpcServiceClient interface {
	UpsertComment(ctx context.Context, in *UpsertCommentGrpcRequest, opts ...grpc.CallOption) (*CommentIdGrpcResponse, error)
}

type commentGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentGrpcServiceClient(cc grpc.ClientConnInterface) CommentGrpcServiceClient {
	return &commentGrpcServiceClient{cc}
}

func (c *commentGrpcServiceClient) UpsertComment(ctx context.Context, in *UpsertCommentGrpcRequest, opts ...grpc.CallOption) (*CommentIdGrpcResponse, error) {
	out := new(CommentIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/commentGrpcService/UpsertComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentGrpcServiceServer is the server API for CommentGrpcService service.
// All implementations should embed UnimplementedCommentGrpcServiceServer
// for forward compatibility
type CommentGrpcServiceServer interface {
	UpsertComment(context.Context, *UpsertCommentGrpcRequest) (*CommentIdGrpcResponse, error)
}

// UnimplementedCommentGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCommentGrpcServiceServer struct {
}

func (UnimplementedCommentGrpcServiceServer) UpsertComment(context.Context, *UpsertCommentGrpcRequest) (*CommentIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertComment not implemented")
}

// UnsafeCommentGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentGrpcServiceServer will
// result in compilation errors.
type UnsafeCommentGrpcServiceServer interface {
	mustEmbedUnimplementedCommentGrpcServiceServer()
}

func RegisterCommentGrpcServiceServer(s grpc.ServiceRegistrar, srv CommentGrpcServiceServer) {
	s.RegisterService(&CommentGrpcService_ServiceDesc, srv)
}

func _CommentGrpcService_UpsertComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCommentGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentGrpcServiceServer).UpsertComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commentGrpcService/UpsertComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentGrpcServiceServer).UpsertComment(ctx, req.(*UpsertCommentGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentGrpcService_ServiceDesc is the grpc.ServiceDesc for CommentGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commentGrpcService",
	HandlerType: (*CommentGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertComment",
			Handler:    _CommentGrpcService_UpsertComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment.proto",
}
