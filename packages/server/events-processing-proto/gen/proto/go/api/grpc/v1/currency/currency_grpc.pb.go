// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: currency.proto

package currency_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyGrpcServiceClient is the client API for CurrencyGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyGrpcServiceClient interface {
	CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyIdGrpcResponse, error)
}

type currencyGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyGrpcServiceClient(cc grpc.ClientConnInterface) CurrencyGrpcServiceClient {
	return &currencyGrpcServiceClient{cc}
}

func (c *currencyGrpcServiceClient) CreateCurrency(ctx context.Context, in *CreateCurrencyRequest, opts ...grpc.CallOption) (*CurrencyIdGrpcResponse, error) {
	out := new(CurrencyIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/CurrencyGrpcService/CreateCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyGrpcServiceServer is the server API for CurrencyGrpcService service.
// All implementations should embed UnimplementedCurrencyGrpcServiceServer
// for forward compatibility
type CurrencyGrpcServiceServer interface {
	CreateCurrency(context.Context, *CreateCurrencyRequest) (*CurrencyIdGrpcResponse, error)
}

// UnimplementedCurrencyGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCurrencyGrpcServiceServer struct {
}

func (UnimplementedCurrencyGrpcServiceServer) CreateCurrency(context.Context, *CreateCurrencyRequest) (*CurrencyIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrency not implemented")
}

// UnsafeCurrencyGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyGrpcServiceServer will
// result in compilation errors.
type UnsafeCurrencyGrpcServiceServer interface {
	mustEmbedUnimplementedCurrencyGrpcServiceServer()
}

func RegisterCurrencyGrpcServiceServer(s grpc.ServiceRegistrar, srv CurrencyGrpcServiceServer) {
	s.RegisterService(&CurrencyGrpcService_ServiceDesc, srv)
}

func _CurrencyGrpcService_CreateCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyGrpcServiceServer).CreateCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CurrencyGrpcService/CreateCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyGrpcServiceServer).CreateCurrency(ctx, req.(*CreateCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyGrpcService_ServiceDesc is the grpc.ServiceDesc for CurrencyGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CurrencyGrpcService",
	HandlerType: (*CurrencyGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCurrency",
			Handler:    _CurrencyGrpcService_CreateCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency.proto",
}
