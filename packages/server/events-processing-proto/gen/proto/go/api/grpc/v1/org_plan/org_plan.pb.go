// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: org_plan.proto

package org_plan_grpc_service

import (
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrganizationPlanFieldMask int32

const (
	OrganizationPlanFieldMask_ORGANIZATION_PLAN_PROPERTY_NONE           OrganizationPlanFieldMask = 0 // No property, ignored by the server
	OrganizationPlanFieldMask_ORGANIZATION_PLAN_PROPERTY_ALL            OrganizationPlanFieldMask = 1 // All properties, if present in the list all other properties are ignored
	OrganizationPlanFieldMask_ORGANIZATION_PLAN_PROPERTY_NAME           OrganizationPlanFieldMask = 2
	OrganizationPlanFieldMask_ORGANIZATION_PLAN_PROPERTY_RETIRED        OrganizationPlanFieldMask = 3
	OrganizationPlanFieldMask_ORGANIZATION_PLAN_PROPERTY_STATUS_DETAILS OrganizationPlanFieldMask = 4
)

// Enum value maps for OrganizationPlanFieldMask.
var (
	OrganizationPlanFieldMask_name = map[int32]string{
		0: "ORGANIZATION_PLAN_PROPERTY_NONE",
		1: "ORGANIZATION_PLAN_PROPERTY_ALL",
		2: "ORGANIZATION_PLAN_PROPERTY_NAME",
		3: "ORGANIZATION_PLAN_PROPERTY_RETIRED",
		4: "ORGANIZATION_PLAN_PROPERTY_STATUS_DETAILS",
	}
	OrganizationPlanFieldMask_value = map[string]int32{
		"ORGANIZATION_PLAN_PROPERTY_NONE":           0,
		"ORGANIZATION_PLAN_PROPERTY_ALL":            1,
		"ORGANIZATION_PLAN_PROPERTY_NAME":           2,
		"ORGANIZATION_PLAN_PROPERTY_RETIRED":        3,
		"ORGANIZATION_PLAN_PROPERTY_STATUS_DETAILS": 4,
	}
)

func (x OrganizationPlanFieldMask) Enum() *OrganizationPlanFieldMask {
	p := new(OrganizationPlanFieldMask)
	*p = x
	return p
}

func (x OrganizationPlanFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrganizationPlanFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_org_plan_proto_enumTypes[0].Descriptor()
}

func (OrganizationPlanFieldMask) Type() protoreflect.EnumType {
	return &file_org_plan_proto_enumTypes[0]
}

func (x OrganizationPlanFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrganizationPlanFieldMask.Descriptor instead.
func (OrganizationPlanFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{0}
}

type OrganizationPlanMilestoneFieldMask int32

const (
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_NONE           OrganizationPlanMilestoneFieldMask = 0 // No property, ignored by the server
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_ALL            OrganizationPlanMilestoneFieldMask = 1 // All properties, if present in the list all other properties are ignored
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_NAME           OrganizationPlanMilestoneFieldMask = 2
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_RETIRED        OrganizationPlanMilestoneFieldMask = 3
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_OPTIONAL       OrganizationPlanMilestoneFieldMask = 4
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_DUE_DATE       OrganizationPlanMilestoneFieldMask = 5
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_ITEMS          OrganizationPlanMilestoneFieldMask = 6
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_ORDER          OrganizationPlanMilestoneFieldMask = 7
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_STATUS_DETAILS OrganizationPlanMilestoneFieldMask = 8
	OrganizationPlanMilestoneFieldMask_ORGANIZATION_PLAN_MILESTONE_PROPERTY_ADHOC          OrganizationPlanMilestoneFieldMask = 9
)

// Enum value maps for OrganizationPlanMilestoneFieldMask.
var (
	OrganizationPlanMilestoneFieldMask_name = map[int32]string{
		0: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_NONE",
		1: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_ALL",
		2: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_NAME",
		3: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_RETIRED",
		4: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_OPTIONAL",
		5: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_DUE_DATE",
		6: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_ITEMS",
		7: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_ORDER",
		8: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_STATUS_DETAILS",
		9: "ORGANIZATION_PLAN_MILESTONE_PROPERTY_ADHOC",
	}
	OrganizationPlanMilestoneFieldMask_value = map[string]int32{
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_NONE":           0,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_ALL":            1,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_NAME":           2,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_RETIRED":        3,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_OPTIONAL":       4,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_DUE_DATE":       5,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_ITEMS":          6,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_ORDER":          7,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_STATUS_DETAILS": 8,
		"ORGANIZATION_PLAN_MILESTONE_PROPERTY_ADHOC":          9,
	}
)

func (x OrganizationPlanMilestoneFieldMask) Enum() *OrganizationPlanMilestoneFieldMask {
	p := new(OrganizationPlanMilestoneFieldMask)
	*p = x
	return p
}

func (x OrganizationPlanMilestoneFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrganizationPlanMilestoneFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_org_plan_proto_enumTypes[1].Descriptor()
}

func (OrganizationPlanMilestoneFieldMask) Type() protoreflect.EnumType {
	return &file_org_plan_proto_enumTypes[1]
}

func (x OrganizationPlanMilestoneFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrganizationPlanMilestoneFieldMask.Descriptor instead.
func (OrganizationPlanMilestoneFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{1}
}

type CreateOrganizationPlanGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields   *common.SourceFields   `protobuf:"bytes,5,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	MasterPlanId   string                 `protobuf:"bytes,6,opt,name=masterPlanId,proto3" json:"masterPlanId,omitempty"`
	OrgId          string                 `protobuf:"bytes,7,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *CreateOrganizationPlanGrpcRequest) Reset() {
	*x = CreateOrganizationPlanGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationPlanGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationPlanGrpcRequest) ProtoMessage() {}

func (x *CreateOrganizationPlanGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationPlanGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationPlanGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOrganizationPlanGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateOrganizationPlanGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateOrganizationPlanGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationPlanGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOrganizationPlanGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateOrganizationPlanGrpcRequest) GetMasterPlanId() string {
	if x != nil {
		return x.MasterPlanId
	}
	return ""
}

func (x *CreateOrganizationPlanGrpcRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Create Milestone takes just a list of string items, as they are all `not started` by default
type CreateOrganizationPlanMilestoneGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant             string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	OrganizationPlanId string                 `protobuf:"bytes,2,opt,name=organizationPlanId,proto3" json:"organizationPlanId,omitempty"`
	LoggedInUserId     string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name               string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields       *common.SourceFields   `protobuf:"bytes,6,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	Optional           bool                   `protobuf:"varint,7,opt,name=optional,proto3" json:"optional,omitempty"`
	DueDate            *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	Items              []string               `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
	Order              int64                  `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
	OrgId              string                 `protobuf:"bytes,11,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Adhoc              bool                   `protobuf:"varint,12,opt,name=adhoc,proto3" json:"adhoc,omitempty"`
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) Reset() {
	*x = CreateOrganizationPlanMilestoneGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationPlanMilestoneGrpcRequest) ProtoMessage() {}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationPlanMilestoneGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationPlanMilestoneGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetOrganizationPlanId() string {
	if x != nil {
		return x.OrganizationPlanId
	}
	return ""
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CreateOrganizationPlanMilestoneGrpcRequest) GetAdhoc() bool {
	if x != nil {
		return x.Adhoc
	}
	return false
}

type StatusDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Comments  string                 `protobuf:"bytes,3,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *StatusDetails) Reset() {
	*x = StatusDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusDetails) ProtoMessage() {}

func (x *StatusDetails) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusDetails.ProtoReflect.Descriptor instead.
func (*StatusDetails) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{2}
}

func (x *StatusDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StatusDetails) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *StatusDetails) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type UpdateOrganizationPlanGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationPlanId string                      `protobuf:"bytes,1,opt,name=organizationPlanId,proto3" json:"organizationPlanId,omitempty"`
	Tenant             string                      `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId     string                      `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name               string                      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Retired            bool                        `protobuf:"varint,5,opt,name=retired,proto3" json:"retired,omitempty"`
	FieldsMask         []OrganizationPlanFieldMask `protobuf:"varint,6,rep,packed,name=fieldsMask,proto3,enum=OrganizationPlanFieldMask" json:"fieldsMask,omitempty"`
	UpdatedAt          *timestamppb.Timestamp      `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AppSource          string                      `protobuf:"bytes,8,opt,name=appSource,proto3" json:"appSource,omitempty"`
	MasterPlanId       string                      `protobuf:"bytes,9,opt,name=masterPlanId,proto3" json:"masterPlanId,omitempty"`
	OrgId              string                      `protobuf:"bytes,10,opt,name=orgId,proto3" json:"orgId,omitempty"`
	StatusDetails      *StatusDetails              `protobuf:"bytes,11,opt,name=statusDetails,proto3" json:"statusDetails,omitempty"`
}

func (x *UpdateOrganizationPlanGrpcRequest) Reset() {
	*x = UpdateOrganizationPlanGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationPlanGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationPlanGrpcRequest) ProtoMessage() {}

func (x *UpdateOrganizationPlanGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationPlanGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationPlanGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOrganizationPlanGrpcRequest) GetOrganizationPlanId() string {
	if x != nil {
		return x.OrganizationPlanId
	}
	return ""
}

func (x *UpdateOrganizationPlanGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateOrganizationPlanGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateOrganizationPlanGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationPlanGrpcRequest) GetRetired() bool {
	if x != nil {
		return x.Retired
	}
	return false
}

func (x *UpdateOrganizationPlanGrpcRequest) GetFieldsMask() []OrganizationPlanFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateOrganizationPlanGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOrganizationPlanGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateOrganizationPlanGrpcRequest) GetMasterPlanId() string {
	if x != nil {
		return x.MasterPlanId
	}
	return ""
}

func (x *UpdateOrganizationPlanGrpcRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateOrganizationPlanGrpcRequest) GetStatusDetails() *StatusDetails {
	if x != nil {
		return x.StatusDetails
	}
	return nil
}

type OrganizationPlanMilestoneItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Text      string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *OrganizationPlanMilestoneItem) Reset() {
	*x = OrganizationPlanMilestoneItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPlanMilestoneItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPlanMilestoneItem) ProtoMessage() {}

func (x *OrganizationPlanMilestoneItem) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPlanMilestoneItem.ProtoReflect.Descriptor instead.
func (*OrganizationPlanMilestoneItem) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{4}
}

func (x *OrganizationPlanMilestoneItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrganizationPlanMilestoneItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OrganizationPlanMilestoneItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Update milestone requires items to be a list of objects, which would contain the status, text and updatedAt
type UpdateOrganizationPlanMilestoneGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationPlanId          string                               `protobuf:"bytes,1,opt,name=organizationPlanId,proto3" json:"organizationPlanId,omitempty"`
	OrganizationPlanMilestoneId string                               `protobuf:"bytes,2,opt,name=organizationPlanMilestoneId,proto3" json:"organizationPlanMilestoneId,omitempty"`
	Tenant                      string                               `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId              string                               `protobuf:"bytes,4,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource                   string                               `protobuf:"bytes,5,opt,name=appSource,proto3" json:"appSource,omitempty"`
	UpdatedAt                   *timestamppb.Timestamp               `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Name                        string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Retired                     bool                                 `protobuf:"varint,8,opt,name=retired,proto3" json:"retired,omitempty"`
	Optional                    bool                                 `protobuf:"varint,9,opt,name=optional,proto3" json:"optional,omitempty"`
	Order                       int64                                `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
	DueDate                     *timestamppb.Timestamp               `protobuf:"bytes,11,opt,name=dueDate,proto3" json:"dueDate,omitempty"`
	Items                       []*OrganizationPlanMilestoneItem     `protobuf:"bytes,12,rep,name=items,proto3" json:"items,omitempty"`
	FieldsMask                  []OrganizationPlanMilestoneFieldMask `protobuf:"varint,13,rep,packed,name=fieldsMask,proto3,enum=OrganizationPlanMilestoneFieldMask" json:"fieldsMask,omitempty"`
	StatusDetails               *StatusDetails                       `protobuf:"bytes,14,opt,name=statusDetails,proto3" json:"statusDetails,omitempty"`
	OrgId                       string                               `protobuf:"bytes,15,opt,name=orgId,proto3" json:"orgId,omitempty"`
	Adhoc                       bool                                 `protobuf:"varint,16,opt,name=adhoc,proto3" json:"adhoc,omitempty"`
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) Reset() {
	*x = UpdateOrganizationPlanMilestoneGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationPlanMilestoneGrpcRequest) ProtoMessage() {}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationPlanMilestoneGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationPlanMilestoneGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetOrganizationPlanId() string {
	if x != nil {
		return x.OrganizationPlanId
	}
	return ""
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetOrganizationPlanMilestoneId() string {
	if x != nil {
		return x.OrganizationPlanMilestoneId
	}
	return ""
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetRetired() bool {
	if x != nil {
		return x.Retired
	}
	return false
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetItems() []*OrganizationPlanMilestoneItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetFieldsMask() []OrganizationPlanMilestoneFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetStatusDetails() *StatusDetails {
	if x != nil {
		return x.StatusDetails
	}
	return nil
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateOrganizationPlanMilestoneGrpcRequest) GetAdhoc() bool {
	if x != nil {
		return x.Adhoc
	}
	return false
}

type ReorderOrganizationPlanMilestonesGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationPlanId           string                 `protobuf:"bytes,1,opt,name=organizationPlanId,proto3" json:"organizationPlanId,omitempty"`
	Tenant                       string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId               string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource                    string                 `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
	UpdatedAt                    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OrganizationPlanMilestoneIds []string               `protobuf:"bytes,6,rep,name=organizationPlanMilestoneIds,proto3" json:"organizationPlanMilestoneIds,omitempty"`
	OrgId                        string                 `protobuf:"bytes,7,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) Reset() {
	*x = ReorderOrganizationPlanMilestonesGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderOrganizationPlanMilestonesGrpcRequest) ProtoMessage() {}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderOrganizationPlanMilestonesGrpcRequest.ProtoReflect.Descriptor instead.
func (*ReorderOrganizationPlanMilestonesGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{6}
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) GetOrganizationPlanId() string {
	if x != nil {
		return x.OrganizationPlanId
	}
	return ""
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) GetOrganizationPlanMilestoneIds() []string {
	if x != nil {
		return x.OrganizationPlanMilestoneIds
	}
	return nil
}

func (x *ReorderOrganizationPlanMilestonesGrpcRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type OrganizationPlanIdGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrganizationPlanIdGrpcResponse) Reset() {
	*x = OrganizationPlanIdGrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPlanIdGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPlanIdGrpcResponse) ProtoMessage() {}

func (x *OrganizationPlanIdGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPlanIdGrpcResponse.ProtoReflect.Descriptor instead.
func (*OrganizationPlanIdGrpcResponse) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{7}
}

func (x *OrganizationPlanIdGrpcResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OrganizationPlanMilestoneIdGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrganizationPlanMilestoneIdGrpcResponse) Reset() {
	*x = OrganizationPlanMilestoneIdGrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationPlanMilestoneIdGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationPlanMilestoneIdGrpcResponse) ProtoMessage() {}

func (x *OrganizationPlanMilestoneIdGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationPlanMilestoneIdGrpcResponse.ProtoReflect.Descriptor instead.
func (*OrganizationPlanMilestoneIdGrpcResponse) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{8}
}

func (x *OrganizationPlanMilestoneIdGrpcResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_org_plan_proto protoreflect.FileDescriptor

var file_org_plan_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xc7, 0x03, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x64, 0x68, 0x6f, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x68, 0x6f,
	0x63, 0x22, 0x7d, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xc5, 0x03, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x74, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x1d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xa9, 0x05, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x75, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d,
	0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x64, 0x68, 0x6f, 0x63, 0x22, 0xd0, 0x02, 0x0a,
	0x2c, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x39, 0x0a, 0x27, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64,
	0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0xe0, 0x01, 0x0a,
	0x19, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x04, 0x2a,
	0x91, 0x04, 0x0a, 0x22, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45,
	0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53,
	0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x54, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54,
	0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x4f, 0x52, 0x47, 0x41, 0x4e,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c,
	0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f,
	0x44, 0x55, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52,
	0x54, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52,
	0x54, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x37, 0x0a, 0x33, 0x4f, 0x52,
	0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x53, 0x10, 0x08, 0x12, 0x2e, 0x0a, 0x2a, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x48, 0x4f,
	0x43, 0x10, 0x09, 0x32, 0xc4, 0x04, 0x0a, 0x1b, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c,
	0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x47,
	0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x2b,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x21, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e,
	0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x52, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x42, 0x0c, 0x4f, 0x72,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x3b, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_org_plan_proto_rawDescOnce sync.Once
	file_org_plan_proto_rawDescData = file_org_plan_proto_rawDesc
)

func file_org_plan_proto_rawDescGZIP() []byte {
	file_org_plan_proto_rawDescOnce.Do(func() {
		file_org_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_org_plan_proto_rawDescData)
	})
	return file_org_plan_proto_rawDescData
}

var file_org_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_org_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_org_plan_proto_goTypes = []interface{}{
	(OrganizationPlanFieldMask)(0),                       // 0: OrganizationPlanFieldMask
	(OrganizationPlanMilestoneFieldMask)(0),              // 1: OrganizationPlanMilestoneFieldMask
	(*CreateOrganizationPlanGrpcRequest)(nil),            // 2: CreateOrganizationPlanGrpcRequest
	(*CreateOrganizationPlanMilestoneGrpcRequest)(nil),   // 3: CreateOrganizationPlanMilestoneGrpcRequest
	(*StatusDetails)(nil),                                // 4: StatusDetails
	(*UpdateOrganizationPlanGrpcRequest)(nil),            // 5: UpdateOrganizationPlanGrpcRequest
	(*OrganizationPlanMilestoneItem)(nil),                // 6: OrganizationPlanMilestoneItem
	(*UpdateOrganizationPlanMilestoneGrpcRequest)(nil),   // 7: UpdateOrganizationPlanMilestoneGrpcRequest
	(*ReorderOrganizationPlanMilestonesGrpcRequest)(nil), // 8: ReorderOrganizationPlanMilestonesGrpcRequest
	(*OrganizationPlanIdGrpcResponse)(nil),               // 9: OrganizationPlanIdGrpcResponse
	(*OrganizationPlanMilestoneIdGrpcResponse)(nil),      // 10: OrganizationPlanMilestoneIdGrpcResponse
	(*timestamppb.Timestamp)(nil),                        // 11: google.protobuf.Timestamp
	(*common.SourceFields)(nil),                          // 12: SourceFields
}
var file_org_plan_proto_depIdxs = []int32{
	11, // 0: CreateOrganizationPlanGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	12, // 1: CreateOrganizationPlanGrpcRequest.sourceFields:type_name -> SourceFields
	11, // 2: CreateOrganizationPlanMilestoneGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	12, // 3: CreateOrganizationPlanMilestoneGrpcRequest.sourceFields:type_name -> SourceFields
	11, // 4: CreateOrganizationPlanMilestoneGrpcRequest.dueDate:type_name -> google.protobuf.Timestamp
	11, // 5: StatusDetails.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 6: UpdateOrganizationPlanGrpcRequest.fieldsMask:type_name -> OrganizationPlanFieldMask
	11, // 7: UpdateOrganizationPlanGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	4,  // 8: UpdateOrganizationPlanGrpcRequest.statusDetails:type_name -> StatusDetails
	11, // 9: OrganizationPlanMilestoneItem.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 10: UpdateOrganizationPlanMilestoneGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 11: UpdateOrganizationPlanMilestoneGrpcRequest.dueDate:type_name -> google.protobuf.Timestamp
	6,  // 12: UpdateOrganizationPlanMilestoneGrpcRequest.items:type_name -> OrganizationPlanMilestoneItem
	1,  // 13: UpdateOrganizationPlanMilestoneGrpcRequest.fieldsMask:type_name -> OrganizationPlanMilestoneFieldMask
	4,  // 14: UpdateOrganizationPlanMilestoneGrpcRequest.statusDetails:type_name -> StatusDetails
	11, // 15: ReorderOrganizationPlanMilestonesGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	2,  // 16: OrganizationPlanGrpcService.CreateOrganizationPlan:input_type -> CreateOrganizationPlanGrpcRequest
	5,  // 17: OrganizationPlanGrpcService.UpdateOrganizationPlan:input_type -> UpdateOrganizationPlanGrpcRequest
	3,  // 18: OrganizationPlanGrpcService.CreateOrganizationPlanMilestone:input_type -> CreateOrganizationPlanMilestoneGrpcRequest
	7,  // 19: OrganizationPlanGrpcService.UpdateOrganizationPlanMilestone:input_type -> UpdateOrganizationPlanMilestoneGrpcRequest
	8,  // 20: OrganizationPlanGrpcService.ReorderOrganizationPlanMilestones:input_type -> ReorderOrganizationPlanMilestonesGrpcRequest
	9,  // 21: OrganizationPlanGrpcService.CreateOrganizationPlan:output_type -> OrganizationPlanIdGrpcResponse
	9,  // 22: OrganizationPlanGrpcService.UpdateOrganizationPlan:output_type -> OrganizationPlanIdGrpcResponse
	10, // 23: OrganizationPlanGrpcService.CreateOrganizationPlanMilestone:output_type -> OrganizationPlanMilestoneIdGrpcResponse
	10, // 24: OrganizationPlanGrpcService.UpdateOrganizationPlanMilestone:output_type -> OrganizationPlanMilestoneIdGrpcResponse
	9,  // 25: OrganizationPlanGrpcService.ReorderOrganizationPlanMilestones:output_type -> OrganizationPlanIdGrpcResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_org_plan_proto_init() }
func file_org_plan_proto_init() {
	if File_org_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_org_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationPlanGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationPlanMilestoneGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationPlanGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPlanMilestoneItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationPlanMilestoneGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderOrganizationPlanMilestonesGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPlanIdGrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationPlanMilestoneIdGrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_plan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_org_plan_proto_goTypes,
		DependencyIndexes: file_org_plan_proto_depIdxs,
		EnumInfos:         file_org_plan_proto_enumTypes,
		MessageInfos:      file_org_plan_proto_msgTypes,
	}.Build()
	File_org_plan_proto = out.File
	file_org_plan_proto_rawDesc = nil
	file_org_plan_proto_goTypes = nil
	file_org_plan_proto_depIdxs = nil
}
