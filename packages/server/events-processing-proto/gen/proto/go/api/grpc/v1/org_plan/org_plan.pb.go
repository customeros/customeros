// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: org_plan.proto

package org_plan_grpc_service

import (
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrgPlanFieldMask int32

const (
	OrgPlanFieldMask_ORG_PLAN_PROPERTY_NONE    OrgPlanFieldMask = 0 // No property, ignored by the server
	OrgPlanFieldMask_ORG_PLAN_PROPERTY_ALL     OrgPlanFieldMask = 1 // All properties, if present in the list all other properties are ignored
	OrgPlanFieldMask_ORG_PLAN_PROPERTY_NAME    OrgPlanFieldMask = 2
	OrgPlanFieldMask_ORG_PLAN_PROPERTY_RETIRED OrgPlanFieldMask = 3
)

// Enum value maps for OrgPlanFieldMask.
var (
	OrgPlanFieldMask_name = map[int32]string{
		0: "ORG_PLAN_PROPERTY_NONE",
		1: "ORG_PLAN_PROPERTY_ALL",
		2: "ORG_PLAN_PROPERTY_NAME",
		3: "ORG_PLAN_PROPERTY_RETIRED",
	}
	OrgPlanFieldMask_value = map[string]int32{
		"ORG_PLAN_PROPERTY_NONE":    0,
		"ORG_PLAN_PROPERTY_ALL":     1,
		"ORG_PLAN_PROPERTY_NAME":    2,
		"ORG_PLAN_PROPERTY_RETIRED": 3,
	}
)

func (x OrgPlanFieldMask) Enum() *OrgPlanFieldMask {
	p := new(OrgPlanFieldMask)
	*p = x
	return p
}

func (x OrgPlanFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgPlanFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_org_plan_proto_enumTypes[0].Descriptor()
}

func (OrgPlanFieldMask) Type() protoreflect.EnumType {
	return &file_org_plan_proto_enumTypes[0]
}

func (x OrgPlanFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgPlanFieldMask.Descriptor instead.
func (OrgPlanFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{0}
}

type OrgPlanMilestoneFieldMask int32

const (
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_NONE           OrgPlanMilestoneFieldMask = 0 // No property, ignored by the server
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_ALL            OrgPlanMilestoneFieldMask = 1 // All properties, if present in the list all other properties are ignored
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_NAME           OrgPlanMilestoneFieldMask = 2
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_RETIRED        OrgPlanMilestoneFieldMask = 3
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_OPTIONAL       OrgPlanMilestoneFieldMask = 4
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_DURATION_HOURS OrgPlanMilestoneFieldMask = 5
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_ITEMS          OrgPlanMilestoneFieldMask = 6
	OrgPlanMilestoneFieldMask_ORG_PLAN_MILESTONE_PROPERTY_ORDER          OrgPlanMilestoneFieldMask = 7
)

// Enum value maps for OrgPlanMilestoneFieldMask.
var (
	OrgPlanMilestoneFieldMask_name = map[int32]string{
		0: "ORG_PLAN_MILESTONE_PROPERTY_NONE",
		1: "ORG_PLAN_MILESTONE_PROPERTY_ALL",
		2: "ORG_PLAN_MILESTONE_PROPERTY_NAME",
		3: "ORG_PLAN_MILESTONE_PROPERTY_RETIRED",
		4: "ORG_PLAN_MILESTONE_PROPERTY_OPTIONAL",
		5: "ORG_PLAN_MILESTONE_PROPERTY_DURATION_HOURS",
		6: "ORG_PLAN_MILESTONE_PROPERTY_ITEMS",
		7: "ORG_PLAN_MILESTONE_PROPERTY_ORDER",
	}
	OrgPlanMilestoneFieldMask_value = map[string]int32{
		"ORG_PLAN_MILESTONE_PROPERTY_NONE":           0,
		"ORG_PLAN_MILESTONE_PROPERTY_ALL":            1,
		"ORG_PLAN_MILESTONE_PROPERTY_NAME":           2,
		"ORG_PLAN_MILESTONE_PROPERTY_RETIRED":        3,
		"ORG_PLAN_MILESTONE_PROPERTY_OPTIONAL":       4,
		"ORG_PLAN_MILESTONE_PROPERTY_DURATION_HOURS": 5,
		"ORG_PLAN_MILESTONE_PROPERTY_ITEMS":          6,
		"ORG_PLAN_MILESTONE_PROPERTY_ORDER":          7,
	}
)

func (x OrgPlanMilestoneFieldMask) Enum() *OrgPlanMilestoneFieldMask {
	p := new(OrgPlanMilestoneFieldMask)
	*p = x
	return p
}

func (x OrgPlanMilestoneFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgPlanMilestoneFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_org_plan_proto_enumTypes[1].Descriptor()
}

func (OrgPlanMilestoneFieldMask) Type() protoreflect.EnumType {
	return &file_org_plan_proto_enumTypes[1]
}

func (x OrgPlanMilestoneFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgPlanMilestoneFieldMask.Descriptor instead.
func (OrgPlanMilestoneFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{1}
}

type CreateOrgPlanGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields   *common.SourceFields   `protobuf:"bytes,5,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	MasterPlanId   string                 `protobuf:"bytes,6,opt,name=masterPlanId,proto3" json:"masterPlanId,omitempty"`
	OrgId          string                 `protobuf:"bytes,7,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *CreateOrgPlanGrpcRequest) Reset() {
	*x = CreateOrgPlanGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgPlanGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgPlanGrpcRequest) ProtoMessage() {}

func (x *CreateOrgPlanGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgPlanGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateOrgPlanGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOrgPlanGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateOrgPlanGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateOrgPlanGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrgPlanGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOrgPlanGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateOrgPlanGrpcRequest) GetMasterPlanId() string {
	if x != nil {
		return x.MasterPlanId
	}
	return ""
}

func (x *CreateOrgPlanGrpcRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

// Create Milestone takes just a list of string items, as they are all `not started` by default
type CreateOrgPlanMilestoneGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	OrgPlanId      string                 `protobuf:"bytes,2,opt,name=orgPlanId,proto3" json:"orgPlanId,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name           string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields   *common.SourceFields   `protobuf:"bytes,6,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	Optional       bool                   `protobuf:"varint,7,opt,name=optional,proto3" json:"optional,omitempty"`
	DurationHours  int64                  `protobuf:"varint,8,opt,name=durationHours,proto3" json:"durationHours,omitempty"`
	Items          []string               `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
	Order          int64                  `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *CreateOrgPlanMilestoneGrpcRequest) Reset() {
	*x = CreateOrgPlanMilestoneGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgPlanMilestoneGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgPlanMilestoneGrpcRequest) ProtoMessage() {}

func (x *CreateOrgPlanMilestoneGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgPlanMilestoneGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateOrgPlanMilestoneGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetOrgPlanId() string {
	if x != nil {
		return x.OrgPlanId
	}
	return ""
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetDurationHours() int64 {
	if x != nil {
		return x.DurationHours
	}
	return 0
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreateOrgPlanMilestoneGrpcRequest) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type UpdateOrgPlanGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgPlanId      string                 `protobuf:"bytes,1,opt,name=orgPlanId,proto3" json:"orgPlanId,omitempty"`
	Tenant         string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name           string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Retired        bool                   `protobuf:"varint,5,opt,name=retired,proto3" json:"retired,omitempty"`
	FieldsMask     []OrgPlanFieldMask     `protobuf:"varint,6,rep,packed,name=fieldsMask,proto3,enum=OrgPlanFieldMask" json:"fieldsMask,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AppSource      string                 `protobuf:"bytes,8,opt,name=appSource,proto3" json:"appSource,omitempty"`
	MasterPlanId   string                 `protobuf:"bytes,9,opt,name=masterPlanId,proto3" json:"masterPlanId,omitempty"`
	OrgId          string                 `protobuf:"bytes,10,opt,name=orgId,proto3" json:"orgId,omitempty"`
}

func (x *UpdateOrgPlanGrpcRequest) Reset() {
	*x = UpdateOrgPlanGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgPlanGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgPlanGrpcRequest) ProtoMessage() {}

func (x *UpdateOrgPlanGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgPlanGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgPlanGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateOrgPlanGrpcRequest) GetOrgPlanId() string {
	if x != nil {
		return x.OrgPlanId
	}
	return ""
}

func (x *UpdateOrgPlanGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateOrgPlanGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateOrgPlanGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrgPlanGrpcRequest) GetRetired() bool {
	if x != nil {
		return x.Retired
	}
	return false
}

func (x *UpdateOrgPlanGrpcRequest) GetFieldsMask() []OrgPlanFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateOrgPlanGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOrgPlanGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateOrgPlanGrpcRequest) GetMasterPlanId() string {
	if x != nil {
		return x.MasterPlanId
	}
	return ""
}

func (x *UpdateOrgPlanGrpcRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type OrgPlanMilestoneItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Text      string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *OrgPlanMilestoneItem) Reset() {
	*x = OrgPlanMilestoneItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgPlanMilestoneItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgPlanMilestoneItem) ProtoMessage() {}

func (x *OrgPlanMilestoneItem) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgPlanMilestoneItem.ProtoReflect.Descriptor instead.
func (*OrgPlanMilestoneItem) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{3}
}

func (x *OrgPlanMilestoneItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrgPlanMilestoneItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OrgPlanMilestoneItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Update milestone requires items to be a list of objects, which would contain the status, text and updatedAt
type UpdateOrgPlanMilestoneGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgPlanId          string                      `protobuf:"bytes,1,opt,name=orgPlanId,proto3" json:"orgPlanId,omitempty"`
	OrgPlanMilestoneId string                      `protobuf:"bytes,2,opt,name=orgPlanMilestoneId,proto3" json:"orgPlanMilestoneId,omitempty"`
	Tenant             string                      `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId     string                      `protobuf:"bytes,4,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource          string                      `protobuf:"bytes,5,opt,name=appSource,proto3" json:"appSource,omitempty"`
	UpdatedAt          *timestamppb.Timestamp      `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Name               string                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Retired            bool                        `protobuf:"varint,8,opt,name=retired,proto3" json:"retired,omitempty"`
	Optional           bool                        `protobuf:"varint,9,opt,name=optional,proto3" json:"optional,omitempty"`
	Order              int64                       `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
	DurationHours      int64                       `protobuf:"varint,11,opt,name=durationHours,proto3" json:"durationHours,omitempty"`
	Items              []*OrgPlanMilestoneItem     `protobuf:"bytes,12,rep,name=items,proto3" json:"items,omitempty"`
	FieldsMask         []OrgPlanMilestoneFieldMask `protobuf:"varint,13,rep,packed,name=fieldsMask,proto3,enum=OrgPlanMilestoneFieldMask" json:"fieldsMask,omitempty"`
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) Reset() {
	*x = UpdateOrgPlanMilestoneGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgPlanMilestoneGrpcRequest) ProtoMessage() {}

func (x *UpdateOrgPlanMilestoneGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgPlanMilestoneGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgPlanMilestoneGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetOrgPlanId() string {
	if x != nil {
		return x.OrgPlanId
	}
	return ""
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetOrgPlanMilestoneId() string {
	if x != nil {
		return x.OrgPlanMilestoneId
	}
	return ""
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetRetired() bool {
	if x != nil {
		return x.Retired
	}
	return false
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetDurationHours() int64 {
	if x != nil {
		return x.DurationHours
	}
	return 0
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetItems() []*OrgPlanMilestoneItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UpdateOrgPlanMilestoneGrpcRequest) GetFieldsMask() []OrgPlanMilestoneFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

type ReorderOrgPlanMilestonesGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgPlanId           string                 `protobuf:"bytes,1,opt,name=orgPlanId,proto3" json:"orgPlanId,omitempty"`
	Tenant              string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId      string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource           string                 `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	OrgPlanMilestoneIds []string               `protobuf:"bytes,6,rep,name=orgPlanMilestoneIds,proto3" json:"orgPlanMilestoneIds,omitempty"`
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) Reset() {
	*x = ReorderOrgPlanMilestonesGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReorderOrgPlanMilestonesGrpcRequest) ProtoMessage() {}

func (x *ReorderOrgPlanMilestonesGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReorderOrgPlanMilestonesGrpcRequest.ProtoReflect.Descriptor instead.
func (*ReorderOrgPlanMilestonesGrpcRequest) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{5}
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) GetOrgPlanId() string {
	if x != nil {
		return x.OrgPlanId
	}
	return ""
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ReorderOrgPlanMilestonesGrpcRequest) GetOrgPlanMilestoneIds() []string {
	if x != nil {
		return x.OrgPlanMilestoneIds
	}
	return nil
}

type OrgPlanIdGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrgPlanIdGrpcResponse) Reset() {
	*x = OrgPlanIdGrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgPlanIdGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgPlanIdGrpcResponse) ProtoMessage() {}

func (x *OrgPlanIdGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgPlanIdGrpcResponse.ProtoReflect.Descriptor instead.
func (*OrgPlanIdGrpcResponse) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{6}
}

func (x *OrgPlanIdGrpcResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type OrgPlanMilestoneIdGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OrgPlanMilestoneIdGrpcResponse) Reset() {
	*x = OrgPlanMilestoneIdGrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_org_plan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgPlanMilestoneIdGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgPlanMilestoneIdGrpcResponse) ProtoMessage() {}

func (x *OrgPlanMilestoneIdGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_org_plan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgPlanMilestoneIdGrpcResponse.ProtoReflect.Descriptor instead.
func (*OrgPlanMilestoneIdGrpcResponse) Descriptor() ([]byte, []int) {
	return file_org_plan_proto_rawDescGZIP(), []int{7}
}

func (x *OrgPlanMilestoneIdGrpcResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_org_plan_proto protoreflect.FileDescriptor

var file_org_plan_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xf0,
	0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0xeb, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22,
	0x7c, 0x0a, 0x14, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf8, 0x03,
	0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d,
	0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f,
	0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x8d, 0x02, 0x0a, 0x23, 0x52, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x73, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x4f, 0x72, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x30, 0x0a, 0x1e, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x2a, 0x84, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x47, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4f,
	0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xdd, 0x02, 0x0a, 0x19, 0x4f,
	0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x47, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53,
	0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52,
	0x54, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x52, 0x47,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d,
	0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a,
	0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21,
	0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f,
	0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x53, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x52, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52,
	0x54, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x32, 0xb4, 0x03, 0x0a, 0x12, 0x4f,
	0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x19, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x19, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61,
	0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x12, 0x22, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x18, 0x52, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f,
	0x6e, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x4f, 0x72, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x3c, 0x42, 0x0c, 0x4f, 0x72, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31,
	0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x3b, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_org_plan_proto_rawDescOnce sync.Once
	file_org_plan_proto_rawDescData = file_org_plan_proto_rawDesc
)

func file_org_plan_proto_rawDescGZIP() []byte {
	file_org_plan_proto_rawDescOnce.Do(func() {
		file_org_plan_proto_rawDescData = protoimpl.X.CompressGZIP(file_org_plan_proto_rawDescData)
	})
	return file_org_plan_proto_rawDescData
}

var file_org_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_org_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_org_plan_proto_goTypes = []interface{}{
	(OrgPlanFieldMask)(0),                       // 0: OrgPlanFieldMask
	(OrgPlanMilestoneFieldMask)(0),              // 1: OrgPlanMilestoneFieldMask
	(*CreateOrgPlanGrpcRequest)(nil),            // 2: CreateOrgPlanGrpcRequest
	(*CreateOrgPlanMilestoneGrpcRequest)(nil),   // 3: CreateOrgPlanMilestoneGrpcRequest
	(*UpdateOrgPlanGrpcRequest)(nil),            // 4: UpdateOrgPlanGrpcRequest
	(*OrgPlanMilestoneItem)(nil),                // 5: OrgPlanMilestoneItem
	(*UpdateOrgPlanMilestoneGrpcRequest)(nil),   // 6: UpdateOrgPlanMilestoneGrpcRequest
	(*ReorderOrgPlanMilestonesGrpcRequest)(nil), // 7: ReorderOrgPlanMilestonesGrpcRequest
	(*OrgPlanIdGrpcResponse)(nil),               // 8: OrgPlanIdGrpcResponse
	(*OrgPlanMilestoneIdGrpcResponse)(nil),      // 9: OrgPlanMilestoneIdGrpcResponse
	(*timestamppb.Timestamp)(nil),               // 10: google.protobuf.Timestamp
	(*common.SourceFields)(nil),                 // 11: SourceFields
}
var file_org_plan_proto_depIdxs = []int32{
	10, // 0: CreateOrgPlanGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	11, // 1: CreateOrgPlanGrpcRequest.sourceFields:type_name -> SourceFields
	10, // 2: CreateOrgPlanMilestoneGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	11, // 3: CreateOrgPlanMilestoneGrpcRequest.sourceFields:type_name -> SourceFields
	0,  // 4: UpdateOrgPlanGrpcRequest.fieldsMask:type_name -> OrgPlanFieldMask
	10, // 5: UpdateOrgPlanGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	10, // 6: OrgPlanMilestoneItem.updatedAt:type_name -> google.protobuf.Timestamp
	10, // 7: UpdateOrgPlanMilestoneGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	5,  // 8: UpdateOrgPlanMilestoneGrpcRequest.items:type_name -> OrgPlanMilestoneItem
	1,  // 9: UpdateOrgPlanMilestoneGrpcRequest.fieldsMask:type_name -> OrgPlanMilestoneFieldMask
	10, // 10: ReorderOrgPlanMilestonesGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	2,  // 11: OrgPlanGrpcService.CreateOrgPlan:input_type -> CreateOrgPlanGrpcRequest
	4,  // 12: OrgPlanGrpcService.UpdateOrgPlan:input_type -> UpdateOrgPlanGrpcRequest
	3,  // 13: OrgPlanGrpcService.CreateOrgPlanMilestone:input_type -> CreateOrgPlanMilestoneGrpcRequest
	6,  // 14: OrgPlanGrpcService.UpdateOrgPlanMilestone:input_type -> UpdateOrgPlanMilestoneGrpcRequest
	7,  // 15: OrgPlanGrpcService.ReorderOrgPlanMilestones:input_type -> ReorderOrgPlanMilestonesGrpcRequest
	8,  // 16: OrgPlanGrpcService.CreateOrgPlan:output_type -> OrgPlanIdGrpcResponse
	8,  // 17: OrgPlanGrpcService.UpdateOrgPlan:output_type -> OrgPlanIdGrpcResponse
	9,  // 18: OrgPlanGrpcService.CreateOrgPlanMilestone:output_type -> OrgPlanMilestoneIdGrpcResponse
	9,  // 19: OrgPlanGrpcService.UpdateOrgPlanMilestone:output_type -> OrgPlanMilestoneIdGrpcResponse
	8,  // 20: OrgPlanGrpcService.ReorderOrgPlanMilestones:output_type -> OrgPlanIdGrpcResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_org_plan_proto_init() }
func file_org_plan_proto_init() {
	if File_org_plan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_org_plan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgPlanGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgPlanMilestoneGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgPlanGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgPlanMilestoneItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrgPlanMilestoneGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReorderOrgPlanMilestonesGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgPlanIdGrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_org_plan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgPlanMilestoneIdGrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_org_plan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_org_plan_proto_goTypes,
		DependencyIndexes: file_org_plan_proto_depIdxs,
		EnumInfos:         file_org_plan_proto_enumTypes,
		MessageInfos:      file_org_plan_proto_msgTypes,
	}.Build()
	File_org_plan_proto = out.File
	file_org_plan_proto_rawDesc = nil
	file_org_plan_proto_goTypes = nil
	file_org_plan_proto_depIdxs = nil
}
