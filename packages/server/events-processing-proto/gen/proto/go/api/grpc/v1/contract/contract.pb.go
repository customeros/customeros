// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: contract.proto

package contract_grpc_service

import (
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContractFieldMask int32

const (
	ContractFieldMask_CONTRACT_FIELD_NONE               ContractFieldMask = 0 // No property, ignored by the server
	ContractFieldMask_CONTRACT_FIELD_NAME               ContractFieldMask = 1
	ContractFieldMask_CONTRACT_FIELD_SERVICE_STARTED_AT ContractFieldMask = 2
	ContractFieldMask_CONTRACT_FIELD_SIGNED_AT          ContractFieldMask = 3
	ContractFieldMask_CONTRACT_FIELD_ENDED_AT           ContractFieldMask = 4
	ContractFieldMask_CONTRACT_FIELD_CONTRACT_URL       ContractFieldMask = 6
	// Deprecated: Marked as deprecated in contract.proto.
	ContractFieldMask_CONTRACT_FIELD_BILLING_CYCLE              ContractFieldMask = 8
	ContractFieldMask_CONTRACT_FIELD_INVOICING_START_DATE       ContractFieldMask = 9
	ContractFieldMask_CONTRACT_FIELD_CURRENCY                   ContractFieldMask = 10
	ContractFieldMask_CONTRACT_FIELD_ADDRESS_LINE_1             ContractFieldMask = 11
	ContractFieldMask_CONTRACT_FIELD_ADDRESS_LINE_2             ContractFieldMask = 12
	ContractFieldMask_CONTRACT_FIELD_LOCALITY                   ContractFieldMask = 13
	ContractFieldMask_CONTRACT_FIELD_COUNTRY                    ContractFieldMask = 14
	ContractFieldMask_CONTRACT_FIELD_ZIP                        ContractFieldMask = 15
	ContractFieldMask_CONTRACT_FIELD_ORGANIZATION_LEGAL_NAME    ContractFieldMask = 16
	ContractFieldMask_CONTRACT_FIELD_INVOICE_NOTE               ContractFieldMask = 18
	ContractFieldMask_CONTRACT_FIELD_NEXT_INVOICE_DATE          ContractFieldMask = 19 // to update next invoice date field mask must be specified explicitly
	ContractFieldMask_CONTRACT_FIELD_CAN_PAY_WITH_CARD          ContractFieldMask = 20
	ContractFieldMask_CONTRACT_FIELD_CAN_PAY_WITH_DIRECT_DEBIT  ContractFieldMask = 21
	ContractFieldMask_CONTRACT_FIELD_CAN_PAY_WITH_BANK_TRANSFER ContractFieldMask = 22
	ContractFieldMask_CONTRACT_FIELD_INVOICING_ENABLED          ContractFieldMask = 23
	ContractFieldMask_CONTRACT_FIELD_PAY_ONLINE                 ContractFieldMask = 24
	ContractFieldMask_CONTRACT_FIELD_PAY_AUTOMATICALLY          ContractFieldMask = 25
	ContractFieldMask_CONTRACT_FIELD_AUTO_RENEW                 ContractFieldMask = 26
	ContractFieldMask_CONTRACT_FIELD_REGION                     ContractFieldMask = 27
	ContractFieldMask_CONTRACT_FIELD_CHECK                      ContractFieldMask = 28
	ContractFieldMask_CONTRACT_FIELD_DUE_DAYS                   ContractFieldMask = 29
	ContractFieldMask_CONTRACT_FIELD_INVOICE_EMAIL_CC           ContractFieldMask = 30
	ContractFieldMask_CONTRACT_FIELD_INVOICE_EMAIL_BCC          ContractFieldMask = 31
	ContractFieldMask_CONTRACT_FIELD_INVOICE_EMAIL_TO           ContractFieldMask = 32
	ContractFieldMask_CONTRACT_FIELD_LENGTH_IN_MONTHS           ContractFieldMask = 33
	ContractFieldMask_CONTRACT_FIELD_APPROVED                   ContractFieldMask = 34
	ContractFieldMask_CONTRACT_FIELD_BILLING_CYCLE_IN_MONTHS    ContractFieldMask = 35
)

// Enum value maps for ContractFieldMask.
var (
	ContractFieldMask_name = map[int32]string{
		0:  "CONTRACT_FIELD_NONE",
		1:  "CONTRACT_FIELD_NAME",
		2:  "CONTRACT_FIELD_SERVICE_STARTED_AT",
		3:  "CONTRACT_FIELD_SIGNED_AT",
		4:  "CONTRACT_FIELD_ENDED_AT",
		6:  "CONTRACT_FIELD_CONTRACT_URL",
		8:  "CONTRACT_FIELD_BILLING_CYCLE",
		9:  "CONTRACT_FIELD_INVOICING_START_DATE",
		10: "CONTRACT_FIELD_CURRENCY",
		11: "CONTRACT_FIELD_ADDRESS_LINE_1",
		12: "CONTRACT_FIELD_ADDRESS_LINE_2",
		13: "CONTRACT_FIELD_LOCALITY",
		14: "CONTRACT_FIELD_COUNTRY",
		15: "CONTRACT_FIELD_ZIP",
		16: "CONTRACT_FIELD_ORGANIZATION_LEGAL_NAME",
		18: "CONTRACT_FIELD_INVOICE_NOTE",
		19: "CONTRACT_FIELD_NEXT_INVOICE_DATE",
		20: "CONTRACT_FIELD_CAN_PAY_WITH_CARD",
		21: "CONTRACT_FIELD_CAN_PAY_WITH_DIRECT_DEBIT",
		22: "CONTRACT_FIELD_CAN_PAY_WITH_BANK_TRANSFER",
		23: "CONTRACT_FIELD_INVOICING_ENABLED",
		24: "CONTRACT_FIELD_PAY_ONLINE",
		25: "CONTRACT_FIELD_PAY_AUTOMATICALLY",
		26: "CONTRACT_FIELD_AUTO_RENEW",
		27: "CONTRACT_FIELD_REGION",
		28: "CONTRACT_FIELD_CHECK",
		29: "CONTRACT_FIELD_DUE_DAYS",
		30: "CONTRACT_FIELD_INVOICE_EMAIL_CC",
		31: "CONTRACT_FIELD_INVOICE_EMAIL_BCC",
		32: "CONTRACT_FIELD_INVOICE_EMAIL_TO",
		33: "CONTRACT_FIELD_LENGTH_IN_MONTHS",
		34: "CONTRACT_FIELD_APPROVED",
		35: "CONTRACT_FIELD_BILLING_CYCLE_IN_MONTHS",
	}
	ContractFieldMask_value = map[string]int32{
		"CONTRACT_FIELD_NONE":                       0,
		"CONTRACT_FIELD_NAME":                       1,
		"CONTRACT_FIELD_SERVICE_STARTED_AT":         2,
		"CONTRACT_FIELD_SIGNED_AT":                  3,
		"CONTRACT_FIELD_ENDED_AT":                   4,
		"CONTRACT_FIELD_CONTRACT_URL":               6,
		"CONTRACT_FIELD_BILLING_CYCLE":              8,
		"CONTRACT_FIELD_INVOICING_START_DATE":       9,
		"CONTRACT_FIELD_CURRENCY":                   10,
		"CONTRACT_FIELD_ADDRESS_LINE_1":             11,
		"CONTRACT_FIELD_ADDRESS_LINE_2":             12,
		"CONTRACT_FIELD_LOCALITY":                   13,
		"CONTRACT_FIELD_COUNTRY":                    14,
		"CONTRACT_FIELD_ZIP":                        15,
		"CONTRACT_FIELD_ORGANIZATION_LEGAL_NAME":    16,
		"CONTRACT_FIELD_INVOICE_NOTE":               18,
		"CONTRACT_FIELD_NEXT_INVOICE_DATE":          19,
		"CONTRACT_FIELD_CAN_PAY_WITH_CARD":          20,
		"CONTRACT_FIELD_CAN_PAY_WITH_DIRECT_DEBIT":  21,
		"CONTRACT_FIELD_CAN_PAY_WITH_BANK_TRANSFER": 22,
		"CONTRACT_FIELD_INVOICING_ENABLED":          23,
		"CONTRACT_FIELD_PAY_ONLINE":                 24,
		"CONTRACT_FIELD_PAY_AUTOMATICALLY":          25,
		"CONTRACT_FIELD_AUTO_RENEW":                 26,
		"CONTRACT_FIELD_REGION":                     27,
		"CONTRACT_FIELD_CHECK":                      28,
		"CONTRACT_FIELD_DUE_DAYS":                   29,
		"CONTRACT_FIELD_INVOICE_EMAIL_CC":           30,
		"CONTRACT_FIELD_INVOICE_EMAIL_BCC":          31,
		"CONTRACT_FIELD_INVOICE_EMAIL_TO":           32,
		"CONTRACT_FIELD_LENGTH_IN_MONTHS":           33,
		"CONTRACT_FIELD_APPROVED":                   34,
		"CONTRACT_FIELD_BILLING_CYCLE_IN_MONTHS":    35,
	}
)

func (x ContractFieldMask) Enum() *ContractFieldMask {
	p := new(ContractFieldMask)
	*p = x
	return p
}

func (x ContractFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[0].Descriptor()
}

func (ContractFieldMask) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[0]
}

func (x ContractFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractFieldMask.Descriptor instead.
func (ContractFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{0}
}

// CreateContract request message
type CreateContractGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant                 string                       `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId         string                       `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	OrganizationId         string                       `protobuf:"bytes,3,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	Name                   string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CreatedByUserId        string                       `protobuf:"bytes,5,opt,name=createdByUserId,proto3" json:"createdByUserId,omitempty"`
	CreatedAt              *timestamppb.Timestamp       `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt              *timestamppb.Timestamp       `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ServiceStartedAt       *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=serviceStartedAt,proto3" json:"serviceStartedAt,omitempty"`
	SignedAt               *timestamppb.Timestamp       `protobuf:"bytes,9,opt,name=signedAt,proto3" json:"signedAt,omitempty"`
	SourceFields           *common.SourceFields         `protobuf:"bytes,12,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	ExternalSystemFields   *common.ExternalSystemFields `protobuf:"bytes,13,opt,name=externalSystemFields,proto3" json:"externalSystemFields,omitempty"`
	ContractUrl            string                       `protobuf:"bytes,14,opt,name=contractUrl,proto3" json:"contractUrl,omitempty"`
	InvoicingStartDate     *timestamppb.Timestamp       `protobuf:"bytes,17,opt,name=invoicingStartDate,proto3" json:"invoicingStartDate,omitempty"`
	Currency               string                       `protobuf:"bytes,18,opt,name=currency,proto3" json:"currency,omitempty"`
	InvoicingEnabled       bool                         `protobuf:"varint,19,opt,name=invoicingEnabled,proto3" json:"invoicingEnabled,omitempty"`
	PayOnline              bool                         `protobuf:"varint,20,opt,name=payOnline,proto3" json:"payOnline,omitempty"`
	PayAutomatically       bool                         `protobuf:"varint,21,opt,name=payAutomatically,proto3" json:"payAutomatically,omitempty"`
	CanPayWithCard         bool                         `protobuf:"varint,22,opt,name=canPayWithCard,proto3" json:"canPayWithCard,omitempty"`
	CanPayWithDirectDebit  bool                         `protobuf:"varint,23,opt,name=canPayWithDirectDebit,proto3" json:"canPayWithDirectDebit,omitempty"`
	CanPayWithBankTransfer bool                         `protobuf:"varint,24,opt,name=canPayWithBankTransfer,proto3" json:"canPayWithBankTransfer,omitempty"`
	AutoRenew              bool                         `protobuf:"varint,25,opt,name=autoRenew,proto3" json:"autoRenew,omitempty"`
	Check                  bool                         `protobuf:"varint,26,opt,name=check,proto3" json:"check,omitempty"`
	DueDays                int64                        `protobuf:"varint,27,opt,name=dueDays,proto3" json:"dueDays,omitempty"`
	Country                string                       `protobuf:"bytes,28,opt,name=country,proto3" json:"country,omitempty"`
	LengthInMonths         int64                        `protobuf:"varint,29,opt,name=lengthInMonths,proto3" json:"lengthInMonths,omitempty"`
	Approved               bool                         `protobuf:"varint,30,opt,name=approved,proto3" json:"approved,omitempty"`
	BillingCycleInMonths   int64                        `protobuf:"varint,31,opt,name=billingCycleInMonths,proto3" json:"billingCycleInMonths,omitempty"`
}

func (x *CreateContractGrpcRequest) Reset() {
	*x = CreateContractGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractGrpcRequest) ProtoMessage() {}

func (x *CreateContractGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateContractGrpcRequest) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{0}
}

func (x *CreateContractGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateContractGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CreateContractGrpcRequest) GetServiceStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ServiceStartedAt
	}
	return nil
}

func (x *CreateContractGrpcRequest) GetSignedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SignedAt
	}
	return nil
}

func (x *CreateContractGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateContractGrpcRequest) GetExternalSystemFields() *common.ExternalSystemFields {
	if x != nil {
		return x.ExternalSystemFields
	}
	return nil
}

func (x *CreateContractGrpcRequest) GetContractUrl() string {
	if x != nil {
		return x.ContractUrl
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetInvoicingStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicingStartDate
	}
	return nil
}

func (x *CreateContractGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetInvoicingEnabled() bool {
	if x != nil {
		return x.InvoicingEnabled
	}
	return false
}

func (x *CreateContractGrpcRequest) GetPayOnline() bool {
	if x != nil {
		return x.PayOnline
	}
	return false
}

func (x *CreateContractGrpcRequest) GetPayAutomatically() bool {
	if x != nil {
		return x.PayAutomatically
	}
	return false
}

func (x *CreateContractGrpcRequest) GetCanPayWithCard() bool {
	if x != nil {
		return x.CanPayWithCard
	}
	return false
}

func (x *CreateContractGrpcRequest) GetCanPayWithDirectDebit() bool {
	if x != nil {
		return x.CanPayWithDirectDebit
	}
	return false
}

func (x *CreateContractGrpcRequest) GetCanPayWithBankTransfer() bool {
	if x != nil {
		return x.CanPayWithBankTransfer
	}
	return false
}

func (x *CreateContractGrpcRequest) GetAutoRenew() bool {
	if x != nil {
		return x.AutoRenew
	}
	return false
}

func (x *CreateContractGrpcRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

func (x *CreateContractGrpcRequest) GetDueDays() int64 {
	if x != nil {
		return x.DueDays
	}
	return 0
}

func (x *CreateContractGrpcRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *CreateContractGrpcRequest) GetLengthInMonths() int64 {
	if x != nil {
		return x.LengthInMonths
	}
	return 0
}

func (x *CreateContractGrpcRequest) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *CreateContractGrpcRequest) GetBillingCycleInMonths() int64 {
	if x != nil {
		return x.BillingCycleInMonths
	}
	return 0
}

type UpdateContractGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant                 string                       `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId         string                       `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name                   string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	UpdatedAt              *timestamppb.Timestamp       `protobuf:"bytes,5,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	ServiceStartedAt       *timestamppb.Timestamp       `protobuf:"bytes,6,opt,name=serviceStartedAt,proto3" json:"serviceStartedAt,omitempty"`
	SignedAt               *timestamppb.Timestamp       `protobuf:"bytes,7,opt,name=signedAt,proto3" json:"signedAt,omitempty"`
	EndedAt                *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	SourceFields           *common.SourceFields         `protobuf:"bytes,10,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	ExternalSystemFields   *common.ExternalSystemFields `protobuf:"bytes,11,opt,name=externalSystemFields,proto3" json:"externalSystemFields,omitempty"`
	ContractUrl            string                       `protobuf:"bytes,12,opt,name=contractUrl,proto3" json:"contractUrl,omitempty"`
	InvoicingStartDate     *timestamppb.Timestamp       `protobuf:"bytes,15,opt,name=invoicingStartDate,proto3" json:"invoicingStartDate,omitempty"`
	Currency               string                       `protobuf:"bytes,16,opt,name=currency,proto3" json:"currency,omitempty"`
	AddressLine1           string                       `protobuf:"bytes,17,opt,name=addressLine1,proto3" json:"addressLine1,omitempty"`
	AddressLine2           string                       `protobuf:"bytes,18,opt,name=addressLine2,proto3" json:"addressLine2,omitempty"`
	Locality               string                       `protobuf:"bytes,19,opt,name=locality,proto3" json:"locality,omitempty"`
	Country                string                       `protobuf:"bytes,20,opt,name=country,proto3" json:"country,omitempty"`
	Zip                    string                       `protobuf:"bytes,21,opt,name=zip,proto3" json:"zip,omitempty"`
	OrganizationLegalName  string                       `protobuf:"bytes,22,opt,name=organizationLegalName,proto3" json:"organizationLegalName,omitempty"`
	FieldsMask             []ContractFieldMask          `protobuf:"varint,24,rep,packed,name=fieldsMask,proto3,enum=ContractFieldMask" json:"fieldsMask,omitempty"`
	InvoiceNote            string                       `protobuf:"bytes,25,opt,name=invoiceNote,proto3" json:"invoiceNote,omitempty"`
	NextInvoiceDate        *timestamppb.Timestamp       `protobuf:"bytes,26,opt,name=nextInvoiceDate,proto3" json:"nextInvoiceDate,omitempty"`
	CanPayWithCard         bool                         `protobuf:"varint,27,opt,name=canPayWithCard,proto3" json:"canPayWithCard,omitempty"`
	CanPayWithDirectDebit  bool                         `protobuf:"varint,28,opt,name=canPayWithDirectDebit,proto3" json:"canPayWithDirectDebit,omitempty"`
	CanPayWithBankTransfer bool                         `protobuf:"varint,29,opt,name=canPayWithBankTransfer,proto3" json:"canPayWithBankTransfer,omitempty"`
	InvoicingEnabled       bool                         `protobuf:"varint,30,opt,name=invoicingEnabled,proto3" json:"invoicingEnabled,omitempty"`
	PayOnline              bool                         `protobuf:"varint,31,opt,name=payOnline,proto3" json:"payOnline,omitempty"`
	PayAutomatically       bool                         `protobuf:"varint,32,opt,name=payAutomatically,proto3" json:"payAutomatically,omitempty"`
	AutoRenew              bool                         `protobuf:"varint,33,opt,name=autoRenew,proto3" json:"autoRenew,omitempty"`
	Region                 string                       `protobuf:"bytes,34,opt,name=region,proto3" json:"region,omitempty"`
	Check                  bool                         `protobuf:"varint,35,opt,name=check,proto3" json:"check,omitempty"`
	DueDays                int64                        `protobuf:"varint,36,opt,name=dueDays,proto3" json:"dueDays,omitempty"`
	InvoiceEmailTo         string                       `protobuf:"bytes,37,opt,name=invoiceEmailTo,proto3" json:"invoiceEmailTo,omitempty"`
	InvoiceEmailCc         []string                     `protobuf:"bytes,38,rep,name=invoiceEmailCc,proto3" json:"invoiceEmailCc,omitempty"`
	InvoiceEmailBcc        []string                     `protobuf:"bytes,39,rep,name=invoiceEmailBcc,proto3" json:"invoiceEmailBcc,omitempty"`
	LengthInMonths         int64                        `protobuf:"varint,40,opt,name=lengthInMonths,proto3" json:"lengthInMonths,omitempty"`
	Approved               bool                         `protobuf:"varint,41,opt,name=approved,proto3" json:"approved,omitempty"`
	BillingCycleInMonths   int64                        `protobuf:"varint,42,opt,name=billingCycleInMonths,proto3" json:"billingCycleInMonths,omitempty"`
}

func (x *UpdateContractGrpcRequest) Reset() {
	*x = UpdateContractGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContractGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContractGrpcRequest) ProtoMessage() {}

func (x *UpdateContractGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContractGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateContractGrpcRequest) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateContractGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetServiceStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ServiceStartedAt
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetSignedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SignedAt
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetExternalSystemFields() *common.ExternalSystemFields {
	if x != nil {
		return x.ExternalSystemFields
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetContractUrl() string {
	if x != nil {
		return x.ContractUrl
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetInvoicingStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InvoicingStartDate
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetOrganizationLegalName() string {
	if x != nil {
		return x.OrganizationLegalName
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetFieldsMask() []ContractFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetInvoiceNote() string {
	if x != nil {
		return x.InvoiceNote
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetNextInvoiceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.NextInvoiceDate
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetCanPayWithCard() bool {
	if x != nil {
		return x.CanPayWithCard
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetCanPayWithDirectDebit() bool {
	if x != nil {
		return x.CanPayWithDirectDebit
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetCanPayWithBankTransfer() bool {
	if x != nil {
		return x.CanPayWithBankTransfer
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetInvoicingEnabled() bool {
	if x != nil {
		return x.InvoicingEnabled
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetPayOnline() bool {
	if x != nil {
		return x.PayOnline
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetPayAutomatically() bool {
	if x != nil {
		return x.PayAutomatically
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetAutoRenew() bool {
	if x != nil {
		return x.AutoRenew
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetDueDays() int64 {
	if x != nil {
		return x.DueDays
	}
	return 0
}

func (x *UpdateContractGrpcRequest) GetInvoiceEmailTo() string {
	if x != nil {
		return x.InvoiceEmailTo
	}
	return ""
}

func (x *UpdateContractGrpcRequest) GetInvoiceEmailCc() []string {
	if x != nil {
		return x.InvoiceEmailCc
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetInvoiceEmailBcc() []string {
	if x != nil {
		return x.InvoiceEmailBcc
	}
	return nil
}

func (x *UpdateContractGrpcRequest) GetLengthInMonths() int64 {
	if x != nil {
		return x.LengthInMonths
	}
	return 0
}

func (x *UpdateContractGrpcRequest) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *UpdateContractGrpcRequest) GetBillingCycleInMonths() int64 {
	if x != nil {
		return x.BillingCycleInMonths
	}
	return 0
}

type RolloutRenewalOpportunityOnExpirationGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant         string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
}

func (x *RolloutRenewalOpportunityOnExpirationGrpcRequest) Reset() {
	*x = RolloutRenewalOpportunityOnExpirationGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutRenewalOpportunityOnExpirationGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutRenewalOpportunityOnExpirationGrpcRequest) ProtoMessage() {}

func (x *RolloutRenewalOpportunityOnExpirationGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutRenewalOpportunityOnExpirationGrpcRequest.ProtoReflect.Descriptor instead.
func (*RolloutRenewalOpportunityOnExpirationGrpcRequest) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{2}
}

func (x *RolloutRenewalOpportunityOnExpirationGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RolloutRenewalOpportunityOnExpirationGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *RolloutRenewalOpportunityOnExpirationGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *RolloutRenewalOpportunityOnExpirationGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

type RefreshContractStatusGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant         string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
}

func (x *RefreshContractStatusGrpcRequest) Reset() {
	*x = RefreshContractStatusGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshContractStatusGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshContractStatusGrpcRequest) ProtoMessage() {}

func (x *RefreshContractStatusGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshContractStatusGrpcRequest.ProtoReflect.Descriptor instead.
func (*RefreshContractStatusGrpcRequest) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{3}
}

func (x *RefreshContractStatusGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefreshContractStatusGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *RefreshContractStatusGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *RefreshContractStatusGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

type RefreshContractLtvGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant         string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
}

func (x *RefreshContractLtvGrpcRequest) Reset() {
	*x = RefreshContractLtvGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshContractLtvGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshContractLtvGrpcRequest) ProtoMessage() {}

func (x *RefreshContractLtvGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshContractLtvGrpcRequest.ProtoReflect.Descriptor instead.
func (*RefreshContractLtvGrpcRequest) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{4}
}

func (x *RefreshContractLtvGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefreshContractLtvGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *RefreshContractLtvGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *RefreshContractLtvGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

// Permanently delete contract request
type SoftDeleteContractGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant         string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
}

func (x *SoftDeleteContractGrpcRequest) Reset() {
	*x = SoftDeleteContractGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftDeleteContractGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftDeleteContractGrpcRequest) ProtoMessage() {}

func (x *SoftDeleteContractGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftDeleteContractGrpcRequest.ProtoReflect.Descriptor instead.
func (*SoftDeleteContractGrpcRequest) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{5}
}

func (x *SoftDeleteContractGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SoftDeleteContractGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *SoftDeleteContractGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *SoftDeleteContractGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

// Contract response message
type ContractIdGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ContractIdGrpcResponse) Reset() {
	*x = ContractIdGrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractIdGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractIdGrpcResponse) ProtoMessage() {}

func (x *ContractIdGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractIdGrpcResponse.ProtoReflect.Descriptor instead.
func (*ContractIdGrpcResponse) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{6}
}

func (x *ContractIdGrpcResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_contract_proto protoreflect.FileDescriptor

var file_contract_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x09,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x14, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x70, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x61, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e,
	0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x63,
	0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6e,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x79, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x75, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0xbd, 0x0c, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49,
	0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x7a, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63,
	0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x61,
	0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x42,
	0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x61, 0x79, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x70, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x75, 0x65, 0x44, 0x61, 0x79, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x64, 0x75, 0x65, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43,
	0x63, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x63, 0x63, 0x18, 0x27, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x63,
	0x63, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x49, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x30, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x20, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4c, 0x74, 0x76, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x8d, 0x01, 0x0a, 0x1d, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x28, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x47, 0x72, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x2a, 0xfb, 0x08, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45,
	0x44, 0x5f, 0x41, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x41,
	0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x55,
	0x52, 0x4c, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x59, 0x43, 0x4c, 0x45, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56,
	0x4f, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0a,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x31, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x32, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x0e, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0x0f, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x10, 0x12, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x4e,
	0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x14,
	0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x10, 0x15, 0x12, 0x2d,
	0x0a, 0x29, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x41,
	0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x16, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x19, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f,
	0x52, 0x45, 0x4e, 0x45, 0x57, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e,
	0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44,
	0x55, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x1d, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x43, 0x10, 0x1e, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x42,
	0x43, 0x43, 0x10, 0x1f, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x20, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x21, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x22, 0x12, 0x2a, 0x0a, 0x26, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x49,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x4d,
	0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x23, 0x32, 0x8a, 0x04, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x12, 0x1a, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
	0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a,
	0x25, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x4f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x74, 0x76, 0x12, 0x1e, 0x2e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c,
	0x74, 0x76, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x53, 0x6f, 0x66, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x53,
	0x6f, 0x66, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x42, 0x3d, 0x42, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x3b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contract_proto_rawDescOnce sync.Once
	file_contract_proto_rawDescData = file_contract_proto_rawDesc
)

func file_contract_proto_rawDescGZIP() []byte {
	file_contract_proto_rawDescOnce.Do(func() {
		file_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_contract_proto_rawDescData)
	})
	return file_contract_proto_rawDescData
}

var file_contract_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_contract_proto_goTypes = []any{
	(ContractFieldMask)(0),                                   // 0: ContractFieldMask
	(*CreateContractGrpcRequest)(nil),                        // 1: CreateContractGrpcRequest
	(*UpdateContractGrpcRequest)(nil),                        // 2: UpdateContractGrpcRequest
	(*RolloutRenewalOpportunityOnExpirationGrpcRequest)(nil), // 3: RolloutRenewalOpportunityOnExpirationGrpcRequest
	(*RefreshContractStatusGrpcRequest)(nil),                 // 4: RefreshContractStatusGrpcRequest
	(*RefreshContractLtvGrpcRequest)(nil),                    // 5: RefreshContractLtvGrpcRequest
	(*SoftDeleteContractGrpcRequest)(nil),                    // 6: SoftDeleteContractGrpcRequest
	(*ContractIdGrpcResponse)(nil),                           // 7: ContractIdGrpcResponse
	(*timestamppb.Timestamp)(nil),                            // 8: google.protobuf.Timestamp
	(*common.SourceFields)(nil),                              // 9: SourceFields
	(*common.ExternalSystemFields)(nil),                      // 10: ExternalSystemFields
	(*emptypb.Empty)(nil),                                    // 11: google.protobuf.Empty
}
var file_contract_proto_depIdxs = []int32{
	8,  // 0: CreateContractGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	8,  // 1: CreateContractGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	8,  // 2: CreateContractGrpcRequest.serviceStartedAt:type_name -> google.protobuf.Timestamp
	8,  // 3: CreateContractGrpcRequest.signedAt:type_name -> google.protobuf.Timestamp
	9,  // 4: CreateContractGrpcRequest.sourceFields:type_name -> SourceFields
	10, // 5: CreateContractGrpcRequest.externalSystemFields:type_name -> ExternalSystemFields
	8,  // 6: CreateContractGrpcRequest.invoicingStartDate:type_name -> google.protobuf.Timestamp
	8,  // 7: UpdateContractGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	8,  // 8: UpdateContractGrpcRequest.serviceStartedAt:type_name -> google.protobuf.Timestamp
	8,  // 9: UpdateContractGrpcRequest.signedAt:type_name -> google.protobuf.Timestamp
	8,  // 10: UpdateContractGrpcRequest.endedAt:type_name -> google.protobuf.Timestamp
	9,  // 11: UpdateContractGrpcRequest.sourceFields:type_name -> SourceFields
	10, // 12: UpdateContractGrpcRequest.externalSystemFields:type_name -> ExternalSystemFields
	8,  // 13: UpdateContractGrpcRequest.invoicingStartDate:type_name -> google.protobuf.Timestamp
	0,  // 14: UpdateContractGrpcRequest.fieldsMask:type_name -> ContractFieldMask
	8,  // 15: UpdateContractGrpcRequest.nextInvoiceDate:type_name -> google.protobuf.Timestamp
	1,  // 16: ContractGrpcService.CreateContract:input_type -> CreateContractGrpcRequest
	2,  // 17: ContractGrpcService.UpdateContract:input_type -> UpdateContractGrpcRequest
	3,  // 18: ContractGrpcService.RolloutRenewalOpportunityOnExpiration:input_type -> RolloutRenewalOpportunityOnExpirationGrpcRequest
	4,  // 19: ContractGrpcService.RefreshContractStatus:input_type -> RefreshContractStatusGrpcRequest
	5,  // 20: ContractGrpcService.RefreshContractLtv:input_type -> RefreshContractLtvGrpcRequest
	6,  // 21: ContractGrpcService.SoftDeleteContract:input_type -> SoftDeleteContractGrpcRequest
	7,  // 22: ContractGrpcService.CreateContract:output_type -> ContractIdGrpcResponse
	7,  // 23: ContractGrpcService.UpdateContract:output_type -> ContractIdGrpcResponse
	7,  // 24: ContractGrpcService.RolloutRenewalOpportunityOnExpiration:output_type -> ContractIdGrpcResponse
	7,  // 25: ContractGrpcService.RefreshContractStatus:output_type -> ContractIdGrpcResponse
	7,  // 26: ContractGrpcService.RefreshContractLtv:output_type -> ContractIdGrpcResponse
	11, // 27: ContractGrpcService.SoftDeleteContract:output_type -> google.protobuf.Empty
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_contract_proto_init() }
func file_contract_proto_init() {
	if File_contract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contract_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateContractGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateContractGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RolloutRenewalOpportunityOnExpirationGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshContractStatusGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshContractLtvGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SoftDeleteContractGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ContractIdGrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contract_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contract_proto_goTypes,
		DependencyIndexes: file_contract_proto_depIdxs,
		EnumInfos:         file_contract_proto_enumTypes,
		MessageInfos:      file_contract_proto_msgTypes,
	}.Build()
	File_contract_proto = out.File
	file_contract_proto_rawDesc = nil
	file_contract_proto_goTypes = nil
	file_contract_proto_depIdxs = nil
}
