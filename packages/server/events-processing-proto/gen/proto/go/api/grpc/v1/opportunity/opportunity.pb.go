// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: opportunity.proto

package opportunity_grpc_service

import (
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpportunityMaskField int32

const (
	OpportunityMaskField_OPPORTUNITY_PROPERTY_NONE                 OpportunityMaskField = 0 // No property, ignored by the server
	OpportunityMaskField_OPPORTUNITY_PROPERTY_ALL                  OpportunityMaskField = 1 // All properties, if present in the list all other properties are ignored
	OpportunityMaskField_OPPORTUNITY_PROPERTY_NAME                 OpportunityMaskField = 2
	OpportunityMaskField_OPPORTUNITY_PROPERTY_AMOUNT               OpportunityMaskField = 3
	OpportunityMaskField_OPPORTUNITY_PROPERTY_COMMENTS             OpportunityMaskField = 4
	OpportunityMaskField_OPPORTUNITY_PROPERTY_RENEWAL_LIKELIHOOD   OpportunityMaskField = 5
	OpportunityMaskField_OPPORTUNITY_PROPERTY_MAX_AMOUNT           OpportunityMaskField = 6
	OpportunityMaskField_OPPORTUNITY_PROPERTY_RENEW_APPROVED       OpportunityMaskField = 7
	OpportunityMaskField_OPPORTUNITY_PROPERTY_RENEWED_AT           OpportunityMaskField = 8
	OpportunityMaskField_OPPORTUNITY_PROPERTY_ADJUSTED_RATE        OpportunityMaskField = 9
	OpportunityMaskField_OPPORTUNITY_PROPERTY_EXTERNAL_TYPE        OpportunityMaskField = 10
	OpportunityMaskField_OPPORTUNITY_PROPERTY_EXTERNAL_STAGE       OpportunityMaskField = 11
	OpportunityMaskField_OPPORTUNITY_PROPERTY_ESTIMATED_CLOSE_DATE OpportunityMaskField = 12
	OpportunityMaskField_OPPORTUNITY_PROPERTY_INTERNAL_STAGE       OpportunityMaskField = 14
	OpportunityMaskField_OPPORTUNITY_PROPERTY_OWNER_USER_ID        OpportunityMaskField = 15
	OpportunityMaskField_OPPORTUNITY_PROPERTY_CURRENCY             OpportunityMaskField = 16
	OpportunityMaskField_OPPORTUNITY_PROPERTY_NEXT_STEPS           OpportunityMaskField = 17
	OpportunityMaskField_OPPORTUNITY_PROPERTY_LIKELIHOOD_RATE      OpportunityMaskField = 18
)

// Enum value maps for OpportunityMaskField.
var (
	OpportunityMaskField_name = map[int32]string{
		0:  "OPPORTUNITY_PROPERTY_NONE",
		1:  "OPPORTUNITY_PROPERTY_ALL",
		2:  "OPPORTUNITY_PROPERTY_NAME",
		3:  "OPPORTUNITY_PROPERTY_AMOUNT",
		4:  "OPPORTUNITY_PROPERTY_COMMENTS",
		5:  "OPPORTUNITY_PROPERTY_RENEWAL_LIKELIHOOD",
		6:  "OPPORTUNITY_PROPERTY_MAX_AMOUNT",
		7:  "OPPORTUNITY_PROPERTY_RENEW_APPROVED",
		8:  "OPPORTUNITY_PROPERTY_RENEWED_AT",
		9:  "OPPORTUNITY_PROPERTY_ADJUSTED_RATE",
		10: "OPPORTUNITY_PROPERTY_EXTERNAL_TYPE",
		11: "OPPORTUNITY_PROPERTY_EXTERNAL_STAGE",
		12: "OPPORTUNITY_PROPERTY_ESTIMATED_CLOSE_DATE",
		14: "OPPORTUNITY_PROPERTY_INTERNAL_STAGE",
		15: "OPPORTUNITY_PROPERTY_OWNER_USER_ID",
		16: "OPPORTUNITY_PROPERTY_CURRENCY",
		17: "OPPORTUNITY_PROPERTY_NEXT_STEPS",
		18: "OPPORTUNITY_PROPERTY_LIKELIHOOD_RATE",
	}
	OpportunityMaskField_value = map[string]int32{
		"OPPORTUNITY_PROPERTY_NONE":                 0,
		"OPPORTUNITY_PROPERTY_ALL":                  1,
		"OPPORTUNITY_PROPERTY_NAME":                 2,
		"OPPORTUNITY_PROPERTY_AMOUNT":               3,
		"OPPORTUNITY_PROPERTY_COMMENTS":             4,
		"OPPORTUNITY_PROPERTY_RENEWAL_LIKELIHOOD":   5,
		"OPPORTUNITY_PROPERTY_MAX_AMOUNT":           6,
		"OPPORTUNITY_PROPERTY_RENEW_APPROVED":       7,
		"OPPORTUNITY_PROPERTY_RENEWED_AT":           8,
		"OPPORTUNITY_PROPERTY_ADJUSTED_RATE":        9,
		"OPPORTUNITY_PROPERTY_EXTERNAL_TYPE":        10,
		"OPPORTUNITY_PROPERTY_EXTERNAL_STAGE":       11,
		"OPPORTUNITY_PROPERTY_ESTIMATED_CLOSE_DATE": 12,
		"OPPORTUNITY_PROPERTY_INTERNAL_STAGE":       14,
		"OPPORTUNITY_PROPERTY_OWNER_USER_ID":        15,
		"OPPORTUNITY_PROPERTY_CURRENCY":             16,
		"OPPORTUNITY_PROPERTY_NEXT_STEPS":           17,
		"OPPORTUNITY_PROPERTY_LIKELIHOOD_RATE":      18,
	}
)

func (x OpportunityMaskField) Enum() *OpportunityMaskField {
	p := new(OpportunityMaskField)
	*p = x
	return p
}

func (x OpportunityMaskField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpportunityMaskField) Descriptor() protoreflect.EnumDescriptor {
	return file_opportunity_proto_enumTypes[0].Descriptor()
}

func (OpportunityMaskField) Type() protoreflect.EnumType {
	return &file_opportunity_proto_enumTypes[0]
}

func (x OpportunityMaskField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpportunityMaskField.Descriptor instead.
func (OpportunityMaskField) EnumDescriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{0}
}

// Define an enum for internalType
type OpportunityInternalType int32

const (
	OpportunityInternalType_NBO        OpportunityInternalType = 0
	OpportunityInternalType_UPSELL     OpportunityInternalType = 1
	OpportunityInternalType_CROSS_SELL OpportunityInternalType = 2
)

// Enum value maps for OpportunityInternalType.
var (
	OpportunityInternalType_name = map[int32]string{
		0: "NBO",
		1: "UPSELL",
		2: "CROSS_SELL",
	}
	OpportunityInternalType_value = map[string]int32{
		"NBO":        0,
		"UPSELL":     1,
		"CROSS_SELL": 2,
	}
)

func (x OpportunityInternalType) Enum() *OpportunityInternalType {
	p := new(OpportunityInternalType)
	*p = x
	return p
}

func (x OpportunityInternalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpportunityInternalType) Descriptor() protoreflect.EnumDescriptor {
	return file_opportunity_proto_enumTypes[1].Descriptor()
}

func (OpportunityInternalType) Type() protoreflect.EnumType {
	return &file_opportunity_proto_enumTypes[1]
}

func (x OpportunityInternalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpportunityInternalType.Descriptor instead.
func (OpportunityInternalType) EnumDescriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{1}
}

// Define an enum for internalStage
type OpportunityInternalStage int32

const (
	OpportunityInternalStage_OPEN        OpportunityInternalStage = 0
	OpportunityInternalStage_CLOSED_WON  OpportunityInternalStage = 1
	OpportunityInternalStage_CLOSED_LOST OpportunityInternalStage = 2
)

// Enum value maps for OpportunityInternalStage.
var (
	OpportunityInternalStage_name = map[int32]string{
		0: "OPEN",
		1: "CLOSED_WON",
		2: "CLOSED_LOST",
	}
	OpportunityInternalStage_value = map[string]int32{
		"OPEN":        0,
		"CLOSED_WON":  1,
		"CLOSED_LOST": 2,
	}
)

func (x OpportunityInternalStage) Enum() *OpportunityInternalStage {
	p := new(OpportunityInternalStage)
	*p = x
	return p
}

func (x OpportunityInternalStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpportunityInternalStage) Descriptor() protoreflect.EnumDescriptor {
	return file_opportunity_proto_enumTypes[2].Descriptor()
}

func (OpportunityInternalStage) Type() protoreflect.EnumType {
	return &file_opportunity_proto_enumTypes[2]
}

func (x OpportunityInternalStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpportunityInternalStage.Descriptor instead.
func (OpportunityInternalStage) EnumDescriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{2}
}

type RenewalLikelihood int32

const (
	RenewalLikelihood_HIGH_RENEWAL   RenewalLikelihood = 0
	RenewalLikelihood_MEDIUM_RENEWAL RenewalLikelihood = 1
	RenewalLikelihood_LOW_RENEWAL    RenewalLikelihood = 2
	RenewalLikelihood_ZERO_RENEWAL   RenewalLikelihood = 3
)

// Enum value maps for RenewalLikelihood.
var (
	RenewalLikelihood_name = map[int32]string{
		0: "HIGH_RENEWAL",
		1: "MEDIUM_RENEWAL",
		2: "LOW_RENEWAL",
		3: "ZERO_RENEWAL",
	}
	RenewalLikelihood_value = map[string]int32{
		"HIGH_RENEWAL":   0,
		"MEDIUM_RENEWAL": 1,
		"LOW_RENEWAL":    2,
		"ZERO_RENEWAL":   3,
	}
)

func (x RenewalLikelihood) Enum() *RenewalLikelihood {
	p := new(RenewalLikelihood)
	*p = x
	return p
}

func (x RenewalLikelihood) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RenewalLikelihood) Descriptor() protoreflect.EnumDescriptor {
	return file_opportunity_proto_enumTypes[3].Descriptor()
}

func (RenewalLikelihood) Type() protoreflect.EnumType {
	return &file_opportunity_proto_enumTypes[3]
}

func (x RenewalLikelihood) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RenewalLikelihood.Descriptor instead.
func (RenewalLikelihood) EnumDescriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{3}
}

type CreateOpportunityGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant               string                       `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId       string                       `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name                 string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	InternalType         OpportunityInternalType      `protobuf:"varint,6,opt,name=internalType,proto3,enum=OpportunityInternalType" json:"internalType,omitempty"`
	ExternalType         string                       `protobuf:"bytes,7,opt,name=externalType,proto3" json:"externalType,omitempty"`
	InternalStage        OpportunityInternalStage     `protobuf:"varint,8,opt,name=internalStage,proto3,enum=OpportunityInternalStage" json:"internalStage,omitempty"`
	ExternalStage        string                       `protobuf:"bytes,9,opt,name=externalStage,proto3" json:"externalStage,omitempty"`
	EstimatedCloseDate   *timestamppb.Timestamp       `protobuf:"bytes,10,opt,name=estimatedCloseDate,proto3" json:"estimatedCloseDate,omitempty"`
	OwnerUserId          string                       `protobuf:"bytes,11,opt,name=ownerUserId,proto3" json:"ownerUserId,omitempty"`
	CreatedByUserId      string                       `protobuf:"bytes,12,opt,name=createdByUserId,proto3" json:"createdByUserId,omitempty"`
	CreatedAt            *timestamppb.Timestamp       `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            *timestamppb.Timestamp       `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	GeneralNotes         string                       `protobuf:"bytes,15,opt,name=generalNotes,proto3" json:"generalNotes,omitempty"`
	NextSteps            string                       `protobuf:"bytes,16,opt,name=nextSteps,proto3" json:"nextSteps,omitempty"`
	SourceFields         *common.SourceFields         `protobuf:"bytes,17,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	ExternalSystemFields *common.ExternalSystemFields `protobuf:"bytes,18,opt,name=externalSystemFields,proto3" json:"externalSystemFields,omitempty"`
	OrganizationId       string                       `protobuf:"bytes,19,opt,name=organizationId,proto3" json:"organizationId,omitempty"`
	MaxAmount            float64                      `protobuf:"fixed64,20,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	Currency             string                       `protobuf:"bytes,21,opt,name=currency,proto3" json:"currency,omitempty"`
	LikelihoodRate       int64                        `protobuf:"varint,22,opt,name=likelihoodRate,proto3" json:"likelihoodRate,omitempty"`
}

func (x *CreateOpportunityGrpcRequest) Reset() {
	*x = CreateOpportunityGrpcRequest{}
	mi := &file_opportunity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOpportunityGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpportunityGrpcRequest) ProtoMessage() {}

func (x *CreateOpportunityGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpportunityGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateOpportunityGrpcRequest) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOpportunityGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetInternalType() OpportunityInternalType {
	if x != nil {
		return x.InternalType
	}
	return OpportunityInternalType_NBO
}

func (x *CreateOpportunityGrpcRequest) GetExternalType() string {
	if x != nil {
		return x.ExternalType
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetInternalStage() OpportunityInternalStage {
	if x != nil {
		return x.InternalStage
	}
	return OpportunityInternalStage_OPEN
}

func (x *CreateOpportunityGrpcRequest) GetExternalStage() string {
	if x != nil {
		return x.ExternalStage
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetEstimatedCloseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedCloseDate
	}
	return nil
}

func (x *CreateOpportunityGrpcRequest) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateOpportunityGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CreateOpportunityGrpcRequest) GetGeneralNotes() string {
	if x != nil {
		return x.GeneralNotes
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetNextSteps() string {
	if x != nil {
		return x.NextSteps
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateOpportunityGrpcRequest) GetExternalSystemFields() *common.ExternalSystemFields {
	if x != nil {
		return x.ExternalSystemFields
	}
	return nil
}

func (x *CreateOpportunityGrpcRequest) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetMaxAmount() float64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *CreateOpportunityGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateOpportunityGrpcRequest) GetLikelihoodRate() int64 {
	if x != nil {
		return x.LikelihoodRate
	}
	return 0
}

type UpdateOpportunityGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant               string                       `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId       string                       `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Name                 string                       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Amount               float64                      `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	MaxAmount            float64                      `protobuf:"fixed64,6,opt,name=maxAmount,proto3" json:"maxAmount,omitempty"`
	ExternalType         string                       `protobuf:"bytes,7,opt,name=externalType,proto3" json:"externalType,omitempty"`
	ExternalStage        string                       `protobuf:"bytes,9,opt,name=externalStage,proto3" json:"externalStage,omitempty"`
	EstimatedCloseDate   *timestamppb.Timestamp       `protobuf:"bytes,10,opt,name=estimatedCloseDate,proto3" json:"estimatedCloseDate,omitempty"`
	OwnerUserId          string                       `protobuf:"bytes,11,opt,name=ownerUserId,proto3" json:"ownerUserId,omitempty"`
	CreatedByUserId      string                       `protobuf:"bytes,12,opt,name=createdByUserId,proto3" json:"createdByUserId,omitempty"`
	UpdatedAt            *timestamppb.Timestamp       `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	GeneralNotes         string                       `protobuf:"bytes,15,opt,name=generalNotes,proto3" json:"generalNotes,omitempty"`
	NextSteps            string                       `protobuf:"bytes,16,opt,name=nextSteps,proto3" json:"nextSteps,omitempty"`
	SourceFields         *common.SourceFields         `protobuf:"bytes,17,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	ExternalSystemFields *common.ExternalSystemFields `protobuf:"bytes,18,opt,name=externalSystemFields,proto3" json:"externalSystemFields,omitempty"`
	FieldsMask           []OpportunityMaskField       `protobuf:"varint,19,rep,packed,name=fieldsMask,proto3,enum=OpportunityMaskField" json:"fieldsMask,omitempty"`
	InternalStage        OpportunityInternalStage     `protobuf:"varint,20,opt,name=internalStage,proto3,enum=OpportunityInternalStage" json:"internalStage,omitempty"`
	LikelihoodRate       int64                        `protobuf:"varint,21,opt,name=likelihoodRate,proto3" json:"likelihoodRate,omitempty"`
	Currency             string                       `protobuf:"bytes,22,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *UpdateOpportunityGrpcRequest) Reset() {
	*x = UpdateOpportunityGrpcRequest{}
	mi := &file_opportunity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOpportunityGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpportunityGrpcRequest) ProtoMessage() {}

func (x *UpdateOpportunityGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpportunityGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateOpportunityGrpcRequest) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateOpportunityGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UpdateOpportunityGrpcRequest) GetMaxAmount() float64 {
	if x != nil {
		return x.MaxAmount
	}
	return 0
}

func (x *UpdateOpportunityGrpcRequest) GetExternalType() string {
	if x != nil {
		return x.ExternalType
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetExternalStage() string {
	if x != nil {
		return x.ExternalStage
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetEstimatedCloseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EstimatedCloseDate
	}
	return nil
}

func (x *UpdateOpportunityGrpcRequest) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateOpportunityGrpcRequest) GetGeneralNotes() string {
	if x != nil {
		return x.GeneralNotes
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetNextSteps() string {
	if x != nil {
		return x.NextSteps
	}
	return ""
}

func (x *UpdateOpportunityGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *UpdateOpportunityGrpcRequest) GetExternalSystemFields() *common.ExternalSystemFields {
	if x != nil {
		return x.ExternalSystemFields
	}
	return nil
}

func (x *UpdateOpportunityGrpcRequest) GetFieldsMask() []OpportunityMaskField {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateOpportunityGrpcRequest) GetInternalStage() OpportunityInternalStage {
	if x != nil {
		return x.InternalStage
	}
	return OpportunityInternalStage_OPEN
}

func (x *UpdateOpportunityGrpcRequest) GetLikelihoodRate() int64 {
	if x != nil {
		return x.LikelihoodRate
	}
	return 0
}

func (x *UpdateOpportunityGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type CreateRenewalOpportunityGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant              string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId      string                 `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	ContractId          string                 `protobuf:"bytes,3,opt,name=contractId,proto3" json:"contractId,omitempty"`
	RenewalLikelihood   RenewalLikelihood      `protobuf:"varint,4,opt,name=renewalLikelihood,proto3,enum=RenewalLikelihood" json:"renewalLikelihood,omitempty"`
	SourceFields        *common.SourceFields   `protobuf:"bytes,5,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	RenewalApproved     bool                   `protobuf:"varint,8,opt,name=renewalApproved,proto3" json:"renewalApproved,omitempty"`
	RenewedAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=renewedAt,proto3" json:"renewedAt,omitempty"`
	RenewalAdjustedRate int64                  `protobuf:"varint,10,opt,name=renewalAdjustedRate,proto3" json:"renewalAdjustedRate,omitempty"`
}

func (x *CreateRenewalOpportunityGrpcRequest) Reset() {
	*x = CreateRenewalOpportunityGrpcRequest{}
	mi := &file_opportunity_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRenewalOpportunityGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRenewalOpportunityGrpcRequest) ProtoMessage() {}

func (x *CreateRenewalOpportunityGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRenewalOpportunityGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreateRenewalOpportunityGrpcRequest) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRenewalOpportunityGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CreateRenewalOpportunityGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CreateRenewalOpportunityGrpcRequest) GetContractId() string {
	if x != nil {
		return x.ContractId
	}
	return ""
}

func (x *CreateRenewalOpportunityGrpcRequest) GetRenewalLikelihood() RenewalLikelihood {
	if x != nil {
		return x.RenewalLikelihood
	}
	return RenewalLikelihood_HIGH_RENEWAL
}

func (x *CreateRenewalOpportunityGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *CreateRenewalOpportunityGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CreateRenewalOpportunityGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CreateRenewalOpportunityGrpcRequest) GetRenewalApproved() bool {
	if x != nil {
		return x.RenewalApproved
	}
	return false
}

func (x *CreateRenewalOpportunityGrpcRequest) GetRenewedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RenewedAt
	}
	return nil
}

func (x *CreateRenewalOpportunityGrpcRequest) GetRenewalAdjustedRate() int64 {
	if x != nil {
		return x.RenewalAdjustedRate
	}
	return 0
}

type UpdateRenewalOpportunityGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant              string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId      string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Comments            string                 `protobuf:"bytes,4,opt,name=comments,proto3" json:"comments,omitempty"`
	RenewalLikelihood   RenewalLikelihood      `protobuf:"varint,5,opt,name=renewalLikelihood,proto3,enum=RenewalLikelihood" json:"renewalLikelihood,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Amount              float64                `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
	SourceFields        *common.SourceFields   `protobuf:"bytes,8,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	FieldsMask          []OpportunityMaskField `protobuf:"varint,9,rep,packed,name=fieldsMask,proto3,enum=OpportunityMaskField" json:"fieldsMask,omitempty"`
	OwnerUserId         string                 `protobuf:"bytes,10,opt,name=ownerUserId,proto3" json:"ownerUserId,omitempty"`
	RenewalApproved     bool                   `protobuf:"varint,11,opt,name=renewalApproved,proto3" json:"renewalApproved,omitempty"`
	RenewedAt           *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=renewedAt,proto3" json:"renewedAt,omitempty"`
	RenewalAdjustedRate int64                  `protobuf:"varint,13,opt,name=renewalAdjustedRate,proto3" json:"renewalAdjustedRate,omitempty"`
}

func (x *UpdateRenewalOpportunityGrpcRequest) Reset() {
	*x = UpdateRenewalOpportunityGrpcRequest{}
	mi := &file_opportunity_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRenewalOpportunityGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRenewalOpportunityGrpcRequest) ProtoMessage() {}

func (x *UpdateRenewalOpportunityGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRenewalOpportunityGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateRenewalOpportunityGrpcRequest) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetRenewalLikelihood() RenewalLikelihood {
	if x != nil {
		return x.RenewalLikelihood
	}
	return RenewalLikelihood_HIGH_RENEWAL
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetFieldsMask() []OpportunityMaskField {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetRenewalApproved() bool {
	if x != nil {
		return x.RenewalApproved
	}
	return false
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetRenewedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RenewedAt
	}
	return nil
}

func (x *UpdateRenewalOpportunityGrpcRequest) GetRenewalAdjustedRate() int64 {
	if x != nil {
		return x.RenewalAdjustedRate
	}
	return 0
}

type CloseLooseOpportunityGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant         string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string                 `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
	ClosedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
}

func (x *CloseLooseOpportunityGrpcRequest) Reset() {
	*x = CloseLooseOpportunityGrpcRequest{}
	mi := &file_opportunity_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseLooseOpportunityGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseLooseOpportunityGrpcRequest) ProtoMessage() {}

func (x *CloseLooseOpportunityGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseLooseOpportunityGrpcRequest.ProtoReflect.Descriptor instead.
func (*CloseLooseOpportunityGrpcRequest) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{4}
}

func (x *CloseLooseOpportunityGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloseLooseOpportunityGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CloseLooseOpportunityGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CloseLooseOpportunityGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *CloseLooseOpportunityGrpcRequest) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

type CloseWinOpportunityGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant         string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string                 `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
	ClosedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
}

func (x *CloseWinOpportunityGrpcRequest) Reset() {
	*x = CloseWinOpportunityGrpcRequest{}
	mi := &file_opportunity_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseWinOpportunityGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseWinOpportunityGrpcRequest) ProtoMessage() {}

func (x *CloseWinOpportunityGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseWinOpportunityGrpcRequest.ProtoReflect.Descriptor instead.
func (*CloseWinOpportunityGrpcRequest) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{5}
}

func (x *CloseWinOpportunityGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloseWinOpportunityGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CloseWinOpportunityGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *CloseWinOpportunityGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *CloseWinOpportunityGrpcRequest) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

type UpdateRenewalOpportunityNextCycleDateGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpportunityId  string                 `protobuf:"bytes,1,opt,name=opportunityId,proto3" json:"opportunityId,omitempty"`
	Tenant         string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string                 `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
	RenewedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=renewedAt,proto3" json:"renewedAt,omitempty"`
}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) Reset() {
	*x = UpdateRenewalOpportunityNextCycleDateGrpcRequest{}
	mi := &file_opportunity_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRenewalOpportunityNextCycleDateGrpcRequest) ProtoMessage() {}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRenewalOpportunityNextCycleDateGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateRenewalOpportunityNextCycleDateGrpcRequest) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) GetOpportunityId() string {
	if x != nil {
		return x.OpportunityId
	}
	return ""
}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateRenewalOpportunityNextCycleDateGrpcRequest) GetRenewedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RenewedAt
	}
	return nil
}

type OpportunityIdGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpportunityIdGrpcResponse) Reset() {
	*x = OpportunityIdGrpcResponse{}
	mi := &file_opportunity_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpportunityIdGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpportunityIdGrpcResponse) ProtoMessage() {}

func (x *OpportunityIdGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opportunity_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpportunityIdGrpcResponse.ProtoReflect.Descriptor instead.
func (*OpportunityIdGrpcResponse) Descriptor() ([]byte, []int) {
	return file_opportunity_proto_rawDescGZIP(), []int{7}
}

func (x *OpportunityIdGrpcResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_opportunity_proto protoreflect.FileDescriptor

var file_opportunity_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x07, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x14, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x6b,
	0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0xd0, 0x06, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x4a, 0x0a, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x14, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69,
	0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x84,
	0x04, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x6c,
	0x69, 0x68, 0x6f, 0x6f, 0x64, 0x52, 0x11, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4c, 0x69,
	0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x22, 0xc7, 0x04, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4c, 0x69,
	0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x52, 0x11, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x22,
	0xc8, 0x01, 0x0a, 0x20, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x73, 0x65, 0x4f, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x1e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x30, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x4e, 0x65, 0x78, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x47, 0x72, 0x70,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x2a, 0xc1, 0x05, 0x0a, 0x14, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45,
	0x52, 0x54, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x4b,
	0x45, 0x4c, 0x49, 0x48, 0x4f, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x27,
	0x0a, 0x23, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f,
	0x52, 0x45, 0x4e, 0x45, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22,
	0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23,
	0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x45, 0x52, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x45, 0x53,
	0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x12, 0x26, 0x0a,
	0x22, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59,
	0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x53, 0x10, 0x11, 0x12, 0x28, 0x0a,
	0x24, 0x4f, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x49, 0x48, 0x4f, 0x4f, 0x44,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x12, 0x2a, 0x3e, 0x0a, 0x17, 0x4f, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x42, 0x4f, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x4f, 0x53, 0x53,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x18, 0x4f, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x57, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x5c,
	0x0a, 0x11, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x69, 0x68,
	0x6f, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x52, 0x45, 0x4e, 0x45,
	0x57, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f,
	0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x57,
	0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x45,
	0x52, 0x4f, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x41, 0x4c, 0x10, 0x03, 0x32, 0x98, 0x05, 0x0a,
	0x16, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4f, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4f, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x12, 0x24, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x73,
	0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x21, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x73, 0x65, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x47,
	0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x6e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x12, 0x1f, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x69, 0x6e, 0x4f, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x4f, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x64, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46, 0x42, 0x10, 0x4f, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x30, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x3b, 0x6f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opportunity_proto_rawDescOnce sync.Once
	file_opportunity_proto_rawDescData = file_opportunity_proto_rawDesc
)

func file_opportunity_proto_rawDescGZIP() []byte {
	file_opportunity_proto_rawDescOnce.Do(func() {
		file_opportunity_proto_rawDescData = protoimpl.X.CompressGZIP(file_opportunity_proto_rawDescData)
	})
	return file_opportunity_proto_rawDescData
}

var file_opportunity_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_opportunity_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_opportunity_proto_goTypes = []any{
	(OpportunityMaskField)(0),                                // 0: OpportunityMaskField
	(OpportunityInternalType)(0),                             // 1: OpportunityInternalType
	(OpportunityInternalStage)(0),                            // 2: OpportunityInternalStage
	(RenewalLikelihood)(0),                                   // 3: RenewalLikelihood
	(*CreateOpportunityGrpcRequest)(nil),                     // 4: CreateOpportunityGrpcRequest
	(*UpdateOpportunityGrpcRequest)(nil),                     // 5: UpdateOpportunityGrpcRequest
	(*CreateRenewalOpportunityGrpcRequest)(nil),              // 6: CreateRenewalOpportunityGrpcRequest
	(*UpdateRenewalOpportunityGrpcRequest)(nil),              // 7: UpdateRenewalOpportunityGrpcRequest
	(*CloseLooseOpportunityGrpcRequest)(nil),                 // 8: CloseLooseOpportunityGrpcRequest
	(*CloseWinOpportunityGrpcRequest)(nil),                   // 9: CloseWinOpportunityGrpcRequest
	(*UpdateRenewalOpportunityNextCycleDateGrpcRequest)(nil), // 10: UpdateRenewalOpportunityNextCycleDateGrpcRequest
	(*OpportunityIdGrpcResponse)(nil),                        // 11: OpportunityIdGrpcResponse
	(*timestamppb.Timestamp)(nil),                            // 12: google.protobuf.Timestamp
	(*common.SourceFields)(nil),                              // 13: SourceFields
	(*common.ExternalSystemFields)(nil),                      // 14: ExternalSystemFields
}
var file_opportunity_proto_depIdxs = []int32{
	1,  // 0: CreateOpportunityGrpcRequest.internalType:type_name -> OpportunityInternalType
	2,  // 1: CreateOpportunityGrpcRequest.internalStage:type_name -> OpportunityInternalStage
	12, // 2: CreateOpportunityGrpcRequest.estimatedCloseDate:type_name -> google.protobuf.Timestamp
	12, // 3: CreateOpportunityGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	12, // 4: CreateOpportunityGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 5: CreateOpportunityGrpcRequest.sourceFields:type_name -> SourceFields
	14, // 6: CreateOpportunityGrpcRequest.externalSystemFields:type_name -> ExternalSystemFields
	12, // 7: UpdateOpportunityGrpcRequest.estimatedCloseDate:type_name -> google.protobuf.Timestamp
	12, // 8: UpdateOpportunityGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 9: UpdateOpportunityGrpcRequest.sourceFields:type_name -> SourceFields
	14, // 10: UpdateOpportunityGrpcRequest.externalSystemFields:type_name -> ExternalSystemFields
	0,  // 11: UpdateOpportunityGrpcRequest.fieldsMask:type_name -> OpportunityMaskField
	2,  // 12: UpdateOpportunityGrpcRequest.internalStage:type_name -> OpportunityInternalStage
	3,  // 13: CreateRenewalOpportunityGrpcRequest.renewalLikelihood:type_name -> RenewalLikelihood
	13, // 14: CreateRenewalOpportunityGrpcRequest.sourceFields:type_name -> SourceFields
	12, // 15: CreateRenewalOpportunityGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	12, // 16: CreateRenewalOpportunityGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	12, // 17: CreateRenewalOpportunityGrpcRequest.renewedAt:type_name -> google.protobuf.Timestamp
	3,  // 18: UpdateRenewalOpportunityGrpcRequest.renewalLikelihood:type_name -> RenewalLikelihood
	12, // 19: UpdateRenewalOpportunityGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	13, // 20: UpdateRenewalOpportunityGrpcRequest.sourceFields:type_name -> SourceFields
	0,  // 21: UpdateRenewalOpportunityGrpcRequest.fieldsMask:type_name -> OpportunityMaskField
	12, // 22: UpdateRenewalOpportunityGrpcRequest.renewedAt:type_name -> google.protobuf.Timestamp
	12, // 23: CloseLooseOpportunityGrpcRequest.closedAt:type_name -> google.protobuf.Timestamp
	12, // 24: CloseWinOpportunityGrpcRequest.closedAt:type_name -> google.protobuf.Timestamp
	12, // 25: UpdateRenewalOpportunityNextCycleDateGrpcRequest.renewedAt:type_name -> google.protobuf.Timestamp
	4,  // 26: opportunityGrpcService.CreateOpportunity:input_type -> CreateOpportunityGrpcRequest
	6,  // 27: opportunityGrpcService.CreateRenewalOpportunity:input_type -> CreateRenewalOpportunityGrpcRequest
	7,  // 28: opportunityGrpcService.UpdateRenewalOpportunity:input_type -> UpdateRenewalOpportunityGrpcRequest
	5,  // 29: opportunityGrpcService.UpdateOpportunity:input_type -> UpdateOpportunityGrpcRequest
	8,  // 30: opportunityGrpcService.CloseLooseOpportunity:input_type -> CloseLooseOpportunityGrpcRequest
	9,  // 31: opportunityGrpcService.CloseWinOpportunity:input_type -> CloseWinOpportunityGrpcRequest
	10, // 32: opportunityGrpcService.UpdateRenewalOpportunityNextCycleDate:input_type -> UpdateRenewalOpportunityNextCycleDateGrpcRequest
	11, // 33: opportunityGrpcService.CreateOpportunity:output_type -> OpportunityIdGrpcResponse
	11, // 34: opportunityGrpcService.CreateRenewalOpportunity:output_type -> OpportunityIdGrpcResponse
	11, // 35: opportunityGrpcService.UpdateRenewalOpportunity:output_type -> OpportunityIdGrpcResponse
	11, // 36: opportunityGrpcService.UpdateOpportunity:output_type -> OpportunityIdGrpcResponse
	11, // 37: opportunityGrpcService.CloseLooseOpportunity:output_type -> OpportunityIdGrpcResponse
	11, // 38: opportunityGrpcService.CloseWinOpportunity:output_type -> OpportunityIdGrpcResponse
	11, // 39: opportunityGrpcService.UpdateRenewalOpportunityNextCycleDate:output_type -> OpportunityIdGrpcResponse
	33, // [33:40] is the sub-list for method output_type
	26, // [26:33] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_opportunity_proto_init() }
func file_opportunity_proto_init() {
	if File_opportunity_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opportunity_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_opportunity_proto_goTypes,
		DependencyIndexes: file_opportunity_proto_depIdxs,
		EnumInfos:         file_opportunity_proto_enumTypes,
		MessageInfos:      file_opportunity_proto_msgTypes,
	}.Build()
	File_opportunity_proto = out.File
	file_opportunity_proto_rawDesc = nil
	file_opportunity_proto_goTypes = nil
	file_opportunity_proto_depIdxs = nil
}
