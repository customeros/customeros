// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: invoicing_cycle.proto

package invoicing_cycle_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvoicingCycleGrpcServiceClient is the client API for InvoicingCycleGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoicingCycleGrpcServiceClient interface {
	CreateInvoicingCycleType(ctx context.Context, in *CreateInvoicingCycleTypeRequest, opts ...grpc.CallOption) (*InvoicingCycleTypeResponse, error)
	UpdateInvoicingCycleType(ctx context.Context, in *UpdateInvoicingCycleTypeRequest, opts ...grpc.CallOption) (*InvoicingCycleTypeResponse, error)
	CreateInvoicingCycleDay(ctx context.Context, in *CreateInvoicingCycleDayRequest, opts ...grpc.CallOption) (*InvoicingCycleDayResponse, error)
	UpdateInvoicingCycleDay(ctx context.Context, in *UpdateInvoicingCycleDayRequest, opts ...grpc.CallOption) (*InvoicingCycleDayResponse, error)
}

type invoicingCycleGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoicingCycleGrpcServiceClient(cc grpc.ClientConnInterface) InvoicingCycleGrpcServiceClient {
	return &invoicingCycleGrpcServiceClient{cc}
}

func (c *invoicingCycleGrpcServiceClient) CreateInvoicingCycleType(ctx context.Context, in *CreateInvoicingCycleTypeRequest, opts ...grpc.CallOption) (*InvoicingCycleTypeResponse, error) {
	out := new(InvoicingCycleTypeResponse)
	err := c.cc.Invoke(ctx, "/InvoicingCycleGrpcService/CreateInvoicingCycleType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicingCycleGrpcServiceClient) UpdateInvoicingCycleType(ctx context.Context, in *UpdateInvoicingCycleTypeRequest, opts ...grpc.CallOption) (*InvoicingCycleTypeResponse, error) {
	out := new(InvoicingCycleTypeResponse)
	err := c.cc.Invoke(ctx, "/InvoicingCycleGrpcService/UpdateInvoicingCycleType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicingCycleGrpcServiceClient) CreateInvoicingCycleDay(ctx context.Context, in *CreateInvoicingCycleDayRequest, opts ...grpc.CallOption) (*InvoicingCycleDayResponse, error) {
	out := new(InvoicingCycleDayResponse)
	err := c.cc.Invoke(ctx, "/InvoicingCycleGrpcService/CreateInvoicingCycleDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoicingCycleGrpcServiceClient) UpdateInvoicingCycleDay(ctx context.Context, in *UpdateInvoicingCycleDayRequest, opts ...grpc.CallOption) (*InvoicingCycleDayResponse, error) {
	out := new(InvoicingCycleDayResponse)
	err := c.cc.Invoke(ctx, "/InvoicingCycleGrpcService/UpdateInvoicingCycleDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoicingCycleGrpcServiceServer is the server API for InvoicingCycleGrpcService service.
// All implementations should embed UnimplementedInvoicingCycleGrpcServiceServer
// for forward compatibility
type InvoicingCycleGrpcServiceServer interface {
	CreateInvoicingCycleType(context.Context, *CreateInvoicingCycleTypeRequest) (*InvoicingCycleTypeResponse, error)
	UpdateInvoicingCycleType(context.Context, *UpdateInvoicingCycleTypeRequest) (*InvoicingCycleTypeResponse, error)
	CreateInvoicingCycleDay(context.Context, *CreateInvoicingCycleDayRequest) (*InvoicingCycleDayResponse, error)
	UpdateInvoicingCycleDay(context.Context, *UpdateInvoicingCycleDayRequest) (*InvoicingCycleDayResponse, error)
}

// UnimplementedInvoicingCycleGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInvoicingCycleGrpcServiceServer struct {
}

func (UnimplementedInvoicingCycleGrpcServiceServer) CreateInvoicingCycleType(context.Context, *CreateInvoicingCycleTypeRequest) (*InvoicingCycleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoicingCycleType not implemented")
}
func (UnimplementedInvoicingCycleGrpcServiceServer) UpdateInvoicingCycleType(context.Context, *UpdateInvoicingCycleTypeRequest) (*InvoicingCycleTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoicingCycleType not implemented")
}
func (UnimplementedInvoicingCycleGrpcServiceServer) CreateInvoicingCycleDay(context.Context, *CreateInvoicingCycleDayRequest) (*InvoicingCycleDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoicingCycleDay not implemented")
}
func (UnimplementedInvoicingCycleGrpcServiceServer) UpdateInvoicingCycleDay(context.Context, *UpdateInvoicingCycleDayRequest) (*InvoicingCycleDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoicingCycleDay not implemented")
}

// UnsafeInvoicingCycleGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoicingCycleGrpcServiceServer will
// result in compilation errors.
type UnsafeInvoicingCycleGrpcServiceServer interface {
	mustEmbedUnimplementedInvoicingCycleGrpcServiceServer()
}

func RegisterInvoicingCycleGrpcServiceServer(s grpc.ServiceRegistrar, srv InvoicingCycleGrpcServiceServer) {
	s.RegisterService(&InvoicingCycleGrpcService_ServiceDesc, srv)
}

func _InvoicingCycleGrpcService_CreateInvoicingCycleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoicingCycleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingCycleGrpcServiceServer).CreateInvoicingCycleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoicingCycleGrpcService/CreateInvoicingCycleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingCycleGrpcServiceServer).CreateInvoicingCycleType(ctx, req.(*CreateInvoicingCycleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicingCycleGrpcService_UpdateInvoicingCycleType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoicingCycleTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingCycleGrpcServiceServer).UpdateInvoicingCycleType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoicingCycleGrpcService/UpdateInvoicingCycleType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingCycleGrpcServiceServer).UpdateInvoicingCycleType(ctx, req.(*UpdateInvoicingCycleTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicingCycleGrpcService_CreateInvoicingCycleDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoicingCycleDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingCycleGrpcServiceServer).CreateInvoicingCycleDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoicingCycleGrpcService/CreateInvoicingCycleDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingCycleGrpcServiceServer).CreateInvoicingCycleDay(ctx, req.(*CreateInvoicingCycleDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoicingCycleGrpcService_UpdateInvoicingCycleDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoicingCycleDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoicingCycleGrpcServiceServer).UpdateInvoicingCycleDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoicingCycleGrpcService/UpdateInvoicingCycleDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoicingCycleGrpcServiceServer).UpdateInvoicingCycleDay(ctx, req.(*UpdateInvoicingCycleDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoicingCycleGrpcService_ServiceDesc is the grpc.ServiceDesc for InvoicingCycleGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoicingCycleGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvoicingCycleGrpcService",
	HandlerType: (*InvoicingCycleGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoicingCycleType",
			Handler:    _InvoicingCycleGrpcService_CreateInvoicingCycleType_Handler,
		},
		{
			MethodName: "UpdateInvoicingCycleType",
			Handler:    _InvoicingCycleGrpcService_UpdateInvoicingCycleType_Handler,
		},
		{
			MethodName: "CreateInvoicingCycleDay",
			Handler:    _InvoicingCycleGrpcService_CreateInvoicingCycleDay_Handler,
		},
		{
			MethodName: "UpdateInvoicingCycleDay",
			Handler:    _InvoicingCycleGrpcService_UpdateInvoicingCycleDay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoicing_cycle.proto",
}
