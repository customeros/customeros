// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: org_plan.proto

package org_plan_grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrgPlanGrpcServiceClient is the client API for OrgPlanGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgPlanGrpcServiceClient interface {
	CreateOrgPlan(ctx context.Context, in *CreateOrgPlanGrpcRequest, opts ...grpc.CallOption) (*OrgPlanIdGrpcResponse, error)
	UpdateOrgPlan(ctx context.Context, in *UpdateOrgPlanGrpcRequest, opts ...grpc.CallOption) (*OrgPlanIdGrpcResponse, error)
	CreateOrgPlanMilestone(ctx context.Context, in *CreateOrgPlanMilestoneGrpcRequest, opts ...grpc.CallOption) (*OrgPlanMilestoneIdGrpcResponse, error)
	UpdateOrgPlanMilestone(ctx context.Context, in *UpdateOrgPlanMilestoneGrpcRequest, opts ...grpc.CallOption) (*OrgPlanMilestoneIdGrpcResponse, error)
	ReorderOrgPlanMilestones(ctx context.Context, in *ReorderOrgPlanMilestonesGrpcRequest, opts ...grpc.CallOption) (*OrgPlanIdGrpcResponse, error)
}

type orgPlanGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgPlanGrpcServiceClient(cc grpc.ClientConnInterface) OrgPlanGrpcServiceClient {
	return &orgPlanGrpcServiceClient{cc}
}

func (c *orgPlanGrpcServiceClient) CreateOrgPlan(ctx context.Context, in *CreateOrgPlanGrpcRequest, opts ...grpc.CallOption) (*OrgPlanIdGrpcResponse, error) {
	out := new(OrgPlanIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/OrgPlanGrpcService/CreateOrgPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgPlanGrpcServiceClient) UpdateOrgPlan(ctx context.Context, in *UpdateOrgPlanGrpcRequest, opts ...grpc.CallOption) (*OrgPlanIdGrpcResponse, error) {
	out := new(OrgPlanIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/OrgPlanGrpcService/UpdateOrgPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgPlanGrpcServiceClient) CreateOrgPlanMilestone(ctx context.Context, in *CreateOrgPlanMilestoneGrpcRequest, opts ...grpc.CallOption) (*OrgPlanMilestoneIdGrpcResponse, error) {
	out := new(OrgPlanMilestoneIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/OrgPlanGrpcService/CreateOrgPlanMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgPlanGrpcServiceClient) UpdateOrgPlanMilestone(ctx context.Context, in *UpdateOrgPlanMilestoneGrpcRequest, opts ...grpc.CallOption) (*OrgPlanMilestoneIdGrpcResponse, error) {
	out := new(OrgPlanMilestoneIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/OrgPlanGrpcService/UpdateOrgPlanMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgPlanGrpcServiceClient) ReorderOrgPlanMilestones(ctx context.Context, in *ReorderOrgPlanMilestonesGrpcRequest, opts ...grpc.CallOption) (*OrgPlanIdGrpcResponse, error) {
	out := new(OrgPlanIdGrpcResponse)
	err := c.cc.Invoke(ctx, "/OrgPlanGrpcService/ReorderOrgPlanMilestones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgPlanGrpcServiceServer is the server API for OrgPlanGrpcService service.
// All implementations should embed UnimplementedOrgPlanGrpcServiceServer
// for forward compatibility
type OrgPlanGrpcServiceServer interface {
	CreateOrgPlan(context.Context, *CreateOrgPlanGrpcRequest) (*OrgPlanIdGrpcResponse, error)
	UpdateOrgPlan(context.Context, *UpdateOrgPlanGrpcRequest) (*OrgPlanIdGrpcResponse, error)
	CreateOrgPlanMilestone(context.Context, *CreateOrgPlanMilestoneGrpcRequest) (*OrgPlanMilestoneIdGrpcResponse, error)
	UpdateOrgPlanMilestone(context.Context, *UpdateOrgPlanMilestoneGrpcRequest) (*OrgPlanMilestoneIdGrpcResponse, error)
	ReorderOrgPlanMilestones(context.Context, *ReorderOrgPlanMilestonesGrpcRequest) (*OrgPlanIdGrpcResponse, error)
}

// UnimplementedOrgPlanGrpcServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrgPlanGrpcServiceServer struct {
}

func (UnimplementedOrgPlanGrpcServiceServer) CreateOrgPlan(context.Context, *CreateOrgPlanGrpcRequest) (*OrgPlanIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgPlan not implemented")
}
func (UnimplementedOrgPlanGrpcServiceServer) UpdateOrgPlan(context.Context, *UpdateOrgPlanGrpcRequest) (*OrgPlanIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgPlan not implemented")
}
func (UnimplementedOrgPlanGrpcServiceServer) CreateOrgPlanMilestone(context.Context, *CreateOrgPlanMilestoneGrpcRequest) (*OrgPlanMilestoneIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgPlanMilestone not implemented")
}
func (UnimplementedOrgPlanGrpcServiceServer) UpdateOrgPlanMilestone(context.Context, *UpdateOrgPlanMilestoneGrpcRequest) (*OrgPlanMilestoneIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrgPlanMilestone not implemented")
}
func (UnimplementedOrgPlanGrpcServiceServer) ReorderOrgPlanMilestones(context.Context, *ReorderOrgPlanMilestonesGrpcRequest) (*OrgPlanIdGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderOrgPlanMilestones not implemented")
}

// UnsafeOrgPlanGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgPlanGrpcServiceServer will
// result in compilation errors.
type UnsafeOrgPlanGrpcServiceServer interface {
	mustEmbedUnimplementedOrgPlanGrpcServiceServer()
}

func RegisterOrgPlanGrpcServiceServer(s grpc.ServiceRegistrar, srv OrgPlanGrpcServiceServer) {
	s.RegisterService(&OrgPlanGrpcService_ServiceDesc, srv)
}

func _OrgPlanGrpcService_CreateOrgPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgPlanGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgPlanGrpcServiceServer).CreateOrgPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrgPlanGrpcService/CreateOrgPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgPlanGrpcServiceServer).CreateOrgPlan(ctx, req.(*CreateOrgPlanGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgPlanGrpcService_UpdateOrgPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgPlanGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgPlanGrpcServiceServer).UpdateOrgPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrgPlanGrpcService/UpdateOrgPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgPlanGrpcServiceServer).UpdateOrgPlan(ctx, req.(*UpdateOrgPlanGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgPlanGrpcService_CreateOrgPlanMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgPlanMilestoneGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgPlanGrpcServiceServer).CreateOrgPlanMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrgPlanGrpcService/CreateOrgPlanMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgPlanGrpcServiceServer).CreateOrgPlanMilestone(ctx, req.(*CreateOrgPlanMilestoneGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgPlanGrpcService_UpdateOrgPlanMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgPlanMilestoneGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgPlanGrpcServiceServer).UpdateOrgPlanMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrgPlanGrpcService/UpdateOrgPlanMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgPlanGrpcServiceServer).UpdateOrgPlanMilestone(ctx, req.(*UpdateOrgPlanMilestoneGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgPlanGrpcService_ReorderOrgPlanMilestones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReorderOrgPlanMilestonesGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgPlanGrpcServiceServer).ReorderOrgPlanMilestones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OrgPlanGrpcService/ReorderOrgPlanMilestones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgPlanGrpcServiceServer).ReorderOrgPlanMilestones(ctx, req.(*ReorderOrgPlanMilestonesGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgPlanGrpcService_ServiceDesc is the grpc.ServiceDesc for OrgPlanGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgPlanGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrgPlanGrpcService",
	HandlerType: (*OrgPlanGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrgPlan",
			Handler:    _OrgPlanGrpcService_CreateOrgPlan_Handler,
		},
		{
			MethodName: "UpdateOrgPlan",
			Handler:    _OrgPlanGrpcService_UpdateOrgPlan_Handler,
		},
		{
			MethodName: "CreateOrgPlanMilestone",
			Handler:    _OrgPlanGrpcService_CreateOrgPlanMilestone_Handler,
		},
		{
			MethodName: "UpdateOrgPlanMilestone",
			Handler:    _OrgPlanGrpcService_UpdateOrgPlanMilestone_Handler,
		},
		{
			MethodName: "ReorderOrgPlanMilestones",
			Handler:    _OrgPlanGrpcService_ReorderOrgPlanMilestones_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org_plan.proto",
}
