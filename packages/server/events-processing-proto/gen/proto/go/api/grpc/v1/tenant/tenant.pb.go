// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: tenant.proto

package tenant_grpc_service

import (
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TenantBillingProfileFieldMask int32

const (
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_NONE TenantBillingProfileFieldMask = 0 // No property, ignored by the server
	// Deprecated: Marked as deprecated in tenant.proto.
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_EMAIL                            TenantBillingProfileFieldMask = 1
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_PHONE                            TenantBillingProfileFieldMask = 2
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_LEGAL_NAME                       TenantBillingProfileFieldMask = 3
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_1                   TenantBillingProfileFieldMask = 4
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_2                   TenantBillingProfileFieldMask = 5
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_3                   TenantBillingProfileFieldMask = 6
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_LOCALITY                         TenantBillingProfileFieldMask = 7
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_COUNTRY                          TenantBillingProfileFieldMask = 8
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ZIP                              TenantBillingProfileFieldMask = 9
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_DOMESTIC_PAYMENTS_BANK_INFO      TenantBillingProfileFieldMask = 10
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_INTERNATIONAL_PAYMENTS_BANK_INFO TenantBillingProfileFieldMask = 11
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_VAT_NUMBER                       TenantBillingProfileFieldMask = 12
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_FROM               TenantBillingProfileFieldMask = 13
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_CARD                TenantBillingProfileFieldMask = 14
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_SEPA   TenantBillingProfileFieldMask = 15
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_ACH    TenantBillingProfileFieldMask = 16
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_BACS   TenantBillingProfileFieldMask = 17
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_PIGEON              TenantBillingProfileFieldMask = 18
)

// Enum value maps for TenantBillingProfileFieldMask.
var (
	TenantBillingProfileFieldMask_name = map[int32]string{
		0:  "TENANT_BILLING_PROFILE_FIELD_NONE",
		1:  "TENANT_BILLING_PROFILE_FIELD_EMAIL",
		2:  "TENANT_BILLING_PROFILE_FIELD_PHONE",
		3:  "TENANT_BILLING_PROFILE_FIELD_LEGAL_NAME",
		4:  "TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_1",
		5:  "TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_2",
		6:  "TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_3",
		7:  "TENANT_BILLING_PROFILE_FIELD_LOCALITY",
		8:  "TENANT_BILLING_PROFILE_FIELD_COUNTRY",
		9:  "TENANT_BILLING_PROFILE_FIELD_ZIP",
		10: "TENANT_BILLING_PROFILE_FIELD_DOMESTIC_PAYMENTS_BANK_INFO",
		11: "TENANT_BILLING_PROFILE_FIELD_INTERNATIONAL_PAYMENTS_BANK_INFO",
		12: "TENANT_BILLING_PROFILE_FIELD_VAT_NUMBER",
		13: "TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_FROM",
		14: "TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_CARD",
		15: "TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_SEPA",
		16: "TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_ACH",
		17: "TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_BACS",
		18: "TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_PIGEON",
	}
	TenantBillingProfileFieldMask_value = map[string]int32{
		"TENANT_BILLING_PROFILE_FIELD_NONE":                             0,
		"TENANT_BILLING_PROFILE_FIELD_EMAIL":                            1,
		"TENANT_BILLING_PROFILE_FIELD_PHONE":                            2,
		"TENANT_BILLING_PROFILE_FIELD_LEGAL_NAME":                       3,
		"TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_1":                   4,
		"TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_2":                   5,
		"TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_3":                   6,
		"TENANT_BILLING_PROFILE_FIELD_LOCALITY":                         7,
		"TENANT_BILLING_PROFILE_FIELD_COUNTRY":                          8,
		"TENANT_BILLING_PROFILE_FIELD_ZIP":                              9,
		"TENANT_BILLING_PROFILE_FIELD_DOMESTIC_PAYMENTS_BANK_INFO":      10,
		"TENANT_BILLING_PROFILE_FIELD_INTERNATIONAL_PAYMENTS_BANK_INFO": 11,
		"TENANT_BILLING_PROFILE_FIELD_VAT_NUMBER":                       12,
		"TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_FROM":               13,
		"TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_CARD":                14,
		"TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_SEPA":   15,
		"TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_ACH":    16,
		"TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_DIRECT_DEBIT_BACS":   17,
		"TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_PIGEON":              18,
	}
)

func (x TenantBillingProfileFieldMask) Enum() *TenantBillingProfileFieldMask {
	p := new(TenantBillingProfileFieldMask)
	*p = x
	return p
}

func (x TenantBillingProfileFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TenantBillingProfileFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_tenant_proto_enumTypes[0].Descriptor()
}

func (TenantBillingProfileFieldMask) Type() protoreflect.EnumType {
	return &file_tenant_proto_enumTypes[0]
}

func (x TenantBillingProfileFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TenantBillingProfileFieldMask.Descriptor instead.
func (TenantBillingProfileFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{0}
}

type TenantSettingsFieldMask int32

const (
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_NONE TenantSettingsFieldMask = 0 // No property, ignored by the server
	// Deprecated: Marked as deprecated in tenant.proto.
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_DEFAULT_CURRENCY        TenantSettingsFieldMask = 1
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_INVOICING_ENABLED       TenantSettingsFieldMask = 2
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_INVOICING_POSTPAID      TenantSettingsFieldMask = 4
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_LOGO_REPOSITORY_FILE_ID TenantSettingsFieldMask = 5
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_BASE_CURRENCY           TenantSettingsFieldMask = 6
)

// Enum value maps for TenantSettingsFieldMask.
var (
	TenantSettingsFieldMask_name = map[int32]string{
		0: "TENANT_SETTINGS_FIELD_NONE",
		1: "TENANT_SETTINGS_FIELD_DEFAULT_CURRENCY",
		2: "TENANT_SETTINGS_FIELD_INVOICING_ENABLED",
		4: "TENANT_SETTINGS_FIELD_INVOICING_POSTPAID",
		5: "TENANT_SETTINGS_FIELD_LOGO_REPOSITORY_FILE_ID",
		6: "TENANT_SETTINGS_FIELD_BASE_CURRENCY",
	}
	TenantSettingsFieldMask_value = map[string]int32{
		"TENANT_SETTINGS_FIELD_NONE":                    0,
		"TENANT_SETTINGS_FIELD_DEFAULT_CURRENCY":        1,
		"TENANT_SETTINGS_FIELD_INVOICING_ENABLED":       2,
		"TENANT_SETTINGS_FIELD_INVOICING_POSTPAID":      4,
		"TENANT_SETTINGS_FIELD_LOGO_REPOSITORY_FILE_ID": 5,
		"TENANT_SETTINGS_FIELD_BASE_CURRENCY":           6,
	}
)

func (x TenantSettingsFieldMask) Enum() *TenantSettingsFieldMask {
	p := new(TenantSettingsFieldMask)
	*p = x
	return p
}

func (x TenantSettingsFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TenantSettingsFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_tenant_proto_enumTypes[1].Descriptor()
}

func (TenantSettingsFieldMask) Type() protoreflect.EnumType {
	return &file_tenant_proto_enumTypes[1]
}

func (x TenantSettingsFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TenantSettingsFieldMask.Descriptor instead.
func (TenantSettingsFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{1}
}

type AddBillingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields   *common.SourceFields   `protobuf:"bytes,4,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	// Deprecated: Marked as deprecated in tenant.proto.
	Email                             string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone                             string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	LegalName                         string `protobuf:"bytes,7,opt,name=legalName,proto3" json:"legalName,omitempty"`
	AddressLine1                      string `protobuf:"bytes,8,opt,name=addressLine1,proto3" json:"addressLine1,omitempty"`
	AddressLine2                      string `protobuf:"bytes,9,opt,name=addressLine2,proto3" json:"addressLine2,omitempty"`
	AddressLine3                      string `protobuf:"bytes,10,opt,name=addressLine3,proto3" json:"addressLine3,omitempty"`
	DomesticPaymentsBankName          string `protobuf:"bytes,11,opt,name=domesticPaymentsBankName,proto3" json:"domesticPaymentsBankName,omitempty"`
	DomesticPaymentsAccountNumber     string `protobuf:"bytes,12,opt,name=domesticPaymentsAccountNumber,proto3" json:"domesticPaymentsAccountNumber,omitempty"`
	DomesticPaymentsSortCode          string `protobuf:"bytes,13,opt,name=domesticPaymentsSortCode,proto3" json:"domesticPaymentsSortCode,omitempty"`
	InternationalPaymentsSwiftBic     string `protobuf:"bytes,14,opt,name=internationalPaymentsSwiftBic,proto3" json:"internationalPaymentsSwiftBic,omitempty"`
	InternationalPaymentsBankName     string `protobuf:"bytes,15,opt,name=internationalPaymentsBankName,proto3" json:"internationalPaymentsBankName,omitempty"`
	InternationalPaymentsBankAddress  string `protobuf:"bytes,16,opt,name=internationalPaymentsBankAddress,proto3" json:"internationalPaymentsBankAddress,omitempty"`
	InternationalPaymentsInstructions string `protobuf:"bytes,17,opt,name=internationalPaymentsInstructions,proto3" json:"internationalPaymentsInstructions,omitempty"`
	Locality                          string `protobuf:"bytes,18,opt,name=locality,proto3" json:"locality,omitempty"`
	Country                           string `protobuf:"bytes,19,opt,name=country,proto3" json:"country,omitempty"`
	Zip                               string `protobuf:"bytes,20,opt,name=zip,proto3" json:"zip,omitempty"`
	DomesticPaymentsBankInfo          string `protobuf:"bytes,21,opt,name=domesticPaymentsBankInfo,proto3" json:"domesticPaymentsBankInfo,omitempty"`
	InternationalPaymentsBankInfo     string `protobuf:"bytes,22,opt,name=internationalPaymentsBankInfo,proto3" json:"internationalPaymentsBankInfo,omitempty"`
	VatNumber                         string `protobuf:"bytes,23,opt,name=vatNumber,proto3" json:"vatNumber,omitempty"`
	SendInvoicesFrom                  string `protobuf:"bytes,24,opt,name=sendInvoicesFrom,proto3" json:"sendInvoicesFrom,omitempty"`
	CanPayWithCard                    bool   `protobuf:"varint,25,opt,name=canPayWithCard,proto3" json:"canPayWithCard,omitempty"`
	CanPayWithDirectDebitSEPA         bool   `protobuf:"varint,26,opt,name=canPayWithDirectDebitSEPA,proto3" json:"canPayWithDirectDebitSEPA,omitempty"`
	CanPayWithDirectDebitACH          bool   `protobuf:"varint,27,opt,name=canPayWithDirectDebitACH,proto3" json:"canPayWithDirectDebitACH,omitempty"`
	CanPayWithDirectDebitBacs         bool   `protobuf:"varint,28,opt,name=canPayWithDirectDebitBacs,proto3" json:"canPayWithDirectDebitBacs,omitempty"`
	CanPayWithPigeon                  bool   `protobuf:"varint,29,opt,name=canPayWithPigeon,proto3" json:"canPayWithPigeon,omitempty"`
}

func (x *AddBillingProfileRequest) Reset() {
	*x = AddBillingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBillingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBillingProfileRequest) ProtoMessage() {}

func (x *AddBillingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBillingProfileRequest.ProtoReflect.Descriptor instead.
func (*AddBillingProfileRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{0}
}

func (x *AddBillingProfileRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *AddBillingProfileRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AddBillingProfileRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

// Deprecated: Marked as deprecated in tenant.proto.
func (x *AddBillingProfileRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddBillingProfileRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AddBillingProfileRequest) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *AddBillingProfileRequest) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *AddBillingProfileRequest) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *AddBillingProfileRequest) GetAddressLine3() string {
	if x != nil {
		return x.AddressLine3
	}
	return ""
}

func (x *AddBillingProfileRequest) GetDomesticPaymentsBankName() string {
	if x != nil {
		return x.DomesticPaymentsBankName
	}
	return ""
}

func (x *AddBillingProfileRequest) GetDomesticPaymentsAccountNumber() string {
	if x != nil {
		return x.DomesticPaymentsAccountNumber
	}
	return ""
}

func (x *AddBillingProfileRequest) GetDomesticPaymentsSortCode() string {
	if x != nil {
		return x.DomesticPaymentsSortCode
	}
	return ""
}

func (x *AddBillingProfileRequest) GetInternationalPaymentsSwiftBic() string {
	if x != nil {
		return x.InternationalPaymentsSwiftBic
	}
	return ""
}

func (x *AddBillingProfileRequest) GetInternationalPaymentsBankName() string {
	if x != nil {
		return x.InternationalPaymentsBankName
	}
	return ""
}

func (x *AddBillingProfileRequest) GetInternationalPaymentsBankAddress() string {
	if x != nil {
		return x.InternationalPaymentsBankAddress
	}
	return ""
}

func (x *AddBillingProfileRequest) GetInternationalPaymentsInstructions() string {
	if x != nil {
		return x.InternationalPaymentsInstructions
	}
	return ""
}

func (x *AddBillingProfileRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddBillingProfileRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *AddBillingProfileRequest) GetDomesticPaymentsBankInfo() string {
	if x != nil {
		return x.DomesticPaymentsBankInfo
	}
	return ""
}

func (x *AddBillingProfileRequest) GetInternationalPaymentsBankInfo() string {
	if x != nil {
		return x.InternationalPaymentsBankInfo
	}
	return ""
}

func (x *AddBillingProfileRequest) GetVatNumber() string {
	if x != nil {
		return x.VatNumber
	}
	return ""
}

func (x *AddBillingProfileRequest) GetSendInvoicesFrom() string {
	if x != nil {
		return x.SendInvoicesFrom
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCanPayWithCard() bool {
	if x != nil {
		return x.CanPayWithCard
	}
	return false
}

func (x *AddBillingProfileRequest) GetCanPayWithDirectDebitSEPA() bool {
	if x != nil {
		return x.CanPayWithDirectDebitSEPA
	}
	return false
}

func (x *AddBillingProfileRequest) GetCanPayWithDirectDebitACH() bool {
	if x != nil {
		return x.CanPayWithDirectDebitACH
	}
	return false
}

func (x *AddBillingProfileRequest) GetCanPayWithDirectDebitBacs() bool {
	if x != nil {
		return x.CanPayWithDirectDebitBacs
	}
	return false
}

func (x *AddBillingProfileRequest) GetCanPayWithPigeon() bool {
	if x != nil {
		return x.CanPayWithPigeon
	}
	return false
}

type UpdateBillingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant                        string                          `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId                string                          `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Id                            string                          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UpdatedAt                     *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Email                         string                          `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone                         string                          `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	LegalName                     string                          `protobuf:"bytes,7,opt,name=legalName,proto3" json:"legalName,omitempty"`
	AddressLine1                  string                          `protobuf:"bytes,8,opt,name=addressLine1,proto3" json:"addressLine1,omitempty"`
	AddressLine2                  string                          `protobuf:"bytes,9,opt,name=addressLine2,proto3" json:"addressLine2,omitempty"`
	AddressLine3                  string                          `protobuf:"bytes,10,opt,name=addressLine3,proto3" json:"addressLine3,omitempty"`
	Locality                      string                          `protobuf:"bytes,11,opt,name=locality,proto3" json:"locality,omitempty"`
	Country                       string                          `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	Zip                           string                          `protobuf:"bytes,13,opt,name=zip,proto3" json:"zip,omitempty"`
	DomesticPaymentsBankInfo      string                          `protobuf:"bytes,14,opt,name=domesticPaymentsBankInfo,proto3" json:"domesticPaymentsBankInfo,omitempty"`
	InternationalPaymentsBankInfo string                          `protobuf:"bytes,15,opt,name=internationalPaymentsBankInfo,proto3" json:"internationalPaymentsBankInfo,omitempty"`
	VatNumber                     string                          `protobuf:"bytes,16,opt,name=vatNumber,proto3" json:"vatNumber,omitempty"`
	SendInvoicesFrom              string                          `protobuf:"bytes,17,opt,name=sendInvoicesFrom,proto3" json:"sendInvoicesFrom,omitempty"`
	CanPayWithCard                bool                            `protobuf:"varint,18,opt,name=canPayWithCard,proto3" json:"canPayWithCard,omitempty"`
	CanPayWithDirectDebitSEPA     bool                            `protobuf:"varint,19,opt,name=canPayWithDirectDebitSEPA,proto3" json:"canPayWithDirectDebitSEPA,omitempty"`
	CanPayWithDirectDebitACH      bool                            `protobuf:"varint,20,opt,name=canPayWithDirectDebitACH,proto3" json:"canPayWithDirectDebitACH,omitempty"`
	CanPayWithDirectDebitBacs     bool                            `protobuf:"varint,21,opt,name=canPayWithDirectDebitBacs,proto3" json:"canPayWithDirectDebitBacs,omitempty"`
	CanPayWithPigeon              bool                            `protobuf:"varint,22,opt,name=canPayWithPigeon,proto3" json:"canPayWithPigeon,omitempty"`
	AppSource                     string                          `protobuf:"bytes,23,opt,name=appSource,proto3" json:"appSource,omitempty"`
	FieldsMask                    []TenantBillingProfileFieldMask `protobuf:"varint,24,rep,packed,name=fieldsMask,proto3,enum=TenantBillingProfileFieldMask" json:"fieldsMask,omitempty"`
}

func (x *UpdateBillingProfileRequest) Reset() {
	*x = UpdateBillingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBillingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBillingProfileRequest) ProtoMessage() {}

func (x *UpdateBillingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBillingProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateBillingProfileRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateBillingProfileRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateBillingProfileRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetAddressLine3() string {
	if x != nil {
		return x.AddressLine3
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetDomesticPaymentsBankInfo() string {
	if x != nil {
		return x.DomesticPaymentsBankInfo
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetInternationalPaymentsBankInfo() string {
	if x != nil {
		return x.InternationalPaymentsBankInfo
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetVatNumber() string {
	if x != nil {
		return x.VatNumber
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetSendInvoicesFrom() string {
	if x != nil {
		return x.SendInvoicesFrom
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetCanPayWithCard() bool {
	if x != nil {
		return x.CanPayWithCard
	}
	return false
}

func (x *UpdateBillingProfileRequest) GetCanPayWithDirectDebitSEPA() bool {
	if x != nil {
		return x.CanPayWithDirectDebitSEPA
	}
	return false
}

func (x *UpdateBillingProfileRequest) GetCanPayWithDirectDebitACH() bool {
	if x != nil {
		return x.CanPayWithDirectDebitACH
	}
	return false
}

func (x *UpdateBillingProfileRequest) GetCanPayWithDirectDebitBacs() bool {
	if x != nil {
		return x.CanPayWithDirectDebitBacs
	}
	return false
}

func (x *UpdateBillingProfileRequest) GetCanPayWithPigeon() bool {
	if x != nil {
		return x.CanPayWithPigeon
	}
	return false
}

func (x *UpdateBillingProfileRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetFieldsMask() []TenantBillingProfileFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

type UpdateTenantSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string                    `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                    `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	UpdatedAt      *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AppSource      string                    `protobuf:"bytes,5,opt,name=appSource,proto3" json:"appSource,omitempty"`
	FieldsMask     []TenantSettingsFieldMask `protobuf:"varint,6,rep,packed,name=fieldsMask,proto3,enum=TenantSettingsFieldMask" json:"fieldsMask,omitempty"`
	// Deprecated: Marked as deprecated in tenant.proto.
	DefaultCurrency      string `protobuf:"bytes,7,opt,name=defaultCurrency,proto3" json:"defaultCurrency,omitempty"`
	InvoicingEnabled     bool   `protobuf:"varint,8,opt,name=invoicingEnabled,proto3" json:"invoicingEnabled,omitempty"`
	InvoicingPostpaid    bool   `protobuf:"varint,10,opt,name=invoicingPostpaid,proto3" json:"invoicingPostpaid,omitempty"`
	LogoRepositoryFileId string `protobuf:"bytes,11,opt,name=logoRepositoryFileId,proto3" json:"logoRepositoryFileId,omitempty"`
	BaseCurrency         string `protobuf:"bytes,12,opt,name=baseCurrency,proto3" json:"baseCurrency,omitempty"`
}

func (x *UpdateTenantSettingsRequest) Reset() {
	*x = UpdateTenantSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTenantSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantSettingsRequest) ProtoMessage() {}

func (x *UpdateTenantSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantSettingsRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTenantSettingsRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateTenantSettingsRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetFieldsMask() []TenantSettingsFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

// Deprecated: Marked as deprecated in tenant.proto.
func (x *UpdateTenantSettingsRequest) GetDefaultCurrency() string {
	if x != nil {
		return x.DefaultCurrency
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetInvoicingEnabled() bool {
	if x != nil {
		return x.InvoicingEnabled
	}
	return false
}

func (x *UpdateTenantSettingsRequest) GetInvoicingPostpaid() bool {
	if x != nil {
		return x.InvoicingPostpaid
	}
	return false
}

func (x *UpdateTenantSettingsRequest) GetLogoRepositoryFileId() string {
	if x != nil {
		return x.LogoRepositoryFileId
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

var File_tenant_proto protoreflect.FileDescriptor

var file_tenant_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x0b, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61,
	0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x64,
	0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18,
	0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x77, 0x69, 0x66, 0x74, 0x42, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x77, 0x69, 0x66, 0x74, 0x42, 0x69, 0x63, 0x12, 0x44,
	0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x4c, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x44, 0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x61,
	0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x53, 0x45, 0x50, 0x41, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63,
	0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x53, 0x45, 0x50, 0x41, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x41, 0x43, 0x48, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x41, 0x43, 0x48, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x42, 0x61, 0x63,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x42, 0x61,
	0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61,
	0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e, 0x22, 0xdb,
	0x07, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x3a, 0x0a, 0x18, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x6d, 0x65, 0x73, 0x74,
	0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x44, 0x0a, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x61,
	0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x62, 0x69, 0x74, 0x53, 0x45, 0x50, 0x41, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63,
	0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x53, 0x45, 0x50, 0x41, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x41, 0x43, 0x48, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x61, 0x6e, 0x50,
	0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x41, 0x43, 0x48, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x42, 0x61, 0x63,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x62, 0x69, 0x74, 0x42, 0x61,
	0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61,
	0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xcf, 0x03, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2c,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x73, 0x74, 0x70, 0x61, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2a, 0xe4,
	0x07, 0x0a, 0x1d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x25, 0x0a, 0x21, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x22, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x01, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x45, 0x47, 0x41,
	0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x45, 0x4e, 0x41,
	0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x31, 0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x32, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x33, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x54,
	0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x08,
	0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x5a, 0x49, 0x50, 0x10, 0x09, 0x12, 0x3c, 0x0a, 0x38, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x4f, 0x4d, 0x45, 0x53, 0x54, 0x49, 0x43, 0x5f,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x0a, 0x12, 0x41, 0x0a, 0x3d, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x0c, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x0d, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x50, 0x41,
	0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0e, 0x12, 0x3f, 0x0a,
	0x3b, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x41,
	0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x10, 0x0f, 0x12, 0x3e,
	0x0a, 0x3a, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x48, 0x10, 0x10, 0x12, 0x3f,
	0x0a, 0x3b, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x53, 0x10, 0x11, 0x12,
	0x34, 0x0a, 0x30, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x43, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x49, 0x47,
	0x45, 0x4f, 0x4e, 0x10, 0x12, 0x2a, 0xa0, 0x02, 0x0a, 0x17, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x26, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49,
	0x43, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2c,
	0x0a, 0x28, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49, 0x44, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x27, 0x0a, 0x23, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x06, 0x32, 0xe1, 0x01, 0x0a, 0x11, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x37, 0x42, 0x0b,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x3b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tenant_proto_rawDescOnce sync.Once
	file_tenant_proto_rawDescData = file_tenant_proto_rawDesc
)

func file_tenant_proto_rawDescGZIP() []byte {
	file_tenant_proto_rawDescOnce.Do(func() {
		file_tenant_proto_rawDescData = protoimpl.X.CompressGZIP(file_tenant_proto_rawDescData)
	})
	return file_tenant_proto_rawDescData
}

var file_tenant_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tenant_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tenant_proto_goTypes = []interface{}{
	(TenantBillingProfileFieldMask)(0),  // 0: TenantBillingProfileFieldMask
	(TenantSettingsFieldMask)(0),        // 1: TenantSettingsFieldMask
	(*AddBillingProfileRequest)(nil),    // 2: AddBillingProfileRequest
	(*UpdateBillingProfileRequest)(nil), // 3: UpdateBillingProfileRequest
	(*UpdateTenantSettingsRequest)(nil), // 4: UpdateTenantSettingsRequest
	(*timestamppb.Timestamp)(nil),       // 5: google.protobuf.Timestamp
	(*common.SourceFields)(nil),         // 6: SourceFields
	(*common.IdResponse)(nil),           // 7: IdResponse
	(*emptypb.Empty)(nil),               // 8: google.protobuf.Empty
}
var file_tenant_proto_depIdxs = []int32{
	5, // 0: AddBillingProfileRequest.createdAt:type_name -> google.protobuf.Timestamp
	6, // 1: AddBillingProfileRequest.sourceFields:type_name -> SourceFields
	5, // 2: UpdateBillingProfileRequest.updatedAt:type_name -> google.protobuf.Timestamp
	0, // 3: UpdateBillingProfileRequest.fieldsMask:type_name -> TenantBillingProfileFieldMask
	5, // 4: UpdateTenantSettingsRequest.updatedAt:type_name -> google.protobuf.Timestamp
	1, // 5: UpdateTenantSettingsRequest.fieldsMask:type_name -> TenantSettingsFieldMask
	2, // 6: tenantGrpcService.AddBillingProfile:input_type -> AddBillingProfileRequest
	3, // 7: tenantGrpcService.UpdateBillingProfile:input_type -> UpdateBillingProfileRequest
	4, // 8: tenantGrpcService.UpdateTenantSettings:input_type -> UpdateTenantSettingsRequest
	7, // 9: tenantGrpcService.AddBillingProfile:output_type -> IdResponse
	7, // 10: tenantGrpcService.UpdateBillingProfile:output_type -> IdResponse
	8, // 11: tenantGrpcService.UpdateTenantSettings:output_type -> google.protobuf.Empty
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_tenant_proto_init() }
func file_tenant_proto_init() {
	if File_tenant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tenant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBillingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBillingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTenantSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tenant_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tenant_proto_goTypes,
		DependencyIndexes: file_tenant_proto_depIdxs,
		EnumInfos:         file_tenant_proto_enumTypes,
		MessageInfos:      file_tenant_proto_msgTypes,
	}.Build()
	File_tenant_proto = out.File
	file_tenant_proto_rawDesc = nil
	file_tenant_proto_goTypes = nil
	file_tenant_proto_depIdxs = nil
}
