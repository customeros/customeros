// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: tenant.proto

package tenant_grpc_service

import (
	common "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TenantBillingProfileFieldMask int32

const (
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_NONE TenantBillingProfileFieldMask = 0 // No property, ignored by the server
	// Deprecated: Marked as deprecated in tenant.proto.
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_EMAIL                      TenantBillingProfileFieldMask = 1
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_PHONE                      TenantBillingProfileFieldMask = 2
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_LEGAL_NAME                 TenantBillingProfileFieldMask = 3
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_1             TenantBillingProfileFieldMask = 4
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_2             TenantBillingProfileFieldMask = 5
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_3             TenantBillingProfileFieldMask = 6
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_LOCALITY                   TenantBillingProfileFieldMask = 7
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_COUNTRY                    TenantBillingProfileFieldMask = 8
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_ZIP                        TenantBillingProfileFieldMask = 9
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_VAT_NUMBER                 TenantBillingProfileFieldMask = 12
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_FROM         TenantBillingProfileFieldMask = 13
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_PIGEON        TenantBillingProfileFieldMask = 18
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_BCC          TenantBillingProfileFieldMask = 19
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_BANK_TRANSFER TenantBillingProfileFieldMask = 20
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_REGION                     TenantBillingProfileFieldMask = 21
	TenantBillingProfileFieldMask_TENANT_BILLING_PROFILE_FIELD_CHECK                      TenantBillingProfileFieldMask = 22
)

// Enum value maps for TenantBillingProfileFieldMask.
var (
	TenantBillingProfileFieldMask_name = map[int32]string{
		0:  "TENANT_BILLING_PROFILE_FIELD_NONE",
		1:  "TENANT_BILLING_PROFILE_FIELD_EMAIL",
		2:  "TENANT_BILLING_PROFILE_FIELD_PHONE",
		3:  "TENANT_BILLING_PROFILE_FIELD_LEGAL_NAME",
		4:  "TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_1",
		5:  "TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_2",
		6:  "TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_3",
		7:  "TENANT_BILLING_PROFILE_FIELD_LOCALITY",
		8:  "TENANT_BILLING_PROFILE_FIELD_COUNTRY",
		9:  "TENANT_BILLING_PROFILE_FIELD_ZIP",
		12: "TENANT_BILLING_PROFILE_FIELD_VAT_NUMBER",
		13: "TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_FROM",
		18: "TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_PIGEON",
		19: "TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_BCC",
		20: "TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_BANK_TRANSFER",
		21: "TENANT_BILLING_PROFILE_FIELD_REGION",
		22: "TENANT_BILLING_PROFILE_FIELD_CHECK",
	}
	TenantBillingProfileFieldMask_value = map[string]int32{
		"TENANT_BILLING_PROFILE_FIELD_NONE":                       0,
		"TENANT_BILLING_PROFILE_FIELD_EMAIL":                      1,
		"TENANT_BILLING_PROFILE_FIELD_PHONE":                      2,
		"TENANT_BILLING_PROFILE_FIELD_LEGAL_NAME":                 3,
		"TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_1":             4,
		"TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_2":             5,
		"TENANT_BILLING_PROFILE_FIELD_ADDRESS_LINE_3":             6,
		"TENANT_BILLING_PROFILE_FIELD_LOCALITY":                   7,
		"TENANT_BILLING_PROFILE_FIELD_COUNTRY":                    8,
		"TENANT_BILLING_PROFILE_FIELD_ZIP":                        9,
		"TENANT_BILLING_PROFILE_FIELD_VAT_NUMBER":                 12,
		"TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_FROM":         13,
		"TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_PIGEON":        18,
		"TENANT_BILLING_PROFILE_FIELD_SEND_INVOICES_BCC":          19,
		"TENANT_BILLING_PROFILE_FIELD_CAN_PAY_WITH_BANK_TRANSFER": 20,
		"TENANT_BILLING_PROFILE_FIELD_REGION":                     21,
		"TENANT_BILLING_PROFILE_FIELD_CHECK":                      22,
	}
)

func (x TenantBillingProfileFieldMask) Enum() *TenantBillingProfileFieldMask {
	p := new(TenantBillingProfileFieldMask)
	*p = x
	return p
}

func (x TenantBillingProfileFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TenantBillingProfileFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_tenant_proto_enumTypes[0].Descriptor()
}

func (TenantBillingProfileFieldMask) Type() protoreflect.EnumType {
	return &file_tenant_proto_enumTypes[0]
}

func (x TenantBillingProfileFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TenantBillingProfileFieldMask.Descriptor instead.
func (TenantBillingProfileFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{0}
}

type TenantSettingsFieldMask int32

const (
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_NONE TenantSettingsFieldMask = 0 // No property, ignored by the server
	// Deprecated: Marked as deprecated in tenant.proto.
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_DEFAULT_CURRENCY        TenantSettingsFieldMask = 1
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_INVOICING_ENABLED       TenantSettingsFieldMask = 2
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_INVOICING_POSTPAID      TenantSettingsFieldMask = 4
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_LOGO_REPOSITORY_FILE_ID TenantSettingsFieldMask = 5
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_BASE_CURRENCY           TenantSettingsFieldMask = 6
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_WORKSPACE_LOGO          TenantSettingsFieldMask = 7
	TenantSettingsFieldMask_TENANT_SETTINGS_FIELD_WORKSPACE_NAME          TenantSettingsFieldMask = 8
)

// Enum value maps for TenantSettingsFieldMask.
var (
	TenantSettingsFieldMask_name = map[int32]string{
		0: "TENANT_SETTINGS_FIELD_NONE",
		1: "TENANT_SETTINGS_FIELD_DEFAULT_CURRENCY",
		2: "TENANT_SETTINGS_FIELD_INVOICING_ENABLED",
		4: "TENANT_SETTINGS_FIELD_INVOICING_POSTPAID",
		5: "TENANT_SETTINGS_FIELD_LOGO_REPOSITORY_FILE_ID",
		6: "TENANT_SETTINGS_FIELD_BASE_CURRENCY",
		7: "TENANT_SETTINGS_FIELD_WORKSPACE_LOGO",
		8: "TENANT_SETTINGS_FIELD_WORKSPACE_NAME",
	}
	TenantSettingsFieldMask_value = map[string]int32{
		"TENANT_SETTINGS_FIELD_NONE":                    0,
		"TENANT_SETTINGS_FIELD_DEFAULT_CURRENCY":        1,
		"TENANT_SETTINGS_FIELD_INVOICING_ENABLED":       2,
		"TENANT_SETTINGS_FIELD_INVOICING_POSTPAID":      4,
		"TENANT_SETTINGS_FIELD_LOGO_REPOSITORY_FILE_ID": 5,
		"TENANT_SETTINGS_FIELD_BASE_CURRENCY":           6,
		"TENANT_SETTINGS_FIELD_WORKSPACE_LOGO":          7,
		"TENANT_SETTINGS_FIELD_WORKSPACE_NAME":          8,
	}
)

func (x TenantSettingsFieldMask) Enum() *TenantSettingsFieldMask {
	p := new(TenantSettingsFieldMask)
	*p = x
	return p
}

func (x TenantSettingsFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TenantSettingsFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_tenant_proto_enumTypes[1].Descriptor()
}

func (TenantSettingsFieldMask) Type() protoreflect.EnumType {
	return &file_tenant_proto_enumTypes[1]
}

func (x TenantSettingsFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TenantSettingsFieldMask.Descriptor instead.
func (TenantSettingsFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{1}
}

type BankAccountFieldMask int32

const (
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_NONE                  BankAccountFieldMask = 0 // No property, ignored by the server
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_BANK_NAME             BankAccountFieldMask = 1
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_BANK_TRANSFER_ENABLED BankAccountFieldMask = 2
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_CURRENCY              BankAccountFieldMask = 3
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_ACCOUNT_NUMBER        BankAccountFieldMask = 4
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_IBAN                  BankAccountFieldMask = 5
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_BIC                   BankAccountFieldMask = 6
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_SORT_CODE             BankAccountFieldMask = 7
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_ROUTING_NUMBER        BankAccountFieldMask = 8
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_ALLOW_INTERNATIONAL   BankAccountFieldMask = 9
	BankAccountFieldMask_BANK_ACCOUNT_FIELD_OTHER_DETAILS         BankAccountFieldMask = 10
)

// Enum value maps for BankAccountFieldMask.
var (
	BankAccountFieldMask_name = map[int32]string{
		0:  "BANK_ACCOUNT_FIELD_NONE",
		1:  "BANK_ACCOUNT_FIELD_BANK_NAME",
		2:  "BANK_ACCOUNT_FIELD_BANK_TRANSFER_ENABLED",
		3:  "BANK_ACCOUNT_FIELD_CURRENCY",
		4:  "BANK_ACCOUNT_FIELD_ACCOUNT_NUMBER",
		5:  "BANK_ACCOUNT_FIELD_IBAN",
		6:  "BANK_ACCOUNT_FIELD_BIC",
		7:  "BANK_ACCOUNT_FIELD_SORT_CODE",
		8:  "BANK_ACCOUNT_FIELD_ROUTING_NUMBER",
		9:  "BANK_ACCOUNT_FIELD_ALLOW_INTERNATIONAL",
		10: "BANK_ACCOUNT_FIELD_OTHER_DETAILS",
	}
	BankAccountFieldMask_value = map[string]int32{
		"BANK_ACCOUNT_FIELD_NONE":                  0,
		"BANK_ACCOUNT_FIELD_BANK_NAME":             1,
		"BANK_ACCOUNT_FIELD_BANK_TRANSFER_ENABLED": 2,
		"BANK_ACCOUNT_FIELD_CURRENCY":              3,
		"BANK_ACCOUNT_FIELD_ACCOUNT_NUMBER":        4,
		"BANK_ACCOUNT_FIELD_IBAN":                  5,
		"BANK_ACCOUNT_FIELD_BIC":                   6,
		"BANK_ACCOUNT_FIELD_SORT_CODE":             7,
		"BANK_ACCOUNT_FIELD_ROUTING_NUMBER":        8,
		"BANK_ACCOUNT_FIELD_ALLOW_INTERNATIONAL":   9,
		"BANK_ACCOUNT_FIELD_OTHER_DETAILS":         10,
	}
)

func (x BankAccountFieldMask) Enum() *BankAccountFieldMask {
	p := new(BankAccountFieldMask)
	*p = x
	return p
}

func (x BankAccountFieldMask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BankAccountFieldMask) Descriptor() protoreflect.EnumDescriptor {
	return file_tenant_proto_enumTypes[2].Descriptor()
}

func (BankAccountFieldMask) Type() protoreflect.EnumType {
	return &file_tenant_proto_enumTypes[2]
}

func (x BankAccountFieldMask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BankAccountFieldMask.Descriptor instead.
func (BankAccountFieldMask) EnumDescriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{2}
}

type AddBillingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                 `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields   *common.SourceFields   `protobuf:"bytes,4,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	// Deprecated: Marked as deprecated in tenant.proto.
	Email                  string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone                  string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	LegalName              string `protobuf:"bytes,7,opt,name=legalName,proto3" json:"legalName,omitempty"`
	AddressLine1           string `protobuf:"bytes,8,opt,name=addressLine1,proto3" json:"addressLine1,omitempty"`
	AddressLine2           string `protobuf:"bytes,9,opt,name=addressLine2,proto3" json:"addressLine2,omitempty"`
	AddressLine3           string `protobuf:"bytes,10,opt,name=addressLine3,proto3" json:"addressLine3,omitempty"`
	Locality               string `protobuf:"bytes,18,opt,name=locality,proto3" json:"locality,omitempty"`
	Country                string `protobuf:"bytes,19,opt,name=country,proto3" json:"country,omitempty"`
	Zip                    string `protobuf:"bytes,20,opt,name=zip,proto3" json:"zip,omitempty"`
	VatNumber              string `protobuf:"bytes,23,opt,name=vatNumber,proto3" json:"vatNumber,omitempty"`
	SendInvoicesFrom       string `protobuf:"bytes,24,opt,name=sendInvoicesFrom,proto3" json:"sendInvoicesFrom,omitempty"`
	CanPayWithPigeon       bool   `protobuf:"varint,29,opt,name=canPayWithPigeon,proto3" json:"canPayWithPigeon,omitempty"`
	SendInvoicesBcc        string `protobuf:"bytes,30,opt,name=sendInvoicesBcc,proto3" json:"sendInvoicesBcc,omitempty"`
	CanPayWithBankTransfer bool   `protobuf:"varint,31,opt,name=canPayWithBankTransfer,proto3" json:"canPayWithBankTransfer,omitempty"`
	Region                 string `protobuf:"bytes,32,opt,name=region,proto3" json:"region,omitempty"`
	Check                  bool   `protobuf:"varint,33,opt,name=check,proto3" json:"check,omitempty"`
}

func (x *AddBillingProfileRequest) Reset() {
	*x = AddBillingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBillingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBillingProfileRequest) ProtoMessage() {}

func (x *AddBillingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBillingProfileRequest.ProtoReflect.Descriptor instead.
func (*AddBillingProfileRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{0}
}

func (x *AddBillingProfileRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *AddBillingProfileRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AddBillingProfileRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

// Deprecated: Marked as deprecated in tenant.proto.
func (x *AddBillingProfileRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AddBillingProfileRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *AddBillingProfileRequest) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *AddBillingProfileRequest) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *AddBillingProfileRequest) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *AddBillingProfileRequest) GetAddressLine3() string {
	if x != nil {
		return x.AddressLine3
	}
	return ""
}

func (x *AddBillingProfileRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *AddBillingProfileRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *AddBillingProfileRequest) GetVatNumber() string {
	if x != nil {
		return x.VatNumber
	}
	return ""
}

func (x *AddBillingProfileRequest) GetSendInvoicesFrom() string {
	if x != nil {
		return x.SendInvoicesFrom
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCanPayWithPigeon() bool {
	if x != nil {
		return x.CanPayWithPigeon
	}
	return false
}

func (x *AddBillingProfileRequest) GetSendInvoicesBcc() string {
	if x != nil {
		return x.SendInvoicesBcc
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCanPayWithBankTransfer() bool {
	if x != nil {
		return x.CanPayWithBankTransfer
	}
	return false
}

func (x *AddBillingProfileRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddBillingProfileRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

type UpdateBillingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant                 string                          `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId         string                          `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	Id                     string                          `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	UpdatedAt              *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Email                  string                          `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone                  string                          `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	LegalName              string                          `protobuf:"bytes,7,opt,name=legalName,proto3" json:"legalName,omitempty"`
	AddressLine1           string                          `protobuf:"bytes,8,opt,name=addressLine1,proto3" json:"addressLine1,omitempty"`
	AddressLine2           string                          `protobuf:"bytes,9,opt,name=addressLine2,proto3" json:"addressLine2,omitempty"`
	AddressLine3           string                          `protobuf:"bytes,10,opt,name=addressLine3,proto3" json:"addressLine3,omitempty"`
	Locality               string                          `protobuf:"bytes,11,opt,name=locality,proto3" json:"locality,omitempty"`
	Country                string                          `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	Zip                    string                          `protobuf:"bytes,13,opt,name=zip,proto3" json:"zip,omitempty"`
	VatNumber              string                          `protobuf:"bytes,16,opt,name=vatNumber,proto3" json:"vatNumber,omitempty"`
	SendInvoicesFrom       string                          `protobuf:"bytes,17,opt,name=sendInvoicesFrom,proto3" json:"sendInvoicesFrom,omitempty"`
	CanPayWithPigeon       bool                            `protobuf:"varint,22,opt,name=canPayWithPigeon,proto3" json:"canPayWithPigeon,omitempty"`
	AppSource              string                          `protobuf:"bytes,23,opt,name=appSource,proto3" json:"appSource,omitempty"`
	FieldsMask             []TenantBillingProfileFieldMask `protobuf:"varint,24,rep,packed,name=fieldsMask,proto3,enum=TenantBillingProfileFieldMask" json:"fieldsMask,omitempty"`
	SendInvoicesBcc        string                          `protobuf:"bytes,25,opt,name=sendInvoicesBcc,proto3" json:"sendInvoicesBcc,omitempty"`
	CanPayWithBankTransfer bool                            `protobuf:"varint,26,opt,name=canPayWithBankTransfer,proto3" json:"canPayWithBankTransfer,omitempty"`
	Region                 string                          `protobuf:"bytes,27,opt,name=region,proto3" json:"region,omitempty"`
	Check                  bool                            `protobuf:"varint,28,opt,name=check,proto3" json:"check,omitempty"`
}

func (x *UpdateBillingProfileRequest) Reset() {
	*x = UpdateBillingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBillingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBillingProfileRequest) ProtoMessage() {}

func (x *UpdateBillingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBillingProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateBillingProfileRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateBillingProfileRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateBillingProfileRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetAddressLine3() string {
	if x != nil {
		return x.AddressLine3
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetLocality() string {
	if x != nil {
		return x.Locality
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetVatNumber() string {
	if x != nil {
		return x.VatNumber
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetSendInvoicesFrom() string {
	if x != nil {
		return x.SendInvoicesFrom
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetCanPayWithPigeon() bool {
	if x != nil {
		return x.CanPayWithPigeon
	}
	return false
}

func (x *UpdateBillingProfileRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetFieldsMask() []TenantBillingProfileFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateBillingProfileRequest) GetSendInvoicesBcc() string {
	if x != nil {
		return x.SendInvoicesBcc
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetCanPayWithBankTransfer() bool {
	if x != nil {
		return x.CanPayWithBankTransfer
	}
	return false
}

func (x *UpdateBillingProfileRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateBillingProfileRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

type UpdateTenantSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant         string                    `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string                    `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	UpdatedAt      *timestamppb.Timestamp    `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AppSource      string                    `protobuf:"bytes,5,opt,name=appSource,proto3" json:"appSource,omitempty"`
	FieldsMask     []TenantSettingsFieldMask `protobuf:"varint,6,rep,packed,name=fieldsMask,proto3,enum=TenantSettingsFieldMask" json:"fieldsMask,omitempty"`
	// Deprecated: Marked as deprecated in tenant.proto.
	DefaultCurrency      string `protobuf:"bytes,7,opt,name=defaultCurrency,proto3" json:"defaultCurrency,omitempty"`
	InvoicingEnabled     bool   `protobuf:"varint,8,opt,name=invoicingEnabled,proto3" json:"invoicingEnabled,omitempty"`
	InvoicingPostpaid    bool   `protobuf:"varint,10,opt,name=invoicingPostpaid,proto3" json:"invoicingPostpaid,omitempty"`
	LogoRepositoryFileId string `protobuf:"bytes,11,opt,name=logoRepositoryFileId,proto3" json:"logoRepositoryFileId,omitempty"`
	BaseCurrency         string `protobuf:"bytes,12,opt,name=baseCurrency,proto3" json:"baseCurrency,omitempty"`
	WorkspaceLogo        string `protobuf:"bytes,13,opt,name=workspaceLogo,proto3" json:"workspaceLogo,omitempty"`
	WorkspaceName        string `protobuf:"bytes,14,opt,name=workspaceName,proto3" json:"workspaceName,omitempty"`
}

func (x *UpdateTenantSettingsRequest) Reset() {
	*x = UpdateTenantSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTenantSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTenantSettingsRequest) ProtoMessage() {}

func (x *UpdateTenantSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTenantSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateTenantSettingsRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTenantSettingsRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateTenantSettingsRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetFieldsMask() []TenantSettingsFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

// Deprecated: Marked as deprecated in tenant.proto.
func (x *UpdateTenantSettingsRequest) GetDefaultCurrency() string {
	if x != nil {
		return x.DefaultCurrency
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetInvoicingEnabled() bool {
	if x != nil {
		return x.InvoicingEnabled
	}
	return false
}

func (x *UpdateTenantSettingsRequest) GetInvoicingPostpaid() bool {
	if x != nil {
		return x.InvoicingPostpaid
	}
	return false
}

func (x *UpdateTenantSettingsRequest) GetLogoRepositoryFileId() string {
	if x != nil {
		return x.LogoRepositoryFileId
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetBaseCurrency() string {
	if x != nil {
		return x.BaseCurrency
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetWorkspaceLogo() string {
	if x != nil {
		return x.WorkspaceLogo
	}
	return ""
}

func (x *UpdateTenantSettingsRequest) GetWorkspaceName() string {
	if x != nil {
		return x.WorkspaceName
	}
	return ""
}

type AddBankAccountGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant              string                 `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId      string                 `protobuf:"bytes,2,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SourceFields        *common.SourceFields   `protobuf:"bytes,4,opt,name=sourceFields,proto3" json:"sourceFields,omitempty"`
	BankName            string                 `protobuf:"bytes,5,opt,name=bankName,proto3" json:"bankName,omitempty"`
	BankTransferEnabled bool                   `protobuf:"varint,6,opt,name=bankTransferEnabled,proto3" json:"bankTransferEnabled,omitempty"`
	Currency            string                 `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	AccountNumber       string                 `protobuf:"bytes,8,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	Iban                string                 `protobuf:"bytes,9,opt,name=iban,proto3" json:"iban,omitempty"`
	Bic                 string                 `protobuf:"bytes,10,opt,name=bic,proto3" json:"bic,omitempty"`
	SortCode            string                 `protobuf:"bytes,11,opt,name=sortCode,proto3" json:"sortCode,omitempty"`
	RoutingNumber       string                 `protobuf:"bytes,12,opt,name=routingNumber,proto3" json:"routingNumber,omitempty"`
	AllowInternational  bool                   `protobuf:"varint,13,opt,name=allowInternational,proto3" json:"allowInternational,omitempty"`
	OtherDetails        string                 `protobuf:"bytes,14,opt,name=otherDetails,proto3" json:"otherDetails,omitempty"`
}

func (x *AddBankAccountGrpcRequest) Reset() {
	*x = AddBankAccountGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBankAccountGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBankAccountGrpcRequest) ProtoMessage() {}

func (x *AddBankAccountGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBankAccountGrpcRequest.ProtoReflect.Descriptor instead.
func (*AddBankAccountGrpcRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{3}
}

func (x *AddBankAccountGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AddBankAccountGrpcRequest) GetSourceFields() *common.SourceFields {
	if x != nil {
		return x.SourceFields
	}
	return nil
}

func (x *AddBankAccountGrpcRequest) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetBankTransferEnabled() bool {
	if x != nil {
		return x.BankTransferEnabled
	}
	return false
}

func (x *AddBankAccountGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetBic() string {
	if x != nil {
		return x.Bic
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetSortCode() string {
	if x != nil {
		return x.SortCode
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetRoutingNumber() string {
	if x != nil {
		return x.RoutingNumber
	}
	return ""
}

func (x *AddBankAccountGrpcRequest) GetAllowInternational() bool {
	if x != nil {
		return x.AllowInternational
	}
	return false
}

func (x *AddBankAccountGrpcRequest) GetOtherDetails() string {
	if x != nil {
		return x.OtherDetails
	}
	return ""
}

type UpdateBankAccountGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant              string                 `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId      string                 `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	AppSource           string                 `protobuf:"bytes,5,opt,name=appSource,proto3" json:"appSource,omitempty"`
	BankName            string                 `protobuf:"bytes,6,opt,name=bankName,proto3" json:"bankName,omitempty"`
	BankTransferEnabled bool                   `protobuf:"varint,7,opt,name=bankTransferEnabled,proto3" json:"bankTransferEnabled,omitempty"`
	Currency            string                 `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	AccountNumber       string                 `protobuf:"bytes,9,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	Iban                string                 `protobuf:"bytes,10,opt,name=iban,proto3" json:"iban,omitempty"`
	Bic                 string                 `protobuf:"bytes,11,opt,name=bic,proto3" json:"bic,omitempty"`
	SortCode            string                 `protobuf:"bytes,12,opt,name=sortCode,proto3" json:"sortCode,omitempty"`
	RoutingNumber       string                 `protobuf:"bytes,13,opt,name=routingNumber,proto3" json:"routingNumber,omitempty"`
	FieldsMask          []BankAccountFieldMask `protobuf:"varint,14,rep,packed,name=fieldsMask,proto3,enum=BankAccountFieldMask" json:"fieldsMask,omitempty"`
	AllowInternational  bool                   `protobuf:"varint,15,opt,name=allowInternational,proto3" json:"allowInternational,omitempty"`
	OtherDetails        string                 `protobuf:"bytes,16,opt,name=otherDetails,proto3" json:"otherDetails,omitempty"`
}

func (x *UpdateBankAccountGrpcRequest) Reset() {
	*x = UpdateBankAccountGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBankAccountGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBankAccountGrpcRequest) ProtoMessage() {}

func (x *UpdateBankAccountGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBankAccountGrpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateBankAccountGrpcRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateBankAccountGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UpdateBankAccountGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetBankTransferEnabled() bool {
	if x != nil {
		return x.BankTransferEnabled
	}
	return false
}

func (x *UpdateBankAccountGrpcRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetIban() string {
	if x != nil {
		return x.Iban
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetBic() string {
	if x != nil {
		return x.Bic
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetSortCode() string {
	if x != nil {
		return x.SortCode
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetRoutingNumber() string {
	if x != nil {
		return x.RoutingNumber
	}
	return ""
}

func (x *UpdateBankAccountGrpcRequest) GetFieldsMask() []BankAccountFieldMask {
	if x != nil {
		return x.FieldsMask
	}
	return nil
}

func (x *UpdateBankAccountGrpcRequest) GetAllowInternational() bool {
	if x != nil {
		return x.AllowInternational
	}
	return false
}

func (x *UpdateBankAccountGrpcRequest) GetOtherDetails() string {
	if x != nil {
		return x.OtherDetails
	}
	return ""
}

type DeleteBankAccountGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tenant         string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	LoggedInUserId string `protobuf:"bytes,3,opt,name=loggedInUserId,proto3" json:"loggedInUserId,omitempty"`
	AppSource      string `protobuf:"bytes,4,opt,name=appSource,proto3" json:"appSource,omitempty"`
}

func (x *DeleteBankAccountGrpcRequest) Reset() {
	*x = DeleteBankAccountGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tenant_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBankAccountGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBankAccountGrpcRequest) ProtoMessage() {}

func (x *DeleteBankAccountGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tenant_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBankAccountGrpcRequest.ProtoReflect.Descriptor instead.
func (*DeleteBankAccountGrpcRequest) Descriptor() ([]byte, []int) {
	return file_tenant_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteBankAccountGrpcRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteBankAccountGrpcRequest) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *DeleteBankAccountGrpcRequest) GetLoggedInUserId() string {
	if x != nil {
		return x.LoggedInUserId
	}
	return ""
}

func (x *DeleteBankAccountGrpcRequest) GetAppSource() string {
	if x != nil {
		return x.AppSource
	}
	return ""
}

var File_tenant_proto protoreflect.FileDescriptor

var file_tenant_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x05, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x18, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e,
	0x65, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a,
	0x69, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42, 0x63, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42,
	0x63, 0x63, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61,
	0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x89, 0x06, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6e, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6e, 0x65, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61,
	0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x69, 0x67, 0x65, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x42, 0x63, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42, 0x63, 0x63, 0x12, 0x36,
	0x0a, 0x16, 0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x63, 0x61, 0x6e, 0x50, 0x61, 0x79, 0x57, 0x69, 0x74, 0x68, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x22, 0x9b, 0x04, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x74, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x70, 0x61, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f,
	0x67, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x94, 0x04, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x61, 0x6e,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x62, 0x61,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x62, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xc9, 0x04, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x61, 0x6e,
	0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x62, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x63, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2a, 0xaf, 0x06, 0x0a, 0x1d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x2a, 0x0a,
	0x22, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x2f,
	0x0a, 0x2b, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41,
	0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x31, 0x10, 0x04, 0x12,
	0x2f, 0x0a, 0x2b, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x32, 0x10, 0x05,
	0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x33, 0x10,
	0x06, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0x09, 0x12, 0x2b, 0x0a, 0x27,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x54,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49,
	0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0x0d, 0x12, 0x34,
	0x0a, 0x30, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43,
	0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x49, 0x47, 0x45,
	0x4f, 0x4e, 0x10, 0x12, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x53, 0x5f, 0x42, 0x43, 0x43, 0x10, 0x13, 0x12, 0x3b, 0x0a, 0x37, 0x54, 0x45, 0x4e, 0x41,
	0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x50, 0x41, 0x59,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f,
	0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x15, 0x12, 0x26,
	0x0a, 0x22, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x16, 0x2a, 0xf4, 0x02, 0x0a, 0x17, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x26, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x1a, 0x02,
	0x08, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f,
	0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x49,
	0x4e, 0x47, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49, 0x44, 0x10, 0x04, 0x12, 0x31, 0x0a,
	0x2d, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x05,
	0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x2a, 0x9f, 0x03,
	0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x49, 0x42, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x41, 0x4e, 0x4b,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42,
	0x49, 0x43, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x08, 0x12, 0x2a, 0x0a,
	0x26, 0x42, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x4e,
	0x4b, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x53, 0x10, 0x0a, 0x32,
	0xa9, 0x03, 0x0a, 0x11, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x41, 0x64, 0x64,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x37, 0x42, 0x0b, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x26, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x3b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tenant_proto_rawDescOnce sync.Once
	file_tenant_proto_rawDescData = file_tenant_proto_rawDesc
)

func file_tenant_proto_rawDescGZIP() []byte {
	file_tenant_proto_rawDescOnce.Do(func() {
		file_tenant_proto_rawDescData = protoimpl.X.CompressGZIP(file_tenant_proto_rawDescData)
	})
	return file_tenant_proto_rawDescData
}

var file_tenant_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tenant_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tenant_proto_goTypes = []any{
	(TenantBillingProfileFieldMask)(0),   // 0: TenantBillingProfileFieldMask
	(TenantSettingsFieldMask)(0),         // 1: TenantSettingsFieldMask
	(BankAccountFieldMask)(0),            // 2: BankAccountFieldMask
	(*AddBillingProfileRequest)(nil),     // 3: AddBillingProfileRequest
	(*UpdateBillingProfileRequest)(nil),  // 4: UpdateBillingProfileRequest
	(*UpdateTenantSettingsRequest)(nil),  // 5: UpdateTenantSettingsRequest
	(*AddBankAccountGrpcRequest)(nil),    // 6: AddBankAccountGrpcRequest
	(*UpdateBankAccountGrpcRequest)(nil), // 7: UpdateBankAccountGrpcRequest
	(*DeleteBankAccountGrpcRequest)(nil), // 8: DeleteBankAccountGrpcRequest
	(*timestamppb.Timestamp)(nil),        // 9: google.protobuf.Timestamp
	(*common.SourceFields)(nil),          // 10: SourceFields
	(*common.IdResponse)(nil),            // 11: IdResponse
	(*emptypb.Empty)(nil),                // 12: google.protobuf.Empty
}
var file_tenant_proto_depIdxs = []int32{
	9,  // 0: AddBillingProfileRequest.createdAt:type_name -> google.protobuf.Timestamp
	10, // 1: AddBillingProfileRequest.sourceFields:type_name -> SourceFields
	9,  // 2: UpdateBillingProfileRequest.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 3: UpdateBillingProfileRequest.fieldsMask:type_name -> TenantBillingProfileFieldMask
	9,  // 4: UpdateTenantSettingsRequest.updatedAt:type_name -> google.protobuf.Timestamp
	1,  // 5: UpdateTenantSettingsRequest.fieldsMask:type_name -> TenantSettingsFieldMask
	9,  // 6: AddBankAccountGrpcRequest.createdAt:type_name -> google.protobuf.Timestamp
	10, // 7: AddBankAccountGrpcRequest.sourceFields:type_name -> SourceFields
	9,  // 8: UpdateBankAccountGrpcRequest.updatedAt:type_name -> google.protobuf.Timestamp
	2,  // 9: UpdateBankAccountGrpcRequest.fieldsMask:type_name -> BankAccountFieldMask
	3,  // 10: tenantGrpcService.AddBillingProfile:input_type -> AddBillingProfileRequest
	4,  // 11: tenantGrpcService.UpdateBillingProfile:input_type -> UpdateBillingProfileRequest
	5,  // 12: tenantGrpcService.UpdateTenantSettings:input_type -> UpdateTenantSettingsRequest
	6,  // 13: tenantGrpcService.AddBankAccount:input_type -> AddBankAccountGrpcRequest
	7,  // 14: tenantGrpcService.UpdateBankAccount:input_type -> UpdateBankAccountGrpcRequest
	8,  // 15: tenantGrpcService.DeleteBankAccount:input_type -> DeleteBankAccountGrpcRequest
	11, // 16: tenantGrpcService.AddBillingProfile:output_type -> IdResponse
	11, // 17: tenantGrpcService.UpdateBillingProfile:output_type -> IdResponse
	12, // 18: tenantGrpcService.UpdateTenantSettings:output_type -> google.protobuf.Empty
	11, // 19: tenantGrpcService.AddBankAccount:output_type -> IdResponse
	11, // 20: tenantGrpcService.UpdateBankAccount:output_type -> IdResponse
	12, // 21: tenantGrpcService.DeleteBankAccount:output_type -> google.protobuf.Empty
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tenant_proto_init() }
func file_tenant_proto_init() {
	if File_tenant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tenant_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AddBillingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBillingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateTenantSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*AddBankAccountGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBankAccountGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tenant_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBankAccountGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tenant_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tenant_proto_goTypes,
		DependencyIndexes: file_tenant_proto_depIdxs,
		EnumInfos:         file_tenant_proto_enumTypes,
		MessageInfos:      file_tenant_proto_msgTypes,
	}.Build()
	File_tenant_proto = out.File
	file_tenant_proto_rawDesc = nil
	file_tenant_proto_goTypes = nil
	file_tenant_proto_depIdxs = nil
}
