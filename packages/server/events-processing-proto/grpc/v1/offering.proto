syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common/source.proto";
import "common/common.proto";

option go_package = "api/grpc/v1/offering;offering_grpc_service";

message CreateOfferingGrpcRequest {
  string tenant = 1;
  string loggedInUserId = 2;
  google.protobuf.Timestamp createdAt = 3;
  SourceFields sourceFields = 4;
  string name = 5;
  bool active = 6;
  string type = 7;
  string pricingModel = 8;
  int64 pricingPeriodInMonths = 9;
  string currency = 10;
  double price = 11;
  bool priceCalculated = 12;
  bool conditional = 13;
  bool taxable = 14;
  string priceCalculationType = 15;
  double priceCalculationRevenueSharePercentage = 16;
  string conditionalsMinimumChargePeriod = 17;
  double conditionalsMinimumChargeAmount = 18;
}

message UpdateOfferingGrpcRequest {
  string id = 1;
  string tenant = 2;
  string loggedInUserId = 3;
  google.protobuf.Timestamp updatedAt = 4;
  string appSource = 5;
  string name = 6;
  bool active = 7;
  string type = 8;
  string pricingModel = 9;
  int64 pricingPeriodInMonths = 10;
  string currency = 11;
  double price = 12;
  bool priceCalculated = 13;
  bool conditional = 14;
  bool taxable = 15;
  string priceCalculationType = 16;
  double priceCalculationRevenueSharePercentage = 17;
  string conditionalsMinimumChargePeriod = 18;
  double conditionalsMinimumChargeAmount = 19;
  repeated OfferingFieldMask fieldsMask = 20;
}

enum OfferingFieldMask {
  OFFERING_FIELD_NONE = 0; // No property, ignored by the server
  OFFERING_FIELD_NAME = 1;
  OFFERING_FIELD_ACTIVE = 2;
  OFFERING_FIELD_TYPE = 3;
  OFFERING_FIELD_PRICING_MODEL = 4;
  OFFERING_FIELD_PRICING_PERIOD_IN_MONTHS = 5;
  OFFERING_FIELD_CURRENCY = 6;
  OFFERING_FIELD_PRICE = 7;
  OFFERING_FIELD_PRICE_CALCULATED = 8;
  OFFERING_FIELD_CONDITIONAL = 9;
  OFFERING_FIELD_TAXABLE = 10;
  OFFERING_FIELD_PRICE_CALCULATION_TYPE = 11;
  OFFERING_FIELD_PRICE_CALCULATION_REVENUE_SHARE_PERCENTAGE = 12;
  OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_PERIOD = 13;
  OFFERING_FIELD_CONDITIONALS_MINIMUM_CHARGE_AMOUNT = 14;
}

service offeringGrpcService {
  rpc CreateOffering(CreateOfferingGrpcRequest) returns (IdResponse);
  rpc UpdateOffering(UpdateOfferingGrpcRequest) returns (IdResponse);
}