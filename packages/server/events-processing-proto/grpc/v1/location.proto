syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "github.com/openline-ai/openline-customer-os/packages/server/events-processing-proto/gen/proto/go/api/grpc/v1/location";
//option go_package = "api/grpc/v1/location;location_grpc_service";
import "common/source.proto";

message LocationDetails {
  string name = 1;
  string rawAddress = 2;
  string country = 3;
  string countryCodeA2 = 4;
  string countryCodeA3 = 5;
  string region = 6;
  string locality = 7;
  string addressLine1 = 8;
  string addressLine2 = 9;
  string zipCode = 10;
  string addressType = 11;
  string houseNumber = 12;
  string postalCode = 13;
  bool commercial = 14;
  string predirection = 15;
  string district = 16;
  string street = 17;
  string latitude = 18;
  string longitude = 19;
  string plusFour = 20;
  string timeZone = 21;
  optional double utcOffset = 22;
}

// Deprecated
message UpsertLocationGrpcRequest {
  string tenant = 1;
  string id = 2;
  string name = 3;
  string appSource = 4 [deprecated = true];
  string source = 5 [deprecated = true];
  string sourceOfTruth = 6 [deprecated = true];
  google.protobuf.Timestamp  createdAt = 7;
  google.protobuf.Timestamp  updatedAt = 8;
  string rawAddress = 9;
  string country = 10;
  string region = 11;
  string locality = 12;
  string addressLine1 = 13;
  string addressLine2 = 14;
  string zipCode = 15;
  string addressType = 16;
  string houseNumber = 17;
  string postalCode = 18;
  bool commercial = 19;
  string predirection = 20;
  string district = 21;
  string street = 22;
  string latitude = 23;
  string longitude = 24;
  string plusFour = 25;
  string loggedInUserId = 26;
  SourceFields sourceFields = 27;
}

// Deprecated
message FailLocationValidationGrpcRequest {
  string tenant = 1;
  string locationId = 2;
  string errorMessage = 3;
  string appSource = 4;
  string loggedInUserId = 5;
  string rawAddress = 6;
  string country = 7;
}

// Deprecated
message SkipLocationValidationGrpcRequest {
  string tenant = 1;
  string locationId = 2;
  string appSource = 3;
  string loggedInUserId = 4;
  string rawAddress = 5;
  string reason = 6;
}

// Deprecated
message PassLocationValidationGrpcRequest {
  string tenant = 1;
  string locationId = 2;
  string appSource = 3;
  string loggedInUserId = 4;
  string rawAddress = 5;
  string country = 6;
  string region = 7;
  string locality = 8;
  string addressLine1 = 9;
  string addressLine2 = 10;
  string zipCode = 11;
  string addressType = 12;
  string houseNumber = 13;
  string postalCode = 14;
  bool commercial = 15;
  string predirection = 16;
  string district = 17;
  string street = 18;
  string latitude = 19;
  string longitude = 20;
  string plusFour = 21;
  string timeZone = 22;
  int32 utcOffset = 23;
}

message LocationIdGrpcResponse {
  string id = 1;
}

service LocationGrpcService {
  rpc UpsertLocation(UpsertLocationGrpcRequest) returns (LocationIdGrpcResponse);
  rpc FailLocationValidation(FailLocationValidationGrpcRequest) returns (LocationIdGrpcResponse);
  rpc SkipLocationValidation(SkipLocationValidationGrpcRequest) returns (LocationIdGrpcResponse);
  rpc PassLocationValidation(PassLocationValidationGrpcRequest) returns (LocationIdGrpcResponse);
}
